<?php
/**
 * StockProfileFundamental
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gurufocus Data Package API
 *
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * StockProfileFundamental Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StockProfileFundamental implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'stock_profile_fundamental';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'effective_interest_rate' => 'float',
        'insider_shares_owned' => 'float',
        'institution_shares_held' => 'float',
        'pfd' => 'float',
        'roc_joel' => 'float',
        'roc_joel_high' => 'float',
        'roc_joel_low' => 'float',
        'roc_joel_med' => 'float',
        'roc_joel_med_5y' => 'float',
        'rota' => 'float',
        'rota_high' => 'float',
        'rota_low' => 'float',
        'rota_med' => 'float',
        'rote' => 'float',
        'rote_high' => 'float',
        'rote_low' => 'float',
        'rote_med' => 'float',
        'rote_med_5y' => 'float',
        'sga' => 'float',
        'snoa' => 'float',
        'total_payout_ratio' => 'float',
        'total_payout_yield' => 'float',
        'afinancials_start_date' => 'string',
        'asset' => 'float',
        'book' => 'float',
        'buyback_yield' => 'float',
        'buyback_yield_high' => 'float',
        'buyback_yield_low' => 'float',
        'buyback_yield_med' => 'float',
        'cash2debt' => 'float',
        'cash2debt_high' => 'float',
        'cash2debt_low' => 'float',
        'cash2debt_med' => 'float',
        'cash_ratio' => 'float',
        'cash_ratio_high' => 'float',
        'cash_ratio_low' => 'float',
        'cash_ratio_med' => 'float',
        'ccc' => 'float',
        'correlation_book' => 'float',
        'correlation_eps_nri' => 'float',
        'correlation_ev_vs_ebit' => 'float',
        'correlation_ev_vs_ebitda' => 'float',
        'correlation_ev_vs_fcf' => 'float',
        'correlation_ev_vs_pretax_income' => 'float',
        'correlation_ev_vs_rev' => 'float',
        'correlation_ocf' => 'float',
        'correlation_rev' => 'float',
        'current_ratio' => 'float',
        'current_ratio_high' => 'float',
        'current_ratio_low' => 'float',
        'current_ratio_med' => 'float',
        'daysinventory' => 'float',
        'daysinventory_high' => 'float',
        'daysinventory_low' => 'float',
        'daysinventory_med' => 'float',
        'dayspayable' => 'float',
        'dayspayable_high' => 'float',
        'dayspayable_low' => 'float',
        'dayspayable_med' => 'float',
        'dayssalesoutstand' => 'float',
        'dayssalesoutstand_high' => 'float',
        'dayssalesoutstand_low' => 'float',
        'dayssalesoutstand_med' => 'float',
        'debt2asset' => 'float',
        'debt2ebitda' => 'float',
        'debt2ebitda_high' => 'float',
        'debt2ebitda_low' => 'float',
        'debt2ebitda_med' => 'float',
        'debt2equity' => 'float',
        'debt2equity_high' => 'float',
        'debt2equity_low' => 'float',
        'debt2equity_med' => 'float',
        'debt2rev' => 'float',
        'eps' => 'float',
        'eps_latest_q' => 'float',
        'eps_nri' => 'float',
        'equity2asset' => 'float',
        'equity2asset_high' => 'float',
        'equity2asset_low' => 'float',
        'equity2asset_med' => 'float',
        'ev_morn' => 'float',
        'ev_morn_norm' => 'float',
        'fscore' => 'float',
        'fscore_high' => 'float',
        'fscore_low' => 'float',
        'fscore_med' => 'float',
        'goodwill2asset' => 'float',
        'grossprofit' => 'float',
        'grossprofit2asset' => 'float',
        'grossprofit2tangibleasset' => 'float',
        'insider_ownership' => 'float',
        'inst_ownership' => 'float',
        'interest_coverage' => 'float',
        'interest_coverage_high' => 'float',
        'interest_coverage_low' => 'float',
        'interest_coverage_med' => 'float',
        'inventory2sales' => 'float',
        'inventory_turnover' => 'float',
        'latest_earnings_release_date' => 'string',
        'liabilities_to_assets' => 'float',
        'mktcap' => 'float',
        'mktcap_norm' => 'float',
        'mscore' => 'float',
        'mscore_high' => 'float',
        'mscore_low' => 'float',
        'mscore_med' => 'float',
        'net_debt_paydown_yield' => 'float',
        'net_debt_paydown_yield_high' => 'float',
        'net_debt_paydown_yield_low' => 'float',
        'net_debt_paydown_yield_med' => 'float',
        'next_earnings_date' => 'string',
        'num_good_signs' => 'float',
        'num_warning_signs_meidum' => 'float',
        'num_warning_signs_severe' => 'float',
        'past_earnings_date' => 'string',
        'quick_ratio' => 'float',
        'quick_ratio_high' => 'float',
        'quick_ratio_low' => 'float',
        'quick_ratio_med' => 'float',
        'receivables_turnover' => 'float',
        'related_comp' => 'string',
        'roa' => 'float',
        'roa_high' => 'float',
        'roa_low' => 'float',
        'roa_med' => 'float',
        'roa_med_5y' => 'float',
        'roc' => 'float',
        'roce' => 'float',
        'roce_high' => 'float',
        'roce_low' => 'float',
        'roce_med' => 'float',
        'roce_med_5y' => 'float',
        'roe' => 'float',
        'roe_adj' => 'float',
        'roe_high' => 'float',
        'roe_low' => 'float',
        'roe_med' => 'float',
        'roe_med_5y' => 'float',
        'roic' => 'float',
        'roic_high' => 'float',
        'roic_low' => 'float',
        'roic_med' => 'float',
        'roic_med_5y' => 'float',
        'roiic_3y' => 'float',
        'roiic_3y_high' => 'float',
        'roiic_3y_low' => 'float',
        'roiic_3y_med' => 'float',
        'rvn_predc_10y' => 'float',
        'sales' => 'float',
        'sales_latest_q' => 'float',
        'sales_latest_q_norm' => 'float',
        'shareholder_yield' => 'float',
        'shareholder_yield_high' => 'float',
        'shareholder_yield_low' => 'float',
        'shareholder_yield_med' => 'float',
        'shares' => 'float',
        'sloanratio' => 'float',
        'tax_rate_med_5y' => 'float',
        'total_buyback_10y' => 'float',
        'total_buyback_1y' => 'float',
        'total_buyback_3y' => 'float',
        'total_buyback_3y_high' => 'float',
        'total_buyback_3y_low' => 'float',
        'total_buyback_3y_med' => 'float',
        'total_buyback_5y' => 'float',
        'ttm_ebit' => 'float',
        'ttm_ebitda' => 'float',
        'ttm_eps' => 'float',
        'ttm_eps_nri' => 'float',
        'ttm_fcf_per_share' => 'float',
        'ttm_pretaxincome' => 'float',
        'ttm_sales' => 'float',
        'turnover' => 'float',
        'wacc' => 'float',
        'wacc_high' => 'float',
        'wacc_low' => 'float',
        'wacc_med' => 'float',
        'wacc_med_5y' => 'float',
        'years_of_financial_history' => 'float',
        'zscore' => 'float',
        'zscore_high' => 'float',
        'zscore_low' => 'float',
        'zscore_med' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'effective_interest_rate' => null,
        'insider_shares_owned' => null,
        'institution_shares_held' => null,
        'pfd' => null,
        'roc_joel' => null,
        'roc_joel_high' => null,
        'roc_joel_low' => null,
        'roc_joel_med' => null,
        'roc_joel_med_5y' => null,
        'rota' => null,
        'rota_high' => null,
        'rota_low' => null,
        'rota_med' => null,
        'rote' => null,
        'rote_high' => null,
        'rote_low' => null,
        'rote_med' => null,
        'rote_med_5y' => null,
        'sga' => null,
        'snoa' => null,
        'total_payout_ratio' => null,
        'total_payout_yield' => null,
        'afinancials_start_date' => null,
        'asset' => null,
        'book' => null,
        'buyback_yield' => null,
        'buyback_yield_high' => null,
        'buyback_yield_low' => null,
        'buyback_yield_med' => null,
        'cash2debt' => null,
        'cash2debt_high' => null,
        'cash2debt_low' => null,
        'cash2debt_med' => null,
        'cash_ratio' => null,
        'cash_ratio_high' => null,
        'cash_ratio_low' => null,
        'cash_ratio_med' => null,
        'ccc' => null,
        'correlation_book' => null,
        'correlation_eps_nri' => null,
        'correlation_ev_vs_ebit' => null,
        'correlation_ev_vs_ebitda' => null,
        'correlation_ev_vs_fcf' => null,
        'correlation_ev_vs_pretax_income' => null,
        'correlation_ev_vs_rev' => null,
        'correlation_ocf' => null,
        'correlation_rev' => null,
        'current_ratio' => null,
        'current_ratio_high' => null,
        'current_ratio_low' => null,
        'current_ratio_med' => null,
        'daysinventory' => null,
        'daysinventory_high' => null,
        'daysinventory_low' => null,
        'daysinventory_med' => null,
        'dayspayable' => null,
        'dayspayable_high' => null,
        'dayspayable_low' => null,
        'dayspayable_med' => null,
        'dayssalesoutstand' => null,
        'dayssalesoutstand_high' => null,
        'dayssalesoutstand_low' => null,
        'dayssalesoutstand_med' => null,
        'debt2asset' => null,
        'debt2ebitda' => null,
        'debt2ebitda_high' => null,
        'debt2ebitda_low' => null,
        'debt2ebitda_med' => null,
        'debt2equity' => null,
        'debt2equity_high' => null,
        'debt2equity_low' => null,
        'debt2equity_med' => null,
        'debt2rev' => null,
        'eps' => null,
        'eps_latest_q' => null,
        'eps_nri' => null,
        'equity2asset' => null,
        'equity2asset_high' => null,
        'equity2asset_low' => null,
        'equity2asset_med' => null,
        'ev_morn' => null,
        'ev_morn_norm' => null,
        'fscore' => null,
        'fscore_high' => null,
        'fscore_low' => null,
        'fscore_med' => null,
        'goodwill2asset' => null,
        'grossprofit' => null,
        'grossprofit2asset' => null,
        'grossprofit2tangibleasset' => null,
        'insider_ownership' => null,
        'inst_ownership' => null,
        'interest_coverage' => null,
        'interest_coverage_high' => null,
        'interest_coverage_low' => null,
        'interest_coverage_med' => null,
        'inventory2sales' => null,
        'inventory_turnover' => null,
        'latest_earnings_release_date' => null,
        'liabilities_to_assets' => null,
        'mktcap' => null,
        'mktcap_norm' => null,
        'mscore' => null,
        'mscore_high' => null,
        'mscore_low' => null,
        'mscore_med' => null,
        'net_debt_paydown_yield' => null,
        'net_debt_paydown_yield_high' => null,
        'net_debt_paydown_yield_low' => null,
        'net_debt_paydown_yield_med' => null,
        'next_earnings_date' => null,
        'num_good_signs' => null,
        'num_warning_signs_meidum' => null,
        'num_warning_signs_severe' => null,
        'past_earnings_date' => null,
        'quick_ratio' => null,
        'quick_ratio_high' => null,
        'quick_ratio_low' => null,
        'quick_ratio_med' => null,
        'receivables_turnover' => null,
        'related_comp' => null,
        'roa' => null,
        'roa_high' => null,
        'roa_low' => null,
        'roa_med' => null,
        'roa_med_5y' => null,
        'roc' => null,
        'roce' => null,
        'roce_high' => null,
        'roce_low' => null,
        'roce_med' => null,
        'roce_med_5y' => null,
        'roe' => null,
        'roe_adj' => null,
        'roe_high' => null,
        'roe_low' => null,
        'roe_med' => null,
        'roe_med_5y' => null,
        'roic' => null,
        'roic_high' => null,
        'roic_low' => null,
        'roic_med' => null,
        'roic_med_5y' => null,
        'roiic_3y' => null,
        'roiic_3y_high' => null,
        'roiic_3y_low' => null,
        'roiic_3y_med' => null,
        'rvn_predc_10y' => null,
        'sales' => null,
        'sales_latest_q' => null,
        'sales_latest_q_norm' => null,
        'shareholder_yield' => null,
        'shareholder_yield_high' => null,
        'shareholder_yield_low' => null,
        'shareholder_yield_med' => null,
        'shares' => null,
        'sloanratio' => null,
        'tax_rate_med_5y' => null,
        'total_buyback_10y' => null,
        'total_buyback_1y' => null,
        'total_buyback_3y' => null,
        'total_buyback_3y_high' => null,
        'total_buyback_3y_low' => null,
        'total_buyback_3y_med' => null,
        'total_buyback_5y' => null,
        'ttm_ebit' => null,
        'ttm_ebitda' => null,
        'ttm_eps' => null,
        'ttm_eps_nri' => null,
        'ttm_fcf_per_share' => null,
        'ttm_pretaxincome' => null,
        'ttm_sales' => null,
        'turnover' => null,
        'wacc' => null,
        'wacc_high' => null,
        'wacc_low' => null,
        'wacc_med' => null,
        'wacc_med_5y' => null,
        'years_of_financial_history' => null,
        'zscore' => null,
        'zscore_high' => null,
        'zscore_low' => null,
        'zscore_med' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'effective_interest_rate' => false,
        'insider_shares_owned' => false,
        'institution_shares_held' => false,
        'pfd' => false,
        'roc_joel' => false,
        'roc_joel_high' => false,
        'roc_joel_low' => false,
        'roc_joel_med' => false,
        'roc_joel_med_5y' => false,
        'rota' => false,
        'rota_high' => false,
        'rota_low' => false,
        'rota_med' => false,
        'rote' => false,
        'rote_high' => false,
        'rote_low' => false,
        'rote_med' => false,
        'rote_med_5y' => false,
        'sga' => false,
        'snoa' => false,
        'total_payout_ratio' => false,
        'total_payout_yield' => false,
        'afinancials_start_date' => false,
        'asset' => false,
        'book' => false,
        'buyback_yield' => false,
        'buyback_yield_high' => false,
        'buyback_yield_low' => false,
        'buyback_yield_med' => false,
        'cash2debt' => false,
        'cash2debt_high' => false,
        'cash2debt_low' => false,
        'cash2debt_med' => false,
        'cash_ratio' => false,
        'cash_ratio_high' => false,
        'cash_ratio_low' => false,
        'cash_ratio_med' => false,
        'ccc' => false,
        'correlation_book' => false,
        'correlation_eps_nri' => false,
        'correlation_ev_vs_ebit' => false,
        'correlation_ev_vs_ebitda' => false,
        'correlation_ev_vs_fcf' => false,
        'correlation_ev_vs_pretax_income' => false,
        'correlation_ev_vs_rev' => false,
        'correlation_ocf' => false,
        'correlation_rev' => false,
        'current_ratio' => false,
        'current_ratio_high' => false,
        'current_ratio_low' => false,
        'current_ratio_med' => false,
        'daysinventory' => false,
        'daysinventory_high' => false,
        'daysinventory_low' => false,
        'daysinventory_med' => false,
        'dayspayable' => false,
        'dayspayable_high' => false,
        'dayspayable_low' => false,
        'dayspayable_med' => false,
        'dayssalesoutstand' => false,
        'dayssalesoutstand_high' => false,
        'dayssalesoutstand_low' => false,
        'dayssalesoutstand_med' => false,
        'debt2asset' => false,
        'debt2ebitda' => false,
        'debt2ebitda_high' => false,
        'debt2ebitda_low' => false,
        'debt2ebitda_med' => false,
        'debt2equity' => false,
        'debt2equity_high' => false,
        'debt2equity_low' => false,
        'debt2equity_med' => false,
        'debt2rev' => false,
        'eps' => false,
        'eps_latest_q' => false,
        'eps_nri' => false,
        'equity2asset' => false,
        'equity2asset_high' => false,
        'equity2asset_low' => false,
        'equity2asset_med' => false,
        'ev_morn' => false,
        'ev_morn_norm' => false,
        'fscore' => false,
        'fscore_high' => false,
        'fscore_low' => false,
        'fscore_med' => false,
        'goodwill2asset' => false,
        'grossprofit' => false,
        'grossprofit2asset' => false,
        'grossprofit2tangibleasset' => false,
        'insider_ownership' => false,
        'inst_ownership' => false,
        'interest_coverage' => false,
        'interest_coverage_high' => false,
        'interest_coverage_low' => false,
        'interest_coverage_med' => false,
        'inventory2sales' => false,
        'inventory_turnover' => false,
        'latest_earnings_release_date' => false,
        'liabilities_to_assets' => false,
        'mktcap' => false,
        'mktcap_norm' => false,
        'mscore' => false,
        'mscore_high' => false,
        'mscore_low' => false,
        'mscore_med' => false,
        'net_debt_paydown_yield' => false,
        'net_debt_paydown_yield_high' => false,
        'net_debt_paydown_yield_low' => false,
        'net_debt_paydown_yield_med' => false,
        'next_earnings_date' => false,
        'num_good_signs' => false,
        'num_warning_signs_meidum' => false,
        'num_warning_signs_severe' => false,
        'past_earnings_date' => false,
        'quick_ratio' => false,
        'quick_ratio_high' => false,
        'quick_ratio_low' => false,
        'quick_ratio_med' => false,
        'receivables_turnover' => false,
        'related_comp' => false,
        'roa' => false,
        'roa_high' => false,
        'roa_low' => false,
        'roa_med' => false,
        'roa_med_5y' => false,
        'roc' => false,
        'roce' => false,
        'roce_high' => false,
        'roce_low' => false,
        'roce_med' => false,
        'roce_med_5y' => false,
        'roe' => false,
        'roe_adj' => false,
        'roe_high' => false,
        'roe_low' => false,
        'roe_med' => false,
        'roe_med_5y' => false,
        'roic' => false,
        'roic_high' => false,
        'roic_low' => false,
        'roic_med' => false,
        'roic_med_5y' => false,
        'roiic_3y' => false,
        'roiic_3y_high' => false,
        'roiic_3y_low' => false,
        'roiic_3y_med' => false,
        'rvn_predc_10y' => false,
        'sales' => false,
        'sales_latest_q' => false,
        'sales_latest_q_norm' => false,
        'shareholder_yield' => false,
        'shareholder_yield_high' => false,
        'shareholder_yield_low' => false,
        'shareholder_yield_med' => false,
        'shares' => false,
        'sloanratio' => false,
        'tax_rate_med_5y' => false,
        'total_buyback_10y' => false,
        'total_buyback_1y' => false,
        'total_buyback_3y' => false,
        'total_buyback_3y_high' => false,
        'total_buyback_3y_low' => false,
        'total_buyback_3y_med' => false,
        'total_buyback_5y' => false,
        'ttm_ebit' => false,
        'ttm_ebitda' => false,
        'ttm_eps' => false,
        'ttm_eps_nri' => false,
        'ttm_fcf_per_share' => false,
        'ttm_pretaxincome' => false,
        'ttm_sales' => false,
        'turnover' => false,
        'wacc' => false,
        'wacc_high' => false,
        'wacc_low' => false,
        'wacc_med' => false,
        'wacc_med_5y' => false,
        'years_of_financial_history' => false,
        'zscore' => false,
        'zscore_high' => false,
        'zscore_low' => false,
        'zscore_med' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'effective_interest_rate' => 'EffectiveInterestRate',
        'insider_shares_owned' => 'InsiderSharesOwned',
        'institution_shares_held' => 'InstitutionSharesHeld',
        'pfd' => 'PFD',
        'roc_joel' => 'ROC_JOEL',
        'roc_joel_high' => 'ROC_JOEL_high',
        'roc_joel_low' => 'ROC_JOEL_low',
        'roc_joel_med' => 'ROC_JOEL_med',
        'roc_joel_med_5y' => 'ROC_JOEL_med_5y',
        'rota' => 'ROTA',
        'rota_high' => 'ROTA_high',
        'rota_low' => 'ROTA_low',
        'rota_med' => 'ROTA_med',
        'rote' => 'ROTE',
        'rote_high' => 'ROTE_high',
        'rote_low' => 'ROTE_low',
        'rote_med' => 'ROTE_med',
        'rote_med_5y' => 'ROTE_med_5y',
        'sga' => 'SGA',
        'snoa' => 'SNOA',
        'total_payout_ratio' => 'TotalPayoutRatio',
        'total_payout_yield' => 'TotalPayoutYield',
        'afinancials_start_date' => 'afinancials_start_date',
        'asset' => 'asset',
        'book' => 'book',
        'buyback_yield' => 'buyback_yield',
        'buyback_yield_high' => 'buyback_yield_high',
        'buyback_yield_low' => 'buyback_yield_low',
        'buyback_yield_med' => 'buyback_yield_med',
        'cash2debt' => 'cash2debt',
        'cash2debt_high' => 'cash2debt_high',
        'cash2debt_low' => 'cash2debt_low',
        'cash2debt_med' => 'cash2debt_med',
        'cash_ratio' => 'cash_ratio',
        'cash_ratio_high' => 'cash_ratio_high',
        'cash_ratio_low' => 'cash_ratio_low',
        'cash_ratio_med' => 'cash_ratio_med',
        'ccc' => 'ccc',
        'correlation_book' => 'correlation_book',
        'correlation_eps_nri' => 'correlation_eps_nri',
        'correlation_ev_vs_ebit' => 'correlation_ev_vs_ebit',
        'correlation_ev_vs_ebitda' => 'correlation_ev_vs_ebitda',
        'correlation_ev_vs_fcf' => 'correlation_ev_vs_fcf',
        'correlation_ev_vs_pretax_income' => 'correlation_ev_vs_pretax_income',
        'correlation_ev_vs_rev' => 'correlation_ev_vs_rev',
        'correlation_ocf' => 'correlation_ocf',
        'correlation_rev' => 'correlation_rev',
        'current_ratio' => 'current_ratio',
        'current_ratio_high' => 'current_ratio_high',
        'current_ratio_low' => 'current_ratio_low',
        'current_ratio_med' => 'current_ratio_med',
        'daysinventory' => 'daysinventory',
        'daysinventory_high' => 'daysinventory_high',
        'daysinventory_low' => 'daysinventory_low',
        'daysinventory_med' => 'daysinventory_med',
        'dayspayable' => 'dayspayable',
        'dayspayable_high' => 'dayspayable_high',
        'dayspayable_low' => 'dayspayable_low',
        'dayspayable_med' => 'dayspayable_med',
        'dayssalesoutstand' => 'dayssalesoutstand',
        'dayssalesoutstand_high' => 'dayssalesoutstand_high',
        'dayssalesoutstand_low' => 'dayssalesoutstand_low',
        'dayssalesoutstand_med' => 'dayssalesoutstand_med',
        'debt2asset' => 'debt2asset',
        'debt2ebitda' => 'debt2ebitda',
        'debt2ebitda_high' => 'debt2ebitda_high',
        'debt2ebitda_low' => 'debt2ebitda_low',
        'debt2ebitda_med' => 'debt2ebitda_med',
        'debt2equity' => 'debt2equity',
        'debt2equity_high' => 'debt2equity_high',
        'debt2equity_low' => 'debt2equity_low',
        'debt2equity_med' => 'debt2equity_med',
        'debt2rev' => 'debt2rev',
        'eps' => 'eps',
        'eps_latest_q' => 'eps_latest_q',
        'eps_nri' => 'eps_nri',
        'equity2asset' => 'equity2asset',
        'equity2asset_high' => 'equity2asset_high',
        'equity2asset_low' => 'equity2asset_low',
        'equity2asset_med' => 'equity2asset_med',
        'ev_morn' => 'ev_morn',
        'ev_morn_norm' => 'ev_morn_norm',
        'fscore' => 'fscore',
        'fscore_high' => 'fscore_high',
        'fscore_low' => 'fscore_low',
        'fscore_med' => 'fscore_med',
        'goodwill2asset' => 'goodwill2asset',
        'grossprofit' => 'grossprofit',
        'grossprofit2asset' => 'grossprofit2asset',
        'grossprofit2tangibleasset' => 'grossprofit2tangibleasset',
        'insider_ownership' => 'insider_ownership',
        'inst_ownership' => 'inst_ownership',
        'interest_coverage' => 'interest_coverage',
        'interest_coverage_high' => 'interest_coverage_high',
        'interest_coverage_low' => 'interest_coverage_low',
        'interest_coverage_med' => 'interest_coverage_med',
        'inventory2sales' => 'inventory2sales',
        'inventory_turnover' => 'inventory_turnover',
        'latest_earnings_release_date' => 'latest_earnings_release_date',
        'liabilities_to_assets' => 'liabilities_to_assets',
        'mktcap' => 'mktcap',
        'mktcap_norm' => 'mktcap_norm',
        'mscore' => 'mscore',
        'mscore_high' => 'mscore_high',
        'mscore_low' => 'mscore_low',
        'mscore_med' => 'mscore_med',
        'net_debt_paydown_yield' => 'net_debt_paydown_yield',
        'net_debt_paydown_yield_high' => 'net_debt_paydown_yield_high',
        'net_debt_paydown_yield_low' => 'net_debt_paydown_yield_low',
        'net_debt_paydown_yield_med' => 'net_debt_paydown_yield_med',
        'next_earnings_date' => 'next_earnings_date',
        'num_good_signs' => 'num_good_signs',
        'num_warning_signs_meidum' => 'num_warning_signs_meidum',
        'num_warning_signs_severe' => 'num_warning_signs_severe',
        'past_earnings_date' => 'past_earnings_date',
        'quick_ratio' => 'quick_ratio',
        'quick_ratio_high' => 'quick_ratio_high',
        'quick_ratio_low' => 'quick_ratio_low',
        'quick_ratio_med' => 'quick_ratio_med',
        'receivables_turnover' => 'receivables_turnover',
        'related_comp' => 'related_comp',
        'roa' => 'roa',
        'roa_high' => 'roa_high',
        'roa_low' => 'roa_low',
        'roa_med' => 'roa_med',
        'roa_med_5y' => 'roa_med_5y',
        'roc' => 'roc',
        'roce' => 'roce',
        'roce_high' => 'roce_high',
        'roce_low' => 'roce_low',
        'roce_med' => 'roce_med',
        'roce_med_5y' => 'roce_med_5y',
        'roe' => 'roe',
        'roe_adj' => 'roe_adj',
        'roe_high' => 'roe_high',
        'roe_low' => 'roe_low',
        'roe_med' => 'roe_med',
        'roe_med_5y' => 'roe_med_5y',
        'roic' => 'roic',
        'roic_high' => 'roic_high',
        'roic_low' => 'roic_low',
        'roic_med' => 'roic_med',
        'roic_med_5y' => 'roic_med_5y',
        'roiic_3y' => 'roiic_3y',
        'roiic_3y_high' => 'roiic_3y_high',
        'roiic_3y_low' => 'roiic_3y_low',
        'roiic_3y_med' => 'roiic_3y_med',
        'rvn_predc_10y' => 'rvn_predc_10y',
        'sales' => 'sales',
        'sales_latest_q' => 'sales_latest_q',
        'sales_latest_q_norm' => 'sales_latest_q_norm',
        'shareholder_yield' => 'shareholder_yield',
        'shareholder_yield_high' => 'shareholder_yield_high',
        'shareholder_yield_low' => 'shareholder_yield_low',
        'shareholder_yield_med' => 'shareholder_yield_med',
        'shares' => 'shares',
        'sloanratio' => 'sloanratio',
        'tax_rate_med_5y' => 'tax_rate_med_5y',
        'total_buyback_10y' => 'total_buyback_10y',
        'total_buyback_1y' => 'total_buyback_1y',
        'total_buyback_3y' => 'total_buyback_3y',
        'total_buyback_3y_high' => 'total_buyback_3y_high',
        'total_buyback_3y_low' => 'total_buyback_3y_low',
        'total_buyback_3y_med' => 'total_buyback_3y_med',
        'total_buyback_5y' => 'total_buyback_5y',
        'ttm_ebit' => 'ttm_EBIT',
        'ttm_ebitda' => 'ttm_EBITDA',
        'ttm_eps' => 'ttm_eps',
        'ttm_eps_nri' => 'ttm_eps_nri',
        'ttm_fcf_per_share' => 'ttm_fcf_per_share',
        'ttm_pretaxincome' => 'ttm_pretaxincome',
        'ttm_sales' => 'ttm_sales',
        'turnover' => 'turnover',
        'wacc' => 'wacc',
        'wacc_high' => 'wacc_high',
        'wacc_low' => 'wacc_low',
        'wacc_med' => 'wacc_med',
        'wacc_med_5y' => 'wacc_med_5y',
        'years_of_financial_history' => 'years_of_financial_history',
        'zscore' => 'zscore',
        'zscore_high' => 'zscore_high',
        'zscore_low' => 'zscore_low',
        'zscore_med' => 'zscore_med'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'effective_interest_rate' => 'setEffectiveInterestRate',
        'insider_shares_owned' => 'setInsiderSharesOwned',
        'institution_shares_held' => 'setInstitutionSharesHeld',
        'pfd' => 'setPfd',
        'roc_joel' => 'setRocJoel',
        'roc_joel_high' => 'setRocJoelHigh',
        'roc_joel_low' => 'setRocJoelLow',
        'roc_joel_med' => 'setRocJoelMed',
        'roc_joel_med_5y' => 'setRocJoelMed5y',
        'rota' => 'setRota',
        'rota_high' => 'setRotaHigh',
        'rota_low' => 'setRotaLow',
        'rota_med' => 'setRotaMed',
        'rote' => 'setRote',
        'rote_high' => 'setRoteHigh',
        'rote_low' => 'setRoteLow',
        'rote_med' => 'setRoteMed',
        'rote_med_5y' => 'setRoteMed5y',
        'sga' => 'setSga',
        'snoa' => 'setSnoa',
        'total_payout_ratio' => 'setTotalPayoutRatio',
        'total_payout_yield' => 'setTotalPayoutYield',
        'afinancials_start_date' => 'setAfinancialsStartDate',
        'asset' => 'setAsset',
        'book' => 'setBook',
        'buyback_yield' => 'setBuybackYield',
        'buyback_yield_high' => 'setBuybackYieldHigh',
        'buyback_yield_low' => 'setBuybackYieldLow',
        'buyback_yield_med' => 'setBuybackYieldMed',
        'cash2debt' => 'setCash2debt',
        'cash2debt_high' => 'setCash2debtHigh',
        'cash2debt_low' => 'setCash2debtLow',
        'cash2debt_med' => 'setCash2debtMed',
        'cash_ratio' => 'setCashRatio',
        'cash_ratio_high' => 'setCashRatioHigh',
        'cash_ratio_low' => 'setCashRatioLow',
        'cash_ratio_med' => 'setCashRatioMed',
        'ccc' => 'setCcc',
        'correlation_book' => 'setCorrelationBook',
        'correlation_eps_nri' => 'setCorrelationEpsNri',
        'correlation_ev_vs_ebit' => 'setCorrelationEvVsEbit',
        'correlation_ev_vs_ebitda' => 'setCorrelationEvVsEbitda',
        'correlation_ev_vs_fcf' => 'setCorrelationEvVsFcf',
        'correlation_ev_vs_pretax_income' => 'setCorrelationEvVsPretaxIncome',
        'correlation_ev_vs_rev' => 'setCorrelationEvVsRev',
        'correlation_ocf' => 'setCorrelationOcf',
        'correlation_rev' => 'setCorrelationRev',
        'current_ratio' => 'setCurrentRatio',
        'current_ratio_high' => 'setCurrentRatioHigh',
        'current_ratio_low' => 'setCurrentRatioLow',
        'current_ratio_med' => 'setCurrentRatioMed',
        'daysinventory' => 'setDaysinventory',
        'daysinventory_high' => 'setDaysinventoryHigh',
        'daysinventory_low' => 'setDaysinventoryLow',
        'daysinventory_med' => 'setDaysinventoryMed',
        'dayspayable' => 'setDayspayable',
        'dayspayable_high' => 'setDayspayableHigh',
        'dayspayable_low' => 'setDayspayableLow',
        'dayspayable_med' => 'setDayspayableMed',
        'dayssalesoutstand' => 'setDayssalesoutstand',
        'dayssalesoutstand_high' => 'setDayssalesoutstandHigh',
        'dayssalesoutstand_low' => 'setDayssalesoutstandLow',
        'dayssalesoutstand_med' => 'setDayssalesoutstandMed',
        'debt2asset' => 'setDebt2asset',
        'debt2ebitda' => 'setDebt2ebitda',
        'debt2ebitda_high' => 'setDebt2ebitdaHigh',
        'debt2ebitda_low' => 'setDebt2ebitdaLow',
        'debt2ebitda_med' => 'setDebt2ebitdaMed',
        'debt2equity' => 'setDebt2equity',
        'debt2equity_high' => 'setDebt2equityHigh',
        'debt2equity_low' => 'setDebt2equityLow',
        'debt2equity_med' => 'setDebt2equityMed',
        'debt2rev' => 'setDebt2rev',
        'eps' => 'setEps',
        'eps_latest_q' => 'setEpsLatestQ',
        'eps_nri' => 'setEpsNri',
        'equity2asset' => 'setEquity2asset',
        'equity2asset_high' => 'setEquity2assetHigh',
        'equity2asset_low' => 'setEquity2assetLow',
        'equity2asset_med' => 'setEquity2assetMed',
        'ev_morn' => 'setEvMorn',
        'ev_morn_norm' => 'setEvMornNorm',
        'fscore' => 'setFscore',
        'fscore_high' => 'setFscoreHigh',
        'fscore_low' => 'setFscoreLow',
        'fscore_med' => 'setFscoreMed',
        'goodwill2asset' => 'setGoodwill2asset',
        'grossprofit' => 'setGrossprofit',
        'grossprofit2asset' => 'setGrossprofit2asset',
        'grossprofit2tangibleasset' => 'setGrossprofit2tangibleasset',
        'insider_ownership' => 'setInsiderOwnership',
        'inst_ownership' => 'setInstOwnership',
        'interest_coverage' => 'setInterestCoverage',
        'interest_coverage_high' => 'setInterestCoverageHigh',
        'interest_coverage_low' => 'setInterestCoverageLow',
        'interest_coverage_med' => 'setInterestCoverageMed',
        'inventory2sales' => 'setInventory2sales',
        'inventory_turnover' => 'setInventoryTurnover',
        'latest_earnings_release_date' => 'setLatestEarningsReleaseDate',
        'liabilities_to_assets' => 'setLiabilitiesToAssets',
        'mktcap' => 'setMktcap',
        'mktcap_norm' => 'setMktcapNorm',
        'mscore' => 'setMscore',
        'mscore_high' => 'setMscoreHigh',
        'mscore_low' => 'setMscoreLow',
        'mscore_med' => 'setMscoreMed',
        'net_debt_paydown_yield' => 'setNetDebtPaydownYield',
        'net_debt_paydown_yield_high' => 'setNetDebtPaydownYieldHigh',
        'net_debt_paydown_yield_low' => 'setNetDebtPaydownYieldLow',
        'net_debt_paydown_yield_med' => 'setNetDebtPaydownYieldMed',
        'next_earnings_date' => 'setNextEarningsDate',
        'num_good_signs' => 'setNumGoodSigns',
        'num_warning_signs_meidum' => 'setNumWarningSignsMeidum',
        'num_warning_signs_severe' => 'setNumWarningSignsSevere',
        'past_earnings_date' => 'setPastEarningsDate',
        'quick_ratio' => 'setQuickRatio',
        'quick_ratio_high' => 'setQuickRatioHigh',
        'quick_ratio_low' => 'setQuickRatioLow',
        'quick_ratio_med' => 'setQuickRatioMed',
        'receivables_turnover' => 'setReceivablesTurnover',
        'related_comp' => 'setRelatedComp',
        'roa' => 'setRoa',
        'roa_high' => 'setRoaHigh',
        'roa_low' => 'setRoaLow',
        'roa_med' => 'setRoaMed',
        'roa_med_5y' => 'setRoaMed5y',
        'roc' => 'setRoc',
        'roce' => 'setRoce',
        'roce_high' => 'setRoceHigh',
        'roce_low' => 'setRoceLow',
        'roce_med' => 'setRoceMed',
        'roce_med_5y' => 'setRoceMed5y',
        'roe' => 'setRoe',
        'roe_adj' => 'setRoeAdj',
        'roe_high' => 'setRoeHigh',
        'roe_low' => 'setRoeLow',
        'roe_med' => 'setRoeMed',
        'roe_med_5y' => 'setRoeMed5y',
        'roic' => 'setRoic',
        'roic_high' => 'setRoicHigh',
        'roic_low' => 'setRoicLow',
        'roic_med' => 'setRoicMed',
        'roic_med_5y' => 'setRoicMed5y',
        'roiic_3y' => 'setRoiic3y',
        'roiic_3y_high' => 'setRoiic3yHigh',
        'roiic_3y_low' => 'setRoiic3yLow',
        'roiic_3y_med' => 'setRoiic3yMed',
        'rvn_predc_10y' => 'setRvnPredc10y',
        'sales' => 'setSales',
        'sales_latest_q' => 'setSalesLatestQ',
        'sales_latest_q_norm' => 'setSalesLatestQNorm',
        'shareholder_yield' => 'setShareholderYield',
        'shareholder_yield_high' => 'setShareholderYieldHigh',
        'shareholder_yield_low' => 'setShareholderYieldLow',
        'shareholder_yield_med' => 'setShareholderYieldMed',
        'shares' => 'setShares',
        'sloanratio' => 'setSloanratio',
        'tax_rate_med_5y' => 'setTaxRateMed5y',
        'total_buyback_10y' => 'setTotalBuyback10y',
        'total_buyback_1y' => 'setTotalBuyback1y',
        'total_buyback_3y' => 'setTotalBuyback3y',
        'total_buyback_3y_high' => 'setTotalBuyback3yHigh',
        'total_buyback_3y_low' => 'setTotalBuyback3yLow',
        'total_buyback_3y_med' => 'setTotalBuyback3yMed',
        'total_buyback_5y' => 'setTotalBuyback5y',
        'ttm_ebit' => 'setTtmEbit',
        'ttm_ebitda' => 'setTtmEbitda',
        'ttm_eps' => 'setTtmEps',
        'ttm_eps_nri' => 'setTtmEpsNri',
        'ttm_fcf_per_share' => 'setTtmFcfPerShare',
        'ttm_pretaxincome' => 'setTtmPretaxincome',
        'ttm_sales' => 'setTtmSales',
        'turnover' => 'setTurnover',
        'wacc' => 'setWacc',
        'wacc_high' => 'setWaccHigh',
        'wacc_low' => 'setWaccLow',
        'wacc_med' => 'setWaccMed',
        'wacc_med_5y' => 'setWaccMed5y',
        'years_of_financial_history' => 'setYearsOfFinancialHistory',
        'zscore' => 'setZscore',
        'zscore_high' => 'setZscoreHigh',
        'zscore_low' => 'setZscoreLow',
        'zscore_med' => 'setZscoreMed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'effective_interest_rate' => 'getEffectiveInterestRate',
        'insider_shares_owned' => 'getInsiderSharesOwned',
        'institution_shares_held' => 'getInstitutionSharesHeld',
        'pfd' => 'getPfd',
        'roc_joel' => 'getRocJoel',
        'roc_joel_high' => 'getRocJoelHigh',
        'roc_joel_low' => 'getRocJoelLow',
        'roc_joel_med' => 'getRocJoelMed',
        'roc_joel_med_5y' => 'getRocJoelMed5y',
        'rota' => 'getRota',
        'rota_high' => 'getRotaHigh',
        'rota_low' => 'getRotaLow',
        'rota_med' => 'getRotaMed',
        'rote' => 'getRote',
        'rote_high' => 'getRoteHigh',
        'rote_low' => 'getRoteLow',
        'rote_med' => 'getRoteMed',
        'rote_med_5y' => 'getRoteMed5y',
        'sga' => 'getSga',
        'snoa' => 'getSnoa',
        'total_payout_ratio' => 'getTotalPayoutRatio',
        'total_payout_yield' => 'getTotalPayoutYield',
        'afinancials_start_date' => 'getAfinancialsStartDate',
        'asset' => 'getAsset',
        'book' => 'getBook',
        'buyback_yield' => 'getBuybackYield',
        'buyback_yield_high' => 'getBuybackYieldHigh',
        'buyback_yield_low' => 'getBuybackYieldLow',
        'buyback_yield_med' => 'getBuybackYieldMed',
        'cash2debt' => 'getCash2debt',
        'cash2debt_high' => 'getCash2debtHigh',
        'cash2debt_low' => 'getCash2debtLow',
        'cash2debt_med' => 'getCash2debtMed',
        'cash_ratio' => 'getCashRatio',
        'cash_ratio_high' => 'getCashRatioHigh',
        'cash_ratio_low' => 'getCashRatioLow',
        'cash_ratio_med' => 'getCashRatioMed',
        'ccc' => 'getCcc',
        'correlation_book' => 'getCorrelationBook',
        'correlation_eps_nri' => 'getCorrelationEpsNri',
        'correlation_ev_vs_ebit' => 'getCorrelationEvVsEbit',
        'correlation_ev_vs_ebitda' => 'getCorrelationEvVsEbitda',
        'correlation_ev_vs_fcf' => 'getCorrelationEvVsFcf',
        'correlation_ev_vs_pretax_income' => 'getCorrelationEvVsPretaxIncome',
        'correlation_ev_vs_rev' => 'getCorrelationEvVsRev',
        'correlation_ocf' => 'getCorrelationOcf',
        'correlation_rev' => 'getCorrelationRev',
        'current_ratio' => 'getCurrentRatio',
        'current_ratio_high' => 'getCurrentRatioHigh',
        'current_ratio_low' => 'getCurrentRatioLow',
        'current_ratio_med' => 'getCurrentRatioMed',
        'daysinventory' => 'getDaysinventory',
        'daysinventory_high' => 'getDaysinventoryHigh',
        'daysinventory_low' => 'getDaysinventoryLow',
        'daysinventory_med' => 'getDaysinventoryMed',
        'dayspayable' => 'getDayspayable',
        'dayspayable_high' => 'getDayspayableHigh',
        'dayspayable_low' => 'getDayspayableLow',
        'dayspayable_med' => 'getDayspayableMed',
        'dayssalesoutstand' => 'getDayssalesoutstand',
        'dayssalesoutstand_high' => 'getDayssalesoutstandHigh',
        'dayssalesoutstand_low' => 'getDayssalesoutstandLow',
        'dayssalesoutstand_med' => 'getDayssalesoutstandMed',
        'debt2asset' => 'getDebt2asset',
        'debt2ebitda' => 'getDebt2ebitda',
        'debt2ebitda_high' => 'getDebt2ebitdaHigh',
        'debt2ebitda_low' => 'getDebt2ebitdaLow',
        'debt2ebitda_med' => 'getDebt2ebitdaMed',
        'debt2equity' => 'getDebt2equity',
        'debt2equity_high' => 'getDebt2equityHigh',
        'debt2equity_low' => 'getDebt2equityLow',
        'debt2equity_med' => 'getDebt2equityMed',
        'debt2rev' => 'getDebt2rev',
        'eps' => 'getEps',
        'eps_latest_q' => 'getEpsLatestQ',
        'eps_nri' => 'getEpsNri',
        'equity2asset' => 'getEquity2asset',
        'equity2asset_high' => 'getEquity2assetHigh',
        'equity2asset_low' => 'getEquity2assetLow',
        'equity2asset_med' => 'getEquity2assetMed',
        'ev_morn' => 'getEvMorn',
        'ev_morn_norm' => 'getEvMornNorm',
        'fscore' => 'getFscore',
        'fscore_high' => 'getFscoreHigh',
        'fscore_low' => 'getFscoreLow',
        'fscore_med' => 'getFscoreMed',
        'goodwill2asset' => 'getGoodwill2asset',
        'grossprofit' => 'getGrossprofit',
        'grossprofit2asset' => 'getGrossprofit2asset',
        'grossprofit2tangibleasset' => 'getGrossprofit2tangibleasset',
        'insider_ownership' => 'getInsiderOwnership',
        'inst_ownership' => 'getInstOwnership',
        'interest_coverage' => 'getInterestCoverage',
        'interest_coverage_high' => 'getInterestCoverageHigh',
        'interest_coverage_low' => 'getInterestCoverageLow',
        'interest_coverage_med' => 'getInterestCoverageMed',
        'inventory2sales' => 'getInventory2sales',
        'inventory_turnover' => 'getInventoryTurnover',
        'latest_earnings_release_date' => 'getLatestEarningsReleaseDate',
        'liabilities_to_assets' => 'getLiabilitiesToAssets',
        'mktcap' => 'getMktcap',
        'mktcap_norm' => 'getMktcapNorm',
        'mscore' => 'getMscore',
        'mscore_high' => 'getMscoreHigh',
        'mscore_low' => 'getMscoreLow',
        'mscore_med' => 'getMscoreMed',
        'net_debt_paydown_yield' => 'getNetDebtPaydownYield',
        'net_debt_paydown_yield_high' => 'getNetDebtPaydownYieldHigh',
        'net_debt_paydown_yield_low' => 'getNetDebtPaydownYieldLow',
        'net_debt_paydown_yield_med' => 'getNetDebtPaydownYieldMed',
        'next_earnings_date' => 'getNextEarningsDate',
        'num_good_signs' => 'getNumGoodSigns',
        'num_warning_signs_meidum' => 'getNumWarningSignsMeidum',
        'num_warning_signs_severe' => 'getNumWarningSignsSevere',
        'past_earnings_date' => 'getPastEarningsDate',
        'quick_ratio' => 'getQuickRatio',
        'quick_ratio_high' => 'getQuickRatioHigh',
        'quick_ratio_low' => 'getQuickRatioLow',
        'quick_ratio_med' => 'getQuickRatioMed',
        'receivables_turnover' => 'getReceivablesTurnover',
        'related_comp' => 'getRelatedComp',
        'roa' => 'getRoa',
        'roa_high' => 'getRoaHigh',
        'roa_low' => 'getRoaLow',
        'roa_med' => 'getRoaMed',
        'roa_med_5y' => 'getRoaMed5y',
        'roc' => 'getRoc',
        'roce' => 'getRoce',
        'roce_high' => 'getRoceHigh',
        'roce_low' => 'getRoceLow',
        'roce_med' => 'getRoceMed',
        'roce_med_5y' => 'getRoceMed5y',
        'roe' => 'getRoe',
        'roe_adj' => 'getRoeAdj',
        'roe_high' => 'getRoeHigh',
        'roe_low' => 'getRoeLow',
        'roe_med' => 'getRoeMed',
        'roe_med_5y' => 'getRoeMed5y',
        'roic' => 'getRoic',
        'roic_high' => 'getRoicHigh',
        'roic_low' => 'getRoicLow',
        'roic_med' => 'getRoicMed',
        'roic_med_5y' => 'getRoicMed5y',
        'roiic_3y' => 'getRoiic3y',
        'roiic_3y_high' => 'getRoiic3yHigh',
        'roiic_3y_low' => 'getRoiic3yLow',
        'roiic_3y_med' => 'getRoiic3yMed',
        'rvn_predc_10y' => 'getRvnPredc10y',
        'sales' => 'getSales',
        'sales_latest_q' => 'getSalesLatestQ',
        'sales_latest_q_norm' => 'getSalesLatestQNorm',
        'shareholder_yield' => 'getShareholderYield',
        'shareholder_yield_high' => 'getShareholderYieldHigh',
        'shareholder_yield_low' => 'getShareholderYieldLow',
        'shareholder_yield_med' => 'getShareholderYieldMed',
        'shares' => 'getShares',
        'sloanratio' => 'getSloanratio',
        'tax_rate_med_5y' => 'getTaxRateMed5y',
        'total_buyback_10y' => 'getTotalBuyback10y',
        'total_buyback_1y' => 'getTotalBuyback1y',
        'total_buyback_3y' => 'getTotalBuyback3y',
        'total_buyback_3y_high' => 'getTotalBuyback3yHigh',
        'total_buyback_3y_low' => 'getTotalBuyback3yLow',
        'total_buyback_3y_med' => 'getTotalBuyback3yMed',
        'total_buyback_5y' => 'getTotalBuyback5y',
        'ttm_ebit' => 'getTtmEbit',
        'ttm_ebitda' => 'getTtmEbitda',
        'ttm_eps' => 'getTtmEps',
        'ttm_eps_nri' => 'getTtmEpsNri',
        'ttm_fcf_per_share' => 'getTtmFcfPerShare',
        'ttm_pretaxincome' => 'getTtmPretaxincome',
        'ttm_sales' => 'getTtmSales',
        'turnover' => 'getTurnover',
        'wacc' => 'getWacc',
        'wacc_high' => 'getWaccHigh',
        'wacc_low' => 'getWaccLow',
        'wacc_med' => 'getWaccMed',
        'wacc_med_5y' => 'getWaccMed5y',
        'years_of_financial_history' => 'getYearsOfFinancialHistory',
        'zscore' => 'getZscore',
        'zscore_high' => 'getZscoreHigh',
        'zscore_low' => 'getZscoreLow',
        'zscore_med' => 'getZscoreMed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('effective_interest_rate', $data ?? [], null);
        $this->setIfExists('insider_shares_owned', $data ?? [], null);
        $this->setIfExists('institution_shares_held', $data ?? [], null);
        $this->setIfExists('pfd', $data ?? [], null);
        $this->setIfExists('roc_joel', $data ?? [], null);
        $this->setIfExists('roc_joel_high', $data ?? [], null);
        $this->setIfExists('roc_joel_low', $data ?? [], null);
        $this->setIfExists('roc_joel_med', $data ?? [], null);
        $this->setIfExists('roc_joel_med_5y', $data ?? [], null);
        $this->setIfExists('rota', $data ?? [], null);
        $this->setIfExists('rota_high', $data ?? [], null);
        $this->setIfExists('rota_low', $data ?? [], null);
        $this->setIfExists('rota_med', $data ?? [], null);
        $this->setIfExists('rote', $data ?? [], null);
        $this->setIfExists('rote_high', $data ?? [], null);
        $this->setIfExists('rote_low', $data ?? [], null);
        $this->setIfExists('rote_med', $data ?? [], null);
        $this->setIfExists('rote_med_5y', $data ?? [], null);
        $this->setIfExists('sga', $data ?? [], null);
        $this->setIfExists('snoa', $data ?? [], null);
        $this->setIfExists('total_payout_ratio', $data ?? [], null);
        $this->setIfExists('total_payout_yield', $data ?? [], null);
        $this->setIfExists('afinancials_start_date', $data ?? [], null);
        $this->setIfExists('asset', $data ?? [], null);
        $this->setIfExists('book', $data ?? [], null);
        $this->setIfExists('buyback_yield', $data ?? [], null);
        $this->setIfExists('buyback_yield_high', $data ?? [], null);
        $this->setIfExists('buyback_yield_low', $data ?? [], null);
        $this->setIfExists('buyback_yield_med', $data ?? [], null);
        $this->setIfExists('cash2debt', $data ?? [], null);
        $this->setIfExists('cash2debt_high', $data ?? [], null);
        $this->setIfExists('cash2debt_low', $data ?? [], null);
        $this->setIfExists('cash2debt_med', $data ?? [], null);
        $this->setIfExists('cash_ratio', $data ?? [], null);
        $this->setIfExists('cash_ratio_high', $data ?? [], null);
        $this->setIfExists('cash_ratio_low', $data ?? [], null);
        $this->setIfExists('cash_ratio_med', $data ?? [], null);
        $this->setIfExists('ccc', $data ?? [], null);
        $this->setIfExists('correlation_book', $data ?? [], null);
        $this->setIfExists('correlation_eps_nri', $data ?? [], null);
        $this->setIfExists('correlation_ev_vs_ebit', $data ?? [], null);
        $this->setIfExists('correlation_ev_vs_ebitda', $data ?? [], null);
        $this->setIfExists('correlation_ev_vs_fcf', $data ?? [], null);
        $this->setIfExists('correlation_ev_vs_pretax_income', $data ?? [], null);
        $this->setIfExists('correlation_ev_vs_rev', $data ?? [], null);
        $this->setIfExists('correlation_ocf', $data ?? [], null);
        $this->setIfExists('correlation_rev', $data ?? [], null);
        $this->setIfExists('current_ratio', $data ?? [], null);
        $this->setIfExists('current_ratio_high', $data ?? [], null);
        $this->setIfExists('current_ratio_low', $data ?? [], null);
        $this->setIfExists('current_ratio_med', $data ?? [], null);
        $this->setIfExists('daysinventory', $data ?? [], null);
        $this->setIfExists('daysinventory_high', $data ?? [], null);
        $this->setIfExists('daysinventory_low', $data ?? [], null);
        $this->setIfExists('daysinventory_med', $data ?? [], null);
        $this->setIfExists('dayspayable', $data ?? [], null);
        $this->setIfExists('dayspayable_high', $data ?? [], null);
        $this->setIfExists('dayspayable_low', $data ?? [], null);
        $this->setIfExists('dayspayable_med', $data ?? [], null);
        $this->setIfExists('dayssalesoutstand', $data ?? [], null);
        $this->setIfExists('dayssalesoutstand_high', $data ?? [], null);
        $this->setIfExists('dayssalesoutstand_low', $data ?? [], null);
        $this->setIfExists('dayssalesoutstand_med', $data ?? [], null);
        $this->setIfExists('debt2asset', $data ?? [], null);
        $this->setIfExists('debt2ebitda', $data ?? [], null);
        $this->setIfExists('debt2ebitda_high', $data ?? [], null);
        $this->setIfExists('debt2ebitda_low', $data ?? [], null);
        $this->setIfExists('debt2ebitda_med', $data ?? [], null);
        $this->setIfExists('debt2equity', $data ?? [], null);
        $this->setIfExists('debt2equity_high', $data ?? [], null);
        $this->setIfExists('debt2equity_low', $data ?? [], null);
        $this->setIfExists('debt2equity_med', $data ?? [], null);
        $this->setIfExists('debt2rev', $data ?? [], null);
        $this->setIfExists('eps', $data ?? [], null);
        $this->setIfExists('eps_latest_q', $data ?? [], null);
        $this->setIfExists('eps_nri', $data ?? [], null);
        $this->setIfExists('equity2asset', $data ?? [], null);
        $this->setIfExists('equity2asset_high', $data ?? [], null);
        $this->setIfExists('equity2asset_low', $data ?? [], null);
        $this->setIfExists('equity2asset_med', $data ?? [], null);
        $this->setIfExists('ev_morn', $data ?? [], null);
        $this->setIfExists('ev_morn_norm', $data ?? [], null);
        $this->setIfExists('fscore', $data ?? [], null);
        $this->setIfExists('fscore_high', $data ?? [], null);
        $this->setIfExists('fscore_low', $data ?? [], null);
        $this->setIfExists('fscore_med', $data ?? [], null);
        $this->setIfExists('goodwill2asset', $data ?? [], null);
        $this->setIfExists('grossprofit', $data ?? [], null);
        $this->setIfExists('grossprofit2asset', $data ?? [], null);
        $this->setIfExists('grossprofit2tangibleasset', $data ?? [], null);
        $this->setIfExists('insider_ownership', $data ?? [], null);
        $this->setIfExists('inst_ownership', $data ?? [], null);
        $this->setIfExists('interest_coverage', $data ?? [], null);
        $this->setIfExists('interest_coverage_high', $data ?? [], null);
        $this->setIfExists('interest_coverage_low', $data ?? [], null);
        $this->setIfExists('interest_coverage_med', $data ?? [], null);
        $this->setIfExists('inventory2sales', $data ?? [], null);
        $this->setIfExists('inventory_turnover', $data ?? [], null);
        $this->setIfExists('latest_earnings_release_date', $data ?? [], null);
        $this->setIfExists('liabilities_to_assets', $data ?? [], null);
        $this->setIfExists('mktcap', $data ?? [], null);
        $this->setIfExists('mktcap_norm', $data ?? [], null);
        $this->setIfExists('mscore', $data ?? [], null);
        $this->setIfExists('mscore_high', $data ?? [], null);
        $this->setIfExists('mscore_low', $data ?? [], null);
        $this->setIfExists('mscore_med', $data ?? [], null);
        $this->setIfExists('net_debt_paydown_yield', $data ?? [], null);
        $this->setIfExists('net_debt_paydown_yield_high', $data ?? [], null);
        $this->setIfExists('net_debt_paydown_yield_low', $data ?? [], null);
        $this->setIfExists('net_debt_paydown_yield_med', $data ?? [], null);
        $this->setIfExists('next_earnings_date', $data ?? [], null);
        $this->setIfExists('num_good_signs', $data ?? [], null);
        $this->setIfExists('num_warning_signs_meidum', $data ?? [], null);
        $this->setIfExists('num_warning_signs_severe', $data ?? [], null);
        $this->setIfExists('past_earnings_date', $data ?? [], null);
        $this->setIfExists('quick_ratio', $data ?? [], null);
        $this->setIfExists('quick_ratio_high', $data ?? [], null);
        $this->setIfExists('quick_ratio_low', $data ?? [], null);
        $this->setIfExists('quick_ratio_med', $data ?? [], null);
        $this->setIfExists('receivables_turnover', $data ?? [], null);
        $this->setIfExists('related_comp', $data ?? [], null);
        $this->setIfExists('roa', $data ?? [], null);
        $this->setIfExists('roa_high', $data ?? [], null);
        $this->setIfExists('roa_low', $data ?? [], null);
        $this->setIfExists('roa_med', $data ?? [], null);
        $this->setIfExists('roa_med_5y', $data ?? [], null);
        $this->setIfExists('roc', $data ?? [], null);
        $this->setIfExists('roce', $data ?? [], null);
        $this->setIfExists('roce_high', $data ?? [], null);
        $this->setIfExists('roce_low', $data ?? [], null);
        $this->setIfExists('roce_med', $data ?? [], null);
        $this->setIfExists('roce_med_5y', $data ?? [], null);
        $this->setIfExists('roe', $data ?? [], null);
        $this->setIfExists('roe_adj', $data ?? [], null);
        $this->setIfExists('roe_high', $data ?? [], null);
        $this->setIfExists('roe_low', $data ?? [], null);
        $this->setIfExists('roe_med', $data ?? [], null);
        $this->setIfExists('roe_med_5y', $data ?? [], null);
        $this->setIfExists('roic', $data ?? [], null);
        $this->setIfExists('roic_high', $data ?? [], null);
        $this->setIfExists('roic_low', $data ?? [], null);
        $this->setIfExists('roic_med', $data ?? [], null);
        $this->setIfExists('roic_med_5y', $data ?? [], null);
        $this->setIfExists('roiic_3y', $data ?? [], null);
        $this->setIfExists('roiic_3y_high', $data ?? [], null);
        $this->setIfExists('roiic_3y_low', $data ?? [], null);
        $this->setIfExists('roiic_3y_med', $data ?? [], null);
        $this->setIfExists('rvn_predc_10y', $data ?? [], null);
        $this->setIfExists('sales', $data ?? [], null);
        $this->setIfExists('sales_latest_q', $data ?? [], null);
        $this->setIfExists('sales_latest_q_norm', $data ?? [], null);
        $this->setIfExists('shareholder_yield', $data ?? [], null);
        $this->setIfExists('shareholder_yield_high', $data ?? [], null);
        $this->setIfExists('shareholder_yield_low', $data ?? [], null);
        $this->setIfExists('shareholder_yield_med', $data ?? [], null);
        $this->setIfExists('shares', $data ?? [], null);
        $this->setIfExists('sloanratio', $data ?? [], null);
        $this->setIfExists('tax_rate_med_5y', $data ?? [], null);
        $this->setIfExists('total_buyback_10y', $data ?? [], null);
        $this->setIfExists('total_buyback_1y', $data ?? [], null);
        $this->setIfExists('total_buyback_3y', $data ?? [], null);
        $this->setIfExists('total_buyback_3y_high', $data ?? [], null);
        $this->setIfExists('total_buyback_3y_low', $data ?? [], null);
        $this->setIfExists('total_buyback_3y_med', $data ?? [], null);
        $this->setIfExists('total_buyback_5y', $data ?? [], null);
        $this->setIfExists('ttm_ebit', $data ?? [], null);
        $this->setIfExists('ttm_ebitda', $data ?? [], null);
        $this->setIfExists('ttm_eps', $data ?? [], null);
        $this->setIfExists('ttm_eps_nri', $data ?? [], null);
        $this->setIfExists('ttm_fcf_per_share', $data ?? [], null);
        $this->setIfExists('ttm_pretaxincome', $data ?? [], null);
        $this->setIfExists('ttm_sales', $data ?? [], null);
        $this->setIfExists('turnover', $data ?? [], null);
        $this->setIfExists('wacc', $data ?? [], null);
        $this->setIfExists('wacc_high', $data ?? [], null);
        $this->setIfExists('wacc_low', $data ?? [], null);
        $this->setIfExists('wacc_med', $data ?? [], null);
        $this->setIfExists('wacc_med_5y', $data ?? [], null);
        $this->setIfExists('years_of_financial_history', $data ?? [], null);
        $this->setIfExists('zscore', $data ?? [], null);
        $this->setIfExists('zscore_high', $data ?? [], null);
        $this->setIfExists('zscore_low', $data ?? [], null);
        $this->setIfExists('zscore_med', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets effective_interest_rate
     *
     * @return float|null
     */
    public function getEffectiveInterestRate()
    {
        return $this->container['effective_interest_rate'];
    }

    /**
     * Sets effective_interest_rate
     *
     * @param float|null $effective_interest_rate Effective interest rate on debt is the usage rate that a borrower actually pays on a debt. It is calculated as the positive value of interest expense divided by its average total debt.
     *
     * @return self
     */
    public function setEffectiveInterestRate($effective_interest_rate)
    {
        if (is_null($effective_interest_rate)) {
            throw new \InvalidArgumentException('non-nullable effective_interest_rate cannot be null');
        }
        $this->container['effective_interest_rate'] = $effective_interest_rate;

        return $this;
    }

    /**
     * Gets insider_shares_owned
     *
     * @return float|null
     */
    public function getInsiderSharesOwned()
    {
        return $this->container['insider_shares_owned'];
    }

    /**
     * Sets insider_shares_owned
     *
     * @param float|null $insider_shares_owned The number of shares owned by insiders, in millions
     *
     * @return self
     */
    public function setInsiderSharesOwned($insider_shares_owned)
    {
        if (is_null($insider_shares_owned)) {
            throw new \InvalidArgumentException('non-nullable insider_shares_owned cannot be null');
        }
        $this->container['insider_shares_owned'] = $insider_shares_owned;

        return $this;
    }

    /**
     * Gets institution_shares_held
     *
     * @return float|null
     */
    public function getInstitutionSharesHeld()
    {
        return $this->container['institution_shares_held'];
    }

    /**
     * Sets institution_shares_held
     *
     * @param float|null $institution_shares_held The number of shares owned by institutions, in millions
     *
     * @return self
     */
    public function setInstitutionSharesHeld($institution_shares_held)
    {
        if (is_null($institution_shares_held)) {
            throw new \InvalidArgumentException('non-nullable institution_shares_held cannot be null');
        }
        $this->container['institution_shares_held'] = $institution_shares_held;

        return $this;
    }

    /**
     * Gets pfd
     *
     * @return float|null
     */
    public function getPfd()
    {
        return $this->container['pfd'];
    }

    /**
     * Sets pfd
     *
     * @param float|null $pfd The probability of financial distress, as computed using the Campbell, Hilscher and Szilagyi model.
     *
     * @return self
     */
    public function setPfd($pfd)
    {
        if (is_null($pfd)) {
            throw new \InvalidArgumentException('non-nullable pfd cannot be null');
        }
        $this->container['pfd'] = $pfd;

        return $this;
    }

    /**
     * Gets roc_joel
     *
     * @return float|null
     */
    public function getRocJoel()
    {
        return $this->container['roc_joel'];
    }

    /**
     * Sets roc_joel
     *
     * @param float|null $roc_joel Joel Greenblatt defined Return on Capital differently in his book The Little Book That Still Beats the Market (Little Books. Big Profits). He defines Return on Capital as EBIT divided by the total of Property, Plant and Equipment and net working capital.
     *
     * @return self
     */
    public function setRocJoel($roc_joel)
    {
        if (is_null($roc_joel)) {
            throw new \InvalidArgumentException('non-nullable roc_joel cannot be null');
        }
        $this->container['roc_joel'] = $roc_joel;

        return $this;
    }

    /**
     * Gets roc_joel_high
     *
     * @return float|null
     */
    public function getRocJoelHigh()
    {
        return $this->container['roc_joel_high'];
    }

    /**
     * Sets roc_joel_high
     *
     * @param float|null $roc_joel_high Joel Greenblatt defined Return on Capital differently in his book The Little Book That Still Beats the Market (Little Books. Big Profits). He defines Return on Capital as EBIT divided by the total of Property, Plant and Equipment and net working capital.
     *
     * @return self
     */
    public function setRocJoelHigh($roc_joel_high)
    {
        if (is_null($roc_joel_high)) {
            throw new \InvalidArgumentException('non-nullable roc_joel_high cannot be null');
        }
        $this->container['roc_joel_high'] = $roc_joel_high;

        return $this;
    }

    /**
     * Gets roc_joel_low
     *
     * @return float|null
     */
    public function getRocJoelLow()
    {
        return $this->container['roc_joel_low'];
    }

    /**
     * Sets roc_joel_low
     *
     * @param float|null $roc_joel_low Joel Greenblatt defined Return on Capital differently in his book The Little Book That Still Beats the Market (Little Books. Big Profits). He defines Return on Capital as EBIT divided by the total of Property, Plant and Equipment and net working capital.
     *
     * @return self
     */
    public function setRocJoelLow($roc_joel_low)
    {
        if (is_null($roc_joel_low)) {
            throw new \InvalidArgumentException('non-nullable roc_joel_low cannot be null');
        }
        $this->container['roc_joel_low'] = $roc_joel_low;

        return $this;
    }

    /**
     * Gets roc_joel_med
     *
     * @return float|null
     */
    public function getRocJoelMed()
    {
        return $this->container['roc_joel_med'];
    }

    /**
     * Sets roc_joel_med
     *
     * @param float|null $roc_joel_med Joel Greenblatt defined Return on Capital differently in his book The Little Book That Still Beats the Market (Little Books. Big Profits). He defines Return on Capital as EBIT divided by the total of Property, Plant and Equipment and net working capital.
     *
     * @return self
     */
    public function setRocJoelMed($roc_joel_med)
    {
        if (is_null($roc_joel_med)) {
            throw new \InvalidArgumentException('non-nullable roc_joel_med cannot be null');
        }
        $this->container['roc_joel_med'] = $roc_joel_med;

        return $this;
    }

    /**
     * Gets roc_joel_med_5y
     *
     * @return float|null
     */
    public function getRocJoelMed5y()
    {
        return $this->container['roc_joel_med_5y'];
    }

    /**
     * Sets roc_joel_med_5y
     *
     * @param float|null $roc_joel_med_5y Joel Greenblatt defined Return on Capital differently in his book The Little Book That Still Beats the Market (Little Books. Big Profits). He defines Return on Capital as EBIT divided by the total of Property, Plant and Equipment and net working capital.
     *
     * @return self
     */
    public function setRocJoelMed5y($roc_joel_med_5y)
    {
        if (is_null($roc_joel_med_5y)) {
            throw new \InvalidArgumentException('non-nullable roc_joel_med_5y cannot be null');
        }
        $this->container['roc_joel_med_5y'] = $roc_joel_med_5y;

        return $this;
    }

    /**
     * Gets rota
     *
     * @return float|null
     */
    public function getRota()
    {
        return $this->container['rota'];
    }

    /**
     * Sets rota
     *
     * @param float|null $rota Return on tangible assets is calculated as Net Income divided by its average total tangible assets. Total tangible assets equals to Total Assets minus Intangible Assets.
     *
     * @return self
     */
    public function setRota($rota)
    {
        if (is_null($rota)) {
            throw new \InvalidArgumentException('non-nullable rota cannot be null');
        }
        $this->container['rota'] = $rota;

        return $this;
    }

    /**
     * Gets rota_high
     *
     * @return float|null
     */
    public function getRotaHigh()
    {
        return $this->container['rota_high'];
    }

    /**
     * Sets rota_high
     *
     * @param float|null $rota_high Return on tangible assets is calculated as Net Income divided by its average total tangible assets. Total tangible assets equals to Total Assets minus Intangible Assets.
     *
     * @return self
     */
    public function setRotaHigh($rota_high)
    {
        if (is_null($rota_high)) {
            throw new \InvalidArgumentException('non-nullable rota_high cannot be null');
        }
        $this->container['rota_high'] = $rota_high;

        return $this;
    }

    /**
     * Gets rota_low
     *
     * @return float|null
     */
    public function getRotaLow()
    {
        return $this->container['rota_low'];
    }

    /**
     * Sets rota_low
     *
     * @param float|null $rota_low Return on tangible assets is calculated as Net Income divided by its average total tangible assets. Total tangible assets equals to Total Assets minus Intangible Assets.
     *
     * @return self
     */
    public function setRotaLow($rota_low)
    {
        if (is_null($rota_low)) {
            throw new \InvalidArgumentException('non-nullable rota_low cannot be null');
        }
        $this->container['rota_low'] = $rota_low;

        return $this;
    }

    /**
     * Gets rota_med
     *
     * @return float|null
     */
    public function getRotaMed()
    {
        return $this->container['rota_med'];
    }

    /**
     * Sets rota_med
     *
     * @param float|null $rota_med Return on tangible assets is calculated as Net Income divided by its average total tangible assets. Total tangible assets equals to Total Assets minus Intangible Assets.
     *
     * @return self
     */
    public function setRotaMed($rota_med)
    {
        if (is_null($rota_med)) {
            throw new \InvalidArgumentException('non-nullable rota_med cannot be null');
        }
        $this->container['rota_med'] = $rota_med;

        return $this;
    }

    /**
     * Gets rote
     *
     * @return float|null
     */
    public function getRote()
    {
        return $this->container['rote'];
    }

    /**
     * Sets rote
     *
     * @param float|null $rote Return on tangible equity is calculated as Net Income attributable to Common Stockholders divided by its average total shareholder tangible equity.
     *
     * @return self
     */
    public function setRote($rote)
    {
        if (is_null($rote)) {
            throw new \InvalidArgumentException('non-nullable rote cannot be null');
        }
        $this->container['rote'] = $rote;

        return $this;
    }

    /**
     * Gets rote_high
     *
     * @return float|null
     */
    public function getRoteHigh()
    {
        return $this->container['rote_high'];
    }

    /**
     * Sets rote_high
     *
     * @param float|null $rote_high Return on tangible equity is calculated as Net Income attributable to Common Stockholders divided by its average total shareholder tangible equity.
     *
     * @return self
     */
    public function setRoteHigh($rote_high)
    {
        if (is_null($rote_high)) {
            throw new \InvalidArgumentException('non-nullable rote_high cannot be null');
        }
        $this->container['rote_high'] = $rote_high;

        return $this;
    }

    /**
     * Gets rote_low
     *
     * @return float|null
     */
    public function getRoteLow()
    {
        return $this->container['rote_low'];
    }

    /**
     * Sets rote_low
     *
     * @param float|null $rote_low Return on tangible equity is calculated as Net Income attributable to Common Stockholders divided by its average total shareholder tangible equity.
     *
     * @return self
     */
    public function setRoteLow($rote_low)
    {
        if (is_null($rote_low)) {
            throw new \InvalidArgumentException('non-nullable rote_low cannot be null');
        }
        $this->container['rote_low'] = $rote_low;

        return $this;
    }

    /**
     * Gets rote_med
     *
     * @return float|null
     */
    public function getRoteMed()
    {
        return $this->container['rote_med'];
    }

    /**
     * Sets rote_med
     *
     * @param float|null $rote_med Return on tangible equity is calculated as Net Income attributable to Common Stockholders divided by its average total shareholder tangible equity.
     *
     * @return self
     */
    public function setRoteMed($rote_med)
    {
        if (is_null($rote_med)) {
            throw new \InvalidArgumentException('non-nullable rote_med cannot be null');
        }
        $this->container['rote_med'] = $rote_med;

        return $this;
    }

    /**
     * Gets rote_med_5y
     *
     * @return float|null
     */
    public function getRoteMed5y()
    {
        return $this->container['rote_med_5y'];
    }

    /**
     * Sets rote_med_5y
     *
     * @param float|null $rote_med_5y Return on tangible equity is calculated as Net Income attributable to Common Stockholders divided by its average total shareholder tangible equity.
     *
     * @return self
     */
    public function setRoteMed5y($rote_med_5y)
    {
        if (is_null($rote_med_5y)) {
            throw new \InvalidArgumentException('non-nullable rote_med_5y cannot be null');
        }
        $this->container['rote_med_5y'] = $rote_med_5y;

        return $this;
    }

    /**
     * Gets sga
     *
     * @return float|null
     */
    public function getSga()
    {
        return $this->container['sga'];
    }

    /**
     * Sets sga
     *
     * @param float|null $sga Selling, General, & Admin. Expense (SGA) includes the direct and indirect costs and all general and administrative expenses of a company. For instance, personnel cost, advertising, rent, communication costs are all part of SGA.
     *
     * @return self
     */
    public function setSga($sga)
    {
        if (is_null($sga)) {
            throw new \InvalidArgumentException('non-nullable sga cannot be null');
        }
        $this->container['sga'] = $sga;

        return $this;
    }

    /**
     * Gets snoa
     *
     * @return float|null
     */
    public function getSnoa()
    {
        return $this->container['snoa'];
    }

    /**
     * Sets snoa
     *
     * @param float|null $snoa Scaled net operating assets (SNOA) is calculated as the difference between  operating assets and operating liabilities, scaled by lagged total assets.
     *
     * @return self
     */
    public function setSnoa($snoa)
    {
        if (is_null($snoa)) {
            throw new \InvalidArgumentException('non-nullable snoa cannot be null');
        }
        $this->container['snoa'] = $snoa;

        return $this;
    }

    /**
     * Gets total_payout_ratio
     *
     * @return float|null
     */
    public function getTotalPayoutRatio()
    {
        return $this->container['total_payout_ratio'];
    }

    /**
     * Sets total_payout_ratio
     *
     * @param float|null $total_payout_ratio The total payout ratio is the ratio of the total amount of dividends and share repurchases to the company's net income.
     *
     * @return self
     */
    public function setTotalPayoutRatio($total_payout_ratio)
    {
        if (is_null($total_payout_ratio)) {
            throw new \InvalidArgumentException('non-nullable total_payout_ratio cannot be null');
        }
        $this->container['total_payout_ratio'] = $total_payout_ratio;

        return $this;
    }

    /**
     * Gets total_payout_yield
     *
     * @return float|null
     */
    public function getTotalPayoutYield()
    {
        return $this->container['total_payout_yield'];
    }

    /**
     * Sets total_payout_yield
     *
     * @param float|null $total_payout_yield total_payout_yield
     *
     * @return self
     */
    public function setTotalPayoutYield($total_payout_yield)
    {
        if (is_null($total_payout_yield)) {
            throw new \InvalidArgumentException('non-nullable total_payout_yield cannot be null');
        }
        $this->container['total_payout_yield'] = $total_payout_yield;

        return $this;
    }

    /**
     * Gets afinancials_start_date
     *
     * @return string|null
     */
    public function getAfinancialsStartDate()
    {
        return $this->container['afinancials_start_date'];
    }

    /**
     * Sets afinancials_start_date
     *
     * @param string|null $afinancials_start_date afinancials_start_date
     *
     * @return self
     */
    public function setAfinancialsStartDate($afinancials_start_date)
    {
        if (is_null($afinancials_start_date)) {
            throw new \InvalidArgumentException('non-nullable afinancials_start_date cannot be null');
        }
        $this->container['afinancials_start_date'] = $afinancials_start_date;

        return $this;
    }

    /**
     * Gets asset
     *
     * @return float|null
     */
    public function getAsset()
    {
        return $this->container['asset'];
    }

    /**
     * Sets asset
     *
     * @param float|null $asset The total amount of current assets
     *
     * @return self
     */
    public function setAsset($asset)
    {
        if (is_null($asset)) {
            throw new \InvalidArgumentException('non-nullable asset cannot be null');
        }
        $this->container['asset'] = $asset;

        return $this;
    }

    /**
     * Gets book
     *
     * @return float|null
     */
    public function getBook()
    {
        return $this->container['book'];
    }

    /**
     * Sets book
     *
     * @param float|null $book Per share value of a company based on common shareholders' equity in the company.
     *
     * @return self
     */
    public function setBook($book)
    {
        if (is_null($book)) {
            throw new \InvalidArgumentException('non-nullable book cannot be null');
        }
        $this->container['book'] = $book;

        return $this;
    }

    /**
     * Gets buyback_yield
     *
     * @return float|null
     */
    public function getBuybackYield()
    {
        return $this->container['buyback_yield'];
    }

    /**
     * Sets buyback_yield
     *
     * @param float|null $buyback_yield buyback_yield
     *
     * @return self
     */
    public function setBuybackYield($buyback_yield)
    {
        if (is_null($buyback_yield)) {
            throw new \InvalidArgumentException('non-nullable buyback_yield cannot be null');
        }
        $this->container['buyback_yield'] = $buyback_yield;

        return $this;
    }

    /**
     * Gets buyback_yield_high
     *
     * @return float|null
     */
    public function getBuybackYieldHigh()
    {
        return $this->container['buyback_yield_high'];
    }

    /**
     * Sets buyback_yield_high
     *
     * @param float|null $buyback_yield_high buyback_yield_high
     *
     * @return self
     */
    public function setBuybackYieldHigh($buyback_yield_high)
    {
        if (is_null($buyback_yield_high)) {
            throw new \InvalidArgumentException('non-nullable buyback_yield_high cannot be null');
        }
        $this->container['buyback_yield_high'] = $buyback_yield_high;

        return $this;
    }

    /**
     * Gets buyback_yield_low
     *
     * @return float|null
     */
    public function getBuybackYieldLow()
    {
        return $this->container['buyback_yield_low'];
    }

    /**
     * Sets buyback_yield_low
     *
     * @param float|null $buyback_yield_low buyback_yield_low
     *
     * @return self
     */
    public function setBuybackYieldLow($buyback_yield_low)
    {
        if (is_null($buyback_yield_low)) {
            throw new \InvalidArgumentException('non-nullable buyback_yield_low cannot be null');
        }
        $this->container['buyback_yield_low'] = $buyback_yield_low;

        return $this;
    }

    /**
     * Gets buyback_yield_med
     *
     * @return float|null
     */
    public function getBuybackYieldMed()
    {
        return $this->container['buyback_yield_med'];
    }

    /**
     * Sets buyback_yield_med
     *
     * @param float|null $buyback_yield_med buyback_yield_med
     *
     * @return self
     */
    public function setBuybackYieldMed($buyback_yield_med)
    {
        if (is_null($buyback_yield_med)) {
            throw new \InvalidArgumentException('non-nullable buyback_yield_med cannot be null');
        }
        $this->container['buyback_yield_med'] = $buyback_yield_med;

        return $this;
    }

    /**
     * Gets cash2debt
     *
     * @return float|null
     */
    public function getCash2debt()
    {
        return $this->container['cash2debt'];
    }

    /**
     * Sets cash2debt
     *
     * @param float|null $cash2debt Cash to Debt Ratio measures the financial strength of a company. It is calculated as a company's {{cash_equivalents_marketable_securities}} divided by its {{total_debt}}.
     *
     * @return self
     */
    public function setCash2debt($cash2debt)
    {
        if (is_null($cash2debt)) {
            throw new \InvalidArgumentException('non-nullable cash2debt cannot be null');
        }
        $this->container['cash2debt'] = $cash2debt;

        return $this;
    }

    /**
     * Gets cash2debt_high
     *
     * @return float|null
     */
    public function getCash2debtHigh()
    {
        return $this->container['cash2debt_high'];
    }

    /**
     * Sets cash2debt_high
     *
     * @param float|null $cash2debt_high Cash to Debt Ratio measures the financial strength of a company. It is calculated as a company's cash, cash equivalents, and marketable securities divide by its debt.
     *
     * @return self
     */
    public function setCash2debtHigh($cash2debt_high)
    {
        if (is_null($cash2debt_high)) {
            throw new \InvalidArgumentException('non-nullable cash2debt_high cannot be null');
        }
        $this->container['cash2debt_high'] = $cash2debt_high;

        return $this;
    }

    /**
     * Gets cash2debt_low
     *
     * @return float|null
     */
    public function getCash2debtLow()
    {
        return $this->container['cash2debt_low'];
    }

    /**
     * Sets cash2debt_low
     *
     * @param float|null $cash2debt_low Cash to Debt Ratio measures the financial strength of a company. It is calculated as a company's cash, cash equivalents, and marketable securities divide by its debt.
     *
     * @return self
     */
    public function setCash2debtLow($cash2debt_low)
    {
        if (is_null($cash2debt_low)) {
            throw new \InvalidArgumentException('non-nullable cash2debt_low cannot be null');
        }
        $this->container['cash2debt_low'] = $cash2debt_low;

        return $this;
    }

    /**
     * Gets cash2debt_med
     *
     * @return float|null
     */
    public function getCash2debtMed()
    {
        return $this->container['cash2debt_med'];
    }

    /**
     * Sets cash2debt_med
     *
     * @param float|null $cash2debt_med Cash to Debt Ratio measures the financial strength of a company. It is calculated as a company's cash, cash equivalents, and marketable securities divide by its debt.
     *
     * @return self
     */
    public function setCash2debtMed($cash2debt_med)
    {
        if (is_null($cash2debt_med)) {
            throw new \InvalidArgumentException('non-nullable cash2debt_med cannot be null');
        }
        $this->container['cash2debt_med'] = $cash2debt_med;

        return $this;
    }

    /**
     * Gets cash_ratio
     *
     * @return float|null
     */
    public function getCashRatio()
    {
        return $this->container['cash_ratio'];
    }

    /**
     * Sets cash_ratio
     *
     * @param float|null $cash_ratio The Cash Ratio measures a company’s ability to meet its short-term obligations with cash and near-cash resources.
     *
     * @return self
     */
    public function setCashRatio($cash_ratio)
    {
        if (is_null($cash_ratio)) {
            throw new \InvalidArgumentException('non-nullable cash_ratio cannot be null');
        }
        $this->container['cash_ratio'] = $cash_ratio;

        return $this;
    }

    /**
     * Gets cash_ratio_high
     *
     * @return float|null
     */
    public function getCashRatioHigh()
    {
        return $this->container['cash_ratio_high'];
    }

    /**
     * Sets cash_ratio_high
     *
     * @param float|null $cash_ratio_high cash_ratio_high
     *
     * @return self
     */
    public function setCashRatioHigh($cash_ratio_high)
    {
        if (is_null($cash_ratio_high)) {
            throw new \InvalidArgumentException('non-nullable cash_ratio_high cannot be null');
        }
        $this->container['cash_ratio_high'] = $cash_ratio_high;

        return $this;
    }

    /**
     * Gets cash_ratio_low
     *
     * @return float|null
     */
    public function getCashRatioLow()
    {
        return $this->container['cash_ratio_low'];
    }

    /**
     * Sets cash_ratio_low
     *
     * @param float|null $cash_ratio_low cash_ratio_low
     *
     * @return self
     */
    public function setCashRatioLow($cash_ratio_low)
    {
        if (is_null($cash_ratio_low)) {
            throw new \InvalidArgumentException('non-nullable cash_ratio_low cannot be null');
        }
        $this->container['cash_ratio_low'] = $cash_ratio_low;

        return $this;
    }

    /**
     * Gets cash_ratio_med
     *
     * @return float|null
     */
    public function getCashRatioMed()
    {
        return $this->container['cash_ratio_med'];
    }

    /**
     * Sets cash_ratio_med
     *
     * @param float|null $cash_ratio_med cash_ratio_med
     *
     * @return self
     */
    public function setCashRatioMed($cash_ratio_med)
    {
        if (is_null($cash_ratio_med)) {
            throw new \InvalidArgumentException('non-nullable cash_ratio_med cannot be null');
        }
        $this->container['cash_ratio_med'] = $cash_ratio_med;

        return $this;
    }

    /**
     * Gets ccc
     *
     * @return float|null
     */
    public function getCcc()
    {
        return $this->container['ccc'];
    }

    /**
     * Sets ccc
     *
     * @param float|null $ccc Cash Conversion Cycle is one of several measures of management effectiveness. It equals Days Sales Outstanding + Days Inventory - Days Payable.
     *
     * @return self
     */
    public function setCcc($ccc)
    {
        if (is_null($ccc)) {
            throw new \InvalidArgumentException('non-nullable ccc cannot be null');
        }
        $this->container['ccc'] = $ccc;

        return $this;
    }

    /**
     * Gets correlation_book
     *
     * @return float|null
     */
    public function getCorrelationBook()
    {
        return $this->container['correlation_book'];
    }

    /**
     * Sets correlation_book
     *
     * @param float|null $correlation_book The Price vs Book Correlation is the correlation coefficient between the stock price and the book value per share over the past five years.
     *
     * @return self
     */
    public function setCorrelationBook($correlation_book)
    {
        if (is_null($correlation_book)) {
            throw new \InvalidArgumentException('non-nullable correlation_book cannot be null');
        }
        $this->container['correlation_book'] = $correlation_book;

        return $this;
    }

    /**
     * Gets correlation_eps_nri
     *
     * @return float|null
     */
    public function getCorrelationEpsNri()
    {
        return $this->container['correlation_eps_nri'];
    }

    /**
     * Sets correlation_eps_nri
     *
     * @param float|null $correlation_eps_nri The Price vs EPS without NRI Correlation is the correlation coefficient between the stock price and the EPS without NRI over the past five years.
     *
     * @return self
     */
    public function setCorrelationEpsNri($correlation_eps_nri)
    {
        if (is_null($correlation_eps_nri)) {
            throw new \InvalidArgumentException('non-nullable correlation_eps_nri cannot be null');
        }
        $this->container['correlation_eps_nri'] = $correlation_eps_nri;

        return $this;
    }

    /**
     * Gets correlation_ev_vs_ebit
     *
     * @return float|null
     */
    public function getCorrelationEvVsEbit()
    {
        return $this->container['correlation_ev_vs_ebit'];
    }

    /**
     * Sets correlation_ev_vs_ebit
     *
     * @param float|null $correlation_ev_vs_ebit correlation_ev_vs_ebit
     *
     * @return self
     */
    public function setCorrelationEvVsEbit($correlation_ev_vs_ebit)
    {
        if (is_null($correlation_ev_vs_ebit)) {
            throw new \InvalidArgumentException('non-nullable correlation_ev_vs_ebit cannot be null');
        }
        $this->container['correlation_ev_vs_ebit'] = $correlation_ev_vs_ebit;

        return $this;
    }

    /**
     * Gets correlation_ev_vs_ebitda
     *
     * @return float|null
     */
    public function getCorrelationEvVsEbitda()
    {
        return $this->container['correlation_ev_vs_ebitda'];
    }

    /**
     * Sets correlation_ev_vs_ebitda
     *
     * @param float|null $correlation_ev_vs_ebitda correlation_ev_vs_ebitda
     *
     * @return self
     */
    public function setCorrelationEvVsEbitda($correlation_ev_vs_ebitda)
    {
        if (is_null($correlation_ev_vs_ebitda)) {
            throw new \InvalidArgumentException('non-nullable correlation_ev_vs_ebitda cannot be null');
        }
        $this->container['correlation_ev_vs_ebitda'] = $correlation_ev_vs_ebitda;

        return $this;
    }

    /**
     * Gets correlation_ev_vs_fcf
     *
     * @return float|null
     */
    public function getCorrelationEvVsFcf()
    {
        return $this->container['correlation_ev_vs_fcf'];
    }

    /**
     * Sets correlation_ev_vs_fcf
     *
     * @param float|null $correlation_ev_vs_fcf correlation_ev_vs_fcf
     *
     * @return self
     */
    public function setCorrelationEvVsFcf($correlation_ev_vs_fcf)
    {
        if (is_null($correlation_ev_vs_fcf)) {
            throw new \InvalidArgumentException('non-nullable correlation_ev_vs_fcf cannot be null');
        }
        $this->container['correlation_ev_vs_fcf'] = $correlation_ev_vs_fcf;

        return $this;
    }

    /**
     * Gets correlation_ev_vs_pretax_income
     *
     * @return float|null
     */
    public function getCorrelationEvVsPretaxIncome()
    {
        return $this->container['correlation_ev_vs_pretax_income'];
    }

    /**
     * Sets correlation_ev_vs_pretax_income
     *
     * @param float|null $correlation_ev_vs_pretax_income correlation_ev_vs_pretax_income
     *
     * @return self
     */
    public function setCorrelationEvVsPretaxIncome($correlation_ev_vs_pretax_income)
    {
        if (is_null($correlation_ev_vs_pretax_income)) {
            throw new \InvalidArgumentException('non-nullable correlation_ev_vs_pretax_income cannot be null');
        }
        $this->container['correlation_ev_vs_pretax_income'] = $correlation_ev_vs_pretax_income;

        return $this;
    }

    /**
     * Gets correlation_ev_vs_rev
     *
     * @return float|null
     */
    public function getCorrelationEvVsRev()
    {
        return $this->container['correlation_ev_vs_rev'];
    }

    /**
     * Sets correlation_ev_vs_rev
     *
     * @param float|null $correlation_ev_vs_rev correlation_ev_vs_rev
     *
     * @return self
     */
    public function setCorrelationEvVsRev($correlation_ev_vs_rev)
    {
        if (is_null($correlation_ev_vs_rev)) {
            throw new \InvalidArgumentException('non-nullable correlation_ev_vs_rev cannot be null');
        }
        $this->container['correlation_ev_vs_rev'] = $correlation_ev_vs_rev;

        return $this;
    }

    /**
     * Gets correlation_ocf
     *
     * @return float|null
     */
    public function getCorrelationOcf()
    {
        return $this->container['correlation_ocf'];
    }

    /**
     * Sets correlation_ocf
     *
     * @param float|null $correlation_ocf The Price vs Operating Cash Flow Correlation is the correlation coefficient between the stock price and the operating cash flow per share over the past five years.
     *
     * @return self
     */
    public function setCorrelationOcf($correlation_ocf)
    {
        if (is_null($correlation_ocf)) {
            throw new \InvalidArgumentException('non-nullable correlation_ocf cannot be null');
        }
        $this->container['correlation_ocf'] = $correlation_ocf;

        return $this;
    }

    /**
     * Gets correlation_rev
     *
     * @return float|null
     */
    public function getCorrelationRev()
    {
        return $this->container['correlation_rev'];
    }

    /**
     * Sets correlation_rev
     *
     * @param float|null $correlation_rev The Price vs Revenue Correlation is the correlation coefficient between the stock price and the revenue per share over the past five years.
     *
     * @return self
     */
    public function setCorrelationRev($correlation_rev)
    {
        if (is_null($correlation_rev)) {
            throw new \InvalidArgumentException('non-nullable correlation_rev cannot be null');
        }
        $this->container['correlation_rev'] = $correlation_rev;

        return $this;
    }

    /**
     * Gets current_ratio
     *
     * @return float|null
     */
    public function getCurrentRatio()
    {
        return $this->container['current_ratio'];
    }

    /**
     * Sets current_ratio
     *
     * @param float|null $current_ratio The current ratio is a liquidity ratio that measures a company's ability to pay short-term obligations. It is calculated as a company's Total Current Assets divides by its Total Current Liabilities.
     *
     * @return self
     */
    public function setCurrentRatio($current_ratio)
    {
        if (is_null($current_ratio)) {
            throw new \InvalidArgumentException('non-nullable current_ratio cannot be null');
        }
        $this->container['current_ratio'] = $current_ratio;

        return $this;
    }

    /**
     * Gets current_ratio_high
     *
     * @return float|null
     */
    public function getCurrentRatioHigh()
    {
        return $this->container['current_ratio_high'];
    }

    /**
     * Sets current_ratio_high
     *
     * @param float|null $current_ratio_high The current ratio is a liquidity ratio that measures a company's ability to pay short-term obligations. It is calculated as a company's Total Current Assets divides by its Total Current Liabilities.
     *
     * @return self
     */
    public function setCurrentRatioHigh($current_ratio_high)
    {
        if (is_null($current_ratio_high)) {
            throw new \InvalidArgumentException('non-nullable current_ratio_high cannot be null');
        }
        $this->container['current_ratio_high'] = $current_ratio_high;

        return $this;
    }

    /**
     * Gets current_ratio_low
     *
     * @return float|null
     */
    public function getCurrentRatioLow()
    {
        return $this->container['current_ratio_low'];
    }

    /**
     * Sets current_ratio_low
     *
     * @param float|null $current_ratio_low The current ratio is a liquidity ratio that measures a company's ability to pay short-term obligations. It is calculated as a company's Total Current Assets divides by its Total Current Liabilities.
     *
     * @return self
     */
    public function setCurrentRatioLow($current_ratio_low)
    {
        if (is_null($current_ratio_low)) {
            throw new \InvalidArgumentException('non-nullable current_ratio_low cannot be null');
        }
        $this->container['current_ratio_low'] = $current_ratio_low;

        return $this;
    }

    /**
     * Gets current_ratio_med
     *
     * @return float|null
     */
    public function getCurrentRatioMed()
    {
        return $this->container['current_ratio_med'];
    }

    /**
     * Sets current_ratio_med
     *
     * @param float|null $current_ratio_med The current ratio is a liquidity ratio that measures a company's ability to pay short-term obligations. It is calculated as a company's Total Current Assets divides by its Total Current Liabilities.
     *
     * @return self
     */
    public function setCurrentRatioMed($current_ratio_med)
    {
        if (is_null($current_ratio_med)) {
            throw new \InvalidArgumentException('non-nullable current_ratio_med cannot be null');
        }
        $this->container['current_ratio_med'] = $current_ratio_med;

        return $this;
    }

    /**
     * Gets daysinventory
     *
     * @return float|null
     */
    public function getDaysinventory()
    {
        return $this->container['daysinventory'];
    }

    /**
     * Sets daysinventory
     *
     * @param float|null $daysinventory The Days Inventory is an efficiency ratio that measures the average number of days the company holds its inventory before selling it. The ratio measures the number of days funds are tied up in inventory. Inventory levels (measured at cost) are divided by sales per day (also measured at cost rather than selling price.)
     *
     * @return self
     */
    public function setDaysinventory($daysinventory)
    {
        if (is_null($daysinventory)) {
            throw new \InvalidArgumentException('non-nullable daysinventory cannot be null');
        }
        $this->container['daysinventory'] = $daysinventory;

        return $this;
    }

    /**
     * Gets daysinventory_high
     *
     * @return float|null
     */
    public function getDaysinventoryHigh()
    {
        return $this->container['daysinventory_high'];
    }

    /**
     * Sets daysinventory_high
     *
     * @param float|null $daysinventory_high The Days Inventory is an efficiency ratio that measures the average number of days the company holds its inventory before selling it. The ratio measures the number of days funds are tied up in inventory. Inventory levels (measured at cost) are divided by sales per day (also measured at cost rather than selling price.)
     *
     * @return self
     */
    public function setDaysinventoryHigh($daysinventory_high)
    {
        if (is_null($daysinventory_high)) {
            throw new \InvalidArgumentException('non-nullable daysinventory_high cannot be null');
        }
        $this->container['daysinventory_high'] = $daysinventory_high;

        return $this;
    }

    /**
     * Gets daysinventory_low
     *
     * @return float|null
     */
    public function getDaysinventoryLow()
    {
        return $this->container['daysinventory_low'];
    }

    /**
     * Sets daysinventory_low
     *
     * @param float|null $daysinventory_low The Days Inventory is an efficiency ratio that measures the average number of days the company holds its inventory before selling it. The ratio measures the number of days funds are tied up in inventory. Inventory levels (measured at cost) are divided by sales per day (also measured at cost rather than selling price.)
     *
     * @return self
     */
    public function setDaysinventoryLow($daysinventory_low)
    {
        if (is_null($daysinventory_low)) {
            throw new \InvalidArgumentException('non-nullable daysinventory_low cannot be null');
        }
        $this->container['daysinventory_low'] = $daysinventory_low;

        return $this;
    }

    /**
     * Gets daysinventory_med
     *
     * @return float|null
     */
    public function getDaysinventoryMed()
    {
        return $this->container['daysinventory_med'];
    }

    /**
     * Sets daysinventory_med
     *
     * @param float|null $daysinventory_med The Days Inventory is an efficiency ratio that measures the average number of days the company holds its inventory before selling it. The ratio measures the number of days funds are tied up in inventory. Inventory levels (measured at cost) are divided by sales per day (also measured at cost rather than selling price.)
     *
     * @return self
     */
    public function setDaysinventoryMed($daysinventory_med)
    {
        if (is_null($daysinventory_med)) {
            throw new \InvalidArgumentException('non-nullable daysinventory_med cannot be null');
        }
        $this->container['daysinventory_med'] = $daysinventory_med;

        return $this;
    }

    /**
     * Gets dayspayable
     *
     * @return float|null
     */
    public function getDayspayable()
    {
        return $this->container['dayspayable'];
    }

    /**
     * Sets dayspayable
     *
     * @param float|null $dayspayable Days payable outstanding (DPO) is an efficiency ratio that measures the average number of days a company takes to pay its suppliers.
     *
     * @return self
     */
    public function setDayspayable($dayspayable)
    {
        if (is_null($dayspayable)) {
            throw new \InvalidArgumentException('non-nullable dayspayable cannot be null');
        }
        $this->container['dayspayable'] = $dayspayable;

        return $this;
    }

    /**
     * Gets dayspayable_high
     *
     * @return float|null
     */
    public function getDayspayableHigh()
    {
        return $this->container['dayspayable_high'];
    }

    /**
     * Sets dayspayable_high
     *
     * @param float|null $dayspayable_high Days payable outstanding (DPO) is an efficiency ratio that measures the average number of days a company takes to pay its suppliers.
     *
     * @return self
     */
    public function setDayspayableHigh($dayspayable_high)
    {
        if (is_null($dayspayable_high)) {
            throw new \InvalidArgumentException('non-nullable dayspayable_high cannot be null');
        }
        $this->container['dayspayable_high'] = $dayspayable_high;

        return $this;
    }

    /**
     * Gets dayspayable_low
     *
     * @return float|null
     */
    public function getDayspayableLow()
    {
        return $this->container['dayspayable_low'];
    }

    /**
     * Sets dayspayable_low
     *
     * @param float|null $dayspayable_low Days payable outstanding (DPO) is an efficiency ratio that measures the average number of days a company takes to pay its suppliers.
     *
     * @return self
     */
    public function setDayspayableLow($dayspayable_low)
    {
        if (is_null($dayspayable_low)) {
            throw new \InvalidArgumentException('non-nullable dayspayable_low cannot be null');
        }
        $this->container['dayspayable_low'] = $dayspayable_low;

        return $this;
    }

    /**
     * Gets dayspayable_med
     *
     * @return float|null
     */
    public function getDayspayableMed()
    {
        return $this->container['dayspayable_med'];
    }

    /**
     * Sets dayspayable_med
     *
     * @param float|null $dayspayable_med Days payable outstanding (DPO) is an efficiency ratio that measures the average number of days a company takes to pay its suppliers.
     *
     * @return self
     */
    public function setDayspayableMed($dayspayable_med)
    {
        if (is_null($dayspayable_med)) {
            throw new \InvalidArgumentException('non-nullable dayspayable_med cannot be null');
        }
        $this->container['dayspayable_med'] = $dayspayable_med;

        return $this;
    }

    /**
     * Gets dayssalesoutstand
     *
     * @return float|null
     */
    public function getDayssalesoutstand()
    {
        return $this->container['dayssalesoutstand'];
    }

    /**
     * Sets dayssalesoutstand
     *
     * @param float|null $dayssalesoutstand Days sales outstanding (DSO) is a measure of the average number of days that it takes a company to collect payment after a sale has been made.
     *
     * @return self
     */
    public function setDayssalesoutstand($dayssalesoutstand)
    {
        if (is_null($dayssalesoutstand)) {
            throw new \InvalidArgumentException('non-nullable dayssalesoutstand cannot be null');
        }
        $this->container['dayssalesoutstand'] = $dayssalesoutstand;

        return $this;
    }

    /**
     * Gets dayssalesoutstand_high
     *
     * @return float|null
     */
    public function getDayssalesoutstandHigh()
    {
        return $this->container['dayssalesoutstand_high'];
    }

    /**
     * Sets dayssalesoutstand_high
     *
     * @param float|null $dayssalesoutstand_high Days sales outstanding (DSO) is a measure of the average number of days that it takes a company to collect payment after a sale has been made.
     *
     * @return self
     */
    public function setDayssalesoutstandHigh($dayssalesoutstand_high)
    {
        if (is_null($dayssalesoutstand_high)) {
            throw new \InvalidArgumentException('non-nullable dayssalesoutstand_high cannot be null');
        }
        $this->container['dayssalesoutstand_high'] = $dayssalesoutstand_high;

        return $this;
    }

    /**
     * Gets dayssalesoutstand_low
     *
     * @return float|null
     */
    public function getDayssalesoutstandLow()
    {
        return $this->container['dayssalesoutstand_low'];
    }

    /**
     * Sets dayssalesoutstand_low
     *
     * @param float|null $dayssalesoutstand_low Days sales outstanding (DSO) is a measure of the average number of days that it takes a company to collect payment after a sale has been made.
     *
     * @return self
     */
    public function setDayssalesoutstandLow($dayssalesoutstand_low)
    {
        if (is_null($dayssalesoutstand_low)) {
            throw new \InvalidArgumentException('non-nullable dayssalesoutstand_low cannot be null');
        }
        $this->container['dayssalesoutstand_low'] = $dayssalesoutstand_low;

        return $this;
    }

    /**
     * Gets dayssalesoutstand_med
     *
     * @return float|null
     */
    public function getDayssalesoutstandMed()
    {
        return $this->container['dayssalesoutstand_med'];
    }

    /**
     * Sets dayssalesoutstand_med
     *
     * @param float|null $dayssalesoutstand_med Days sales outstanding (DSO) is a measure of the average number of days that it takes a company to collect payment after a sale has been made.
     *
     * @return self
     */
    public function setDayssalesoutstandMed($dayssalesoutstand_med)
    {
        if (is_null($dayssalesoutstand_med)) {
            throw new \InvalidArgumentException('non-nullable dayssalesoutstand_med cannot be null');
        }
        $this->container['dayssalesoutstand_med'] = $dayssalesoutstand_med;

        return $this;
    }

    /**
     * Gets debt2asset
     *
     * @return float|null
     */
    public function getDebt2asset()
    {
        return $this->container['debt2asset'];
    }

    /**
     * Sets debt2asset
     *
     * @param float|null $debt2asset Debt to assets is a leverage ratio that defines the total amount of debt relative to assets
     *
     * @return self
     */
    public function setDebt2asset($debt2asset)
    {
        if (is_null($debt2asset)) {
            throw new \InvalidArgumentException('non-nullable debt2asset cannot be null');
        }
        $this->container['debt2asset'] = $debt2asset;

        return $this;
    }

    /**
     * Gets debt2ebitda
     *
     * @return float|null
     */
    public function getDebt2ebitda()
    {
        return $this->container['debt2ebitda'];
    }

    /**
     * Sets debt2ebitda
     *
     * @param float|null $debt2ebitda Debt-to-EBITDA measures a company's ability to pay off its debt.
     *
     * @return self
     */
    public function setDebt2ebitda($debt2ebitda)
    {
        if (is_null($debt2ebitda)) {
            throw new \InvalidArgumentException('non-nullable debt2ebitda cannot be null');
        }
        $this->container['debt2ebitda'] = $debt2ebitda;

        return $this;
    }

    /**
     * Gets debt2ebitda_high
     *
     * @return float|null
     */
    public function getDebt2ebitdaHigh()
    {
        return $this->container['debt2ebitda_high'];
    }

    /**
     * Sets debt2ebitda_high
     *
     * @param float|null $debt2ebitda_high Debt-to-EBITDA measures a company's ability to pay off its debt.
     *
     * @return self
     */
    public function setDebt2ebitdaHigh($debt2ebitda_high)
    {
        if (is_null($debt2ebitda_high)) {
            throw new \InvalidArgumentException('non-nullable debt2ebitda_high cannot be null');
        }
        $this->container['debt2ebitda_high'] = $debt2ebitda_high;

        return $this;
    }

    /**
     * Gets debt2ebitda_low
     *
     * @return float|null
     */
    public function getDebt2ebitdaLow()
    {
        return $this->container['debt2ebitda_low'];
    }

    /**
     * Sets debt2ebitda_low
     *
     * @param float|null $debt2ebitda_low Debt-to-EBITDA measures a company's ability to pay off its debt.
     *
     * @return self
     */
    public function setDebt2ebitdaLow($debt2ebitda_low)
    {
        if (is_null($debt2ebitda_low)) {
            throw new \InvalidArgumentException('non-nullable debt2ebitda_low cannot be null');
        }
        $this->container['debt2ebitda_low'] = $debt2ebitda_low;

        return $this;
    }

    /**
     * Gets debt2ebitda_med
     *
     * @return float|null
     */
    public function getDebt2ebitdaMed()
    {
        return $this->container['debt2ebitda_med'];
    }

    /**
     * Sets debt2ebitda_med
     *
     * @param float|null $debt2ebitda_med Debt-to-EBITDA measures a company's ability to pay off its debt.
     *
     * @return self
     */
    public function setDebt2ebitdaMed($debt2ebitda_med)
    {
        if (is_null($debt2ebitda_med)) {
            throw new \InvalidArgumentException('non-nullable debt2ebitda_med cannot be null');
        }
        $this->container['debt2ebitda_med'] = $debt2ebitda_med;

        return $this;
    }

    /**
     * Gets debt2equity
     *
     * @return float|null
     */
    public function getDebt2equity()
    {
        return $this->container['debt2equity'];
    }

    /**
     * Sets debt2equity
     *
     * @param float|null $debt2equity The Debt/Equity (D/E) Ratio is calculated by dividing a company’s total liabilities by its shareholder equity. The ratio is used to evaluate a company's financial leverage.
     *
     * @return self
     */
    public function setDebt2equity($debt2equity)
    {
        if (is_null($debt2equity)) {
            throw new \InvalidArgumentException('non-nullable debt2equity cannot be null');
        }
        $this->container['debt2equity'] = $debt2equity;

        return $this;
    }

    /**
     * Gets debt2equity_high
     *
     * @return float|null
     */
    public function getDebt2equityHigh()
    {
        return $this->container['debt2equity_high'];
    }

    /**
     * Sets debt2equity_high
     *
     * @param float|null $debt2equity_high The Debt/Equity (D/E) Ratio is calculated by dividing a company’s total liabilities by its shareholder equity. The ratio is used to evaluate a company's financial leverage.
     *
     * @return self
     */
    public function setDebt2equityHigh($debt2equity_high)
    {
        if (is_null($debt2equity_high)) {
            throw new \InvalidArgumentException('non-nullable debt2equity_high cannot be null');
        }
        $this->container['debt2equity_high'] = $debt2equity_high;

        return $this;
    }

    /**
     * Gets debt2equity_low
     *
     * @return float|null
     */
    public function getDebt2equityLow()
    {
        return $this->container['debt2equity_low'];
    }

    /**
     * Sets debt2equity_low
     *
     * @param float|null $debt2equity_low The Debt/Equity (D/E) Ratio is calculated by dividing a company’s total liabilities by its shareholder equity. The ratio is used to evaluate a company's financial leverage.
     *
     * @return self
     */
    public function setDebt2equityLow($debt2equity_low)
    {
        if (is_null($debt2equity_low)) {
            throw new \InvalidArgumentException('non-nullable debt2equity_low cannot be null');
        }
        $this->container['debt2equity_low'] = $debt2equity_low;

        return $this;
    }

    /**
     * Gets debt2equity_med
     *
     * @return float|null
     */
    public function getDebt2equityMed()
    {
        return $this->container['debt2equity_med'];
    }

    /**
     * Sets debt2equity_med
     *
     * @param float|null $debt2equity_med The Debt/Equity (D/E) Ratio is calculated by dividing a company’s total liabilities by its shareholder equity. The ratio is used to evaluate a company's financial leverage.
     *
     * @return self
     */
    public function setDebt2equityMed($debt2equity_med)
    {
        if (is_null($debt2equity_med)) {
            throw new \InvalidArgumentException('non-nullable debt2equity_med cannot be null');
        }
        $this->container['debt2equity_med'] = $debt2equity_med;

        return $this;
    }

    /**
     * Gets debt2rev
     *
     * @return float|null
     */
    public function getDebt2rev()
    {
        return $this->container['debt2rev'];
    }

    /**
     * Sets debt2rev
     *
     * @param float|null $debt2rev The ratio of long-term debt to revenue
     *
     * @return self
     */
    public function setDebt2rev($debt2rev)
    {
        if (is_null($debt2rev)) {
            throw new \InvalidArgumentException('non-nullable debt2rev cannot be null');
        }
        $this->container['debt2rev'] = $debt2rev;

        return $this;
    }

    /**
     * Gets eps
     *
     * @return float|null
     */
    public function getEps()
    {
        return $this->container['eps'];
    }

    /**
     * Sets eps
     *
     * @param float|null $eps Earnings per share (EPS) is the portion of a company's profit allocated to each share of common stock.
     *
     * @return self
     */
    public function setEps($eps)
    {
        if (is_null($eps)) {
            throw new \InvalidArgumentException('non-nullable eps cannot be null');
        }
        $this->container['eps'] = $eps;

        return $this;
    }

    /**
     * Gets eps_latest_q
     *
     * @return float|null
     */
    public function getEpsLatestQ()
    {
        return $this->container['eps_latest_q'];
    }

    /**
     * Sets eps_latest_q
     *
     * @param float|null $eps_latest_q eps_latest_q
     *
     * @return self
     */
    public function setEpsLatestQ($eps_latest_q)
    {
        if (is_null($eps_latest_q)) {
            throw new \InvalidArgumentException('non-nullable eps_latest_q cannot be null');
        }
        $this->container['eps_latest_q'] = $eps_latest_q;

        return $this;
    }

    /**
     * Gets eps_nri
     *
     * @return float|null
     */
    public function getEpsNri()
    {
        return $this->container['eps_nri'];
    }

    /**
     * Sets eps_nri
     *
     * @param float|null $eps_nri Earnings Per Share (EPS) is the single most important variable used by Wall Street in determining the earnings power of a company. But investors need to be aware that Earnings per Share can be easily manipulated by adjusting depreciation and amortization rate or non-recurring items. That's why GuruFocus lists Earnings per share without Non-Recurring Items, which better reflects the company's underlying performance.    Earnings Per Share without Non-Recurring Items is the amount of earnings without non-recurring items per outstanding share of the company&#146;s stock. In calculating earnings per share without non-recurring items, the dividends of preferred stocks and non-recurring items need to subtracted from the total net income first.
     *
     * @return self
     */
    public function setEpsNri($eps_nri)
    {
        if (is_null($eps_nri)) {
            throw new \InvalidArgumentException('non-nullable eps_nri cannot be null');
        }
        $this->container['eps_nri'] = $eps_nri;

        return $this;
    }

    /**
     * Gets equity2asset
     *
     * @return float|null
     */
    public function getEquity2asset()
    {
        return $this->container['equity2asset'];
    }

    /**
     * Sets equity2asset
     *
     * @param float|null $equity2asset Equity to Asset ratio is calculated as shareholder's tangible equity divided by its total asset.
     *
     * @return self
     */
    public function setEquity2asset($equity2asset)
    {
        if (is_null($equity2asset)) {
            throw new \InvalidArgumentException('non-nullable equity2asset cannot be null');
        }
        $this->container['equity2asset'] = $equity2asset;

        return $this;
    }

    /**
     * Gets equity2asset_high
     *
     * @return float|null
     */
    public function getEquity2assetHigh()
    {
        return $this->container['equity2asset_high'];
    }

    /**
     * Sets equity2asset_high
     *
     * @param float|null $equity2asset_high Equity to Asset ratio is calculated as shareholder's tangible equity divided by its total asset.
     *
     * @return self
     */
    public function setEquity2assetHigh($equity2asset_high)
    {
        if (is_null($equity2asset_high)) {
            throw new \InvalidArgumentException('non-nullable equity2asset_high cannot be null');
        }
        $this->container['equity2asset_high'] = $equity2asset_high;

        return $this;
    }

    /**
     * Gets equity2asset_low
     *
     * @return float|null
     */
    public function getEquity2assetLow()
    {
        return $this->container['equity2asset_low'];
    }

    /**
     * Sets equity2asset_low
     *
     * @param float|null $equity2asset_low Equity to Asset ratio is calculated as shareholder's tangible equity divided by its total asset.
     *
     * @return self
     */
    public function setEquity2assetLow($equity2asset_low)
    {
        if (is_null($equity2asset_low)) {
            throw new \InvalidArgumentException('non-nullable equity2asset_low cannot be null');
        }
        $this->container['equity2asset_low'] = $equity2asset_low;

        return $this;
    }

    /**
     * Gets equity2asset_med
     *
     * @return float|null
     */
    public function getEquity2assetMed()
    {
        return $this->container['equity2asset_med'];
    }

    /**
     * Sets equity2asset_med
     *
     * @param float|null $equity2asset_med Equity to Asset ratio is calculated as shareholder's tangible equity divided by its total asset.
     *
     * @return self
     */
    public function setEquity2assetMed($equity2asset_med)
    {
        if (is_null($equity2asset_med)) {
            throw new \InvalidArgumentException('non-nullable equity2asset_med cannot be null');
        }
        $this->container['equity2asset_med'] = $equity2asset_med;

        return $this;
    }

    /**
     * Gets ev_morn
     *
     * @return float|null
     */
    public function getEvMorn()
    {
        return $this->container['ev_morn'];
    }

    /**
     * Sets ev_morn
     *
     * @param float|null $ev_morn Enterprise Value is calculated as the market cap plus debt and minority interest and preferred shares, minus total cash, cash equivalents, and marketable securities.
     *
     * @return self
     */
    public function setEvMorn($ev_morn)
    {
        if (is_null($ev_morn)) {
            throw new \InvalidArgumentException('non-nullable ev_morn cannot be null');
        }
        $this->container['ev_morn'] = $ev_morn;

        return $this;
    }

    /**
     * Gets ev_morn_norm
     *
     * @return float|null
     */
    public function getEvMornNorm()
    {
        return $this->container['ev_morn_norm'];
    }

    /**
     * Sets ev_morn_norm
     *
     * @param float|null $ev_morn_norm Enterprise Value is calculated as the market cap plus debt and minority interest and preferred shares, minus total cash, cash equivalents, and marketable securities.
     *
     * @return self
     */
    public function setEvMornNorm($ev_morn_norm)
    {
        if (is_null($ev_morn_norm)) {
            throw new \InvalidArgumentException('non-nullable ev_morn_norm cannot be null');
        }
        $this->container['ev_morn_norm'] = $ev_morn_norm;

        return $this;
    }

    /**
     * Gets fscore
     *
     * @return float|null
     */
    public function getFscore()
    {
        return $this->container['fscore'];
    }

    /**
     * Sets fscore
     *
     * @param float|null $fscore Piotroski F-Score is a number between 0-9 which is used to assess strength of company's financial position.
     *
     * @return self
     */
    public function setFscore($fscore)
    {
        if (is_null($fscore)) {
            throw new \InvalidArgumentException('non-nullable fscore cannot be null');
        }
        $this->container['fscore'] = $fscore;

        return $this;
    }

    /**
     * Gets fscore_high
     *
     * @return float|null
     */
    public function getFscoreHigh()
    {
        return $this->container['fscore_high'];
    }

    /**
     * Sets fscore_high
     *
     * @param float|null $fscore_high Piotroski F-Score is a number between 0-9 which is used to assess strength of company's financial position.
     *
     * @return self
     */
    public function setFscoreHigh($fscore_high)
    {
        if (is_null($fscore_high)) {
            throw new \InvalidArgumentException('non-nullable fscore_high cannot be null');
        }
        $this->container['fscore_high'] = $fscore_high;

        return $this;
    }

    /**
     * Gets fscore_low
     *
     * @return float|null
     */
    public function getFscoreLow()
    {
        return $this->container['fscore_low'];
    }

    /**
     * Sets fscore_low
     *
     * @param float|null $fscore_low Piotroski F-Score is a number between 0-9 which is used to assess strength of company's financial position.
     *
     * @return self
     */
    public function setFscoreLow($fscore_low)
    {
        if (is_null($fscore_low)) {
            throw new \InvalidArgumentException('non-nullable fscore_low cannot be null');
        }
        $this->container['fscore_low'] = $fscore_low;

        return $this;
    }

    /**
     * Gets fscore_med
     *
     * @return float|null
     */
    public function getFscoreMed()
    {
        return $this->container['fscore_med'];
    }

    /**
     * Sets fscore_med
     *
     * @param float|null $fscore_med Piotroski F-Score is a number between 0-9 which is used to assess strength of company's financial position.
     *
     * @return self
     */
    public function setFscoreMed($fscore_med)
    {
        if (is_null($fscore_med)) {
            throw new \InvalidArgumentException('non-nullable fscore_med cannot be null');
        }
        $this->container['fscore_med'] = $fscore_med;

        return $this;
    }

    /**
     * Gets goodwill2asset
     *
     * @return float|null
     */
    public function getGoodwill2asset()
    {
        return $this->container['goodwill2asset'];
    }

    /**
     * Sets goodwill2asset
     *
     * @param float|null $goodwill2asset It is a ratio that measures how much goodwill a company is recording compared to the total level of its assets.
     *
     * @return self
     */
    public function setGoodwill2asset($goodwill2asset)
    {
        if (is_null($goodwill2asset)) {
            throw new \InvalidArgumentException('non-nullable goodwill2asset cannot be null');
        }
        $this->container['goodwill2asset'] = $goodwill2asset;

        return $this;
    }

    /**
     * Gets grossprofit
     *
     * @return float|null
     */
    public function getGrossprofit()
    {
        return $this->container['grossprofit'];
    }

    /**
     * Sets grossprofit
     *
     * @param float|null $grossprofit The gross profit over the trailing 12 months
     *
     * @return self
     */
    public function setGrossprofit($grossprofit)
    {
        if (is_null($grossprofit)) {
            throw new \InvalidArgumentException('non-nullable grossprofit cannot be null');
        }
        $this->container['grossprofit'] = $grossprofit;

        return $this;
    }

    /**
     * Gets grossprofit2asset
     *
     * @return float|null
     */
    public function getGrossprofit2asset()
    {
        return $this->container['grossprofit2asset'];
    }

    /**
     * Sets grossprofit2asset
     *
     * @param float|null $grossprofit2asset The ratio of a company's gross profit to total assets
     *
     * @return self
     */
    public function setGrossprofit2asset($grossprofit2asset)
    {
        if (is_null($grossprofit2asset)) {
            throw new \InvalidArgumentException('non-nullable grossprofit2asset cannot be null');
        }
        $this->container['grossprofit2asset'] = $grossprofit2asset;

        return $this;
    }

    /**
     * Gets grossprofit2tangibleasset
     *
     * @return float|null
     */
    public function getGrossprofit2tangibleasset()
    {
        return $this->container['grossprofit2tangibleasset'];
    }

    /**
     * Sets grossprofit2tangibleasset
     *
     * @param float|null $grossprofit2tangibleasset The ratio of a company's gross profit to tangible assets
     *
     * @return self
     */
    public function setGrossprofit2tangibleasset($grossprofit2tangibleasset)
    {
        if (is_null($grossprofit2tangibleasset)) {
            throw new \InvalidArgumentException('non-nullable grossprofit2tangibleasset cannot be null');
        }
        $this->container['grossprofit2tangibleasset'] = $grossprofit2tangibleasset;

        return $this;
    }

    /**
     * Gets insider_ownership
     *
     * @return float|null
     */
    public function getInsiderOwnership()
    {
        return $this->container['insider_ownership'];
    }

    /**
     * Sets insider_ownership
     *
     * @param float|null $insider_ownership Insider ownership is the percentage of shares that are owned by company insiders relative to the total shares outstanding.
     *
     * @return self
     */
    public function setInsiderOwnership($insider_ownership)
    {
        if (is_null($insider_ownership)) {
            throw new \InvalidArgumentException('non-nullable insider_ownership cannot be null');
        }
        $this->container['insider_ownership'] = $insider_ownership;

        return $this;
    }

    /**
     * Gets inst_ownership
     *
     * @return float|null
     */
    public function getInstOwnership()
    {
        return $this->container['inst_ownership'];
    }

    /**
     * Sets inst_ownership
     *
     * @param float|null $inst_ownership Institutional ownership is the percentage of shares that are owned by institutions out of the total shares outstanding.
     *
     * @return self
     */
    public function setInstOwnership($inst_ownership)
    {
        if (is_null($inst_ownership)) {
            throw new \InvalidArgumentException('non-nullable inst_ownership cannot be null');
        }
        $this->container['inst_ownership'] = $inst_ownership;

        return $this;
    }

    /**
     * Gets interest_coverage
     *
     * @return float|null
     */
    public function getInterestCoverage()
    {
        return $this->container['interest_coverage'];
    }

    /**
     * Sets interest_coverage
     *
     * @param float|null $interest_coverage Interest Coverage is a ratio that determines how easily a company can pay interest expenses on outstanding debt.
     *
     * @return self
     */
    public function setInterestCoverage($interest_coverage)
    {
        if (is_null($interest_coverage)) {
            throw new \InvalidArgumentException('non-nullable interest_coverage cannot be null');
        }
        $this->container['interest_coverage'] = $interest_coverage;

        return $this;
    }

    /**
     * Gets interest_coverage_high
     *
     * @return float|null
     */
    public function getInterestCoverageHigh()
    {
        return $this->container['interest_coverage_high'];
    }

    /**
     * Sets interest_coverage_high
     *
     * @param float|null $interest_coverage_high Interest Coverage is a ratio that determines how easily a company can pay interest expenses on outstanding debt.
     *
     * @return self
     */
    public function setInterestCoverageHigh($interest_coverage_high)
    {
        if (is_null($interest_coverage_high)) {
            throw new \InvalidArgumentException('non-nullable interest_coverage_high cannot be null');
        }
        $this->container['interest_coverage_high'] = $interest_coverage_high;

        return $this;
    }

    /**
     * Gets interest_coverage_low
     *
     * @return float|null
     */
    public function getInterestCoverageLow()
    {
        return $this->container['interest_coverage_low'];
    }

    /**
     * Sets interest_coverage_low
     *
     * @param float|null $interest_coverage_low Interest Coverage is a ratio that determines how easily a company can pay interest expenses on outstanding debt.
     *
     * @return self
     */
    public function setInterestCoverageLow($interest_coverage_low)
    {
        if (is_null($interest_coverage_low)) {
            throw new \InvalidArgumentException('non-nullable interest_coverage_low cannot be null');
        }
        $this->container['interest_coverage_low'] = $interest_coverage_low;

        return $this;
    }

    /**
     * Gets interest_coverage_med
     *
     * @return float|null
     */
    public function getInterestCoverageMed()
    {
        return $this->container['interest_coverage_med'];
    }

    /**
     * Sets interest_coverage_med
     *
     * @param float|null $interest_coverage_med Interest Coverage is a ratio that determines how easily a company can pay interest expenses on outstanding debt.
     *
     * @return self
     */
    public function setInterestCoverageMed($interest_coverage_med)
    {
        if (is_null($interest_coverage_med)) {
            throw new \InvalidArgumentException('non-nullable interest_coverage_med cannot be null');
        }
        $this->container['interest_coverage_med'] = $interest_coverage_med;

        return $this;
    }

    /**
     * Gets inventory2sales
     *
     * @return float|null
     */
    public function getInventory2sales()
    {
        return $this->container['inventory2sales'];
    }

    /**
     * Sets inventory2sales
     *
     * @param float|null $inventory2sales The ratio of total inventory to total revenues
     *
     * @return self
     */
    public function setInventory2sales($inventory2sales)
    {
        if (is_null($inventory2sales)) {
            throw new \InvalidArgumentException('non-nullable inventory2sales cannot be null');
        }
        $this->container['inventory2sales'] = $inventory2sales;

        return $this;
    }

    /**
     * Gets inventory_turnover
     *
     * @return float|null
     */
    public function getInventoryTurnover()
    {
        return $this->container['inventory_turnover'];
    }

    /**
     * Sets inventory_turnover
     *
     * @param float|null $inventory_turnover The ratio of cost of goods sold to total inventories
     *
     * @return self
     */
    public function setInventoryTurnover($inventory_turnover)
    {
        if (is_null($inventory_turnover)) {
            throw new \InvalidArgumentException('non-nullable inventory_turnover cannot be null');
        }
        $this->container['inventory_turnover'] = $inventory_turnover;

        return $this;
    }

    /**
     * Gets latest_earnings_release_date
     *
     * @return string|null
     */
    public function getLatestEarningsReleaseDate()
    {
        return $this->container['latest_earnings_release_date'];
    }

    /**
     * Sets latest_earnings_release_date
     *
     * @param string|null $latest_earnings_release_date latest_earnings_release_date
     *
     * @return self
     */
    public function setLatestEarningsReleaseDate($latest_earnings_release_date)
    {
        if (is_null($latest_earnings_release_date)) {
            throw new \InvalidArgumentException('non-nullable latest_earnings_release_date cannot be null');
        }
        $this->container['latest_earnings_release_date'] = $latest_earnings_release_date;

        return $this;
    }

    /**
     * Gets liabilities_to_assets
     *
     * @return float|null
     */
    public function getLiabilitiesToAssets()
    {
        return $this->container['liabilities_to_assets'];
    }

    /**
     * Sets liabilities_to_assets
     *
     * @param float|null $liabilities_to_assets liabilities_to_assets
     *
     * @return self
     */
    public function setLiabilitiesToAssets($liabilities_to_assets)
    {
        if (is_null($liabilities_to_assets)) {
            throw new \InvalidArgumentException('non-nullable liabilities_to_assets cannot be null');
        }
        $this->container['liabilities_to_assets'] = $liabilities_to_assets;

        return $this;
    }

    /**
     * Gets mktcap
     *
     * @return float|null
     */
    public function getMktcap()
    {
        return $this->container['mktcap'];
    }

    /**
     * Sets mktcap
     *
     * @param float|null $mktcap Market cap is the short version of market capitalization. It is the total market value to buy the whole company. It is equal to the share price times the number of shares outstanding.
     *
     * @return self
     */
    public function setMktcap($mktcap)
    {
        if (is_null($mktcap)) {
            throw new \InvalidArgumentException('non-nullable mktcap cannot be null');
        }
        $this->container['mktcap'] = $mktcap;

        return $this;
    }

    /**
     * Gets mktcap_norm
     *
     * @return float|null
     */
    public function getMktcapNorm()
    {
        return $this->container['mktcap_norm'];
    }

    /**
     * Sets mktcap_norm
     *
     * @param float|null $mktcap_norm Market cap is the total market value to buy the whole company. It is equal to the share price times the number of Shares Outstanding (EOP).
     *
     * @return self
     */
    public function setMktcapNorm($mktcap_norm)
    {
        if (is_null($mktcap_norm)) {
            throw new \InvalidArgumentException('non-nullable mktcap_norm cannot be null');
        }
        $this->container['mktcap_norm'] = $mktcap_norm;

        return $this;
    }

    /**
     * Gets mscore
     *
     * @return float|null
     */
    public function getMscore()
    {
        return $this->container['mscore'];
    }

    /**
     * Sets mscore
     *
     * @param float|null $mscore Beneish's M-Score is a mathematical model that uses eight financial ratios weighted by coefficients to identify whether a company has manipulated its profits.
     *
     * @return self
     */
    public function setMscore($mscore)
    {
        if (is_null($mscore)) {
            throw new \InvalidArgumentException('non-nullable mscore cannot be null');
        }
        $this->container['mscore'] = $mscore;

        return $this;
    }

    /**
     * Gets mscore_high
     *
     * @return float|null
     */
    public function getMscoreHigh()
    {
        return $this->container['mscore_high'];
    }

    /**
     * Sets mscore_high
     *
     * @param float|null $mscore_high Beneish's M-Score is a mathematical model that uses eight financial ratios weighted by coefficients to identify whether a company has manipulated its profits.
     *
     * @return self
     */
    public function setMscoreHigh($mscore_high)
    {
        if (is_null($mscore_high)) {
            throw new \InvalidArgumentException('non-nullable mscore_high cannot be null');
        }
        $this->container['mscore_high'] = $mscore_high;

        return $this;
    }

    /**
     * Gets mscore_low
     *
     * @return float|null
     */
    public function getMscoreLow()
    {
        return $this->container['mscore_low'];
    }

    /**
     * Sets mscore_low
     *
     * @param float|null $mscore_low Beneish's M-Score is a mathematical model that uses eight financial ratios weighted by coefficients to identify whether a company has manipulated its profits.
     *
     * @return self
     */
    public function setMscoreLow($mscore_low)
    {
        if (is_null($mscore_low)) {
            throw new \InvalidArgumentException('non-nullable mscore_low cannot be null');
        }
        $this->container['mscore_low'] = $mscore_low;

        return $this;
    }

    /**
     * Gets mscore_med
     *
     * @return float|null
     */
    public function getMscoreMed()
    {
        return $this->container['mscore_med'];
    }

    /**
     * Sets mscore_med
     *
     * @param float|null $mscore_med Beneish's M-Score is a mathematical model that uses eight financial ratios weighted by coefficients to identify whether a company has manipulated its profits.
     *
     * @return self
     */
    public function setMscoreMed($mscore_med)
    {
        if (is_null($mscore_med)) {
            throw new \InvalidArgumentException('non-nullable mscore_med cannot be null');
        }
        $this->container['mscore_med'] = $mscore_med;

        return $this;
    }

    /**
     * Gets net_debt_paydown_yield
     *
     * @return float|null
     */
    public function getNetDebtPaydownYield()
    {
        return $this->container['net_debt_paydown_yield'];
    }

    /**
     * Sets net_debt_paydown_yield
     *
     * @param float|null $net_debt_paydown_yield Net Debt Paydown Yield is a metric that evaluates the total amount of debt a company has paid in relation to its market capitalization. This metric provides insight into a company's willingness and ability to reduce its debt.
     *
     * @return self
     */
    public function setNetDebtPaydownYield($net_debt_paydown_yield)
    {
        if (is_null($net_debt_paydown_yield)) {
            throw new \InvalidArgumentException('non-nullable net_debt_paydown_yield cannot be null');
        }
        $this->container['net_debt_paydown_yield'] = $net_debt_paydown_yield;

        return $this;
    }

    /**
     * Gets net_debt_paydown_yield_high
     *
     * @return float|null
     */
    public function getNetDebtPaydownYieldHigh()
    {
        return $this->container['net_debt_paydown_yield_high'];
    }

    /**
     * Sets net_debt_paydown_yield_high
     *
     * @param float|null $net_debt_paydown_yield_high net_debt_paydown_yield_high
     *
     * @return self
     */
    public function setNetDebtPaydownYieldHigh($net_debt_paydown_yield_high)
    {
        if (is_null($net_debt_paydown_yield_high)) {
            throw new \InvalidArgumentException('non-nullable net_debt_paydown_yield_high cannot be null');
        }
        $this->container['net_debt_paydown_yield_high'] = $net_debt_paydown_yield_high;

        return $this;
    }

    /**
     * Gets net_debt_paydown_yield_low
     *
     * @return float|null
     */
    public function getNetDebtPaydownYieldLow()
    {
        return $this->container['net_debt_paydown_yield_low'];
    }

    /**
     * Sets net_debt_paydown_yield_low
     *
     * @param float|null $net_debt_paydown_yield_low net_debt_paydown_yield_low
     *
     * @return self
     */
    public function setNetDebtPaydownYieldLow($net_debt_paydown_yield_low)
    {
        if (is_null($net_debt_paydown_yield_low)) {
            throw new \InvalidArgumentException('non-nullable net_debt_paydown_yield_low cannot be null');
        }
        $this->container['net_debt_paydown_yield_low'] = $net_debt_paydown_yield_low;

        return $this;
    }

    /**
     * Gets net_debt_paydown_yield_med
     *
     * @return float|null
     */
    public function getNetDebtPaydownYieldMed()
    {
        return $this->container['net_debt_paydown_yield_med'];
    }

    /**
     * Sets net_debt_paydown_yield_med
     *
     * @param float|null $net_debt_paydown_yield_med net_debt_paydown_yield_med
     *
     * @return self
     */
    public function setNetDebtPaydownYieldMed($net_debt_paydown_yield_med)
    {
        if (is_null($net_debt_paydown_yield_med)) {
            throw new \InvalidArgumentException('non-nullable net_debt_paydown_yield_med cannot be null');
        }
        $this->container['net_debt_paydown_yield_med'] = $net_debt_paydown_yield_med;

        return $this;
    }

    /**
     * Gets next_earnings_date
     *
     * @return string|null
     */
    public function getNextEarningsDate()
    {
        return $this->container['next_earnings_date'];
    }

    /**
     * Sets next_earnings_date
     *
     * @param string|null $next_earnings_date The next day a company releases its earnings
     *
     * @return self
     */
    public function setNextEarningsDate($next_earnings_date)
    {
        if (is_null($next_earnings_date)) {
            throw new \InvalidArgumentException('non-nullable next_earnings_date cannot be null');
        }
        $this->container['next_earnings_date'] = $next_earnings_date;

        return $this;
    }

    /**
     * Gets num_good_signs
     *
     * @return float|null
     */
    public function getNumGoodSigns()
    {
        return $this->container['num_good_signs'];
    }

    /**
     * Sets num_good_signs
     *
     * @param float|null $num_good_signs The number of positive investing signs
     *
     * @return self
     */
    public function setNumGoodSigns($num_good_signs)
    {
        if (is_null($num_good_signs)) {
            throw new \InvalidArgumentException('non-nullable num_good_signs cannot be null');
        }
        $this->container['num_good_signs'] = $num_good_signs;

        return $this;
    }

    /**
     * Gets num_warning_signs_meidum
     *
     * @return float|null
     */
    public function getNumWarningSignsMeidum()
    {
        return $this->container['num_warning_signs_meidum'];
    }

    /**
     * Sets num_warning_signs_meidum
     *
     * @param float|null $num_warning_signs_meidum The number of medium warning signs
     *
     * @return self
     */
    public function setNumWarningSignsMeidum($num_warning_signs_meidum)
    {
        if (is_null($num_warning_signs_meidum)) {
            throw new \InvalidArgumentException('non-nullable num_warning_signs_meidum cannot be null');
        }
        $this->container['num_warning_signs_meidum'] = $num_warning_signs_meidum;

        return $this;
    }

    /**
     * Gets num_warning_signs_severe
     *
     * @return float|null
     */
    public function getNumWarningSignsSevere()
    {
        return $this->container['num_warning_signs_severe'];
    }

    /**
     * Sets num_warning_signs_severe
     *
     * @param float|null $num_warning_signs_severe The number of severe warning signs
     *
     * @return self
     */
    public function setNumWarningSignsSevere($num_warning_signs_severe)
    {
        if (is_null($num_warning_signs_severe)) {
            throw new \InvalidArgumentException('non-nullable num_warning_signs_severe cannot be null');
        }
        $this->container['num_warning_signs_severe'] = $num_warning_signs_severe;

        return $this;
    }

    /**
     * Gets past_earnings_date
     *
     * @return string|null
     */
    public function getPastEarningsDate()
    {
        return $this->container['past_earnings_date'];
    }

    /**
     * Sets past_earnings_date
     *
     * @param string|null $past_earnings_date The most-recent financial update of a company
     *
     * @return self
     */
    public function setPastEarningsDate($past_earnings_date)
    {
        if (is_null($past_earnings_date)) {
            throw new \InvalidArgumentException('non-nullable past_earnings_date cannot be null');
        }
        $this->container['past_earnings_date'] = $past_earnings_date;

        return $this;
    }

    /**
     * Gets quick_ratio
     *
     * @return float|null
     */
    public function getQuickRatio()
    {
        return $this->container['quick_ratio'];
    }

    /**
     * Sets quick_ratio
     *
     * @param float|null $quick_ratio The quick ratio measures a company's ability to meet its short-term obligations with its most liquid assets.
     *
     * @return self
     */
    public function setQuickRatio($quick_ratio)
    {
        if (is_null($quick_ratio)) {
            throw new \InvalidArgumentException('non-nullable quick_ratio cannot be null');
        }
        $this->container['quick_ratio'] = $quick_ratio;

        return $this;
    }

    /**
     * Gets quick_ratio_high
     *
     * @return float|null
     */
    public function getQuickRatioHigh()
    {
        return $this->container['quick_ratio_high'];
    }

    /**
     * Sets quick_ratio_high
     *
     * @param float|null $quick_ratio_high The quick ratio measures a company's ability to meet its short-term obligations with its most liquid assets.
     *
     * @return self
     */
    public function setQuickRatioHigh($quick_ratio_high)
    {
        if (is_null($quick_ratio_high)) {
            throw new \InvalidArgumentException('non-nullable quick_ratio_high cannot be null');
        }
        $this->container['quick_ratio_high'] = $quick_ratio_high;

        return $this;
    }

    /**
     * Gets quick_ratio_low
     *
     * @return float|null
     */
    public function getQuickRatioLow()
    {
        return $this->container['quick_ratio_low'];
    }

    /**
     * Sets quick_ratio_low
     *
     * @param float|null $quick_ratio_low The quick ratio measures a company's ability to meet its short-term obligations with its most liquid assets.
     *
     * @return self
     */
    public function setQuickRatioLow($quick_ratio_low)
    {
        if (is_null($quick_ratio_low)) {
            throw new \InvalidArgumentException('non-nullable quick_ratio_low cannot be null');
        }
        $this->container['quick_ratio_low'] = $quick_ratio_low;

        return $this;
    }

    /**
     * Gets quick_ratio_med
     *
     * @return float|null
     */
    public function getQuickRatioMed()
    {
        return $this->container['quick_ratio_med'];
    }

    /**
     * Sets quick_ratio_med
     *
     * @param float|null $quick_ratio_med The quick ratio measures a company's ability to meet its short-term obligations with its most liquid assets.
     *
     * @return self
     */
    public function setQuickRatioMed($quick_ratio_med)
    {
        if (is_null($quick_ratio_med)) {
            throw new \InvalidArgumentException('non-nullable quick_ratio_med cannot be null');
        }
        $this->container['quick_ratio_med'] = $quick_ratio_med;

        return $this;
    }

    /**
     * Gets receivables_turnover
     *
     * @return float|null
     */
    public function getReceivablesTurnover()
    {
        return $this->container['receivables_turnover'];
    }

    /**
     * Sets receivables_turnover
     *
     * @param float|null $receivables_turnover The accounts receivables turnover ratio measures the number of times a company collects its average accounts receivable balance. It is calculated as Revenue divided by Average Accounts Receivable.
     *
     * @return self
     */
    public function setReceivablesTurnover($receivables_turnover)
    {
        if (is_null($receivables_turnover)) {
            throw new \InvalidArgumentException('non-nullable receivables_turnover cannot be null');
        }
        $this->container['receivables_turnover'] = $receivables_turnover;

        return $this;
    }

    /**
     * Gets related_comp
     *
     * @return string|null
     */
    public function getRelatedComp()
    {
        return $this->container['related_comp'];
    }

    /**
     * Sets related_comp
     *
     * @param string|null $related_comp A list of the company's competitors.
     *
     * @return self
     */
    public function setRelatedComp($related_comp)
    {
        if (is_null($related_comp)) {
            throw new \InvalidArgumentException('non-nullable related_comp cannot be null');
        }
        $this->container['related_comp'] = $related_comp;

        return $this;
    }

    /**
     * Gets roa
     *
     * @return float|null
     */
    public function getRoa()
    {
        return $this->container['roa'];
    }

    /**
     * Sets roa
     *
     * @param float|null $roa Return on assets is calculated as Net Income divided by its Total Assets.
     *
     * @return self
     */
    public function setRoa($roa)
    {
        if (is_null($roa)) {
            throw new \InvalidArgumentException('non-nullable roa cannot be null');
        }
        $this->container['roa'] = $roa;

        return $this;
    }

    /**
     * Gets roa_high
     *
     * @return float|null
     */
    public function getRoaHigh()
    {
        return $this->container['roa_high'];
    }

    /**
     * Sets roa_high
     *
     * @param float|null $roa_high Return on assets is calculated as Net Income divided by its Total Assets.
     *
     * @return self
     */
    public function setRoaHigh($roa_high)
    {
        if (is_null($roa_high)) {
            throw new \InvalidArgumentException('non-nullable roa_high cannot be null');
        }
        $this->container['roa_high'] = $roa_high;

        return $this;
    }

    /**
     * Gets roa_low
     *
     * @return float|null
     */
    public function getRoaLow()
    {
        return $this->container['roa_low'];
    }

    /**
     * Sets roa_low
     *
     * @param float|null $roa_low Return on assets is calculated as Net Income divided by its Total Assets.
     *
     * @return self
     */
    public function setRoaLow($roa_low)
    {
        if (is_null($roa_low)) {
            throw new \InvalidArgumentException('non-nullable roa_low cannot be null');
        }
        $this->container['roa_low'] = $roa_low;

        return $this;
    }

    /**
     * Gets roa_med
     *
     * @return float|null
     */
    public function getRoaMed()
    {
        return $this->container['roa_med'];
    }

    /**
     * Sets roa_med
     *
     * @param float|null $roa_med Return on assets is calculated as Net Income divided by its Total Assets.
     *
     * @return self
     */
    public function setRoaMed($roa_med)
    {
        if (is_null($roa_med)) {
            throw new \InvalidArgumentException('non-nullable roa_med cannot be null');
        }
        $this->container['roa_med'] = $roa_med;

        return $this;
    }

    /**
     * Gets roa_med_5y
     *
     * @return float|null
     */
    public function getRoaMed5y()
    {
        return $this->container['roa_med_5y'];
    }

    /**
     * Sets roa_med_5y
     *
     * @param float|null $roa_med_5y Return on assets is calculated as Net Income divided by its Total Assets.
     *
     * @return self
     */
    public function setRoaMed5y($roa_med_5y)
    {
        if (is_null($roa_med_5y)) {
            throw new \InvalidArgumentException('non-nullable roa_med_5y cannot be null');
        }
        $this->container['roa_med_5y'] = $roa_med_5y;

        return $this;
    }

    /**
     * Gets roc
     *
     * @return float|null
     */
    public function getRoc()
    {
        return $this->container['roc'];
    }

    /**
     * Sets roc
     *
     * @param float|null $roc Return on capital measures how well a company generates cash flow relative to the capital it has invested in its business. It is also called ROIC %.
     *
     * @return self
     */
    public function setRoc($roc)
    {
        if (is_null($roc)) {
            throw new \InvalidArgumentException('non-nullable roc cannot be null');
        }
        $this->container['roc'] = $roc;

        return $this;
    }

    /**
     * Gets roce
     *
     * @return float|null
     */
    public function getRoce()
    {
        return $this->container['roce'];
    }

    /**
     * Sets roce
     *
     * @param float|null $roce ROCE % measures how well a company generates profits from its capital.
     *
     * @return self
     */
    public function setRoce($roce)
    {
        if (is_null($roce)) {
            throw new \InvalidArgumentException('non-nullable roce cannot be null');
        }
        $this->container['roce'] = $roce;

        return $this;
    }

    /**
     * Gets roce_high
     *
     * @return float|null
     */
    public function getRoceHigh()
    {
        return $this->container['roce_high'];
    }

    /**
     * Sets roce_high
     *
     * @param float|null $roce_high roce_high
     *
     * @return self
     */
    public function setRoceHigh($roce_high)
    {
        if (is_null($roce_high)) {
            throw new \InvalidArgumentException('non-nullable roce_high cannot be null');
        }
        $this->container['roce_high'] = $roce_high;

        return $this;
    }

    /**
     * Gets roce_low
     *
     * @return float|null
     */
    public function getRoceLow()
    {
        return $this->container['roce_low'];
    }

    /**
     * Sets roce_low
     *
     * @param float|null $roce_low roce_low
     *
     * @return self
     */
    public function setRoceLow($roce_low)
    {
        if (is_null($roce_low)) {
            throw new \InvalidArgumentException('non-nullable roce_low cannot be null');
        }
        $this->container['roce_low'] = $roce_low;

        return $this;
    }

    /**
     * Gets roce_med
     *
     * @return float|null
     */
    public function getRoceMed()
    {
        return $this->container['roce_med'];
    }

    /**
     * Sets roce_med
     *
     * @param float|null $roce_med roce_med
     *
     * @return self
     */
    public function setRoceMed($roce_med)
    {
        if (is_null($roce_med)) {
            throw new \InvalidArgumentException('non-nullable roce_med cannot be null');
        }
        $this->container['roce_med'] = $roce_med;

        return $this;
    }

    /**
     * Gets roce_med_5y
     *
     * @return float|null
     */
    public function getRoceMed5y()
    {
        return $this->container['roce_med_5y'];
    }

    /**
     * Sets roce_med_5y
     *
     * @param float|null $roce_med_5y roce_med_5y
     *
     * @return self
     */
    public function setRoceMed5y($roce_med_5y)
    {
        if (is_null($roce_med_5y)) {
            throw new \InvalidArgumentException('non-nullable roce_med_5y cannot be null');
        }
        $this->container['roce_med_5y'] = $roce_med_5y;

        return $this;
    }

    /**
     * Gets roe
     *
     * @return float|null
     */
    public function getRoe()
    {
        return $this->container['roe'];
    }

    /**
     * Sets roe
     *
     * @param float|null $roe Return on equity is calculated as Net Income attributable to Common Stockholders (Net Income minus the preferred dividends paid) divided by its Total Stockholders Equity
     *
     * @return self
     */
    public function setRoe($roe)
    {
        if (is_null($roe)) {
            throw new \InvalidArgumentException('non-nullable roe cannot be null');
        }
        $this->container['roe'] = $roe;

        return $this;
    }

    /**
     * Gets roe_adj
     *
     * @return float|null
     */
    public function getRoeAdj()
    {
        return $this->container['roe_adj'];
    }

    /**
     * Sets roe_adj
     *
     * @param float|null $roe_adj The return on equity adjusted to book values
     *
     * @return self
     */
    public function setRoeAdj($roe_adj)
    {
        if (is_null($roe_adj)) {
            throw new \InvalidArgumentException('non-nullable roe_adj cannot be null');
        }
        $this->container['roe_adj'] = $roe_adj;

        return $this;
    }

    /**
     * Gets roe_high
     *
     * @return float|null
     */
    public function getRoeHigh()
    {
        return $this->container['roe_high'];
    }

    /**
     * Sets roe_high
     *
     * @param float|null $roe_high Return on equity is calculated as Net Income attributable to Common Stockholders (Net Income minus the preferred dividends paid) divided by its Total Stockholders Equity
     *
     * @return self
     */
    public function setRoeHigh($roe_high)
    {
        if (is_null($roe_high)) {
            throw new \InvalidArgumentException('non-nullable roe_high cannot be null');
        }
        $this->container['roe_high'] = $roe_high;

        return $this;
    }

    /**
     * Gets roe_low
     *
     * @return float|null
     */
    public function getRoeLow()
    {
        return $this->container['roe_low'];
    }

    /**
     * Sets roe_low
     *
     * @param float|null $roe_low Return on equity is calculated as Net Income attributable to Common Stockholders (Net Income minus the preferred dividends paid) divided by its Total Stockholders Equity
     *
     * @return self
     */
    public function setRoeLow($roe_low)
    {
        if (is_null($roe_low)) {
            throw new \InvalidArgumentException('non-nullable roe_low cannot be null');
        }
        $this->container['roe_low'] = $roe_low;

        return $this;
    }

    /**
     * Gets roe_med
     *
     * @return float|null
     */
    public function getRoeMed()
    {
        return $this->container['roe_med'];
    }

    /**
     * Sets roe_med
     *
     * @param float|null $roe_med Return on equity is calculated as Net Income attributable to Common Stockholders (Net Income minus the preferred dividends paid) divided by its Total Stockholders Equity
     *
     * @return self
     */
    public function setRoeMed($roe_med)
    {
        if (is_null($roe_med)) {
            throw new \InvalidArgumentException('non-nullable roe_med cannot be null');
        }
        $this->container['roe_med'] = $roe_med;

        return $this;
    }

    /**
     * Gets roe_med_5y
     *
     * @return float|null
     */
    public function getRoeMed5y()
    {
        return $this->container['roe_med_5y'];
    }

    /**
     * Sets roe_med_5y
     *
     * @param float|null $roe_med_5y Return on equity is calculated as Net Income attributable to Common Stockholders (Net Income minus the preferred dividends paid) divided by its Total Stockholders Equity
     *
     * @return self
     */
    public function setRoeMed5y($roe_med_5y)
    {
        if (is_null($roe_med_5y)) {
            throw new \InvalidArgumentException('non-nullable roe_med_5y cannot be null');
        }
        $this->container['roe_med_5y'] = $roe_med_5y;

        return $this;
    }

    /**
     * Gets roic
     *
     * @return float|null
     */
    public function getRoic()
    {
        return $this->container['roic'];
    }

    /**
     * Sets roic
     *
     * @param float|null $roic Return on Invested Capital (ROIC) is calculated as follows:    Return on Invested Capital (ROIC) = (EBIT - Adjusted Taxes) / (Book Value of Debt + Book Value of Equity - Cash)
     *
     * @return self
     */
    public function setRoic($roic)
    {
        if (is_null($roic)) {
            throw new \InvalidArgumentException('non-nullable roic cannot be null');
        }
        $this->container['roic'] = $roic;

        return $this;
    }

    /**
     * Gets roic_high
     *
     * @return float|null
     */
    public function getRoicHigh()
    {
        return $this->container['roic_high'];
    }

    /**
     * Sets roic_high
     *
     * @param float|null $roic_high The highest return on invested capital over the past 10 years
     *
     * @return self
     */
    public function setRoicHigh($roic_high)
    {
        if (is_null($roic_high)) {
            throw new \InvalidArgumentException('non-nullable roic_high cannot be null');
        }
        $this->container['roic_high'] = $roic_high;

        return $this;
    }

    /**
     * Gets roic_low
     *
     * @return float|null
     */
    public function getRoicLow()
    {
        return $this->container['roic_low'];
    }

    /**
     * Sets roic_low
     *
     * @param float|null $roic_low The lowest return on invested capital over the past 10 years
     *
     * @return self
     */
    public function setRoicLow($roic_low)
    {
        if (is_null($roic_low)) {
            throw new \InvalidArgumentException('non-nullable roic_low cannot be null');
        }
        $this->container['roic_low'] = $roic_low;

        return $this;
    }

    /**
     * Gets roic_med
     *
     * @return float|null
     */
    public function getRoicMed()
    {
        return $this->container['roic_med'];
    }

    /**
     * Sets roic_med
     *
     * @param float|null $roic_med The median return on capital over the past 10 years
     *
     * @return self
     */
    public function setRoicMed($roic_med)
    {
        if (is_null($roic_med)) {
            throw new \InvalidArgumentException('non-nullable roic_med cannot be null');
        }
        $this->container['roic_med'] = $roic_med;

        return $this;
    }

    /**
     * Gets roic_med_5y
     *
     * @return float|null
     */
    public function getRoicMed5y()
    {
        return $this->container['roic_med_5y'];
    }

    /**
     * Sets roic_med_5y
     *
     * @param float|null $roic_med_5y The median return on capital over the past five years
     *
     * @return self
     */
    public function setRoicMed5y($roic_med_5y)
    {
        if (is_null($roic_med_5y)) {
            throw new \InvalidArgumentException('non-nullable roic_med_5y cannot be null');
        }
        $this->container['roic_med_5y'] = $roic_med_5y;

        return $this;
    }

    /**
     * Gets roiic_3y
     *
     * @return float|null
     */
    public function getRoiic3y()
    {
        return $this->container['roiic_3y'];
    }

    /**
     * Sets roiic_3y
     *
     * @param float|null $roiic_3y 3-Year Return on Invested Incremental Capital (3-Year ROIIC %) measures the change in earnings as a percentage of change in investment over 3-year.
     *
     * @return self
     */
    public function setRoiic3y($roiic_3y)
    {
        if (is_null($roiic_3y)) {
            throw new \InvalidArgumentException('non-nullable roiic_3y cannot be null');
        }
        $this->container['roiic_3y'] = $roiic_3y;

        return $this;
    }

    /**
     * Gets roiic_3y_high
     *
     * @return float|null
     */
    public function getRoiic3yHigh()
    {
        return $this->container['roiic_3y_high'];
    }

    /**
     * Sets roiic_3y_high
     *
     * @param float|null $roiic_3y_high roiic_3y_high
     *
     * @return self
     */
    public function setRoiic3yHigh($roiic_3y_high)
    {
        if (is_null($roiic_3y_high)) {
            throw new \InvalidArgumentException('non-nullable roiic_3y_high cannot be null');
        }
        $this->container['roiic_3y_high'] = $roiic_3y_high;

        return $this;
    }

    /**
     * Gets roiic_3y_low
     *
     * @return float|null
     */
    public function getRoiic3yLow()
    {
        return $this->container['roiic_3y_low'];
    }

    /**
     * Sets roiic_3y_low
     *
     * @param float|null $roiic_3y_low roiic_3y_low
     *
     * @return self
     */
    public function setRoiic3yLow($roiic_3y_low)
    {
        if (is_null($roiic_3y_low)) {
            throw new \InvalidArgumentException('non-nullable roiic_3y_low cannot be null');
        }
        $this->container['roiic_3y_low'] = $roiic_3y_low;

        return $this;
    }

    /**
     * Gets roiic_3y_med
     *
     * @return float|null
     */
    public function getRoiic3yMed()
    {
        return $this->container['roiic_3y_med'];
    }

    /**
     * Sets roiic_3y_med
     *
     * @param float|null $roiic_3y_med roiic_3y_med
     *
     * @return self
     */
    public function setRoiic3yMed($roiic_3y_med)
    {
        if (is_null($roiic_3y_med)) {
            throw new \InvalidArgumentException('non-nullable roiic_3y_med cannot be null');
        }
        $this->container['roiic_3y_med'] = $roiic_3y_med;

        return $this;
    }

    /**
     * Gets rvn_predc_10y
     *
     * @return float|null
     */
    public function getRvnPredc10y()
    {
        return $this->container['rvn_predc_10y'];
    }

    /**
     * Sets rvn_predc_10y
     *
     * @param float|null $rvn_predc_10y The predictability of a company's revenue
     *
     * @return self
     */
    public function setRvnPredc10y($rvn_predc_10y)
    {
        if (is_null($rvn_predc_10y)) {
            throw new \InvalidArgumentException('non-nullable rvn_predc_10y cannot be null');
        }
        $this->container['rvn_predc_10y'] = $rvn_predc_10y;

        return $this;
    }

    /**
     * Gets sales
     *
     * @return float|null
     */
    public function getSales()
    {
        return $this->container['sales'];
    }

    /**
     * Sets sales
     *
     * @param float|null $sales Also referred as sales, revenue is income that a company receives from its normal business activities, usually from the sale of goods and services to customers.
     *
     * @return self
     */
    public function setSales($sales)
    {
        if (is_null($sales)) {
            throw new \InvalidArgumentException('non-nullable sales cannot be null');
        }
        $this->container['sales'] = $sales;

        return $this;
    }

    /**
     * Gets sales_latest_q
     *
     * @return float|null
     */
    public function getSalesLatestQ()
    {
        return $this->container['sales_latest_q'];
    }

    /**
     * Sets sales_latest_q
     *
     * @param float|null $sales_latest_q Revenue is the income that a business has from its normal business activities, usually from the sale of goods and services to customers.
     *
     * @return self
     */
    public function setSalesLatestQ($sales_latest_q)
    {
        if (is_null($sales_latest_q)) {
            throw new \InvalidArgumentException('non-nullable sales_latest_q cannot be null');
        }
        $this->container['sales_latest_q'] = $sales_latest_q;

        return $this;
    }

    /**
     * Gets sales_latest_q_norm
     *
     * @return float|null
     */
    public function getSalesLatestQNorm()
    {
        return $this->container['sales_latest_q_norm'];
    }

    /**
     * Sets sales_latest_q_norm
     *
     * @param float|null $sales_latest_q_norm Revenue is the income that a business has from its normal business activities, usually from the sale of goods and services to customers.
     *
     * @return self
     */
    public function setSalesLatestQNorm($sales_latest_q_norm)
    {
        if (is_null($sales_latest_q_norm)) {
            throw new \InvalidArgumentException('non-nullable sales_latest_q_norm cannot be null');
        }
        $this->container['sales_latest_q_norm'] = $sales_latest_q_norm;

        return $this;
    }

    /**
     * Gets shareholder_yield
     *
     * @return float|null
     */
    public function getShareholderYield()
    {
        return $this->container['shareholder_yield'];
    }

    /**
     * Sets shareholder_yield
     *
     * @param float|null $shareholder_yield shareholder_yield
     *
     * @return self
     */
    public function setShareholderYield($shareholder_yield)
    {
        if (is_null($shareholder_yield)) {
            throw new \InvalidArgumentException('non-nullable shareholder_yield cannot be null');
        }
        $this->container['shareholder_yield'] = $shareholder_yield;

        return $this;
    }

    /**
     * Gets shareholder_yield_high
     *
     * @return float|null
     */
    public function getShareholderYieldHigh()
    {
        return $this->container['shareholder_yield_high'];
    }

    /**
     * Sets shareholder_yield_high
     *
     * @param float|null $shareholder_yield_high shareholder_yield_high
     *
     * @return self
     */
    public function setShareholderYieldHigh($shareholder_yield_high)
    {
        if (is_null($shareholder_yield_high)) {
            throw new \InvalidArgumentException('non-nullable shareholder_yield_high cannot be null');
        }
        $this->container['shareholder_yield_high'] = $shareholder_yield_high;

        return $this;
    }

    /**
     * Gets shareholder_yield_low
     *
     * @return float|null
     */
    public function getShareholderYieldLow()
    {
        return $this->container['shareholder_yield_low'];
    }

    /**
     * Sets shareholder_yield_low
     *
     * @param float|null $shareholder_yield_low shareholder_yield_low
     *
     * @return self
     */
    public function setShareholderYieldLow($shareholder_yield_low)
    {
        if (is_null($shareholder_yield_low)) {
            throw new \InvalidArgumentException('non-nullable shareholder_yield_low cannot be null');
        }
        $this->container['shareholder_yield_low'] = $shareholder_yield_low;

        return $this;
    }

    /**
     * Gets shareholder_yield_med
     *
     * @return float|null
     */
    public function getShareholderYieldMed()
    {
        return $this->container['shareholder_yield_med'];
    }

    /**
     * Sets shareholder_yield_med
     *
     * @param float|null $shareholder_yield_med shareholder_yield_med
     *
     * @return self
     */
    public function setShareholderYieldMed($shareholder_yield_med)
    {
        if (is_null($shareholder_yield_med)) {
            throw new \InvalidArgumentException('non-nullable shareholder_yield_med cannot be null');
        }
        $this->container['shareholder_yield_med'] = $shareholder_yield_med;

        return $this;
    }

    /**
     * Gets shares
     *
     * @return float|null
     */
    public function getShares()
    {
        return $this->container['shares'];
    }

    /**
     * Sets shares
     *
     * @param float|null $shares Outstanding shares refer to a company's stock currently held by all its shareholders, including share blocks held by institutional investors and restricted shares owned by the company's officers and insiders.
     *
     * @return self
     */
    public function setShares($shares)
    {
        if (is_null($shares)) {
            throw new \InvalidArgumentException('non-nullable shares cannot be null');
        }
        $this->container['shares'] = $shares;

        return $this;
    }

    /**
     * Gets sloanratio
     *
     * @return float|null
     */
    public function getSloanratio()
    {
        return $this->container['sloanratio'];
    }

    /**
     * Sets sloanratio
     *
     * @param float|null $sloanratio Richard Sloan from the University of Michigan was first to document what is referred to as the 'accrual anomaly'. His 1996 paper found that shares of companies with small or negative accruals vastly outperform (+10%) those of companies with large ones.
     *
     * @return self
     */
    public function setSloanratio($sloanratio)
    {
        if (is_null($sloanratio)) {
            throw new \InvalidArgumentException('non-nullable sloanratio cannot be null');
        }
        $this->container['sloanratio'] = $sloanratio;

        return $this;
    }

    /**
     * Gets tax_rate_med_5y
     *
     * @return float|null
     */
    public function getTaxRateMed5y()
    {
        return $this->container['tax_rate_med_5y'];
    }

    /**
     * Sets tax_rate_med_5y
     *
     * @param float|null $tax_rate_med_5y Tax paid by the company. It is computed in by multiplying the income before tax number, as reported to shareholders, by the appropriate tax rate. In reality, the computation is typically considerably more complex due to things such as expenses considered not deductible by taxing authorities (\\\"add backs\\\"), the range of tax rates applicable to various levels of income, different tax rates in different jurisdictions, multiple layers of tax on income, and other issues.
     *
     * @return self
     */
    public function setTaxRateMed5y($tax_rate_med_5y)
    {
        if (is_null($tax_rate_med_5y)) {
            throw new \InvalidArgumentException('non-nullable tax_rate_med_5y cannot be null');
        }
        $this->container['tax_rate_med_5y'] = $tax_rate_med_5y;

        return $this;
    }

    /**
     * Gets total_buyback_10y
     *
     * @return float|null
     */
    public function getTotalBuyback10y()
    {
        return $this->container['total_buyback_10y'];
    }

    /**
     * Sets total_buyback_10y
     *
     * @param float|null $total_buyback_10y This is the average share buyback rate of the company over the past 10 years. A negative number means the company might be issuing new shares. A positive number indicates that the company is buying back shares.
     *
     * @return self
     */
    public function setTotalBuyback10y($total_buyback_10y)
    {
        if (is_null($total_buyback_10y)) {
            throw new \InvalidArgumentException('non-nullable total_buyback_10y cannot be null');
        }
        $this->container['total_buyback_10y'] = $total_buyback_10y;

        return $this;
    }

    /**
     * Gets total_buyback_1y
     *
     * @return float|null
     */
    public function getTotalBuyback1y()
    {
        return $this->container['total_buyback_1y'];
    }

    /**
     * Sets total_buyback_1y
     *
     * @param float|null $total_buyback_1y This is the average share buyback rate of the company over the past 1 year. A negative number means the company might be issuing new shares. A positive number indicates that the company is buying back shares.
     *
     * @return self
     */
    public function setTotalBuyback1y($total_buyback_1y)
    {
        if (is_null($total_buyback_1y)) {
            throw new \InvalidArgumentException('non-nullable total_buyback_1y cannot be null');
        }
        $this->container['total_buyback_1y'] = $total_buyback_1y;

        return $this;
    }

    /**
     * Gets total_buyback_3y
     *
     * @return float|null
     */
    public function getTotalBuyback3y()
    {
        return $this->container['total_buyback_3y'];
    }

    /**
     * Sets total_buyback_3y
     *
     * @param float|null $total_buyback_3y This is the average share buyback rate of the company over the past 1 year. A negative number means the company might be issuing new shares. A positive number indicates that the company is buying back shares.
     *
     * @return self
     */
    public function setTotalBuyback3y($total_buyback_3y)
    {
        if (is_null($total_buyback_3y)) {
            throw new \InvalidArgumentException('non-nullable total_buyback_3y cannot be null');
        }
        $this->container['total_buyback_3y'] = $total_buyback_3y;

        return $this;
    }

    /**
     * Gets total_buyback_3y_high
     *
     * @return float|null
     */
    public function getTotalBuyback3yHigh()
    {
        return $this->container['total_buyback_3y_high'];
    }

    /**
     * Sets total_buyback_3y_high
     *
     * @param float|null $total_buyback_3y_high This is the average share buyback rate of the company over the past 1 year. A negative number means the company might be issuing new shares. A positive number indicates that the company is buying back shares.
     *
     * @return self
     */
    public function setTotalBuyback3yHigh($total_buyback_3y_high)
    {
        if (is_null($total_buyback_3y_high)) {
            throw new \InvalidArgumentException('non-nullable total_buyback_3y_high cannot be null');
        }
        $this->container['total_buyback_3y_high'] = $total_buyback_3y_high;

        return $this;
    }

    /**
     * Gets total_buyback_3y_low
     *
     * @return float|null
     */
    public function getTotalBuyback3yLow()
    {
        return $this->container['total_buyback_3y_low'];
    }

    /**
     * Sets total_buyback_3y_low
     *
     * @param float|null $total_buyback_3y_low This is the average share buyback rate of the company over the past 1 year. A negative number means the company might be issuing new shares. A positive number indicates that the company is buying back shares.
     *
     * @return self
     */
    public function setTotalBuyback3yLow($total_buyback_3y_low)
    {
        if (is_null($total_buyback_3y_low)) {
            throw new \InvalidArgumentException('non-nullable total_buyback_3y_low cannot be null');
        }
        $this->container['total_buyback_3y_low'] = $total_buyback_3y_low;

        return $this;
    }

    /**
     * Gets total_buyback_3y_med
     *
     * @return float|null
     */
    public function getTotalBuyback3yMed()
    {
        return $this->container['total_buyback_3y_med'];
    }

    /**
     * Sets total_buyback_3y_med
     *
     * @param float|null $total_buyback_3y_med This is the average share buyback rate of the company over the past 1 year. A negative number means the company might be issuing new shares. A positive number indicates that the company is buying back shares.
     *
     * @return self
     */
    public function setTotalBuyback3yMed($total_buyback_3y_med)
    {
        if (is_null($total_buyback_3y_med)) {
            throw new \InvalidArgumentException('non-nullable total_buyback_3y_med cannot be null');
        }
        $this->container['total_buyback_3y_med'] = $total_buyback_3y_med;

        return $this;
    }

    /**
     * Gets total_buyback_5y
     *
     * @return float|null
     */
    public function getTotalBuyback5y()
    {
        return $this->container['total_buyback_5y'];
    }

    /**
     * Sets total_buyback_5y
     *
     * @param float|null $total_buyback_5y This is the average share buyback rate of the company over the past 5 years. A negative number means the company might be issuing new shares. A positive number indicates that the company is buying back shares.
     *
     * @return self
     */
    public function setTotalBuyback5y($total_buyback_5y)
    {
        if (is_null($total_buyback_5y)) {
            throw new \InvalidArgumentException('non-nullable total_buyback_5y cannot be null');
        }
        $this->container['total_buyback_5y'] = $total_buyback_5y;

        return $this;
    }

    /**
     * Gets ttm_ebit
     *
     * @return float|null
     */
    public function getTtmEbit()
    {
        return $this->container['ttm_ebit'];
    }

    /**
     * Sets ttm_ebit
     *
     * @param float|null $ttm_ebit The total EBIT (or operating income) over the trailing 12 months
     *
     * @return self
     */
    public function setTtmEbit($ttm_ebit)
    {
        if (is_null($ttm_ebit)) {
            throw new \InvalidArgumentException('non-nullable ttm_ebit cannot be null');
        }
        $this->container['ttm_ebit'] = $ttm_ebit;

        return $this;
    }

    /**
     * Gets ttm_ebitda
     *
     * @return float|null
     */
    public function getTtmEbitda()
    {
        return $this->container['ttm_ebitda'];
    }

    /**
     * Sets ttm_ebitda
     *
     * @param float|null $ttm_ebitda The total EBITDA over the trailing 12 months
     *
     * @return self
     */
    public function setTtmEbitda($ttm_ebitda)
    {
        if (is_null($ttm_ebitda)) {
            throw new \InvalidArgumentException('non-nullable ttm_ebitda cannot be null');
        }
        $this->container['ttm_ebitda'] = $ttm_ebitda;

        return $this;
    }

    /**
     * Gets ttm_eps
     *
     * @return float|null
     */
    public function getTtmEps()
    {
        return $this->container['ttm_eps'];
    }

    /**
     * Sets ttm_eps
     *
     * @param float|null $ttm_eps Earnings per share (EPS) is the portion of a company's profit allocated to each share of common stock.
     *
     * @return self
     */
    public function setTtmEps($ttm_eps)
    {
        if (is_null($ttm_eps)) {
            throw new \InvalidArgumentException('non-nullable ttm_eps cannot be null');
        }
        $this->container['ttm_eps'] = $ttm_eps;

        return $this;
    }

    /**
     * Gets ttm_eps_nri
     *
     * @return float|null
     */
    public function getTtmEpsNri()
    {
        return $this->container['ttm_eps_nri'];
    }

    /**
     * Sets ttm_eps_nri
     *
     * @param float|null $ttm_eps_nri The earnings per share without nonrecurring items, for the trailing 12 months
     *
     * @return self
     */
    public function setTtmEpsNri($ttm_eps_nri)
    {
        if (is_null($ttm_eps_nri)) {
            throw new \InvalidArgumentException('non-nullable ttm_eps_nri cannot be null');
        }
        $this->container['ttm_eps_nri'] = $ttm_eps_nri;

        return $this;
    }

    /**
     * Gets ttm_fcf_per_share
     *
     * @return float|null
     */
    public function getTtmFcfPerShare()
    {
        return $this->container['ttm_fcf_per_share'];
    }

    /**
     * Sets ttm_fcf_per_share
     *
     * @param float|null $ttm_fcf_per_share ttm_fcf_per_share
     *
     * @return self
     */
    public function setTtmFcfPerShare($ttm_fcf_per_share)
    {
        if (is_null($ttm_fcf_per_share)) {
            throw new \InvalidArgumentException('non-nullable ttm_fcf_per_share cannot be null');
        }
        $this->container['ttm_fcf_per_share'] = $ttm_fcf_per_share;

        return $this;
    }

    /**
     * Gets ttm_pretaxincome
     *
     * @return float|null
     */
    public function getTtmPretaxincome()
    {
        return $this->container['ttm_pretaxincome'];
    }

    /**
     * Sets ttm_pretaxincome
     *
     * @param float|null $ttm_pretaxincome The total pretax income over the trailing 12 months
     *
     * @return self
     */
    public function setTtmPretaxincome($ttm_pretaxincome)
    {
        if (is_null($ttm_pretaxincome)) {
            throw new \InvalidArgumentException('non-nullable ttm_pretaxincome cannot be null');
        }
        $this->container['ttm_pretaxincome'] = $ttm_pretaxincome;

        return $this;
    }

    /**
     * Gets ttm_sales
     *
     * @return float|null
     */
    public function getTtmSales()
    {
        return $this->container['ttm_sales'];
    }

    /**
     * Sets ttm_sales
     *
     * @param float|null $ttm_sales Also referred as sales, revenue is income that a company receives from its normal business activities, usually from the sale of goods and services to customers.
     *
     * @return self
     */
    public function setTtmSales($ttm_sales)
    {
        if (is_null($ttm_sales)) {
            throw new \InvalidArgumentException('non-nullable ttm_sales cannot be null');
        }
        $this->container['ttm_sales'] = $ttm_sales;

        return $this;
    }

    /**
     * Gets turnover
     *
     * @return float|null
     */
    public function getTurnover()
    {
        return $this->container['turnover'];
    }

    /**
     * Sets turnover
     *
     * @param float|null $turnover Asset Turnover measures how quickly a company turns over its asset through sales. It is defined as     <b>Asset Turnover = Sales / {Total Assets}</b>    Companies with low profit margins tend to have high asset turnover, while those with high profit margins have low asset turnover. Companies in the retail industry tend to have a very high turnover ratio.
     *
     * @return self
     */
    public function setTurnover($turnover)
    {
        if (is_null($turnover)) {
            throw new \InvalidArgumentException('non-nullable turnover cannot be null');
        }
        $this->container['turnover'] = $turnover;

        return $this;
    }

    /**
     * Gets wacc
     *
     * @return float|null
     */
    public function getWacc()
    {
        return $this->container['wacc'];
    }

    /**
     * Sets wacc
     *
     * @param float|null $wacc The weighted average cost of capital (WACC) is the rate that a company is expected to pay on average to all its security holders to finance its assets.
     *
     * @return self
     */
    public function setWacc($wacc)
    {
        if (is_null($wacc)) {
            throw new \InvalidArgumentException('non-nullable wacc cannot be null');
        }
        $this->container['wacc'] = $wacc;

        return $this;
    }

    /**
     * Gets wacc_high
     *
     * @return float|null
     */
    public function getWaccHigh()
    {
        return $this->container['wacc_high'];
    }

    /**
     * Sets wacc_high
     *
     * @param float|null $wacc_high wacc_high
     *
     * @return self
     */
    public function setWaccHigh($wacc_high)
    {
        if (is_null($wacc_high)) {
            throw new \InvalidArgumentException('non-nullable wacc_high cannot be null');
        }
        $this->container['wacc_high'] = $wacc_high;

        return $this;
    }

    /**
     * Gets wacc_low
     *
     * @return float|null
     */
    public function getWaccLow()
    {
        return $this->container['wacc_low'];
    }

    /**
     * Sets wacc_low
     *
     * @param float|null $wacc_low wacc_low
     *
     * @return self
     */
    public function setWaccLow($wacc_low)
    {
        if (is_null($wacc_low)) {
            throw new \InvalidArgumentException('non-nullable wacc_low cannot be null');
        }
        $this->container['wacc_low'] = $wacc_low;

        return $this;
    }

    /**
     * Gets wacc_med
     *
     * @return float|null
     */
    public function getWaccMed()
    {
        return $this->container['wacc_med'];
    }

    /**
     * Sets wacc_med
     *
     * @param float|null $wacc_med wacc_med
     *
     * @return self
     */
    public function setWaccMed($wacc_med)
    {
        if (is_null($wacc_med)) {
            throw new \InvalidArgumentException('non-nullable wacc_med cannot be null');
        }
        $this->container['wacc_med'] = $wacc_med;

        return $this;
    }

    /**
     * Gets wacc_med_5y
     *
     * @return float|null
     */
    public function getWaccMed5y()
    {
        return $this->container['wacc_med_5y'];
    }

    /**
     * Sets wacc_med_5y
     *
     * @param float|null $wacc_med_5y wacc_med_5y
     *
     * @return self
     */
    public function setWaccMed5y($wacc_med_5y)
    {
        if (is_null($wacc_med_5y)) {
            throw new \InvalidArgumentException('non-nullable wacc_med_5y cannot be null');
        }
        $this->container['wacc_med_5y'] = $wacc_med_5y;

        return $this;
    }

    /**
     * Gets years_of_financial_history
     *
     * @return float|null
     */
    public function getYearsOfFinancialHistory()
    {
        return $this->container['years_of_financial_history'];
    }

    /**
     * Sets years_of_financial_history
     *
     * @param float|null $years_of_financial_history Years of Financial History refers to the number of years that a company's financial records span. It is calculated as the difference in years between the current year and the earliest available financial statement year available on GuruFocus.
     *
     * @return self
     */
    public function setYearsOfFinancialHistory($years_of_financial_history)
    {
        if (is_null($years_of_financial_history)) {
            throw new \InvalidArgumentException('non-nullable years_of_financial_history cannot be null');
        }
        $this->container['years_of_financial_history'] = $years_of_financial_history;

        return $this;
    }

    /**
     * Gets zscore
     *
     * @return float|null
     */
    public function getZscore()
    {
        return $this->container['zscore'];
    }

    /**
     * Sets zscore
     *
     * @param float|null $zscore Z-Score model is an accurate forecaster of failure up to two years prior to distress. It can be considered the assessment of the distress of industrial corporations.
     *
     * @return self
     */
    public function setZscore($zscore)
    {
        if (is_null($zscore)) {
            throw new \InvalidArgumentException('non-nullable zscore cannot be null');
        }
        $this->container['zscore'] = $zscore;

        return $this;
    }

    /**
     * Gets zscore_high
     *
     * @return float|null
     */
    public function getZscoreHigh()
    {
        return $this->container['zscore_high'];
    }

    /**
     * Sets zscore_high
     *
     * @param float|null $zscore_high Z-Score model is an accurate forecaster of failure up to two years prior to distress. It can be considered the assessment of the distress of industrial corporations.
     *
     * @return self
     */
    public function setZscoreHigh($zscore_high)
    {
        if (is_null($zscore_high)) {
            throw new \InvalidArgumentException('non-nullable zscore_high cannot be null');
        }
        $this->container['zscore_high'] = $zscore_high;

        return $this;
    }

    /**
     * Gets zscore_low
     *
     * @return float|null
     */
    public function getZscoreLow()
    {
        return $this->container['zscore_low'];
    }

    /**
     * Sets zscore_low
     *
     * @param float|null $zscore_low Z-Score model is an accurate forecaster of failure up to two years prior to distress. It can be considered the assessment of the distress of industrial corporations.
     *
     * @return self
     */
    public function setZscoreLow($zscore_low)
    {
        if (is_null($zscore_low)) {
            throw new \InvalidArgumentException('non-nullable zscore_low cannot be null');
        }
        $this->container['zscore_low'] = $zscore_low;

        return $this;
    }

    /**
     * Gets zscore_med
     *
     * @return float|null
     */
    public function getZscoreMed()
    {
        return $this->container['zscore_med'];
    }

    /**
     * Sets zscore_med
     *
     * @param float|null $zscore_med Z-Score model is an accurate forecaster of failure up to two years prior to distress. It can be considered the assessment of the distress of industrial corporations.
     *
     * @return self
     */
    public function setZscoreMed($zscore_med)
    {
        if (is_null($zscore_med)) {
            throw new \InvalidArgumentException('non-nullable zscore_med cannot be null');
        }
        $this->container['zscore_med'] = $zscore_med;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


