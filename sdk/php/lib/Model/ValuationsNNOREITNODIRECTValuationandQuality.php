<?php
/**
 * ValuationsNNOREITNODIRECTValuationandQuality
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gurufocus Data Package API
 *
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ValuationsNNOREITNODIRECTValuationandQuality Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ValuationsNNOREITNODIRECTValuationandQuality implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'valuations_N_NO_REIT_NO_DIRECT_valuationand_quality';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'beta' => 'float',
        'bs_share' => 'float',
        'buyback_yield' => 'float',
        'cash_ratio' => 'float',
        'current_ratio' => 'float',
        'earnings_release_date' => 'string',
        'ebitda_5y_growth' => 'float',
        'enterprise_value' => 'float',
        'epv' => 'float',
        'filing_date' => 'string',
        'filing_date_aor' => 'string',
        'forex_rate' => 'float',
        'fscore' => 'float',
        'graham_number' => 'float',
        'growth_per_share_ebitda' => 'float',
        'growth_per_share_eps' => 'float',
        'growth_revenue_per_share' => 'float',
        'interest_coverage' => 'float',
        'intrinsic_value_projected_fcf' => 'float',
        'medpsvalue' => 'float',
        'mktcap' => 'float',
        'month_end_stock_price' => 'float',
        'mscore' => 'float',
        'net_cash_per_share' => 'float',
        'net_current_asset_value' => 'float',
        'net_net_working_capital' => 'float',
        'number_of_share_holders' => 'float',
        'peter_lynch_fair_value' => 'float',
        'price_high' => 'float',
        'price_low' => 'float',
        'quick_ratio' => 'float',
        'share_buyback_ratio' => 'float',
        'shareholder_yield' => 'float',
        'shares_basic' => 'float',
        'sloan_ratio' => 'float',
        'snoa' => 'float',
        'total_employee_number' => 'float',
        'zscore' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'beta' => null,
        'bs_share' => null,
        'buyback_yield' => null,
        'cash_ratio' => null,
        'current_ratio' => null,
        'earnings_release_date' => null,
        'ebitda_5y_growth' => null,
        'enterprise_value' => null,
        'epv' => null,
        'filing_date' => null,
        'filing_date_aor' => null,
        'forex_rate' => null,
        'fscore' => null,
        'graham_number' => null,
        'growth_per_share_ebitda' => null,
        'growth_per_share_eps' => null,
        'growth_revenue_per_share' => null,
        'interest_coverage' => null,
        'intrinsic_value_projected_fcf' => null,
        'medpsvalue' => null,
        'mktcap' => null,
        'month_end_stock_price' => null,
        'mscore' => null,
        'net_cash_per_share' => null,
        'net_current_asset_value' => null,
        'net_net_working_capital' => null,
        'number_of_share_holders' => null,
        'peter_lynch_fair_value' => null,
        'price_high' => null,
        'price_low' => null,
        'quick_ratio' => null,
        'share_buyback_ratio' => null,
        'shareholder_yield' => null,
        'shares_basic' => null,
        'sloan_ratio' => null,
        'snoa' => null,
        'total_employee_number' => null,
        'zscore' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'beta' => false,
        'bs_share' => false,
        'buyback_yield' => false,
        'cash_ratio' => false,
        'current_ratio' => false,
        'earnings_release_date' => false,
        'ebitda_5y_growth' => false,
        'enterprise_value' => false,
        'epv' => false,
        'filing_date' => false,
        'filing_date_aor' => false,
        'forex_rate' => false,
        'fscore' => false,
        'graham_number' => false,
        'growth_per_share_ebitda' => false,
        'growth_per_share_eps' => false,
        'growth_revenue_per_share' => false,
        'interest_coverage' => false,
        'intrinsic_value_projected_fcf' => false,
        'medpsvalue' => false,
        'mktcap' => false,
        'month_end_stock_price' => false,
        'mscore' => false,
        'net_cash_per_share' => false,
        'net_current_asset_value' => false,
        'net_net_working_capital' => false,
        'number_of_share_holders' => false,
        'peter_lynch_fair_value' => false,
        'price_high' => false,
        'price_low' => false,
        'quick_ratio' => false,
        'share_buyback_ratio' => false,
        'shareholder_yield' => false,
        'shares_basic' => false,
        'sloan_ratio' => false,
        'snoa' => false,
        'total_employee_number' => false,
        'zscore' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'beta' => 'beta',
        'bs_share' => 'bs_share',
        'buyback_yield' => 'buyback_yield',
        'cash_ratio' => 'cash_ratio',
        'current_ratio' => 'current_ratio',
        'earnings_release_date' => 'earnings_release_date',
        'ebitda_5y_growth' => 'ebitda_5y_growth',
        'enterprise_value' => 'enterprise_value',
        'epv' => 'epv',
        'filing_date' => 'filing_date',
        'filing_date_aor' => 'filing_date_aor',
        'forex_rate' => 'forex_rate',
        'fscore' => 'fscore',
        'graham_number' => 'graham_number',
        'growth_per_share_ebitda' => 'growth_per_share_ebitda',
        'growth_per_share_eps' => 'growth_per_share_eps',
        'growth_revenue_per_share' => 'growth_revenue_per_share',
        'interest_coverage' => 'interest_coverage',
        'intrinsic_value_projected_fcf' => 'intrinsic_value_projected_fcf',
        'medpsvalue' => 'medpsvalue',
        'mktcap' => 'mktcap',
        'month_end_stock_price' => 'month_end_stock_price',
        'mscore' => 'mscore',
        'net_cash_per_share' => 'net_cash_per_share',
        'net_current_asset_value' => 'net_current_asset_value',
        'net_net_working_capital' => 'net_net_working_capital',
        'number_of_share_holders' => 'number_of_share_holders',
        'peter_lynch_fair_value' => 'peter_lynch_fair_value',
        'price_high' => 'price_high',
        'price_low' => 'price_low',
        'quick_ratio' => 'quick_ratio',
        'share_buyback_ratio' => 'share_buyback_ratio',
        'shareholder_yield' => 'shareholder_yield',
        'shares_basic' => 'shares_basic',
        'sloan_ratio' => 'sloan_ratio',
        'snoa' => 'snoa',
        'total_employee_number' => 'total_employee_number',
        'zscore' => 'zscore'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'beta' => 'setBeta',
        'bs_share' => 'setBsShare',
        'buyback_yield' => 'setBuybackYield',
        'cash_ratio' => 'setCashRatio',
        'current_ratio' => 'setCurrentRatio',
        'earnings_release_date' => 'setEarningsReleaseDate',
        'ebitda_5y_growth' => 'setEbitda5yGrowth',
        'enterprise_value' => 'setEnterpriseValue',
        'epv' => 'setEpv',
        'filing_date' => 'setFilingDate',
        'filing_date_aor' => 'setFilingDateAor',
        'forex_rate' => 'setForexRate',
        'fscore' => 'setFscore',
        'graham_number' => 'setGrahamNumber',
        'growth_per_share_ebitda' => 'setGrowthPerShareEbitda',
        'growth_per_share_eps' => 'setGrowthPerShareEps',
        'growth_revenue_per_share' => 'setGrowthRevenuePerShare',
        'interest_coverage' => 'setInterestCoverage',
        'intrinsic_value_projected_fcf' => 'setIntrinsicValueProjectedFcf',
        'medpsvalue' => 'setMedpsvalue',
        'mktcap' => 'setMktcap',
        'month_end_stock_price' => 'setMonthEndStockPrice',
        'mscore' => 'setMscore',
        'net_cash_per_share' => 'setNetCashPerShare',
        'net_current_asset_value' => 'setNetCurrentAssetValue',
        'net_net_working_capital' => 'setNetNetWorkingCapital',
        'number_of_share_holders' => 'setNumberOfShareHolders',
        'peter_lynch_fair_value' => 'setPeterLynchFairValue',
        'price_high' => 'setPriceHigh',
        'price_low' => 'setPriceLow',
        'quick_ratio' => 'setQuickRatio',
        'share_buyback_ratio' => 'setShareBuybackRatio',
        'shareholder_yield' => 'setShareholderYield',
        'shares_basic' => 'setSharesBasic',
        'sloan_ratio' => 'setSloanRatio',
        'snoa' => 'setSnoa',
        'total_employee_number' => 'setTotalEmployeeNumber',
        'zscore' => 'setZscore'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'beta' => 'getBeta',
        'bs_share' => 'getBsShare',
        'buyback_yield' => 'getBuybackYield',
        'cash_ratio' => 'getCashRatio',
        'current_ratio' => 'getCurrentRatio',
        'earnings_release_date' => 'getEarningsReleaseDate',
        'ebitda_5y_growth' => 'getEbitda5yGrowth',
        'enterprise_value' => 'getEnterpriseValue',
        'epv' => 'getEpv',
        'filing_date' => 'getFilingDate',
        'filing_date_aor' => 'getFilingDateAor',
        'forex_rate' => 'getForexRate',
        'fscore' => 'getFscore',
        'graham_number' => 'getGrahamNumber',
        'growth_per_share_ebitda' => 'getGrowthPerShareEbitda',
        'growth_per_share_eps' => 'getGrowthPerShareEps',
        'growth_revenue_per_share' => 'getGrowthRevenuePerShare',
        'interest_coverage' => 'getInterestCoverage',
        'intrinsic_value_projected_fcf' => 'getIntrinsicValueProjectedFcf',
        'medpsvalue' => 'getMedpsvalue',
        'mktcap' => 'getMktcap',
        'month_end_stock_price' => 'getMonthEndStockPrice',
        'mscore' => 'getMscore',
        'net_cash_per_share' => 'getNetCashPerShare',
        'net_current_asset_value' => 'getNetCurrentAssetValue',
        'net_net_working_capital' => 'getNetNetWorkingCapital',
        'number_of_share_holders' => 'getNumberOfShareHolders',
        'peter_lynch_fair_value' => 'getPeterLynchFairValue',
        'price_high' => 'getPriceHigh',
        'price_low' => 'getPriceLow',
        'quick_ratio' => 'getQuickRatio',
        'share_buyback_ratio' => 'getShareBuybackRatio',
        'shareholder_yield' => 'getShareholderYield',
        'shares_basic' => 'getSharesBasic',
        'sloan_ratio' => 'getSloanRatio',
        'snoa' => 'getSnoa',
        'total_employee_number' => 'getTotalEmployeeNumber',
        'zscore' => 'getZscore'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('beta', $data ?? [], null);
        $this->setIfExists('bs_share', $data ?? [], null);
        $this->setIfExists('buyback_yield', $data ?? [], null);
        $this->setIfExists('cash_ratio', $data ?? [], null);
        $this->setIfExists('current_ratio', $data ?? [], null);
        $this->setIfExists('earnings_release_date', $data ?? [], null);
        $this->setIfExists('ebitda_5y_growth', $data ?? [], null);
        $this->setIfExists('enterprise_value', $data ?? [], null);
        $this->setIfExists('epv', $data ?? [], null);
        $this->setIfExists('filing_date', $data ?? [], null);
        $this->setIfExists('filing_date_aor', $data ?? [], null);
        $this->setIfExists('forex_rate', $data ?? [], null);
        $this->setIfExists('fscore', $data ?? [], null);
        $this->setIfExists('graham_number', $data ?? [], null);
        $this->setIfExists('growth_per_share_ebitda', $data ?? [], null);
        $this->setIfExists('growth_per_share_eps', $data ?? [], null);
        $this->setIfExists('growth_revenue_per_share', $data ?? [], null);
        $this->setIfExists('interest_coverage', $data ?? [], null);
        $this->setIfExists('intrinsic_value_projected_fcf', $data ?? [], null);
        $this->setIfExists('medpsvalue', $data ?? [], null);
        $this->setIfExists('mktcap', $data ?? [], null);
        $this->setIfExists('month_end_stock_price', $data ?? [], null);
        $this->setIfExists('mscore', $data ?? [], null);
        $this->setIfExists('net_cash_per_share', $data ?? [], null);
        $this->setIfExists('net_current_asset_value', $data ?? [], null);
        $this->setIfExists('net_net_working_capital', $data ?? [], null);
        $this->setIfExists('number_of_share_holders', $data ?? [], null);
        $this->setIfExists('peter_lynch_fair_value', $data ?? [], null);
        $this->setIfExists('price_high', $data ?? [], null);
        $this->setIfExists('price_low', $data ?? [], null);
        $this->setIfExists('quick_ratio', $data ?? [], null);
        $this->setIfExists('share_buyback_ratio', $data ?? [], null);
        $this->setIfExists('shareholder_yield', $data ?? [], null);
        $this->setIfExists('shares_basic', $data ?? [], null);
        $this->setIfExists('sloan_ratio', $data ?? [], null);
        $this->setIfExists('snoa', $data ?? [], null);
        $this->setIfExists('total_employee_number', $data ?? [], null);
        $this->setIfExists('zscore', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets beta
     *
     * @return float|null
     */
    public function getBeta()
    {
        return $this->container['beta'];
    }

    /**
     * Sets beta
     *
     * @param float|null $beta Beta measures the volatility or systematic risk of a security in comparison to the market. It is calculated using the latest three years of monthly returns of the stock and the benchmark.<br>- A beta of 1 indicates that the stock's price will move with the market. <br>- A beta of less than 1 indicates that the stock will be less volatile than the market. <br>- A beta greater than 1 indicates that the stock's price will be more volatile than the market.
     *
     * @return self
     */
    public function setBeta($beta)
    {
        if (is_null($beta)) {
            throw new \InvalidArgumentException('non-nullable beta cannot be null');
        }
        $this->container['beta'] = $beta;

        return $this;
    }

    /**
     * Gets bs_share
     *
     * @return float|null
     */
    public function getBsShare()
    {
        return $this->container['bs_share'];
    }

    /**
     * Sets bs_share
     *
     * @param float|null $bs_share bs_share
     *
     * @return self
     */
    public function setBsShare($bs_share)
    {
        if (is_null($bs_share)) {
            throw new \InvalidArgumentException('non-nullable bs_share cannot be null');
        }
        $this->container['bs_share'] = $bs_share;

        return $this;
    }

    /**
     * Gets buyback_yield
     *
     * @return float|null
     */
    public function getBuybackYield()
    {
        return $this->container['buyback_yield'];
    }

    /**
     * Sets buyback_yield
     *
     * @param float|null $buyback_yield buyback_yield
     *
     * @return self
     */
    public function setBuybackYield($buyback_yield)
    {
        if (is_null($buyback_yield)) {
            throw new \InvalidArgumentException('non-nullable buyback_yield cannot be null');
        }
        $this->container['buyback_yield'] = $buyback_yield;

        return $this;
    }

    /**
     * Gets cash_ratio
     *
     * @return float|null
     */
    public function getCashRatio()
    {
        return $this->container['cash_ratio'];
    }

    /**
     * Sets cash_ratio
     *
     * @param float|null $cash_ratio The Cash Ratio measures a company’s ability to meet its short-term obligations with cash and near-cash resources.
     *
     * @return self
     */
    public function setCashRatio($cash_ratio)
    {
        if (is_null($cash_ratio)) {
            throw new \InvalidArgumentException('non-nullable cash_ratio cannot be null');
        }
        $this->container['cash_ratio'] = $cash_ratio;

        return $this;
    }

    /**
     * Gets current_ratio
     *
     * @return float|null
     */
    public function getCurrentRatio()
    {
        return $this->container['current_ratio'];
    }

    /**
     * Sets current_ratio
     *
     * @param float|null $current_ratio The current ratio is a liquidity ratio that measures a company's ability to pay short-term obligations. It is calculated as a company's Total Current Assets divides by its Total Current Liabilities.
     *
     * @return self
     */
    public function setCurrentRatio($current_ratio)
    {
        if (is_null($current_ratio)) {
            throw new \InvalidArgumentException('non-nullable current_ratio cannot be null');
        }
        $this->container['current_ratio'] = $current_ratio;

        return $this;
    }

    /**
     * Gets earnings_release_date
     *
     * @return string|null
     */
    public function getEarningsReleaseDate()
    {
        return $this->container['earnings_release_date'];
    }

    /**
     * Sets earnings_release_date
     *
     * @param string|null $earnings_release_date earnings_release_date
     *
     * @return self
     */
    public function setEarningsReleaseDate($earnings_release_date)
    {
        if (is_null($earnings_release_date)) {
            throw new \InvalidArgumentException('non-nullable earnings_release_date cannot be null');
        }
        $this->container['earnings_release_date'] = $earnings_release_date;

        return $this;
    }

    /**
     * Gets ebitda_5y_growth
     *
     * @return float|null
     */
    public function getEbitda5yGrowth()
    {
        return $this->container['ebitda_5y_growth'];
    }

    /**
     * Sets ebitda_5y_growth
     *
     * @param float|null $ebitda_5y_growth EBITDA per Share is the amount of Earnings Before Interest, Taxes, Depreciation, and Amortization (EBITDA) per outstanding share of the company's stock.
     *
     * @return self
     */
    public function setEbitda5yGrowth($ebitda_5y_growth)
    {
        if (is_null($ebitda_5y_growth)) {
            throw new \InvalidArgumentException('non-nullable ebitda_5y_growth cannot be null');
        }
        $this->container['ebitda_5y_growth'] = $ebitda_5y_growth;

        return $this;
    }

    /**
     * Gets enterprise_value
     *
     * @return float|null
     */
    public function getEnterpriseValue()
    {
        return $this->container['enterprise_value'];
    }

    /**
     * Sets enterprise_value
     *
     * @param float|null $enterprise_value Enterprise Value is calculated as the market cap plus debt and minority interest and preferred shares, minus total cash, cash equivalents, and marketable securities.
     *
     * @return self
     */
    public function setEnterpriseValue($enterprise_value)
    {
        if (is_null($enterprise_value)) {
            throw new \InvalidArgumentException('non-nullable enterprise_value cannot be null');
        }
        $this->container['enterprise_value'] = $enterprise_value;

        return $this;
    }

    /**
     * Gets epv
     *
     * @return float|null
     */
    public function getEpv()
    {
        return $this->container['epv'];
    }

    /**
     * Sets epv
     *
     * @param float|null $epv Earnings power value (EPV) is a technique for valuing stocks by making assumptions about the sustainability of current earnings and the cost of capital but not future growth.
     *
     * @return self
     */
    public function setEpv($epv)
    {
        if (is_null($epv)) {
            throw new \InvalidArgumentException('non-nullable epv cannot be null');
        }
        $this->container['epv'] = $epv;

        return $this;
    }

    /**
     * Gets filing_date
     *
     * @return string|null
     */
    public function getFilingDate()
    {
        return $this->container['filing_date'];
    }

    /**
     * Sets filing_date
     *
     * @param string|null $filing_date filing_date
     *
     * @return self
     */
    public function setFilingDate($filing_date)
    {
        if (is_null($filing_date)) {
            throw new \InvalidArgumentException('non-nullable filing_date cannot be null');
        }
        $this->container['filing_date'] = $filing_date;

        return $this;
    }

    /**
     * Gets filing_date_aor
     *
     * @return string|null
     */
    public function getFilingDateAor()
    {
        return $this->container['filing_date_aor'];
    }

    /**
     * Sets filing_date_aor
     *
     * @param string|null $filing_date_aor filing_date_aor
     *
     * @return self
     */
    public function setFilingDateAor($filing_date_aor)
    {
        if (is_null($filing_date_aor)) {
            throw new \InvalidArgumentException('non-nullable filing_date_aor cannot be null');
        }
        $this->container['filing_date_aor'] = $filing_date_aor;

        return $this;
    }

    /**
     * Gets forex_rate
     *
     * @return float|null
     */
    public function getForexRate()
    {
        return $this->container['forex_rate'];
    }

    /**
     * Sets forex_rate
     *
     * @param float|null $forex_rate The month-end forex rates between the headquarter currency and the reporting currency
     *
     * @return self
     */
    public function setForexRate($forex_rate)
    {
        if (is_null($forex_rate)) {
            throw new \InvalidArgumentException('non-nullable forex_rate cannot be null');
        }
        $this->container['forex_rate'] = $forex_rate;

        return $this;
    }

    /**
     * Gets fscore
     *
     * @return float|null
     */
    public function getFscore()
    {
        return $this->container['fscore'];
    }

    /**
     * Sets fscore
     *
     * @param float|null $fscore Piotroski F-Score is a number between 0-9 which is used to assess strength of company's financial position.
     *
     * @return self
     */
    public function setFscore($fscore)
    {
        if (is_null($fscore)) {
            throw new \InvalidArgumentException('non-nullable fscore cannot be null');
        }
        $this->container['fscore'] = $fscore;

        return $this;
    }

    /**
     * Gets graham_number
     *
     * @return float|null
     */
    public function getGrahamNumber()
    {
        return $this->container['graham_number'];
    }

    /**
     * Sets graham_number
     *
     * @param float|null $graham_number Graham Number is a concept based on Ben Graham\\'s conservative valuation of companies. Graham Number is calculated as follows:    Graham Number = SquareRoot of (22.5 * {Tangible Book Value per Share} * {Earnings per Share})    = SquareRoot of (22.5 * {Net Income} * {Total Equity}) / {Total Shares Outstanding}
     *
     * @return self
     */
    public function setGrahamNumber($graham_number)
    {
        if (is_null($graham_number)) {
            throw new \InvalidArgumentException('non-nullable graham_number cannot be null');
        }
        $this->container['graham_number'] = $graham_number;

        return $this;
    }

    /**
     * Gets growth_per_share_ebitda
     *
     * @return float|null
     */
    public function getGrowthPerShareEbitda()
    {
        return $this->container['growth_per_share_ebitda'];
    }

    /**
     * Sets growth_per_share_ebitda
     *
     * @param float|null $growth_per_share_ebitda EBITDA per Share is the amount of Earnings Before Interest, Taxes, Depreciation, and Amortization (EBITDA) per outstanding share of the company's stock.
     *
     * @return self
     */
    public function setGrowthPerShareEbitda($growth_per_share_ebitda)
    {
        if (is_null($growth_per_share_ebitda)) {
            throw new \InvalidArgumentException('non-nullable growth_per_share_ebitda cannot be null');
        }
        $this->container['growth_per_share_ebitda'] = $growth_per_share_ebitda;

        return $this;
    }

    /**
     * Gets growth_per_share_eps
     *
     * @return float|null
     */
    public function getGrowthPerShareEps()
    {
        return $this->container['growth_per_share_eps'];
    }

    /**
     * Sets growth_per_share_eps
     *
     * @param float|null $growth_per_share_eps The company's earnings per share growth year over year
     *
     * @return self
     */
    public function setGrowthPerShareEps($growth_per_share_eps)
    {
        if (is_null($growth_per_share_eps)) {
            throw new \InvalidArgumentException('non-nullable growth_per_share_eps cannot be null');
        }
        $this->container['growth_per_share_eps'] = $growth_per_share_eps;

        return $this;
    }

    /**
     * Gets growth_revenue_per_share
     *
     * @return float|null
     */
    public function getGrowthRevenuePerShare()
    {
        return $this->container['growth_revenue_per_share'];
    }

    /**
     * Sets growth_revenue_per_share
     *
     * @param float|null $growth_revenue_per_share The company's revenue per share growth year over year
     *
     * @return self
     */
    public function setGrowthRevenuePerShare($growth_revenue_per_share)
    {
        if (is_null($growth_revenue_per_share)) {
            throw new \InvalidArgumentException('non-nullable growth_revenue_per_share cannot be null');
        }
        $this->container['growth_revenue_per_share'] = $growth_revenue_per_share;

        return $this;
    }

    /**
     * Gets interest_coverage
     *
     * @return float|null
     */
    public function getInterestCoverage()
    {
        return $this->container['interest_coverage'];
    }

    /**
     * Sets interest_coverage
     *
     * @param float|null $interest_coverage Interest Coverage is a ratio that determines how easily a company can pay interest expenses on outstanding debt.
     *
     * @return self
     */
    public function setInterestCoverage($interest_coverage)
    {
        if (is_null($interest_coverage)) {
            throw new \InvalidArgumentException('non-nullable interest_coverage cannot be null');
        }
        $this->container['interest_coverage'] = $interest_coverage;

        return $this;
    }

    /**
     * Gets intrinsic_value_projected_fcf
     *
     * @return float|null
     */
    public function getIntrinsicValueProjectedFcf()
    {
        return $this->container['intrinsic_value_projected_fcf'];
    }

    /**
     * Sets intrinsic_value_projected_fcf
     *
     * @param float|null $intrinsic_value_projected_fcf The Discounted Free Cash Flow Screener focuses on Free Cash Flow (FCF) and Total Equity. These measures can be used to determine an intrinsic value estimate for a company.
     *
     * @return self
     */
    public function setIntrinsicValueProjectedFcf($intrinsic_value_projected_fcf)
    {
        if (is_null($intrinsic_value_projected_fcf)) {
            throw new \InvalidArgumentException('non-nullable intrinsic_value_projected_fcf cannot be null');
        }
        $this->container['intrinsic_value_projected_fcf'] = $intrinsic_value_projected_fcf;

        return $this;
    }

    /**
     * Gets medpsvalue
     *
     * @return float|null
     */
    public function getMedpsvalue()
    {
        return $this->container['medpsvalue'];
    }

    /**
     * Sets medpsvalue
     *
     * @param float|null $medpsvalue This valuation method assumes that the stock valuation will revert to its historical mean in terms of Price/Sales Ratio.
     *
     * @return self
     */
    public function setMedpsvalue($medpsvalue)
    {
        if (is_null($medpsvalue)) {
            throw new \InvalidArgumentException('non-nullable medpsvalue cannot be null');
        }
        $this->container['medpsvalue'] = $medpsvalue;

        return $this;
    }

    /**
     * Gets mktcap
     *
     * @return float|null
     */
    public function getMktcap()
    {
        return $this->container['mktcap'];
    }

    /**
     * Sets mktcap
     *
     * @param float|null $mktcap Market cap is the short version of market capitalization. It is the total market value to buy the whole company. It is equal to the share price times the number of shares outstanding.
     *
     * @return self
     */
    public function setMktcap($mktcap)
    {
        if (is_null($mktcap)) {
            throw new \InvalidArgumentException('non-nullable mktcap cannot be null');
        }
        $this->container['mktcap'] = $mktcap;

        return $this;
    }

    /**
     * Gets month_end_stock_price
     *
     * @return float|null
     */
    public function getMonthEndStockPrice()
    {
        return $this->container['month_end_stock_price'];
    }

    /**
     * Sets month_end_stock_price
     *
     * @param float|null $month_end_stock_price The company's share price at the final day of the month
     *
     * @return self
     */
    public function setMonthEndStockPrice($month_end_stock_price)
    {
        if (is_null($month_end_stock_price)) {
            throw new \InvalidArgumentException('non-nullable month_end_stock_price cannot be null');
        }
        $this->container['month_end_stock_price'] = $month_end_stock_price;

        return $this;
    }

    /**
     * Gets mscore
     *
     * @return float|null
     */
    public function getMscore()
    {
        return $this->container['mscore'];
    }

    /**
     * Sets mscore
     *
     * @param float|null $mscore Beneish's M-Score is a mathematical model that uses eight financial ratios weighted by coefficients to identify whether a company has manipulated its profits.
     *
     * @return self
     */
    public function setMscore($mscore)
    {
        if (is_null($mscore)) {
            throw new \InvalidArgumentException('non-nullable mscore cannot be null');
        }
        $this->container['mscore'] = $mscore;

        return $this;
    }

    /**
     * Gets net_cash_per_share
     *
     * @return float|null
     */
    public function getNetCashPerShare()
    {
        return $this->container['net_cash_per_share'];
    }

    /**
     * Sets net_cash_per_share
     *
     * @param float|null $net_cash_per_share Equals cash and cash equivalents less total liabilities less minority interest
     *
     * @return self
     */
    public function setNetCashPerShare($net_cash_per_share)
    {
        if (is_null($net_cash_per_share)) {
            throw new \InvalidArgumentException('non-nullable net_cash_per_share cannot be null');
        }
        $this->container['net_cash_per_share'] = $net_cash_per_share;

        return $this;
    }

    /**
     * Gets net_current_asset_value
     *
     * @return float|null
     */
    public function getNetCurrentAssetValue()
    {
        return $this->container['net_current_asset_value'];
    }

    /**
     * Sets net_current_asset_value
     *
     * @param float|null $net_current_asset_value In calculating the Net Current Asset Value (NCAV), Benjamin Graham means a company's current assets (such as cash, marketable securities, and inventories) minus its total liabilities (including preferred stock, minority interest, and long-term debt).
     *
     * @return self
     */
    public function setNetCurrentAssetValue($net_current_asset_value)
    {
        if (is_null($net_current_asset_value)) {
            throw new \InvalidArgumentException('non-nullable net_current_asset_value cannot be null');
        }
        $this->container['net_current_asset_value'] = $net_current_asset_value;

        return $this;
    }

    /**
     * Gets net_net_working_capital
     *
     * @return float|null
     */
    public function getNetNetWorkingCapital()
    {
        return $this->container['net_net_working_capital'];
    }

    /**
     * Sets net_net_working_capital
     *
     * @param float|null $net_net_working_capital A net-net is a company with a market capitalization that is less than the company's current assets minus total liabilities, or equivalently, the company's working capital minus long-term liabilities. This value is called the net current asset value.
     *
     * @return self
     */
    public function setNetNetWorkingCapital($net_net_working_capital)
    {
        if (is_null($net_net_working_capital)) {
            throw new \InvalidArgumentException('non-nullable net_net_working_capital cannot be null');
        }
        $this->container['net_net_working_capital'] = $net_net_working_capital;

        return $this;
    }

    /**
     * Gets number_of_share_holders
     *
     * @return float|null
     */
    public function getNumberOfShareHolders()
    {
        return $this->container['number_of_share_holders'];
    }

    /**
     * Sets number_of_share_holders
     *
     * @param float|null $number_of_share_holders The total number of shareholders for a company
     *
     * @return self
     */
    public function setNumberOfShareHolders($number_of_share_holders)
    {
        if (is_null($number_of_share_holders)) {
            throw new \InvalidArgumentException('non-nullable number_of_share_holders cannot be null');
        }
        $this->container['number_of_share_holders'] = $number_of_share_holders;

        return $this;
    }

    /**
     * Gets peter_lynch_fair_value
     *
     * @return float|null
     */
    public function getPeterLynchFairValue()
    {
        return $this->container['peter_lynch_fair_value'];
    }

    /**
     * Sets peter_lynch_fair_value
     *
     * @param float|null $peter_lynch_fair_value Peter Lynch Fair Value applies to growing companies. The ideal range for the growth rate is between 10 - 20% a year.
     *
     * @return self
     */
    public function setPeterLynchFairValue($peter_lynch_fair_value)
    {
        if (is_null($peter_lynch_fair_value)) {
            throw new \InvalidArgumentException('non-nullable peter_lynch_fair_value cannot be null');
        }
        $this->container['peter_lynch_fair_value'] = $peter_lynch_fair_value;

        return $this;
    }

    /**
     * Gets price_high
     *
     * @return float|null
     */
    public function getPriceHigh()
    {
        return $this->container['price_high'];
    }

    /**
     * Sets price_high
     *
     * @param float|null $price_high price_high
     *
     * @return self
     */
    public function setPriceHigh($price_high)
    {
        if (is_null($price_high)) {
            throw new \InvalidArgumentException('non-nullable price_high cannot be null');
        }
        $this->container['price_high'] = $price_high;

        return $this;
    }

    /**
     * Gets price_low
     *
     * @return float|null
     */
    public function getPriceLow()
    {
        return $this->container['price_low'];
    }

    /**
     * Sets price_low
     *
     * @param float|null $price_low price_low
     *
     * @return self
     */
    public function setPriceLow($price_low)
    {
        if (is_null($price_low)) {
            throw new \InvalidArgumentException('non-nullable price_low cannot be null');
        }
        $this->container['price_low'] = $price_low;

        return $this;
    }

    /**
     * Gets quick_ratio
     *
     * @return float|null
     */
    public function getQuickRatio()
    {
        return $this->container['quick_ratio'];
    }

    /**
     * Sets quick_ratio
     *
     * @param float|null $quick_ratio The quick ratio measures a company's ability to meet its short-term obligations with its most liquid assets.
     *
     * @return self
     */
    public function setQuickRatio($quick_ratio)
    {
        if (is_null($quick_ratio)) {
            throw new \InvalidArgumentException('non-nullable quick_ratio cannot be null');
        }
        $this->container['quick_ratio'] = $quick_ratio;

        return $this;
    }

    /**
     * Gets share_buyback_ratio
     *
     * @return float|null
     */
    public function getShareBuybackRatio()
    {
        return $this->container['share_buyback_ratio'];
    }

    /**
     * Sets share_buyback_ratio
     *
     * @param float|null $share_buyback_ratio The rate a company repurchases its shares
     *
     * @return self
     */
    public function setShareBuybackRatio($share_buyback_ratio)
    {
        if (is_null($share_buyback_ratio)) {
            throw new \InvalidArgumentException('non-nullable share_buyback_ratio cannot be null');
        }
        $this->container['share_buyback_ratio'] = $share_buyback_ratio;

        return $this;
    }

    /**
     * Gets shareholder_yield
     *
     * @return float|null
     */
    public function getShareholderYield()
    {
        return $this->container['shareholder_yield'];
    }

    /**
     * Sets shareholder_yield
     *
     * @param float|null $shareholder_yield shareholder_yield
     *
     * @return self
     */
    public function setShareholderYield($shareholder_yield)
    {
        if (is_null($shareholder_yield)) {
            throw new \InvalidArgumentException('non-nullable shareholder_yield cannot be null');
        }
        $this->container['shareholder_yield'] = $shareholder_yield;

        return $this;
    }

    /**
     * Gets shares_basic
     *
     * @return float|null
     */
    public function getSharesBasic()
    {
        return $this->container['shares_basic'];
    }

    /**
     * Sets shares_basic
     *
     * @param float|null $shares_basic <p>Shares outstanding are shares that have been authorized, issued, and purchased by investors and are held by them. They have voting rights and represent ownership in the corporation by the person that holds the shares. They should be distinguished from treasury shares, which are shares held by the corporation itself, having no exercisable rights. Shares outstanding can be calculated as either basic or fully diluted. The {{Shares_Outstanding}} count includes diluting securities, such as options, warrants or convertibles.</p>
     *
     * @return self
     */
    public function setSharesBasic($shares_basic)
    {
        if (is_null($shares_basic)) {
            throw new \InvalidArgumentException('non-nullable shares_basic cannot be null');
        }
        $this->container['shares_basic'] = $shares_basic;

        return $this;
    }

    /**
     * Gets sloan_ratio
     *
     * @return float|null
     */
    public function getSloanRatio()
    {
        return $this->container['sloan_ratio'];
    }

    /**
     * Sets sloan_ratio
     *
     * @param float|null $sloan_ratio Richard Sloan from the University of Michigan was first to document what is referred to as the 'accrual anomaly'. His 1996 paper found that shares of companies with small or negative accruals vastly outperform (+10%) those of companies with large ones.
     *
     * @return self
     */
    public function setSloanRatio($sloan_ratio)
    {
        if (is_null($sloan_ratio)) {
            throw new \InvalidArgumentException('non-nullable sloan_ratio cannot be null');
        }
        $this->container['sloan_ratio'] = $sloan_ratio;

        return $this;
    }

    /**
     * Gets snoa
     *
     * @return float|null
     */
    public function getSnoa()
    {
        return $this->container['snoa'];
    }

    /**
     * Sets snoa
     *
     * @param float|null $snoa Scaled net operating assets (SNOA) is calculated as the difference between  operating assets and operating liabilities, scaled by lagged total assets.
     *
     * @return self
     */
    public function setSnoa($snoa)
    {
        if (is_null($snoa)) {
            throw new \InvalidArgumentException('non-nullable snoa cannot be null');
        }
        $this->container['snoa'] = $snoa;

        return $this;
    }

    /**
     * Gets total_employee_number
     *
     * @return float|null
     */
    public function getTotalEmployeeNumber()
    {
        return $this->container['total_employee_number'];
    }

    /**
     * Sets total_employee_number
     *
     * @param float|null $total_employee_number The total number of employees for a company
     *
     * @return self
     */
    public function setTotalEmployeeNumber($total_employee_number)
    {
        if (is_null($total_employee_number)) {
            throw new \InvalidArgumentException('non-nullable total_employee_number cannot be null');
        }
        $this->container['total_employee_number'] = $total_employee_number;

        return $this;
    }

    /**
     * Gets zscore
     *
     * @return float|null
     */
    public function getZscore()
    {
        return $this->container['zscore'];
    }

    /**
     * Sets zscore
     *
     * @param float|null $zscore Z-Score model is an accurate forecaster of failure up to two years prior to distress. It can be considered the assessment of the distress of industrial corporations.
     *
     * @return self
     */
    public function setZscore($zscore)
    {
        if (is_null($zscore)) {
            throw new \InvalidArgumentException('non-nullable zscore cannot be null');
        }
        $this->container['zscore'] = $zscore;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


