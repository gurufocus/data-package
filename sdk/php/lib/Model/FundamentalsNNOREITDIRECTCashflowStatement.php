<?php
/**
 * FundamentalsNNOREITDIRECTCashflowStatement
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gurufocus Data Package API
 *
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FundamentalsNNOREITDIRECTCashflowStatement Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FundamentalsNNOREITDIRECTCashflowStatement implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'fundamentals_N_NO_REIT_DIRECT_cashflow_statement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'beginning_cash_position' => 'float',
        'cash_flow_capital_expenditure' => 'float',
        'cash_flow_for_lease_financing' => 'float',
        'cash_flow_from_investing' => 'float',
        'cash_flow_from_operations' => 'float',
        'cash_flow_from_others' => 'float',
        'cash_from_discontinued_investing_activities' => 'float',
        'cash_from_financing' => 'float',
        'cash_from_other_investing_activities' => 'float',
        'cash_payments' => 'float',
        'cash_receipts_from_operating_activities' => 'float',
        'debt_issuance' => 'float',
        'debt_payments' => 'float',
        'dividends' => 'float',
        'dividends_paid_direct' => 'float',
        'dividends_received_direct' => 'float',
        'effect_of_exchange_rate_changes' => 'float',
        'ending_cash_position' => 'float',
        'interest_paid_direct' => 'float',
        'interest_received_direct' => 'float',
        'issuance_of_stock' => 'float',
        'net_change_in_cash' => 'float',
        'net_intangibles_purchase_and_sale' => 'float',
        'net_issuance_of_debt' => 'float',
        'net_issuance_of_preferred' => 'float',
        'other_cash_payments_from_operating_activities' => 'float',
        'other_cash_receipts_from_operating_activities' => 'float',
        'other_financing' => 'float',
        'payments_on_behalf_of_employees' => 'float',
        'payments_to_suppliers_for_goods_and_services' => 'float',
        'purchase_of_business' => 'float',
        'purchase_of_investment' => 'float',
        'purchase_of_ppe' => 'float',
        'receipts_from_customers' => 'float',
        'receipts_from_government_grants' => 'float',
        'repurchase_of_stock' => 'float',
        'sale_of_business' => 'float',
        'sale_of_investment' => 'float',
        'sale_of_ppe' => 'float',
        'taxes_refund_paid_direct' => 'float',
        'total_free_cash_flow' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'beginning_cash_position' => null,
        'cash_flow_capital_expenditure' => null,
        'cash_flow_for_lease_financing' => null,
        'cash_flow_from_investing' => null,
        'cash_flow_from_operations' => null,
        'cash_flow_from_others' => null,
        'cash_from_discontinued_investing_activities' => null,
        'cash_from_financing' => null,
        'cash_from_other_investing_activities' => null,
        'cash_payments' => null,
        'cash_receipts_from_operating_activities' => null,
        'debt_issuance' => null,
        'debt_payments' => null,
        'dividends' => null,
        'dividends_paid_direct' => null,
        'dividends_received_direct' => null,
        'effect_of_exchange_rate_changes' => null,
        'ending_cash_position' => null,
        'interest_paid_direct' => null,
        'interest_received_direct' => null,
        'issuance_of_stock' => null,
        'net_change_in_cash' => null,
        'net_intangibles_purchase_and_sale' => null,
        'net_issuance_of_debt' => null,
        'net_issuance_of_preferred' => null,
        'other_cash_payments_from_operating_activities' => null,
        'other_cash_receipts_from_operating_activities' => null,
        'other_financing' => null,
        'payments_on_behalf_of_employees' => null,
        'payments_to_suppliers_for_goods_and_services' => null,
        'purchase_of_business' => null,
        'purchase_of_investment' => null,
        'purchase_of_ppe' => null,
        'receipts_from_customers' => null,
        'receipts_from_government_grants' => null,
        'repurchase_of_stock' => null,
        'sale_of_business' => null,
        'sale_of_investment' => null,
        'sale_of_ppe' => null,
        'taxes_refund_paid_direct' => null,
        'total_free_cash_flow' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'beginning_cash_position' => false,
        'cash_flow_capital_expenditure' => false,
        'cash_flow_for_lease_financing' => false,
        'cash_flow_from_investing' => false,
        'cash_flow_from_operations' => false,
        'cash_flow_from_others' => false,
        'cash_from_discontinued_investing_activities' => false,
        'cash_from_financing' => false,
        'cash_from_other_investing_activities' => false,
        'cash_payments' => false,
        'cash_receipts_from_operating_activities' => false,
        'debt_issuance' => false,
        'debt_payments' => false,
        'dividends' => false,
        'dividends_paid_direct' => false,
        'dividends_received_direct' => false,
        'effect_of_exchange_rate_changes' => false,
        'ending_cash_position' => false,
        'interest_paid_direct' => false,
        'interest_received_direct' => false,
        'issuance_of_stock' => false,
        'net_change_in_cash' => false,
        'net_intangibles_purchase_and_sale' => false,
        'net_issuance_of_debt' => false,
        'net_issuance_of_preferred' => false,
        'other_cash_payments_from_operating_activities' => false,
        'other_cash_receipts_from_operating_activities' => false,
        'other_financing' => false,
        'payments_on_behalf_of_employees' => false,
        'payments_to_suppliers_for_goods_and_services' => false,
        'purchase_of_business' => false,
        'purchase_of_investment' => false,
        'purchase_of_ppe' => false,
        'receipts_from_customers' => false,
        'receipts_from_government_grants' => false,
        'repurchase_of_stock' => false,
        'sale_of_business' => false,
        'sale_of_investment' => false,
        'sale_of_ppe' => false,
        'taxes_refund_paid_direct' => false,
        'total_free_cash_flow' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'beginning_cash_position' => 'beginning_cash_position',
        'cash_flow_capital_expenditure' => 'cash_flow_capital_expenditure',
        'cash_flow_for_lease_financing' => 'cash_flow_for_lease_financing',
        'cash_flow_from_investing' => 'cash_flow_from_investing',
        'cash_flow_from_operations' => 'cash_flow_from_operations',
        'cash_flow_from_others' => 'cash_flow_from_others',
        'cash_from_discontinued_investing_activities' => 'cash_from_discontinued_investing_activities',
        'cash_from_financing' => 'cash_from_financing',
        'cash_from_other_investing_activities' => 'cash_from_other_investing_activities',
        'cash_payments' => 'cash_payments',
        'cash_receipts_from_operating_activities' => 'cash_receipts_from_operating_activities',
        'debt_issuance' => 'debt_issuance',
        'debt_payments' => 'debt_payments',
        'dividends' => 'dividends',
        'dividends_paid_direct' => 'dividends_paid_direct',
        'dividends_received_direct' => 'dividends_received_direct',
        'effect_of_exchange_rate_changes' => 'effect_of_exchange_rate_changes',
        'ending_cash_position' => 'ending_cash_position',
        'interest_paid_direct' => 'interest_paid_direct',
        'interest_received_direct' => 'interest_received_direct',
        'issuance_of_stock' => 'issuance_of_stock',
        'net_change_in_cash' => 'net_change_in_cash',
        'net_intangibles_purchase_and_sale' => 'net_intangibles_purchase_and_sale',
        'net_issuance_of_debt' => 'net_issuance_of_debt',
        'net_issuance_of_preferred' => 'net_issuance_of_preferred',
        'other_cash_payments_from_operating_activities' => 'other_cash_payments_from_operating_activities',
        'other_cash_receipts_from_operating_activities' => 'other_cash_receipts_from_operating_activities',
        'other_financing' => 'other_financing',
        'payments_on_behalf_of_employees' => 'payments_on_behalf_of_employees',
        'payments_to_suppliers_for_goods_and_services' => 'payments_to_suppliers_for_goods_and_services',
        'purchase_of_business' => 'purchase_of_business',
        'purchase_of_investment' => 'purchase_of_investment',
        'purchase_of_ppe' => 'purchase_of_ppe',
        'receipts_from_customers' => 'receipts_from_customers',
        'receipts_from_government_grants' => 'receipts_from_government_grants',
        'repurchase_of_stock' => 'repurchase_of_stock',
        'sale_of_business' => 'sale_of_business',
        'sale_of_investment' => 'sale_of_investment',
        'sale_of_ppe' => 'sale_of_ppe',
        'taxes_refund_paid_direct' => 'taxes_refund_paid_direct',
        'total_free_cash_flow' => 'total_free_cash_flow'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'beginning_cash_position' => 'setBeginningCashPosition',
        'cash_flow_capital_expenditure' => 'setCashFlowCapitalExpenditure',
        'cash_flow_for_lease_financing' => 'setCashFlowForLeaseFinancing',
        'cash_flow_from_investing' => 'setCashFlowFromInvesting',
        'cash_flow_from_operations' => 'setCashFlowFromOperations',
        'cash_flow_from_others' => 'setCashFlowFromOthers',
        'cash_from_discontinued_investing_activities' => 'setCashFromDiscontinuedInvestingActivities',
        'cash_from_financing' => 'setCashFromFinancing',
        'cash_from_other_investing_activities' => 'setCashFromOtherInvestingActivities',
        'cash_payments' => 'setCashPayments',
        'cash_receipts_from_operating_activities' => 'setCashReceiptsFromOperatingActivities',
        'debt_issuance' => 'setDebtIssuance',
        'debt_payments' => 'setDebtPayments',
        'dividends' => 'setDividends',
        'dividends_paid_direct' => 'setDividendsPaidDirect',
        'dividends_received_direct' => 'setDividendsReceivedDirect',
        'effect_of_exchange_rate_changes' => 'setEffectOfExchangeRateChanges',
        'ending_cash_position' => 'setEndingCashPosition',
        'interest_paid_direct' => 'setInterestPaidDirect',
        'interest_received_direct' => 'setInterestReceivedDirect',
        'issuance_of_stock' => 'setIssuanceOfStock',
        'net_change_in_cash' => 'setNetChangeInCash',
        'net_intangibles_purchase_and_sale' => 'setNetIntangiblesPurchaseAndSale',
        'net_issuance_of_debt' => 'setNetIssuanceOfDebt',
        'net_issuance_of_preferred' => 'setNetIssuanceOfPreferred',
        'other_cash_payments_from_operating_activities' => 'setOtherCashPaymentsFromOperatingActivities',
        'other_cash_receipts_from_operating_activities' => 'setOtherCashReceiptsFromOperatingActivities',
        'other_financing' => 'setOtherFinancing',
        'payments_on_behalf_of_employees' => 'setPaymentsOnBehalfOfEmployees',
        'payments_to_suppliers_for_goods_and_services' => 'setPaymentsToSuppliersForGoodsAndServices',
        'purchase_of_business' => 'setPurchaseOfBusiness',
        'purchase_of_investment' => 'setPurchaseOfInvestment',
        'purchase_of_ppe' => 'setPurchaseOfPpe',
        'receipts_from_customers' => 'setReceiptsFromCustomers',
        'receipts_from_government_grants' => 'setReceiptsFromGovernmentGrants',
        'repurchase_of_stock' => 'setRepurchaseOfStock',
        'sale_of_business' => 'setSaleOfBusiness',
        'sale_of_investment' => 'setSaleOfInvestment',
        'sale_of_ppe' => 'setSaleOfPpe',
        'taxes_refund_paid_direct' => 'setTaxesRefundPaidDirect',
        'total_free_cash_flow' => 'setTotalFreeCashFlow'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'beginning_cash_position' => 'getBeginningCashPosition',
        'cash_flow_capital_expenditure' => 'getCashFlowCapitalExpenditure',
        'cash_flow_for_lease_financing' => 'getCashFlowForLeaseFinancing',
        'cash_flow_from_investing' => 'getCashFlowFromInvesting',
        'cash_flow_from_operations' => 'getCashFlowFromOperations',
        'cash_flow_from_others' => 'getCashFlowFromOthers',
        'cash_from_discontinued_investing_activities' => 'getCashFromDiscontinuedInvestingActivities',
        'cash_from_financing' => 'getCashFromFinancing',
        'cash_from_other_investing_activities' => 'getCashFromOtherInvestingActivities',
        'cash_payments' => 'getCashPayments',
        'cash_receipts_from_operating_activities' => 'getCashReceiptsFromOperatingActivities',
        'debt_issuance' => 'getDebtIssuance',
        'debt_payments' => 'getDebtPayments',
        'dividends' => 'getDividends',
        'dividends_paid_direct' => 'getDividendsPaidDirect',
        'dividends_received_direct' => 'getDividendsReceivedDirect',
        'effect_of_exchange_rate_changes' => 'getEffectOfExchangeRateChanges',
        'ending_cash_position' => 'getEndingCashPosition',
        'interest_paid_direct' => 'getInterestPaidDirect',
        'interest_received_direct' => 'getInterestReceivedDirect',
        'issuance_of_stock' => 'getIssuanceOfStock',
        'net_change_in_cash' => 'getNetChangeInCash',
        'net_intangibles_purchase_and_sale' => 'getNetIntangiblesPurchaseAndSale',
        'net_issuance_of_debt' => 'getNetIssuanceOfDebt',
        'net_issuance_of_preferred' => 'getNetIssuanceOfPreferred',
        'other_cash_payments_from_operating_activities' => 'getOtherCashPaymentsFromOperatingActivities',
        'other_cash_receipts_from_operating_activities' => 'getOtherCashReceiptsFromOperatingActivities',
        'other_financing' => 'getOtherFinancing',
        'payments_on_behalf_of_employees' => 'getPaymentsOnBehalfOfEmployees',
        'payments_to_suppliers_for_goods_and_services' => 'getPaymentsToSuppliersForGoodsAndServices',
        'purchase_of_business' => 'getPurchaseOfBusiness',
        'purchase_of_investment' => 'getPurchaseOfInvestment',
        'purchase_of_ppe' => 'getPurchaseOfPpe',
        'receipts_from_customers' => 'getReceiptsFromCustomers',
        'receipts_from_government_grants' => 'getReceiptsFromGovernmentGrants',
        'repurchase_of_stock' => 'getRepurchaseOfStock',
        'sale_of_business' => 'getSaleOfBusiness',
        'sale_of_investment' => 'getSaleOfInvestment',
        'sale_of_ppe' => 'getSaleOfPpe',
        'taxes_refund_paid_direct' => 'getTaxesRefundPaidDirect',
        'total_free_cash_flow' => 'getTotalFreeCashFlow'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('beginning_cash_position', $data ?? [], null);
        $this->setIfExists('cash_flow_capital_expenditure', $data ?? [], null);
        $this->setIfExists('cash_flow_for_lease_financing', $data ?? [], null);
        $this->setIfExists('cash_flow_from_investing', $data ?? [], null);
        $this->setIfExists('cash_flow_from_operations', $data ?? [], null);
        $this->setIfExists('cash_flow_from_others', $data ?? [], null);
        $this->setIfExists('cash_from_discontinued_investing_activities', $data ?? [], null);
        $this->setIfExists('cash_from_financing', $data ?? [], null);
        $this->setIfExists('cash_from_other_investing_activities', $data ?? [], null);
        $this->setIfExists('cash_payments', $data ?? [], null);
        $this->setIfExists('cash_receipts_from_operating_activities', $data ?? [], null);
        $this->setIfExists('debt_issuance', $data ?? [], null);
        $this->setIfExists('debt_payments', $data ?? [], null);
        $this->setIfExists('dividends', $data ?? [], null);
        $this->setIfExists('dividends_paid_direct', $data ?? [], null);
        $this->setIfExists('dividends_received_direct', $data ?? [], null);
        $this->setIfExists('effect_of_exchange_rate_changes', $data ?? [], null);
        $this->setIfExists('ending_cash_position', $data ?? [], null);
        $this->setIfExists('interest_paid_direct', $data ?? [], null);
        $this->setIfExists('interest_received_direct', $data ?? [], null);
        $this->setIfExists('issuance_of_stock', $data ?? [], null);
        $this->setIfExists('net_change_in_cash', $data ?? [], null);
        $this->setIfExists('net_intangibles_purchase_and_sale', $data ?? [], null);
        $this->setIfExists('net_issuance_of_debt', $data ?? [], null);
        $this->setIfExists('net_issuance_of_preferred', $data ?? [], null);
        $this->setIfExists('other_cash_payments_from_operating_activities', $data ?? [], null);
        $this->setIfExists('other_cash_receipts_from_operating_activities', $data ?? [], null);
        $this->setIfExists('other_financing', $data ?? [], null);
        $this->setIfExists('payments_on_behalf_of_employees', $data ?? [], null);
        $this->setIfExists('payments_to_suppliers_for_goods_and_services', $data ?? [], null);
        $this->setIfExists('purchase_of_business', $data ?? [], null);
        $this->setIfExists('purchase_of_investment', $data ?? [], null);
        $this->setIfExists('purchase_of_ppe', $data ?? [], null);
        $this->setIfExists('receipts_from_customers', $data ?? [], null);
        $this->setIfExists('receipts_from_government_grants', $data ?? [], null);
        $this->setIfExists('repurchase_of_stock', $data ?? [], null);
        $this->setIfExists('sale_of_business', $data ?? [], null);
        $this->setIfExists('sale_of_investment', $data ?? [], null);
        $this->setIfExists('sale_of_ppe', $data ?? [], null);
        $this->setIfExists('taxes_refund_paid_direct', $data ?? [], null);
        $this->setIfExists('total_free_cash_flow', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets beginning_cash_position
     *
     * @return float|null
     */
    public function getBeginningCashPosition()
    {
        return $this->container['beginning_cash_position'];
    }

    /**
     * Sets beginning_cash_position
     *
     * @param float|null $beginning_cash_position beginning_cash_position
     *
     * @return self
     */
    public function setBeginningCashPosition($beginning_cash_position)
    {
        if (is_null($beginning_cash_position)) {
            throw new \InvalidArgumentException('non-nullable beginning_cash_position cannot be null');
        }
        $this->container['beginning_cash_position'] = $beginning_cash_position;

        return $this;
    }

    /**
     * Gets cash_flow_capital_expenditure
     *
     * @return float|null
     */
    public function getCashFlowCapitalExpenditure()
    {
        return $this->container['cash_flow_capital_expenditure'];
    }

    /**
     * Sets cash_flow_capital_expenditure
     *
     * @param float|null $cash_flow_capital_expenditure <p>{{Cash_Flow_CPEX}} refers to the funds spent for a company to acquire or upgrade physical assets such as property, industrial buildings or equipment.</p>
     *
     * @return self
     */
    public function setCashFlowCapitalExpenditure($cash_flow_capital_expenditure)
    {
        if (is_null($cash_flow_capital_expenditure)) {
            throw new \InvalidArgumentException('non-nullable cash_flow_capital_expenditure cannot be null');
        }
        $this->container['cash_flow_capital_expenditure'] = $cash_flow_capital_expenditure;

        return $this;
    }

    /**
     * Gets cash_flow_for_lease_financing
     *
     * @return float|null
     */
    public function getCashFlowForLeaseFinancing()
    {
        return $this->container['cash_flow_for_lease_financing'];
    }

    /**
     * Sets cash_flow_for_lease_financing
     *
     * @param float|null $cash_flow_for_lease_financing https://www.gurufocus.com/glossary/cash_flow_for_lease_financing
     *
     * @return self
     */
    public function setCashFlowForLeaseFinancing($cash_flow_for_lease_financing)
    {
        if (is_null($cash_flow_for_lease_financing)) {
            throw new \InvalidArgumentException('non-nullable cash_flow_for_lease_financing cannot be null');
        }
        $this->container['cash_flow_for_lease_financing'] = $cash_flow_for_lease_financing;

        return $this;
    }

    /**
     * Gets cash_flow_from_investing
     *
     * @return float|null
     */
    public function getCashFlowFromInvesting()
    {
        return $this->container['cash_flow_from_investing'];
    }

    /**
     * Sets cash_flow_from_investing
     *
     * @param float|null $cash_flow_from_investing <p>{{Cash_Flow_from_Investing}} covers the cash a company gains or spends from investment activities in financial market and operating subsidiaries. It also includes the cash the company used for {{Net_PPE}}(PPE). If a company spends cash on {{Net_PPE}} (PPE), this will reduce their cash position. This is called {{Cash_Flow_CPEX}} (CPEX). Likewise, if a company buys another company for cash, this will reduce their cash position. <br>{{Cash_Flow_from_Investing}} is calculated as {{Cash_Flow_from_Investing}} = {{PurchaseOfPPE}} + {{SaleOfPPE}} + {{PurchaseOfBusiness}} + {{SaleOfBusiness}} + {{PurchaseOfInvestment}} + {{SaleOfInvestment}} + {{NetIntangiblesPurchaseAndSale}} + {{CashFromDiscontinuedInvestingActivities}} + {{CashFromOtherInvestingActivities}}</p>
     *
     * @return self
     */
    public function setCashFlowFromInvesting($cash_flow_from_investing)
    {
        if (is_null($cash_flow_from_investing)) {
            throw new \InvalidArgumentException('non-nullable cash_flow_from_investing cannot be null');
        }
        $this->container['cash_flow_from_investing'] = $cash_flow_from_investing;

        return $this;
    }

    /**
     * Gets cash_flow_from_operations
     *
     * @return float|null
     */
    public function getCashFlowFromOperations()
    {
        return $this->container['cash_flow_from_operations'];
    }

    /**
     * Sets cash_flow_from_operations
     *
     * @param float|null $cash_flow_from_operations <p>{{Cash_Flow_from_Operations}} refers to the cash brought in through a company's sales. <br>Therefore, {{Cash_Flow_from_Operations}} = {{NetIncomeFromContinuingOperations}} + {{CF_DDA}} + {ChangeInWorkingCapital}} + Deferred Tax + {{Cash_Flow_from_Disc_Op}} + {{AssetImpairmentCharge}} + {{StockBasedCompensation}} + {{Cash_Flow_from_Others}}</p>
     *
     * @return self
     */
    public function setCashFlowFromOperations($cash_flow_from_operations)
    {
        if (is_null($cash_flow_from_operations)) {
            throw new \InvalidArgumentException('non-nullable cash_flow_from_operations cannot be null');
        }
        $this->container['cash_flow_from_operations'] = $cash_flow_from_operations;

        return $this;
    }

    /**
     * Gets cash_flow_from_others
     *
     * @return float|null
     */
    public function getCashFlowFromOthers()
    {
        return $this->container['cash_flow_from_others'];
    }

    /**
     * Sets cash_flow_from_others
     *
     * @param float|null $cash_flow_from_others <p>{{Cash_Flow_from_Others}} may include {{ChangeInWorkingCapital}}. These are cash differences caused by the {{ChangeInInventory}}, {{AccountsPayable}}, {{Accts_Rec}} etc. For instance, if a company pays its suppliers slower, its cash position will build up faster. If a company receives payments from its customers slower, its {{Accts_Rec}} will rise, and its cash position will grow more slowly (or even shrink).</p>
     *
     * @return self
     */
    public function setCashFlowFromOthers($cash_flow_from_others)
    {
        if (is_null($cash_flow_from_others)) {
            throw new \InvalidArgumentException('non-nullable cash_flow_from_others cannot be null');
        }
        $this->container['cash_flow_from_others'] = $cash_flow_from_others;

        return $this;
    }

    /**
     * Gets cash_from_discontinued_investing_activities
     *
     * @return float|null
     */
    public function getCashFromDiscontinuedInvestingActivities()
    {
        return $this->container['cash_from_discontinued_investing_activities'];
    }

    /**
     * Sets cash_from_discontinued_investing_activities
     *
     * @param float|null $cash_from_discontinued_investing_activities <p>{{CashFromDiscontinuedInvestingActivities}} means the cash received by a company that comes from the discontinued investing activities.</p>
     *
     * @return self
     */
    public function setCashFromDiscontinuedInvestingActivities($cash_from_discontinued_investing_activities)
    {
        if (is_null($cash_from_discontinued_investing_activities)) {
            throw new \InvalidArgumentException('non-nullable cash_from_discontinued_investing_activities cannot be null');
        }
        $this->container['cash_from_discontinued_investing_activities'] = $cash_from_discontinued_investing_activities;

        return $this;
    }

    /**
     * Gets cash_from_financing
     *
     * @return float|null
     */
    public function getCashFromFinancing()
    {
        return $this->container['cash_from_financing'];
    }

    /**
     * Sets cash_from_financing
     *
     * @param float|null $cash_from_financing <p>{{Cash_from_Financing}} is the cash generated/spent from financial activities such as share issuance (buy back), debt issuance (repayment), and dividends paid to preferred and common stockholders. In the calculation of {{total_freecashflow}}, {{Cash_from_Financing}} is not calculated because it is not related to operating activities. <br>{{Cash_from_Financing}} = {{Issuance_of_Stock}} + {{Repurchase_of_Stock}} + {{Net_Issuance_of_Debt}} + {{Net_Issuance_of_preferred}} + {{Dividends}} + Other Financing</p>
     *
     * @return self
     */
    public function setCashFromFinancing($cash_from_financing)
    {
        if (is_null($cash_from_financing)) {
            throw new \InvalidArgumentException('non-nullable cash_from_financing cannot be null');
        }
        $this->container['cash_from_financing'] = $cash_from_financing;

        return $this;
    }

    /**
     * Gets cash_from_other_investing_activities
     *
     * @return float|null
     */
    public function getCashFromOtherInvestingActivities()
    {
        return $this->container['cash_from_other_investing_activities'];
    }

    /**
     * Sets cash_from_other_investing_activities
     *
     * @param float|null $cash_from_other_investing_activities <p>{{CashFromOtherInvestingActivities}} means the cash received by a company that comes from other investing activities.</p>
     *
     * @return self
     */
    public function setCashFromOtherInvestingActivities($cash_from_other_investing_activities)
    {
        if (is_null($cash_from_other_investing_activities)) {
            throw new \InvalidArgumentException('non-nullable cash_from_other_investing_activities cannot be null');
        }
        $this->container['cash_from_other_investing_activities'] = $cash_from_other_investing_activities;

        return $this;
    }

    /**
     * Gets cash_payments
     *
     * @return float|null
     */
    public function getCashPayments()
    {
        return $this->container['cash_payments'];
    }

    /**
     * Sets cash_payments
     *
     * @param float|null $cash_payments cash_payments
     *
     * @return self
     */
    public function setCashPayments($cash_payments)
    {
        if (is_null($cash_payments)) {
            throw new \InvalidArgumentException('non-nullable cash_payments cannot be null');
        }
        $this->container['cash_payments'] = $cash_payments;

        return $this;
    }

    /**
     * Gets cash_receipts_from_operating_activities
     *
     * @return float|null
     */
    public function getCashReceiptsFromOperatingActivities()
    {
        return $this->container['cash_receipts_from_operating_activities'];
    }

    /**
     * Sets cash_receipts_from_operating_activities
     *
     * @param float|null $cash_receipts_from_operating_activities <p>Cash flow from operations refers to the cash brought in through a company's normal business operations. It is the cash flow before any investment or financing activities. It is the cash version of {{Net_Income}}. <br>{{Cash_Flow_from_Operations}} = {{Net_Income}} + {{DDA}} + {{Cash_Flow_from_Disc_Op}} + {{Cash_Flow_from_Others}}</p>
     *
     * @return self
     */
    public function setCashReceiptsFromOperatingActivities($cash_receipts_from_operating_activities)
    {
        if (is_null($cash_receipts_from_operating_activities)) {
            throw new \InvalidArgumentException('non-nullable cash_receipts_from_operating_activities cannot be null');
        }
        $this->container['cash_receipts_from_operating_activities'] = $cash_receipts_from_operating_activities;

        return $this;
    }

    /**
     * Gets debt_issuance
     *
     * @return float|null
     */
    public function getDebtIssuance()
    {
        return $this->container['debt_issuance'];
    }

    /**
     * Sets debt_issuance
     *
     * @param float|null $debt_issuance debt_issuance
     *
     * @return self
     */
    public function setDebtIssuance($debt_issuance)
    {
        if (is_null($debt_issuance)) {
            throw new \InvalidArgumentException('non-nullable debt_issuance cannot be null');
        }
        $this->container['debt_issuance'] = $debt_issuance;

        return $this;
    }

    /**
     * Gets debt_payments
     *
     * @return float|null
     */
    public function getDebtPayments()
    {
        return $this->container['debt_payments'];
    }

    /**
     * Sets debt_payments
     *
     * @param float|null $debt_payments debt_payments
     *
     * @return self
     */
    public function setDebtPayments($debt_payments)
    {
        if (is_null($debt_payments)) {
            throw new \InvalidArgumentException('non-nullable debt_payments cannot be null');
        }
        $this->container['debt_payments'] = $debt_payments;

        return $this;
    }

    /**
     * Gets dividends
     *
     * @return float|null
     */
    public function getDividends()
    {
        return $this->container['dividends'];
    }

    /**
     * Sets dividends
     *
     * @param float|null $dividends <p>{{Dividends}} refers to the payment of cash to shareholders as dividends when the company generates income.</p>
     *
     * @return self
     */
    public function setDividends($dividends)
    {
        if (is_null($dividends)) {
            throw new \InvalidArgumentException('non-nullable dividends cannot be null');
        }
        $this->container['dividends'] = $dividends;

        return $this;
    }

    /**
     * Gets dividends_paid_direct
     *
     * @return float|null
     */
    public function getDividendsPaidDirect()
    {
        return $this->container['dividends_paid_direct'];
    }

    /**
     * Sets dividends_paid_direct
     *
     * @param float|null $dividends_paid_direct dividends_paid_direct
     *
     * @return self
     */
    public function setDividendsPaidDirect($dividends_paid_direct)
    {
        if (is_null($dividends_paid_direct)) {
            throw new \InvalidArgumentException('non-nullable dividends_paid_direct cannot be null');
        }
        $this->container['dividends_paid_direct'] = $dividends_paid_direct;

        return $this;
    }

    /**
     * Gets dividends_received_direct
     *
     * @return float|null
     */
    public function getDividendsReceivedDirect()
    {
        return $this->container['dividends_received_direct'];
    }

    /**
     * Sets dividends_received_direct
     *
     * @param float|null $dividends_received_direct dividends_received_direct
     *
     * @return self
     */
    public function setDividendsReceivedDirect($dividends_received_direct)
    {
        if (is_null($dividends_received_direct)) {
            throw new \InvalidArgumentException('non-nullable dividends_received_direct cannot be null');
        }
        $this->container['dividends_received_direct'] = $dividends_received_direct;

        return $this;
    }

    /**
     * Gets effect_of_exchange_rate_changes
     *
     * @return float|null
     */
    public function getEffectOfExchangeRateChanges()
    {
        return $this->container['effect_of_exchange_rate_changes'];
    }

    /**
     * Sets effect_of_exchange_rate_changes
     *
     * @param float|null $effect_of_exchange_rate_changes effect_of_exchange_rate_changes
     *
     * @return self
     */
    public function setEffectOfExchangeRateChanges($effect_of_exchange_rate_changes)
    {
        if (is_null($effect_of_exchange_rate_changes)) {
            throw new \InvalidArgumentException('non-nullable effect_of_exchange_rate_changes cannot be null');
        }
        $this->container['effect_of_exchange_rate_changes'] = $effect_of_exchange_rate_changes;

        return $this;
    }

    /**
     * Gets ending_cash_position
     *
     * @return float|null
     */
    public function getEndingCashPosition()
    {
        return $this->container['ending_cash_position'];
    }

    /**
     * Sets ending_cash_position
     *
     * @param float|null $ending_cash_position ending_cash_position
     *
     * @return self
     */
    public function setEndingCashPosition($ending_cash_position)
    {
        if (is_null($ending_cash_position)) {
            throw new \InvalidArgumentException('non-nullable ending_cash_position cannot be null');
        }
        $this->container['ending_cash_position'] = $ending_cash_position;

        return $this;
    }

    /**
     * Gets interest_paid_direct
     *
     * @return float|null
     */
    public function getInterestPaidDirect()
    {
        return $this->container['interest_paid_direct'];
    }

    /**
     * Sets interest_paid_direct
     *
     * @param float|null $interest_paid_direct interest_paid_direct
     *
     * @return self
     */
    public function setInterestPaidDirect($interest_paid_direct)
    {
        if (is_null($interest_paid_direct)) {
            throw new \InvalidArgumentException('non-nullable interest_paid_direct cannot be null');
        }
        $this->container['interest_paid_direct'] = $interest_paid_direct;

        return $this;
    }

    /**
     * Gets interest_received_direct
     *
     * @return float|null
     */
    public function getInterestReceivedDirect()
    {
        return $this->container['interest_received_direct'];
    }

    /**
     * Sets interest_received_direct
     *
     * @param float|null $interest_received_direct interest_received_direct
     *
     * @return self
     */
    public function setInterestReceivedDirect($interest_received_direct)
    {
        if (is_null($interest_received_direct)) {
            throw new \InvalidArgumentException('non-nullable interest_received_direct cannot be null');
        }
        $this->container['interest_received_direct'] = $interest_received_direct;

        return $this;
    }

    /**
     * Gets issuance_of_stock
     *
     * @return float|null
     */
    public function getIssuanceOfStock()
    {
        return $this->container['issuance_of_stock'];
    }

    /**
     * Sets issuance_of_stock
     *
     * @param float|null $issuance_of_stock <p>A company may raise cash from issuing new shares. It can also use cash to buy back shares. If this number is positive, it means that the company has received more cash from issuing shares than it has paid to buy back shares. If this number is negative, it means that company has paid more cash to buy back shares than it has received for issuing shares.</p>
     *
     * @return self
     */
    public function setIssuanceOfStock($issuance_of_stock)
    {
        if (is_null($issuance_of_stock)) {
            throw new \InvalidArgumentException('non-nullable issuance_of_stock cannot be null');
        }
        $this->container['issuance_of_stock'] = $issuance_of_stock;

        return $this;
    }

    /**
     * Gets net_change_in_cash
     *
     * @return float|null
     */
    public function getNetChangeInCash()
    {
        return $this->container['net_change_in_cash'];
    }

    /**
     * Sets net_change_in_cash
     *
     * @param float|null $net_change_in_cash <p>{{Net_Change_in_Cash}} is calculated as {{Net_Change_in_Cash}} = {{Cash_Flow_from_Operations}} + {{Cash_Flow_from_Investing}} + {{Cash_from_Financing}} + {{effect_of_exchange_rate_changes}}</p>
     *
     * @return self
     */
    public function setNetChangeInCash($net_change_in_cash)
    {
        if (is_null($net_change_in_cash)) {
            throw new \InvalidArgumentException('non-nullable net_change_in_cash cannot be null');
        }
        $this->container['net_change_in_cash'] = $net_change_in_cash;

        return $this;
    }

    /**
     * Gets net_intangibles_purchase_and_sale
     *
     * @return float|null
     */
    public function getNetIntangiblesPurchaseAndSale()
    {
        return $this->container['net_intangibles_purchase_and_sale'];
    }

    /**
     * Sets net_intangibles_purchase_and_sale
     *
     * @param float|null $net_intangibles_purchase_and_sale <p>{{NetIntangiblesPurchaseAndSale}} means the net cash inflow received by a company that comes from the purchase and sale of intangibles. It equals the cash received from sale of intangibles minus the cash spent on purchasing intangibles.</p>
     *
     * @return self
     */
    public function setNetIntangiblesPurchaseAndSale($net_intangibles_purchase_and_sale)
    {
        if (is_null($net_intangibles_purchase_and_sale)) {
            throw new \InvalidArgumentException('non-nullable net_intangibles_purchase_and_sale cannot be null');
        }
        $this->container['net_intangibles_purchase_and_sale'] = $net_intangibles_purchase_and_sale;

        return $this;
    }

    /**
     * Gets net_issuance_of_debt
     *
     * @return float|null
     */
    public function getNetIssuanceOfDebt()
    {
        return $this->container['net_issuance_of_debt'];
    }

    /**
     * Sets net_issuance_of_debt
     *
     * @param float|null $net_issuance_of_debt <p>{{Net_Issuance_of_Debt}} is the cash a company received or spent through debt related activities such as debt issuance or debt repayment. If a company pays down its debt during the period, this number will be negative. If a company issued more debt, it receives cash and this number is positive.</p>
     *
     * @return self
     */
    public function setNetIssuanceOfDebt($net_issuance_of_debt)
    {
        if (is_null($net_issuance_of_debt)) {
            throw new \InvalidArgumentException('non-nullable net_issuance_of_debt cannot be null');
        }
        $this->container['net_issuance_of_debt'] = $net_issuance_of_debt;

        return $this;
    }

    /**
     * Gets net_issuance_of_preferred
     *
     * @return float|null
     */
    public function getNetIssuanceOfPreferred()
    {
        return $this->container['net_issuance_of_preferred'];
    }

    /**
     * Sets net_issuance_of_preferred
     *
     * @param float|null $net_issuance_of_preferred <p>A company may raise cash from issuing new preferred shares. It can also use cash to buy back preferred shares. If this number is positive, it means that the company has received more cash from issuing preferred shares than it has paid to buy back preferred shares. If this number is negative, it means that company has paid more cash to buy back preferred shares than it has received for issuing preferred shares.</p>
     *
     * @return self
     */
    public function setNetIssuanceOfPreferred($net_issuance_of_preferred)
    {
        if (is_null($net_issuance_of_preferred)) {
            throw new \InvalidArgumentException('non-nullable net_issuance_of_preferred cannot be null');
        }
        $this->container['net_issuance_of_preferred'] = $net_issuance_of_preferred;

        return $this;
    }

    /**
     * Gets other_cash_payments_from_operating_activities
     *
     * @return float|null
     */
    public function getOtherCashPaymentsFromOperatingActivities()
    {
        return $this->container['other_cash_payments_from_operating_activities'];
    }

    /**
     * Sets other_cash_payments_from_operating_activities
     *
     * @param float|null $other_cash_payments_from_operating_activities other_cash_payments_from_operating_activities
     *
     * @return self
     */
    public function setOtherCashPaymentsFromOperatingActivities($other_cash_payments_from_operating_activities)
    {
        if (is_null($other_cash_payments_from_operating_activities)) {
            throw new \InvalidArgumentException('non-nullable other_cash_payments_from_operating_activities cannot be null');
        }
        $this->container['other_cash_payments_from_operating_activities'] = $other_cash_payments_from_operating_activities;

        return $this;
    }

    /**
     * Gets other_cash_receipts_from_operating_activities
     *
     * @return float|null
     */
    public function getOtherCashReceiptsFromOperatingActivities()
    {
        return $this->container['other_cash_receipts_from_operating_activities'];
    }

    /**
     * Sets other_cash_receipts_from_operating_activities
     *
     * @param float|null $other_cash_receipts_from_operating_activities <p>{{CashFromOtherInvestingActivities}} means the cash received by a company that comes from other investing activities.</p>
     *
     * @return self
     */
    public function setOtherCashReceiptsFromOperatingActivities($other_cash_receipts_from_operating_activities)
    {
        if (is_null($other_cash_receipts_from_operating_activities)) {
            throw new \InvalidArgumentException('non-nullable other_cash_receipts_from_operating_activities cannot be null');
        }
        $this->container['other_cash_receipts_from_operating_activities'] = $other_cash_receipts_from_operating_activities;

        return $this;
    }

    /**
     * Gets other_financing
     *
     * @return float|null
     */
    public function getOtherFinancing()
    {
        return $this->container['other_financing'];
    }

    /**
     * Sets other_financing
     *
     * @param float|null $other_financing <p>{{Other_Financing}} represents other {{Cash_from_Financing}} activity that not otherwise classified, which includes: Proceeds From Stock Option Exercised, Other Financing Charges.</p>
     *
     * @return self
     */
    public function setOtherFinancing($other_financing)
    {
        if (is_null($other_financing)) {
            throw new \InvalidArgumentException('non-nullable other_financing cannot be null');
        }
        $this->container['other_financing'] = $other_financing;

        return $this;
    }

    /**
     * Gets payments_on_behalf_of_employees
     *
     * @return float|null
     */
    public function getPaymentsOnBehalfOfEmployees()
    {
        return $this->container['payments_on_behalf_of_employees'];
    }

    /**
     * Sets payments_on_behalf_of_employees
     *
     * @param float|null $payments_on_behalf_of_employees payments_on_behalf_of_employees
     *
     * @return self
     */
    public function setPaymentsOnBehalfOfEmployees($payments_on_behalf_of_employees)
    {
        if (is_null($payments_on_behalf_of_employees)) {
            throw new \InvalidArgumentException('non-nullable payments_on_behalf_of_employees cannot be null');
        }
        $this->container['payments_on_behalf_of_employees'] = $payments_on_behalf_of_employees;

        return $this;
    }

    /**
     * Gets payments_to_suppliers_for_goods_and_services
     *
     * @return float|null
     */
    public function getPaymentsToSuppliersForGoodsAndServices()
    {
        return $this->container['payments_to_suppliers_for_goods_and_services'];
    }

    /**
     * Sets payments_to_suppliers_for_goods_and_services
     *
     * @param float|null $payments_to_suppliers_for_goods_and_services Cash flow statement direct method: the total cash payments to suppliers
     *
     * @return self
     */
    public function setPaymentsToSuppliersForGoodsAndServices($payments_to_suppliers_for_goods_and_services)
    {
        if (is_null($payments_to_suppliers_for_goods_and_services)) {
            throw new \InvalidArgumentException('non-nullable payments_to_suppliers_for_goods_and_services cannot be null');
        }
        $this->container['payments_to_suppliers_for_goods_and_services'] = $payments_to_suppliers_for_goods_and_services;

        return $this;
    }

    /**
     * Gets purchase_of_business
     *
     * @return float|null
     */
    public function getPurchaseOfBusiness()
    {
        return $this->container['purchase_of_business'];
    }

    /**
     * Sets purchase_of_business
     *
     * @param float|null $purchase_of_business <p>{{PurchaseOfBusiness}} is the amount used to purchase business.</p>
     *
     * @return self
     */
    public function setPurchaseOfBusiness($purchase_of_business)
    {
        if (is_null($purchase_of_business)) {
            throw new \InvalidArgumentException('non-nullable purchase_of_business cannot be null');
        }
        $this->container['purchase_of_business'] = $purchase_of_business;

        return $this;
    }

    /**
     * Gets purchase_of_investment
     *
     * @return float|null
     */
    public function getPurchaseOfInvestment()
    {
        return $this->container['purchase_of_investment'];
    }

    /**
     * Sets purchase_of_investment
     *
     * @param float|null $purchase_of_investment <p>{{PurchaseOfInvestment}} represents cash outflow on the purchase of investments in securities.</p>
     *
     * @return self
     */
    public function setPurchaseOfInvestment($purchase_of_investment)
    {
        if (is_null($purchase_of_investment)) {
            throw new \InvalidArgumentException('non-nullable purchase_of_investment cannot be null');
        }
        $this->container['purchase_of_investment'] = $purchase_of_investment;

        return $this;
    }

    /**
     * Gets purchase_of_ppe
     *
     * @return float|null
     */
    public function getPurchaseOfPpe()
    {
        return $this->container['purchase_of_ppe'];
    }

    /**
     * Sets purchase_of_ppe
     *
     * @param float|null $purchase_of_ppe <p>{{PurchaseOfPPE}} is the amount used to purchase Property, Plant and Equipment.</p>
     *
     * @return self
     */
    public function setPurchaseOfPpe($purchase_of_ppe)
    {
        if (is_null($purchase_of_ppe)) {
            throw new \InvalidArgumentException('non-nullable purchase_of_ppe cannot be null');
        }
        $this->container['purchase_of_ppe'] = $purchase_of_ppe;

        return $this;
    }

    /**
     * Gets receipts_from_customers
     *
     * @return float|null
     */
    public function getReceiptsFromCustomers()
    {
        return $this->container['receipts_from_customers'];
    }

    /**
     * Sets receipts_from_customers
     *
     * @param float|null $receipts_from_customers Cash flow statement direct method: cash collections from customers
     *
     * @return self
     */
    public function setReceiptsFromCustomers($receipts_from_customers)
    {
        if (is_null($receipts_from_customers)) {
            throw new \InvalidArgumentException('non-nullable receipts_from_customers cannot be null');
        }
        $this->container['receipts_from_customers'] = $receipts_from_customers;

        return $this;
    }

    /**
     * Gets receipts_from_government_grants
     *
     * @return float|null
     */
    public function getReceiptsFromGovernmentGrants()
    {
        return $this->container['receipts_from_government_grants'];
    }

    /**
     * Sets receipts_from_government_grants
     *
     * @param float|null $receipts_from_government_grants receipts_from_government_grants
     *
     * @return self
     */
    public function setReceiptsFromGovernmentGrants($receipts_from_government_grants)
    {
        if (is_null($receipts_from_government_grants)) {
            throw new \InvalidArgumentException('non-nullable receipts_from_government_grants cannot be null');
        }
        $this->container['receipts_from_government_grants'] = $receipts_from_government_grants;

        return $this;
    }

    /**
     * Gets repurchase_of_stock
     *
     * @return float|null
     */
    public function getRepurchaseOfStock()
    {
        return $this->container['repurchase_of_stock'];
    }

    /**
     * Sets repurchase_of_stock
     *
     * @param float|null $repurchase_of_stock <p>A company may raise cash from issuing new shares. It can also use cash to buy back shares. {{Repurchase_of_Stock}} represents the cash outflow to reacquire common stock during the period.</p>
     *
     * @return self
     */
    public function setRepurchaseOfStock($repurchase_of_stock)
    {
        if (is_null($repurchase_of_stock)) {
            throw new \InvalidArgumentException('non-nullable repurchase_of_stock cannot be null');
        }
        $this->container['repurchase_of_stock'] = $repurchase_of_stock;

        return $this;
    }

    /**
     * Gets sale_of_business
     *
     * @return float|null
     */
    public function getSaleOfBusiness()
    {
        return $this->container['sale_of_business'];
    }

    /**
     * Sets sale_of_business
     *
     * @param float|null $sale_of_business <p>{{SaleOfBusiness}} is the amount earned to sell business.</p>
     *
     * @return self
     */
    public function setSaleOfBusiness($sale_of_business)
    {
        if (is_null($sale_of_business)) {
            throw new \InvalidArgumentException('non-nullable sale_of_business cannot be null');
        }
        $this->container['sale_of_business'] = $sale_of_business;

        return $this;
    }

    /**
     * Gets sale_of_investment
     *
     * @return float|null
     */
    public function getSaleOfInvestment()
    {
        return $this->container['sale_of_investment'];
    }

    /**
     * Sets sale_of_investment
     *
     * @param float|null $sale_of_investment <p>{{SaleOfInvestment}} represents cash inflow on the sale of investments in securities.</p>
     *
     * @return self
     */
    public function setSaleOfInvestment($sale_of_investment)
    {
        if (is_null($sale_of_investment)) {
            throw new \InvalidArgumentException('non-nullable sale_of_investment cannot be null');
        }
        $this->container['sale_of_investment'] = $sale_of_investment;

        return $this;
    }

    /**
     * Gets sale_of_ppe
     *
     * @return float|null
     */
    public function getSaleOfPpe()
    {
        return $this->container['sale_of_ppe'];
    }

    /**
     * Sets sale_of_ppe
     *
     * @param float|null $sale_of_ppe <p>{{SaleOfPPE}} is the amount earned to sell {{Net_PPE}}. </p>
     *
     * @return self
     */
    public function setSaleOfPpe($sale_of_ppe)
    {
        if (is_null($sale_of_ppe)) {
            throw new \InvalidArgumentException('non-nullable sale_of_ppe cannot be null');
        }
        $this->container['sale_of_ppe'] = $sale_of_ppe;

        return $this;
    }

    /**
     * Gets taxes_refund_paid_direct
     *
     * @return float|null
     */
    public function getTaxesRefundPaidDirect()
    {
        return $this->container['taxes_refund_paid_direct'];
    }

    /**
     * Sets taxes_refund_paid_direct
     *
     * @param float|null $taxes_refund_paid_direct taxes_refund_paid_direct
     *
     * @return self
     */
    public function setTaxesRefundPaidDirect($taxes_refund_paid_direct)
    {
        if (is_null($taxes_refund_paid_direct)) {
            throw new \InvalidArgumentException('non-nullable taxes_refund_paid_direct cannot be null');
        }
        $this->container['taxes_refund_paid_direct'] = $taxes_refund_paid_direct;

        return $this;
    }

    /**
     * Gets total_free_cash_flow
     *
     * @return float|null
     */
    public function getTotalFreeCashFlow()
    {
        return $this->container['total_free_cash_flow'];
    }

    /**
     * Sets total_free_cash_flow
     *
     * @param float|null $total_free_cash_flow <p>{{total_freecashflow}} is considered one of the most important parameters to measure a company's earnings power by value investors because it is not subject to estimates of {{DDA}} (DDA). However, when we look at the {{total_freecashflow}}, we should look from a long term perspective, because any year's {{total_freecashflow}} can be drastically affected by the spending on {{Net_PPE}} (PPE) of the business in that year. Over the long term, {{total_freecashflow}} should give pretty good picture on the real earnings power of the company. <br>{{total_freecashflow}} is calculated as {{total_freecashflow}} = {{cash_Flow_from_Operations}} + {{Cash_Flow_CPEX}}</p>
     *
     * @return self
     */
    public function setTotalFreeCashFlow($total_free_cash_flow)
    {
        if (is_null($total_free_cash_flow)) {
            throw new \InvalidArgumentException('non-nullable total_free_cash_flow cannot be null');
        }
        $this->container['total_free_cash_flow'] = $total_free_cash_flow;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


