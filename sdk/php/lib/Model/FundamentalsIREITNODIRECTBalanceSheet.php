<?php
/**
 * FundamentalsIREITNODIRECTBalanceSheet
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gurufocus Data Package API
 *
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FundamentalsIREITNODIRECTBalanceSheet Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FundamentalsIREITNODIRECTBalanceSheet implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'fundamentals_I_REIT_NO_DIRECT_balance_sheet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accounts_receivable' => 'float',
        'accumulated_other_comprehensive_income' => 'float',
        'additional_paid_in_capital' => 'float',
        'bs_cash_and_cash_equivalents' => 'float',
        'bs_current_deferred_liabilities' => 'float',
        'bs_deferred_policy_acquisition_costs' => 'float',
        'bs_equity_investments' => 'float',
        'bs_fixed_maturity_investment' => 'float',
        'bs_future_policy_benefits' => 'float',
        'bs_net_loan' => 'float',
        'bs_other_assets_insurance' => 'float',
        'bs_other_liabilities_insurance' => 'float',
        'bs_payables_and_accrued_expenses' => 'float',
        'bs_policyholder_funds' => 'float',
        'bs_trading_assets' => 'float',
        'bs_unearned_premiums' => 'float',
        'bs_unpaid_loss_and_loss_reserve' => 'float',
        'common_stock' => 'float',
        'current_deferred_revenue' => 'float',
        'current_deferred_taxes_liabilities' => 'float',
        'debt_to_equity' => 'float',
        'equity_to_asset' => 'float',
        'good_will' => 'float',
        'intangibles' => 'float',
        'long_term_debt_and_capital_lease_obligation' => 'float',
        'minority_interest' => 'float',
        'net_ppe' => 'float',
        'non_current_deferred_income_tax' => 'float',
        'non_current_deferred_liabilities' => 'float',
        'notes_receivable' => 'float',
        'other_current_receivables' => 'float',
        'other_equity' => 'float',
        'preferred_stock' => 'float',
        'retained_earnings' => 'float',
        'short_term_debt_and_capital_lease_obligation' => 'float',
        'total_assets' => 'float',
        'total_equity' => 'float',
        'total_liabilities' => 'float',
        'total_receivables' => 'float',
        'total_stockholders_equity' => 'float',
        'treasury_stock' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accounts_receivable' => null,
        'accumulated_other_comprehensive_income' => null,
        'additional_paid_in_capital' => null,
        'bs_cash_and_cash_equivalents' => null,
        'bs_current_deferred_liabilities' => null,
        'bs_deferred_policy_acquisition_costs' => null,
        'bs_equity_investments' => null,
        'bs_fixed_maturity_investment' => null,
        'bs_future_policy_benefits' => null,
        'bs_net_loan' => null,
        'bs_other_assets_insurance' => null,
        'bs_other_liabilities_insurance' => null,
        'bs_payables_and_accrued_expenses' => null,
        'bs_policyholder_funds' => null,
        'bs_trading_assets' => null,
        'bs_unearned_premiums' => null,
        'bs_unpaid_loss_and_loss_reserve' => null,
        'common_stock' => null,
        'current_deferred_revenue' => null,
        'current_deferred_taxes_liabilities' => null,
        'debt_to_equity' => null,
        'equity_to_asset' => null,
        'good_will' => null,
        'intangibles' => null,
        'long_term_debt_and_capital_lease_obligation' => null,
        'minority_interest' => null,
        'net_ppe' => null,
        'non_current_deferred_income_tax' => null,
        'non_current_deferred_liabilities' => null,
        'notes_receivable' => null,
        'other_current_receivables' => null,
        'other_equity' => null,
        'preferred_stock' => null,
        'retained_earnings' => null,
        'short_term_debt_and_capital_lease_obligation' => null,
        'total_assets' => null,
        'total_equity' => null,
        'total_liabilities' => null,
        'total_receivables' => null,
        'total_stockholders_equity' => null,
        'treasury_stock' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'accounts_receivable' => false,
        'accumulated_other_comprehensive_income' => false,
        'additional_paid_in_capital' => false,
        'bs_cash_and_cash_equivalents' => false,
        'bs_current_deferred_liabilities' => false,
        'bs_deferred_policy_acquisition_costs' => false,
        'bs_equity_investments' => false,
        'bs_fixed_maturity_investment' => false,
        'bs_future_policy_benefits' => false,
        'bs_net_loan' => false,
        'bs_other_assets_insurance' => false,
        'bs_other_liabilities_insurance' => false,
        'bs_payables_and_accrued_expenses' => false,
        'bs_policyholder_funds' => false,
        'bs_trading_assets' => false,
        'bs_unearned_premiums' => false,
        'bs_unpaid_loss_and_loss_reserve' => false,
        'common_stock' => false,
        'current_deferred_revenue' => false,
        'current_deferred_taxes_liabilities' => false,
        'debt_to_equity' => false,
        'equity_to_asset' => false,
        'good_will' => false,
        'intangibles' => false,
        'long_term_debt_and_capital_lease_obligation' => false,
        'minority_interest' => false,
        'net_ppe' => false,
        'non_current_deferred_income_tax' => false,
        'non_current_deferred_liabilities' => false,
        'notes_receivable' => false,
        'other_current_receivables' => false,
        'other_equity' => false,
        'preferred_stock' => false,
        'retained_earnings' => false,
        'short_term_debt_and_capital_lease_obligation' => false,
        'total_assets' => false,
        'total_equity' => false,
        'total_liabilities' => false,
        'total_receivables' => false,
        'total_stockholders_equity' => false,
        'treasury_stock' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accounts_receivable' => 'accounts_receivable',
        'accumulated_other_comprehensive_income' => 'accumulated_other_comprehensive_income',
        'additional_paid_in_capital' => 'additional_paid_in_capital',
        'bs_cash_and_cash_equivalents' => 'bs_cash_and_cash_equivalents',
        'bs_current_deferred_liabilities' => 'bs_current_deferred_liabilities',
        'bs_deferred_policy_acquisition_costs' => 'bs_deferred_policy_acquisition_costs',
        'bs_equity_investments' => 'bs_equity_investments',
        'bs_fixed_maturity_investment' => 'bs_fixed_maturity_investment',
        'bs_future_policy_benefits' => 'bs_future_policy_benefits',
        'bs_net_loan' => 'bs_net_loan',
        'bs_other_assets_insurance' => 'bs_other_assets_insurance',
        'bs_other_liabilities_insurance' => 'bs_other_liabilities_insurance',
        'bs_payables_and_accrued_expenses' => 'bs_payables_and_accrued_expenses',
        'bs_policyholder_funds' => 'bs_policyholder_funds',
        'bs_trading_assets' => 'bs_trading_assets',
        'bs_unearned_premiums' => 'bs_unearned_premiums',
        'bs_unpaid_loss_and_loss_reserve' => 'bs_unpaid_loss_and_loss_reserve',
        'common_stock' => 'common_stock',
        'current_deferred_revenue' => 'current_deferred_revenue',
        'current_deferred_taxes_liabilities' => 'current_deferred_taxes_liabilities',
        'debt_to_equity' => 'debt_to_equity',
        'equity_to_asset' => 'equity_to_asset',
        'good_will' => 'good_will',
        'intangibles' => 'intangibles',
        'long_term_debt_and_capital_lease_obligation' => 'long_term_debt_and_capital_lease_obligation',
        'minority_interest' => 'minority_interest',
        'net_ppe' => 'net_ppe',
        'non_current_deferred_income_tax' => 'non_current_deferred_income_tax',
        'non_current_deferred_liabilities' => 'non_current_deferred_liabilities',
        'notes_receivable' => 'notes_receivable',
        'other_current_receivables' => 'other_current_receivables',
        'other_equity' => 'other_equity',
        'preferred_stock' => 'preferred_stock',
        'retained_earnings' => 'retained_earnings',
        'short_term_debt_and_capital_lease_obligation' => 'short_term_debt_and_capital_lease_obligation',
        'total_assets' => 'total_assets',
        'total_equity' => 'total_equity',
        'total_liabilities' => 'total_liabilities',
        'total_receivables' => 'total_receivables',
        'total_stockholders_equity' => 'total_stockholders_equity',
        'treasury_stock' => 'treasury_stock'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accounts_receivable' => 'setAccountsReceivable',
        'accumulated_other_comprehensive_income' => 'setAccumulatedOtherComprehensiveIncome',
        'additional_paid_in_capital' => 'setAdditionalPaidInCapital',
        'bs_cash_and_cash_equivalents' => 'setBsCashAndCashEquivalents',
        'bs_current_deferred_liabilities' => 'setBsCurrentDeferredLiabilities',
        'bs_deferred_policy_acquisition_costs' => 'setBsDeferredPolicyAcquisitionCosts',
        'bs_equity_investments' => 'setBsEquityInvestments',
        'bs_fixed_maturity_investment' => 'setBsFixedMaturityInvestment',
        'bs_future_policy_benefits' => 'setBsFuturePolicyBenefits',
        'bs_net_loan' => 'setBsNetLoan',
        'bs_other_assets_insurance' => 'setBsOtherAssetsInsurance',
        'bs_other_liabilities_insurance' => 'setBsOtherLiabilitiesInsurance',
        'bs_payables_and_accrued_expenses' => 'setBsPayablesAndAccruedExpenses',
        'bs_policyholder_funds' => 'setBsPolicyholderFunds',
        'bs_trading_assets' => 'setBsTradingAssets',
        'bs_unearned_premiums' => 'setBsUnearnedPremiums',
        'bs_unpaid_loss_and_loss_reserve' => 'setBsUnpaidLossAndLossReserve',
        'common_stock' => 'setCommonStock',
        'current_deferred_revenue' => 'setCurrentDeferredRevenue',
        'current_deferred_taxes_liabilities' => 'setCurrentDeferredTaxesLiabilities',
        'debt_to_equity' => 'setDebtToEquity',
        'equity_to_asset' => 'setEquityToAsset',
        'good_will' => 'setGoodWill',
        'intangibles' => 'setIntangibles',
        'long_term_debt_and_capital_lease_obligation' => 'setLongTermDebtAndCapitalLeaseObligation',
        'minority_interest' => 'setMinorityInterest',
        'net_ppe' => 'setNetPpe',
        'non_current_deferred_income_tax' => 'setNonCurrentDeferredIncomeTax',
        'non_current_deferred_liabilities' => 'setNonCurrentDeferredLiabilities',
        'notes_receivable' => 'setNotesReceivable',
        'other_current_receivables' => 'setOtherCurrentReceivables',
        'other_equity' => 'setOtherEquity',
        'preferred_stock' => 'setPreferredStock',
        'retained_earnings' => 'setRetainedEarnings',
        'short_term_debt_and_capital_lease_obligation' => 'setShortTermDebtAndCapitalLeaseObligation',
        'total_assets' => 'setTotalAssets',
        'total_equity' => 'setTotalEquity',
        'total_liabilities' => 'setTotalLiabilities',
        'total_receivables' => 'setTotalReceivables',
        'total_stockholders_equity' => 'setTotalStockholdersEquity',
        'treasury_stock' => 'setTreasuryStock'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accounts_receivable' => 'getAccountsReceivable',
        'accumulated_other_comprehensive_income' => 'getAccumulatedOtherComprehensiveIncome',
        'additional_paid_in_capital' => 'getAdditionalPaidInCapital',
        'bs_cash_and_cash_equivalents' => 'getBsCashAndCashEquivalents',
        'bs_current_deferred_liabilities' => 'getBsCurrentDeferredLiabilities',
        'bs_deferred_policy_acquisition_costs' => 'getBsDeferredPolicyAcquisitionCosts',
        'bs_equity_investments' => 'getBsEquityInvestments',
        'bs_fixed_maturity_investment' => 'getBsFixedMaturityInvestment',
        'bs_future_policy_benefits' => 'getBsFuturePolicyBenefits',
        'bs_net_loan' => 'getBsNetLoan',
        'bs_other_assets_insurance' => 'getBsOtherAssetsInsurance',
        'bs_other_liabilities_insurance' => 'getBsOtherLiabilitiesInsurance',
        'bs_payables_and_accrued_expenses' => 'getBsPayablesAndAccruedExpenses',
        'bs_policyholder_funds' => 'getBsPolicyholderFunds',
        'bs_trading_assets' => 'getBsTradingAssets',
        'bs_unearned_premiums' => 'getBsUnearnedPremiums',
        'bs_unpaid_loss_and_loss_reserve' => 'getBsUnpaidLossAndLossReserve',
        'common_stock' => 'getCommonStock',
        'current_deferred_revenue' => 'getCurrentDeferredRevenue',
        'current_deferred_taxes_liabilities' => 'getCurrentDeferredTaxesLiabilities',
        'debt_to_equity' => 'getDebtToEquity',
        'equity_to_asset' => 'getEquityToAsset',
        'good_will' => 'getGoodWill',
        'intangibles' => 'getIntangibles',
        'long_term_debt_and_capital_lease_obligation' => 'getLongTermDebtAndCapitalLeaseObligation',
        'minority_interest' => 'getMinorityInterest',
        'net_ppe' => 'getNetPpe',
        'non_current_deferred_income_tax' => 'getNonCurrentDeferredIncomeTax',
        'non_current_deferred_liabilities' => 'getNonCurrentDeferredLiabilities',
        'notes_receivable' => 'getNotesReceivable',
        'other_current_receivables' => 'getOtherCurrentReceivables',
        'other_equity' => 'getOtherEquity',
        'preferred_stock' => 'getPreferredStock',
        'retained_earnings' => 'getRetainedEarnings',
        'short_term_debt_and_capital_lease_obligation' => 'getShortTermDebtAndCapitalLeaseObligation',
        'total_assets' => 'getTotalAssets',
        'total_equity' => 'getTotalEquity',
        'total_liabilities' => 'getTotalLiabilities',
        'total_receivables' => 'getTotalReceivables',
        'total_stockholders_equity' => 'getTotalStockholdersEquity',
        'treasury_stock' => 'getTreasuryStock'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('accounts_receivable', $data ?? [], null);
        $this->setIfExists('accumulated_other_comprehensive_income', $data ?? [], null);
        $this->setIfExists('additional_paid_in_capital', $data ?? [], null);
        $this->setIfExists('bs_cash_and_cash_equivalents', $data ?? [], null);
        $this->setIfExists('bs_current_deferred_liabilities', $data ?? [], null);
        $this->setIfExists('bs_deferred_policy_acquisition_costs', $data ?? [], null);
        $this->setIfExists('bs_equity_investments', $data ?? [], null);
        $this->setIfExists('bs_fixed_maturity_investment', $data ?? [], null);
        $this->setIfExists('bs_future_policy_benefits', $data ?? [], null);
        $this->setIfExists('bs_net_loan', $data ?? [], null);
        $this->setIfExists('bs_other_assets_insurance', $data ?? [], null);
        $this->setIfExists('bs_other_liabilities_insurance', $data ?? [], null);
        $this->setIfExists('bs_payables_and_accrued_expenses', $data ?? [], null);
        $this->setIfExists('bs_policyholder_funds', $data ?? [], null);
        $this->setIfExists('bs_trading_assets', $data ?? [], null);
        $this->setIfExists('bs_unearned_premiums', $data ?? [], null);
        $this->setIfExists('bs_unpaid_loss_and_loss_reserve', $data ?? [], null);
        $this->setIfExists('common_stock', $data ?? [], null);
        $this->setIfExists('current_deferred_revenue', $data ?? [], null);
        $this->setIfExists('current_deferred_taxes_liabilities', $data ?? [], null);
        $this->setIfExists('debt_to_equity', $data ?? [], null);
        $this->setIfExists('equity_to_asset', $data ?? [], null);
        $this->setIfExists('good_will', $data ?? [], null);
        $this->setIfExists('intangibles', $data ?? [], null);
        $this->setIfExists('long_term_debt_and_capital_lease_obligation', $data ?? [], null);
        $this->setIfExists('minority_interest', $data ?? [], null);
        $this->setIfExists('net_ppe', $data ?? [], null);
        $this->setIfExists('non_current_deferred_income_tax', $data ?? [], null);
        $this->setIfExists('non_current_deferred_liabilities', $data ?? [], null);
        $this->setIfExists('notes_receivable', $data ?? [], null);
        $this->setIfExists('other_current_receivables', $data ?? [], null);
        $this->setIfExists('other_equity', $data ?? [], null);
        $this->setIfExists('preferred_stock', $data ?? [], null);
        $this->setIfExists('retained_earnings', $data ?? [], null);
        $this->setIfExists('short_term_debt_and_capital_lease_obligation', $data ?? [], null);
        $this->setIfExists('total_assets', $data ?? [], null);
        $this->setIfExists('total_equity', $data ?? [], null);
        $this->setIfExists('total_liabilities', $data ?? [], null);
        $this->setIfExists('total_receivables', $data ?? [], null);
        $this->setIfExists('total_stockholders_equity', $data ?? [], null);
        $this->setIfExists('treasury_stock', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accounts_receivable
     *
     * @return float|null
     */
    public function getAccountsReceivable()
    {
        return $this->container['accounts_receivable'];
    }

    /**
     * Sets accounts_receivable
     *
     * @param float|null $accounts_receivable <p>{{Accts_Rec}} is money owed to a business by customers and shown on its Balance Sheet as an asset. {{Accts_Rec}} are created when a customer has received a product but has not yet paid for that product. It is related to {{DaysSalesOutstanding}}, which measures of the average number of days that a company takes to collect revenue after a sale has been made. It is a financial ratio that illustrates how well a company's accounts receivables are being managed. <br>{{DaysSalesOutstanding}} = {{Accts_Rec}} / {{Revenue}} * Days in Period</p>
     *
     * @return self
     */
    public function setAccountsReceivable($accounts_receivable)
    {
        if (is_null($accounts_receivable)) {
            throw new \InvalidArgumentException('non-nullable accounts_receivable cannot be null');
        }
        $this->container['accounts_receivable'] = $accounts_receivable;

        return $this;
    }

    /**
     * Gets accumulated_other_comprehensive_income
     *
     * @return float|null
     */
    public function getAccumulatedOtherComprehensiveIncome()
    {
        return $this->container['accumulated_other_comprehensive_income'];
    }

    /**
     * Sets accumulated_other_comprehensive_income
     *
     * @param float|null $accumulated_other_comprehensive_income <p>{{accumulated_other_comprehensive_income}} is the aggregate amount of gains or losses that are not part of retained earnings.</p>
     *
     * @return self
     */
    public function setAccumulatedOtherComprehensiveIncome($accumulated_other_comprehensive_income)
    {
        if (is_null($accumulated_other_comprehensive_income)) {
            throw new \InvalidArgumentException('non-nullable accumulated_other_comprehensive_income cannot be null');
        }
        $this->container['accumulated_other_comprehensive_income'] = $accumulated_other_comprehensive_income;

        return $this;
    }

    /**
     * Gets additional_paid_in_capital
     *
     * @return float|null
     */
    public function getAdditionalPaidInCapital()
    {
        return $this->container['additional_paid_in_capital'];
    }

    /**
     * Sets additional_paid_in_capital
     *
     * @param float|null $additional_paid_in_capital <p>{{AdditionalPaidInCapital}} is the capital that a company raises in a financing round in excess of the capital's par value. The account represents the excess paid by an investor over the par-value price of a stock issue. {{AdditionalPaidInCapital}} can arise from issuing either preferred or common stock. <br>{{AdditionalPaidInCapital}} is calculated as: {{AdditionalPaidInCapital}} = (Issue Price - Par Value) * {{Shares_Outstanding}}</p>
     *
     * @return self
     */
    public function setAdditionalPaidInCapital($additional_paid_in_capital)
    {
        if (is_null($additional_paid_in_capital)) {
            throw new \InvalidArgumentException('non-nullable additional_paid_in_capital cannot be null');
        }
        $this->container['additional_paid_in_capital'] = $additional_paid_in_capital;

        return $this;
    }

    /**
     * Gets bs_cash_and_cash_equivalents
     *
     * @return float|null
     */
    public function getBsCashAndCashEquivalents()
    {
        return $this->container['bs_cash_and_cash_equivalents'];
    }

    /**
     * Sets bs_cash_and_cash_equivalents
     *
     * @param float|null $bs_cash_and_cash_equivalents <p>{{CashAndCashEquivalents}} are the most liquid assets on the balance sheet. Cash equivalents are assets that are readily convertible into cash, such as money market holdings, short-term government bonds or Treasury bills, marketable securities and commercial paper.</p>
     *
     * @return self
     */
    public function setBsCashAndCashEquivalents($bs_cash_and_cash_equivalents)
    {
        if (is_null($bs_cash_and_cash_equivalents)) {
            throw new \InvalidArgumentException('non-nullable bs_cash_and_cash_equivalents cannot be null');
        }
        $this->container['bs_cash_and_cash_equivalents'] = $bs_cash_and_cash_equivalents;

        return $this;
    }

    /**
     * Gets bs_current_deferred_liabilities
     *
     * @return float|null
     */
    public function getBsCurrentDeferredLiabilities()
    {
        return $this->container['bs_current_deferred_liabilities'];
    }

    /**
     * Sets bs_current_deferred_liabilities
     *
     * @param float|null $bs_current_deferred_liabilities <p>{{BS_CurrentDeferredLiabilities}} represents the current portion of obligations, which is a liability that usually would have been paid but is now pas due.</p>
     *
     * @return self
     */
    public function setBsCurrentDeferredLiabilities($bs_current_deferred_liabilities)
    {
        if (is_null($bs_current_deferred_liabilities)) {
            throw new \InvalidArgumentException('non-nullable bs_current_deferred_liabilities cannot be null');
        }
        $this->container['bs_current_deferred_liabilities'] = $bs_current_deferred_liabilities;

        return $this;
    }

    /**
     * Gets bs_deferred_policy_acquisition_costs
     *
     * @return float|null
     */
    public function getBsDeferredPolicyAcquisitionCosts()
    {
        return $this->container['bs_deferred_policy_acquisition_costs'];
    }

    /**
     * Sets bs_deferred_policy_acquisition_costs
     *
     * @param float|null $bs_deferred_policy_acquisition_costs <p>{{BS_DeferredPolicyAcquisitionCosts}} represent the costs incurred by insurance companies for policy acquisitions that has not been paid.</p>
     *
     * @return self
     */
    public function setBsDeferredPolicyAcquisitionCosts($bs_deferred_policy_acquisition_costs)
    {
        if (is_null($bs_deferred_policy_acquisition_costs)) {
            throw new \InvalidArgumentException('non-nullable bs_deferred_policy_acquisition_costs cannot be null');
        }
        $this->container['bs_deferred_policy_acquisition_costs'] = $bs_deferred_policy_acquisition_costs;

        return $this;
    }

    /**
     * Gets bs_equity_investments
     *
     * @return float|null
     */
    public function getBsEquityInvestments()
    {
        return $this->container['bs_equity_investments'];
    }

    /**
     * Sets bs_equity_investments
     *
     * @param float|null $bs_equity_investments <p>{{BS_EquityInvestments}} mean that through these investments, the holders of these investments take ownership in the entities that issued these investment vehicles. Stock is kind of equity investment.</p>
     *
     * @return self
     */
    public function setBsEquityInvestments($bs_equity_investments)
    {
        if (is_null($bs_equity_investments)) {
            throw new \InvalidArgumentException('non-nullable bs_equity_investments cannot be null');
        }
        $this->container['bs_equity_investments'] = $bs_equity_investments;

        return $this;
    }

    /**
     * Gets bs_fixed_maturity_investment
     *
     * @return float|null
     */
    public function getBsFixedMaturityInvestment()
    {
        return $this->container['bs_fixed_maturity_investment'];
    }

    /**
     * Sets bs_fixed_maturity_investment
     *
     * @param float|null $bs_fixed_maturity_investment <p>{{BS_FixedMaturityInvestment}} is financial assets that have fixed maturity dates, such as treasury bonds and corporate bonds. Before the maturity, these assets usually pay fixed interest rate. At maturity, the principle will be returned from the borrowed.</p>
     *
     * @return self
     */
    public function setBsFixedMaturityInvestment($bs_fixed_maturity_investment)
    {
        if (is_null($bs_fixed_maturity_investment)) {
            throw new \InvalidArgumentException('non-nullable bs_fixed_maturity_investment cannot be null');
        }
        $this->container['bs_fixed_maturity_investment'] = $bs_fixed_maturity_investment;

        return $this;
    }

    /**
     * Gets bs_future_policy_benefits
     *
     * @return float|null
     */
    public function getBsFuturePolicyBenefits()
    {
        return $this->container['bs_future_policy_benefits'];
    }

    /**
     * Sets bs_future_policy_benefits
     *
     * @param float|null $bs_future_policy_benefits <p>{{BS_FuturePolicyBenefits}} represents an insurance entity's net liability for future benefits (for example, death, cash surrender value) to be paid to or on behalf of policyholders, where the accounting policy describes the bases, methodologies and components of the reserve, and assumptions regarding estimates of expected investment yields, mortality, morbidity, terminations and expenses.</p>
     *
     * @return self
     */
    public function setBsFuturePolicyBenefits($bs_future_policy_benefits)
    {
        if (is_null($bs_future_policy_benefits)) {
            throw new \InvalidArgumentException('non-nullable bs_future_policy_benefits cannot be null');
        }
        $this->container['bs_future_policy_benefits'] = $bs_future_policy_benefits;

        return $this;
    }

    /**
     * Gets bs_net_loan
     *
     * @return float|null
     */
    public function getBsNetLoan()
    {
        return $this->container['bs_net_loan'];
    }

    /**
     * Sets bs_net_loan
     *
     * @param float|null $bs_net_loan <p>{{BS_NetLoan}} is total loans on banks' book. These are the fund that banks have lent out. The loans contribute to banks' income. Some borrower of the loans may stop paying their payment. In this case, the loan is called non-performing loans. Loans can be divided into residential loans, commercial loans or consumer loans.</p>
     *
     * @return self
     */
    public function setBsNetLoan($bs_net_loan)
    {
        if (is_null($bs_net_loan)) {
            throw new \InvalidArgumentException('non-nullable bs_net_loan cannot be null');
        }
        $this->container['bs_net_loan'] = $bs_net_loan;

        return $this;
    }

    /**
     * Gets bs_other_assets_insurance
     *
     * @return float|null
     */
    public function getBsOtherAssetsInsurance()
    {
        return $this->container['bs_other_assets_insurance'];
    }

    /**
     * Sets bs_other_assets_insurance
     *
     * @param float|null $bs_other_assets_insurance bs_other_assets_insurance
     *
     * @return self
     */
    public function setBsOtherAssetsInsurance($bs_other_assets_insurance)
    {
        if (is_null($bs_other_assets_insurance)) {
            throw new \InvalidArgumentException('non-nullable bs_other_assets_insurance cannot be null');
        }
        $this->container['bs_other_assets_insurance'] = $bs_other_assets_insurance;

        return $this;
    }

    /**
     * Gets bs_other_liabilities_insurance
     *
     * @return float|null
     */
    public function getBsOtherLiabilitiesInsurance()
    {
        return $this->container['bs_other_liabilities_insurance'];
    }

    /**
     * Sets bs_other_liabilities_insurance
     *
     * @param float|null $bs_other_liabilities_insurance bs_other_liabilities_insurance
     *
     * @return self
     */
    public function setBsOtherLiabilitiesInsurance($bs_other_liabilities_insurance)
    {
        if (is_null($bs_other_liabilities_insurance)) {
            throw new \InvalidArgumentException('non-nullable bs_other_liabilities_insurance cannot be null');
        }
        $this->container['bs_other_liabilities_insurance'] = $bs_other_liabilities_insurance;

        return $this;
    }

    /**
     * Gets bs_payables_and_accrued_expenses
     *
     * @return float|null
     */
    public function getBsPayablesAndAccruedExpenses()
    {
        return $this->container['bs_payables_and_accrued_expenses'];
    }

    /**
     * Sets bs_payables_and_accrued_expenses
     *
     * @param float|null $bs_payables_and_accrued_expenses bs_payables_and_accrued_expenses
     *
     * @return self
     */
    public function setBsPayablesAndAccruedExpenses($bs_payables_and_accrued_expenses)
    {
        if (is_null($bs_payables_and_accrued_expenses)) {
            throw new \InvalidArgumentException('non-nullable bs_payables_and_accrued_expenses cannot be null');
        }
        $this->container['bs_payables_and_accrued_expenses'] = $bs_payables_and_accrued_expenses;

        return $this;
    }

    /**
     * Gets bs_policyholder_funds
     *
     * @return float|null
     */
    public function getBsPolicyholderFunds()
    {
        return $this->container['bs_policyholder_funds'];
    }

    /**
     * Sets bs_policyholder_funds
     *
     * @param float|null $bs_policyholder_funds <p>{{BS_PolicyholderFunds}}</p>
     *
     * @return self
     */
    public function setBsPolicyholderFunds($bs_policyholder_funds)
    {
        if (is_null($bs_policyholder_funds)) {
            throw new \InvalidArgumentException('non-nullable bs_policyholder_funds cannot be null');
        }
        $this->container['bs_policyholder_funds'] = $bs_policyholder_funds;

        return $this;
    }

    /**
     * Gets bs_trading_assets
     *
     * @return float|null
     */
    public function getBsTradingAssets()
    {
        return $this->container['bs_trading_assets'];
    }

    /**
     * Sets bs_trading_assets
     *
     * @param float|null $bs_trading_assets <p>Other assets that are traded in markets.</p>
     *
     * @return self
     */
    public function setBsTradingAssets($bs_trading_assets)
    {
        if (is_null($bs_trading_assets)) {
            throw new \InvalidArgumentException('non-nullable bs_trading_assets cannot be null');
        }
        $this->container['bs_trading_assets'] = $bs_trading_assets;

        return $this;
    }

    /**
     * Gets bs_unearned_premiums
     *
     * @return float|null
     */
    public function getBsUnearnedPremiums()
    {
        return $this->container['bs_unearned_premiums'];
    }

    /**
     * Sets bs_unearned_premiums
     *
     * @param float|null $bs_unearned_premiums <p>{{BS_UnearnedPremiums}} is the portion of premium that has not been earned by insurance companies. Insurance companies have to pay them back to the insured if the policies are cancelled.</p>
     *
     * @return self
     */
    public function setBsUnearnedPremiums($bs_unearned_premiums)
    {
        if (is_null($bs_unearned_premiums)) {
            throw new \InvalidArgumentException('non-nullable bs_unearned_premiums cannot be null');
        }
        $this->container['bs_unearned_premiums'] = $bs_unearned_premiums;

        return $this;
    }

    /**
     * Gets bs_unpaid_loss_and_loss_reserve
     *
     * @return float|null
     */
    public function getBsUnpaidLossAndLossReserve()
    {
        return $this->container['bs_unpaid_loss_and_loss_reserve'];
    }

    /**
     * Sets bs_unpaid_loss_and_loss_reserve
     *
     * @param float|null $bs_unpaid_loss_and_loss_reserve <p>{{BS_UnpaidLossAndLossReserve}} is the fund insurance companies set aside for the loss that has not be paid or possible losses in the future.</p>
     *
     * @return self
     */
    public function setBsUnpaidLossAndLossReserve($bs_unpaid_loss_and_loss_reserve)
    {
        if (is_null($bs_unpaid_loss_and_loss_reserve)) {
            throw new \InvalidArgumentException('non-nullable bs_unpaid_loss_and_loss_reserve cannot be null');
        }
        $this->container['bs_unpaid_loss_and_loss_reserve'] = $bs_unpaid_loss_and_loss_reserve;

        return $this;
    }

    /**
     * Gets common_stock
     *
     * @return float|null
     */
    public function getCommonStock()
    {
        return $this->container['common_stock'];
    }

    /**
     * Sets common_stock
     *
     * @param float|null $common_stock <p>{{CommonStock}} is listed on  the Balance Sheet at the par value of the total shares outstanding of a company. The par value of {{CommonStock}} is meaningless. It is usually set at an absurdly low number.</p>
     *
     * @return self
     */
    public function setCommonStock($common_stock)
    {
        if (is_null($common_stock)) {
            throw new \InvalidArgumentException('non-nullable common_stock cannot be null');
        }
        $this->container['common_stock'] = $common_stock;

        return $this;
    }

    /**
     * Gets current_deferred_revenue
     *
     * @return float|null
     */
    public function getCurrentDeferredRevenue()
    {
        return $this->container['current_deferred_revenue'];
    }

    /**
     * Sets current_deferred_revenue
     *
     * @param float|null $current_deferred_revenue <p>{{CurrentDeferredRevenue}} represents collections of cash or other assets related to revenue producing activity for which revenue has not yet been recognized. Generally, an entity records deferred revenue when it receives consideration from a customer before achieving certain criteria that must be met for revenue to be recognized in conformity with GAAP. It can be either current or non-current item. Also called unearned revenue.</p>
     *
     * @return self
     */
    public function setCurrentDeferredRevenue($current_deferred_revenue)
    {
        if (is_null($current_deferred_revenue)) {
            throw new \InvalidArgumentException('non-nullable current_deferred_revenue cannot be null');
        }
        $this->container['current_deferred_revenue'] = $current_deferred_revenue;

        return $this;
    }

    /**
     * Gets current_deferred_taxes_liabilities
     *
     * @return float|null
     */
    public function getCurrentDeferredTaxesLiabilities()
    {
        return $this->container['current_deferred_taxes_liabilities'];
    }

    /**
     * Sets current_deferred_taxes_liabilities
     *
     * @param float|null $current_deferred_taxes_liabilities <p>{{CurrentDeferredTaxesLiabilities}} means a future tax liability, resulting from temporary differences between book (accounting) value of assets and liabilities and their tax value, or timing differences between the recognition of gains and losses in financial statements and their recognition in a tax computation. Deferred tax liabilities generally arise where tax relief is provided in advance of an accounting expense, or income is accrued but not taxed until received.</p>
     *
     * @return self
     */
    public function setCurrentDeferredTaxesLiabilities($current_deferred_taxes_liabilities)
    {
        if (is_null($current_deferred_taxes_liabilities)) {
            throw new \InvalidArgumentException('non-nullable current_deferred_taxes_liabilities cannot be null');
        }
        $this->container['current_deferred_taxes_liabilities'] = $current_deferred_taxes_liabilities;

        return $this;
    }

    /**
     * Gets debt_to_equity
     *
     * @return float|null
     */
    public function getDebtToEquity()
    {
        return $this->container['debt_to_equity'];
    }

    /**
     * Sets debt_to_equity
     *
     * @param float|null $debt_to_equity The Debt/Equity (D/E) Ratio is calculated by dividing a company’s total liabilities by its shareholder equity. The ratio is used to evaluate a company's financial leverage.
     *
     * @return self
     */
    public function setDebtToEquity($debt_to_equity)
    {
        if (is_null($debt_to_equity)) {
            throw new \InvalidArgumentException('non-nullable debt_to_equity cannot be null');
        }
        $this->container['debt_to_equity'] = $debt_to_equity;

        return $this;
    }

    /**
     * Gets equity_to_asset
     *
     * @return float|null
     */
    public function getEquityToAsset()
    {
        return $this->container['equity_to_asset'];
    }

    /**
     * Sets equity_to_asset
     *
     * @param float|null $equity_to_asset Equity to Asset ratio is calculated as shareholder's tangible equity divided by its total asset.
     *
     * @return self
     */
    public function setEquityToAsset($equity_to_asset)
    {
        if (is_null($equity_to_asset)) {
            throw new \InvalidArgumentException('non-nullable equity_to_asset cannot be null');
        }
        $this->container['equity_to_asset'] = $equity_to_asset;

        return $this;
    }

    /**
     * Gets good_will
     *
     * @return float|null
     */
    public function getGoodWill()
    {
        return $this->container['good_will'];
    }

    /**
     * Sets good_will
     *
     * @param float|null $good_will <p>A {{Goodwill}} is an {{Intangibles}} that arises as a result of the acquisition of one company by another for a premium value. The value of a company's brand name, solid customer base, good customer relations, good employee relations and any patents or proprietary technology represent {{Goodwill}}. {{Goodwill}} is considered an {{Intangibles}} because it is not a physical asset like buildings or equipment. The {{Goodwill}} account can be found in the assets portion of a company's balance sheet.</p>
     *
     * @return self
     */
    public function setGoodWill($good_will)
    {
        if (is_null($good_will)) {
            throw new \InvalidArgumentException('non-nullable good_will cannot be null');
        }
        $this->container['good_will'] = $good_will;

        return $this;
    }

    /**
     * Gets intangibles
     *
     * @return float|null
     */
    public function getIntangibles()
    {
        return $this->container['intangibles'];
    }

    /**
     * Sets intangibles
     *
     * @param float|null $intangibles <p>{{Intangibles}} are defined as identifiable non-monetary assets that cannot be seen, touched or physically measured.  Examples of {{Intangibles}} include trade secrets, copyrights, patents, trademarks. If a company acquires assets at the prices above the book value, it may carry {{Goodwill}} on its balance sheet. {{Goodwill}} reflects the difference between the price the company paid and the book value of the assets. If a company (company A) received a patent through their own work, though it has value, it does not show up on its balance sheet as an intangible asset. However, if company A sells this patent to company B, it will show up on company B's balance sheet as an {{Intangibles}}. The same applies to brand names, trade secrets etc. For instance, Coca-Cola's brand is extremely valuable, but the brand does not appear on its balance sheet, because the brand was never acquired.</p>
     *
     * @return self
     */
    public function setIntangibles($intangibles)
    {
        if (is_null($intangibles)) {
            throw new \InvalidArgumentException('non-nullable intangibles cannot be null');
        }
        $this->container['intangibles'] = $intangibles;

        return $this;
    }

    /**
     * Gets long_term_debt_and_capital_lease_obligation
     *
     * @return float|null
     */
    public function getLongTermDebtAndCapitalLeaseObligation()
    {
        return $this->container['long_term_debt_and_capital_lease_obligation'];
    }

    /**
     * Sets long_term_debt_and_capital_lease_obligation
     *
     * @param float|null $long_term_debt_and_capital_lease_obligation <p>{{LongTermDebt}} is the debt due more than 12 months in the future. The debt can be owed to banks or bondholders. Some companies issue bonds to investors and pay interest on the bonds. <br>{{LongTermCapitalLeaseObligation}} represents the total liability for long-term leases lasting over one year. It's amount equal to the present value (the principal) at the beginning of the lease term less lease payments during the lease term. <br>{{Long-Term_Debt}} can be used to calculate {{ltd2asset}}: {{ltd2asset}} = {{Long-Term_Debt}} / {{Total_Assets}}</p>
     *
     * @return self
     */
    public function setLongTermDebtAndCapitalLeaseObligation($long_term_debt_and_capital_lease_obligation)
    {
        if (is_null($long_term_debt_and_capital_lease_obligation)) {
            throw new \InvalidArgumentException('non-nullable long_term_debt_and_capital_lease_obligation cannot be null');
        }
        $this->container['long_term_debt_and_capital_lease_obligation'] = $long_term_debt_and_capital_lease_obligation;

        return $this;
    }

    /**
     * Gets minority_interest
     *
     * @return float|null
     */
    public function getMinorityInterest()
    {
        return $this->container['minority_interest'];
    }

    /**
     * Sets minority_interest
     *
     * @param float|null $minority_interest <p>{{Minority_interest}} is the carrying amount of the equity interests owned by non-controlling shareholders, partners, or other equity holders in one or more of the entities included in the reporting entity's consolidated financial statements.</p>
     *
     * @return self
     */
    public function setMinorityInterest($minority_interest)
    {
        if (is_null($minority_interest)) {
            throw new \InvalidArgumentException('non-nullable minority_interest cannot be null');
        }
        $this->container['minority_interest'] = $minority_interest;

        return $this;
    }

    /**
     * Gets net_ppe
     *
     * @return float|null
     */
    public function getNetPpe()
    {
        return $this->container['net_ppe'];
    }

    /**
     * Sets net_ppe
     *
     * @param float|null $net_ppe <p>{{Net_PPE}} (PPE) are the fixed assets of the companyFixed assets are also known as non-current assets. {{Net_PPE}} includes assets that will - in the normal course of business - neither be used up in the next year nor will become a part of any product sold to customers. Some of the most common parts of property, plant, and equipment are: Land, Buildings (and leasehold improvements), Transportation equipment, Manufacturing equipment, Office equipment, Office furniture. Companies with lots of property, plant, and equipment often have special categories. For example, railroad property includes: Track, Ties, Ballast, Bridges, Tunnels, Signals, Locomotives, Freight Cars. There is often a note in the financial statements - found in a company's 10-K - that will explain the different categories of property a company owns. <br>The market value of {{Net_PPE}} can differ tremendously from the book value of {{Net_PPE}}. For example, when Berkshire Hathaway liquidated its textile mills, it had to pay the buyers of the company's manufacturing equipment to haul the equipment  away. That {{Net_PPE}} was literally worth less than zero. On the other hand, some companies own thousands of acres of land. All {{Net_PPE}} other than land is depreciated. Land is never depreciated. However, land is not marked up to market value either. Under Generally Accepted Accounting Principles (GAAP), land is shown on the balance sheet at cost. <br>The {{Net_PPE}} line shown on the balance sheet is usually net {{Net_PPE}}. This means it is the cost of the {{Net_PPE}} less accumulated depreciation.</p>
     *
     * @return self
     */
    public function setNetPpe($net_ppe)
    {
        if (is_null($net_ppe)) {
            throw new \InvalidArgumentException('non-nullable net_ppe cannot be null');
        }
        $this->container['net_ppe'] = $net_ppe;

        return $this;
    }

    /**
     * Gets non_current_deferred_income_tax
     *
     * @return float|null
     */
    public function getNonCurrentDeferredIncomeTax()
    {
        return $this->container['non_current_deferred_income_tax'];
    }

    /**
     * Sets non_current_deferred_income_tax
     *
     * @param float|null $non_current_deferred_income_tax The NonCurrent Deferred Income Tax represents the non-current portion of deferred income taxes, which is the difference in income recognition between tax laws and the accounting methods.
     *
     * @return self
     */
    public function setNonCurrentDeferredIncomeTax($non_current_deferred_income_tax)
    {
        if (is_null($non_current_deferred_income_tax)) {
            throw new \InvalidArgumentException('non-nullable non_current_deferred_income_tax cannot be null');
        }
        $this->container['non_current_deferred_income_tax'] = $non_current_deferred_income_tax;

        return $this;
    }

    /**
     * Gets non_current_deferred_liabilities
     *
     * @return float|null
     */
    public function getNonCurrentDeferredLiabilities()
    {
        return $this->container['non_current_deferred_liabilities'];
    }

    /**
     * Sets non_current_deferred_liabilities
     *
     * @param float|null $non_current_deferred_liabilities <p>{{NonCurrentDeferredLiabilities}} represents the non-current portion of obligations, which is a liability that usually would have been paid but is now pas due.</p>
     *
     * @return self
     */
    public function setNonCurrentDeferredLiabilities($non_current_deferred_liabilities)
    {
        if (is_null($non_current_deferred_liabilities)) {
            throw new \InvalidArgumentException('non-nullable non_current_deferred_liabilities cannot be null');
        }
        $this->container['non_current_deferred_liabilities'] = $non_current_deferred_liabilities;

        return $this;
    }

    /**
     * Gets notes_receivable
     *
     * @return float|null
     */
    public function getNotesReceivable()
    {
        return $this->container['notes_receivable'];
    }

    /**
     * Sets notes_receivable
     *
     * @param float|null $notes_receivable <p>{{NotesReceivable}} is an unconditional promise to receive a definite sum of money at a future date(s) within one year of the balance sheet date or the normal operating cycle, whichever is longer.</p>
     *
     * @return self
     */
    public function setNotesReceivable($notes_receivable)
    {
        if (is_null($notes_receivable)) {
            throw new \InvalidArgumentException('non-nullable notes_receivable cannot be null');
        }
        $this->container['notes_receivable'] = $notes_receivable;

        return $this;
    }

    /**
     * Gets other_current_receivables
     *
     * @return float|null
     */
    public function getOtherCurrentReceivables()
    {
        return $this->container['other_current_receivables'];
    }

    /**
     * Sets other_current_receivables
     *
     * @param float|null $other_current_receivables <p>{{OtherCurrentReceivables}} is other current receivables of that not otherwise classified. GuruFocus uses a standardized financial statement format for all companies. GuruFocus lists {{Accts_Rec}}, {{NotesReceivable}}, {{LoansReceivable}} and {{OtherCurrentReceivables}} under the \"{{TotalReceivables}}\" section.</p>
     *
     * @return self
     */
    public function setOtherCurrentReceivables($other_current_receivables)
    {
        if (is_null($other_current_receivables)) {
            throw new \InvalidArgumentException('non-nullable other_current_receivables cannot be null');
        }
        $this->container['other_current_receivables'] = $other_current_receivables;

        return $this;
    }

    /**
     * Gets other_equity
     *
     * @return float|null
     */
    public function getOtherEquity()
    {
        return $this->container['other_equity'];
    }

    /**
     * Sets other_equity
     *
     * @param float|null $other_equity <p>{{OtherEquity}} is instruments issued by the company that cannot be identified by other specific items in the Equity section. GuruFocus lists following items in \"{{Total_Equity}}\" section: {{CommonStock}}, {{Preferred_Stock}}, {{Retained_Earnings}}, {{accumulated_other_comprehensive_income}}, {{AdditionalPaidInCapital}}, {{Treasury_Stock}}, {{OtherEquity}}.</p>
     *
     * @return self
     */
    public function setOtherEquity($other_equity)
    {
        if (is_null($other_equity)) {
            throw new \InvalidArgumentException('non-nullable other_equity cannot be null');
        }
        $this->container['other_equity'] = $other_equity;

        return $this;
    }

    /**
     * Gets preferred_stock
     *
     * @return float|null
     */
    public function getPreferredStock()
    {
        return $this->container['preferred_stock'];
    }

    /**
     * Sets preferred_stock
     *
     * @param float|null $preferred_stock <p>{{Preferred_Stock}} is a special equity security that has properties of both equity and debt. It is generally considered a hybrid instrument. {{Preferred_Stock}} is senior to {{CommonStock}}, but is subordinate to bonds in terms of claim or rights to their share of the assets of the company. {{Preferred_Stock}} has priority over {{CommonStock}} in the payment of dividends and any payments received when a company liquidates. <br>{{Preferred_Stock}} comes in many forms. It can be: Convertible or Non-Convertible, Cumulative or Non-Cumulative, Voting or Non-Voting, Callable or Non-Callable, Maturity Date or No Maturity Date. <br>A {{Preferred_Stock}} without a maturity date is called a perpetual preferred stock. These are relatively rare. A good example of perpetual {{Preferred_Stock}} is the many series of Public Storage (PSA) preferred shares that trade on the New York Stock Exchange. <br>Before investing in preferred stock, it is important to know which of the above groups the stock belongs to. Is it convertible or non-convertible? Are dividends cumulative or non-cumulative? It is also critical that an investor knows what bonds the company has in front of the {{Preferred_Stock}}. Bondholders get paid first. So the decision to buy a {{Preferred_Stock}} can be similar to the decision to buy a bond. But, remember, the {{Preferred_Stock}} of a company with bonds is junior to those bonds.  <br>Unless a {{Preferred_Stock}} is convertible, the upside in a preferred stock investment is more limited than in a {{CommonStock}} investment. If a company doubles its earnings, it is usually under no more obligation to double the dividends paid to preferred shareholders than it is to double the interest paid to its bankers and bondholders.So {{Preferred_Stock}} is very different from {{CommonStock}}.</p>
     *
     * @return self
     */
    public function setPreferredStock($preferred_stock)
    {
        if (is_null($preferred_stock)) {
            throw new \InvalidArgumentException('non-nullable preferred_stock cannot be null');
        }
        $this->container['preferred_stock'] = $preferred_stock;

        return $this;
    }

    /**
     * Gets retained_earnings
     *
     * @return float|null
     */
    public function getRetainedEarnings()
    {
        return $this->container['retained_earnings'];
    }

    /**
     * Sets retained_earnings
     *
     * @param float|null $retained_earnings <p>{{Retained_Earnings}} is the accumulated portion of {{Net_Income}} that is not distributed to shareholders. Because the {{Net_Income}} was not distributed to shareholders, shareholders' equity is increased by the same amount. Of course, if a company loses, it is called retained losses, or accumulated losses. Historically profitable companies sometimes have negative {{Retained_Earnings}}. This is because they have cumulatively paid out more to shareholders than they reported in profits. If a company has negative {{Retained_Earnings}}, investors should check the 10-year financial results. They should not assume that negative {{Retained_Earnings}} prove a company has generally lost money in the past. Of course, many companies with negative {{Retained_Earnings}} have indeed lost money in the past.</p>
     *
     * @return self
     */
    public function setRetainedEarnings($retained_earnings)
    {
        if (is_null($retained_earnings)) {
            throw new \InvalidArgumentException('non-nullable retained_earnings cannot be null');
        }
        $this->container['retained_earnings'] = $retained_earnings;

        return $this;
    }

    /**
     * Gets short_term_debt_and_capital_lease_obligation
     *
     * @return float|null
     */
    public function getShortTermDebtAndCapitalLeaseObligation()
    {
        return $this->container['short_term_debt_and_capital_lease_obligation'];
    }

    /**
     * Sets short_term_debt_and_capital_lease_obligation
     *
     * @param float|null $short_term_debt_and_capital_lease_obligation <p>{{Short-Term_Debt}} is the portion of a company's debt and capital lease obligation that need to be paid within the next 12 months. It equals {{ShortTermDebt_without_lease}} plus {{ShortTermCapitalLeaseObligation}}. This gives investors an idea of how much money the company needs to pay down for the principle of its debt.</p>
     *
     * @return self
     */
    public function setShortTermDebtAndCapitalLeaseObligation($short_term_debt_and_capital_lease_obligation)
    {
        if (is_null($short_term_debt_and_capital_lease_obligation)) {
            throw new \InvalidArgumentException('non-nullable short_term_debt_and_capital_lease_obligation cannot be null');
        }
        $this->container['short_term_debt_and_capital_lease_obligation'] = $short_term_debt_and_capital_lease_obligation;

        return $this;
    }

    /**
     * Gets total_assets
     *
     * @return float|null
     */
    public function getTotalAssets()
    {
        return $this->container['total_assets'];
    }

    /**
     * Sets total_assets
     *
     * @param float|null $total_assets <p>{{Total_Assets}} are all the assets a company owns. From the capital sources of the assets, some of the assets are funded through shareholder's paid in capital and {{Retained_Earnings}} of the business. Others are funded through borrowed money. <br>Therefore, total assets can be calculated as: {{Total_Assets}} = {{Total_Current_Assets}} + {{TotalNonCurrentAssets}} = Total Shareholder's Equity + {{Total_Liabilities}} <br>Total Assets is connected with Return on Assets by {{ROA}} = {{Net_Income}} / {{Total_Assets}} <br> Total Assets is linked to {{Revenue}} through {{turnover}}: {{turnover}}  = {{Revenue}} / {{Total_Assets}} <br>Therefore, if a company grows its {{Total_Assets}} faster than its {{Revenue}}, the {{turnover}} will decline. This might be a warning sign for the business.</p>
     *
     * @return self
     */
    public function setTotalAssets($total_assets)
    {
        if (is_null($total_assets)) {
            throw new \InvalidArgumentException('non-nullable total_assets cannot be null');
        }
        $this->container['total_assets'] = $total_assets;

        return $this;
    }

    /**
     * Gets total_equity
     *
     * @return float|null
     */
    public function getTotalEquity()
    {
        return $this->container['total_equity'];
    }

    /**
     * Sets total_equity
     *
     * @param float|null $total_equity <p>{{TotalEquityGrossMinorityInterest}} is residual interest, including minority interest, that remains in the assets of the enterprise after deducting its liabilities. Equity is increased by owners’ investments and by comprehensive income, and it is reduced by distributions to the owners.</p>
     *
     * @return self
     */
    public function setTotalEquity($total_equity)
    {
        if (is_null($total_equity)) {
            throw new \InvalidArgumentException('non-nullable total_equity cannot be null');
        }
        $this->container['total_equity'] = $total_equity;

        return $this;
    }

    /**
     * Gets total_liabilities
     *
     * @return float|null
     */
    public function getTotalLiabilities()
    {
        return $this->container['total_liabilities'];
    }

    /**
     * Sets total_liabilities
     *
     * @param float|null $total_liabilities <p>{{Total_Liabilities}} = {{Total_Current_Liabilities}} + {{TotalNonCurrentLiabilitiesNetMinorityInterest}} = {{Total_Current_Liabilities}} + {{Long-Term_Debt}} + {{ther_Long-Term_Liab}} <br>{{Total_Liabilities}} = {{Total_Assets}} - {{TotalEquityGrossMinorityInterest}} <br>{{Total_Liabilities}} are the liabilities that the company has to pay others. It is a part of the balance sheet of a company that shareholders do not own, and would be obligated to pay back if the company liquidated.</p>
     *
     * @return self
     */
    public function setTotalLiabilities($total_liabilities)
    {
        if (is_null($total_liabilities)) {
            throw new \InvalidArgumentException('non-nullable total_liabilities cannot be null');
        }
        $this->container['total_liabilities'] = $total_liabilities;

        return $this;
    }

    /**
     * Gets total_receivables
     *
     * @return float|null
     */
    public function getTotalReceivables()
    {
        return $this->container['total_receivables'];
    }

    /**
     * Sets total_receivables
     *
     * @param float|null $total_receivables <p>{{TotalReceivables}} is the sum of all receivables owed by customers and affiliates within one year, including {{Accts_Rec}}, {{NotesReceivable}}, {{LoansReceivable}},{{OtherCurrentReceivables}}.</p>
     *
     * @return self
     */
    public function setTotalReceivables($total_receivables)
    {
        if (is_null($total_receivables)) {
            throw new \InvalidArgumentException('non-nullable total_receivables cannot be null');
        }
        $this->container['total_receivables'] = $total_receivables;

        return $this;
    }

    /**
     * Gets total_stockholders_equity
     *
     * @return float|null
     */
    public function getTotalStockholdersEquity()
    {
        return $this->container['total_stockholders_equity'];
    }

    /**
     * Sets total_stockholders_equity
     *
     * @param float|null $total_stockholders_equity <p>{{Total_Equity}} refers to the net assets owned by shareholders. <br>{{Total_Equity}} = {{Preferred_Stock}} + {{CommonStock}} + Capital Surplus + {{Retained_Earnings}} <br>{{Total_Equity}} and {{Total_Liabilities}} are the two components for {{Total_Assets}}: <br>Total Assets = Total Shareholder's Equity + {{Total_Liabilities}}  = {{Total_Current_Assets}} + {{TotalNonCurrentAssets}} <br>{{Total_Equity}} is used to calculate {{Book_Value_Per_Share}}: {{Book_Value_Per_Share}} = ({{Total_Equity}} - {{Preferred_Stock}})/ {{BS_share}}. <br>The ratio of a company's debt over equity can be used to measure how leveraged this company is: {{deb2equity}} = ({{Long-Term_Debt}} + {{Short-Term_Debt}})/{{Total_Equity}}.</p>
     *
     * @return self
     */
    public function setTotalStockholdersEquity($total_stockholders_equity)
    {
        if (is_null($total_stockholders_equity)) {
            throw new \InvalidArgumentException('non-nullable total_stockholders_equity cannot be null');
        }
        $this->container['total_stockholders_equity'] = $total_stockholders_equity;

        return $this;
    }

    /**
     * Gets treasury_stock
     *
     * @return float|null
     */
    public function getTreasuryStock()
    {
        return $this->container['treasury_stock'];
    }

    /**
     * Sets treasury_stock
     *
     * @param float|null $treasury_stock <p>{{Treasury_Stock}} is the portion of shares that a company keeps in their own treasury. {{Treasury_Stock}} may have come from a repurchase or buyback from shareholders; or it may have never been issued to the public in the first place. These shares don't pay dividends, have no voting rights, and should not be included in shares outstanding calculations.</p>
     *
     * @return self
     */
    public function setTreasuryStock($treasury_stock)
    {
        if (is_null($treasury_stock)) {
            throw new \InvalidArgumentException('non-nullable treasury_stock cannot be null');
        }
        $this->container['treasury_stock'] = $treasury_stock;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


