<?php
/**
 * GuruTransaction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gurufocus Data Package API
 *
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GuruTransaction Class Doc Comment
 *
 * @category Class
 * @description Guru transaction
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GuruTransaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'guru_transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'action' => 'string',
        'change' => 'float',
        'class' => 'string',
        'comment' => 'string',
        'company_name' => 'string',
        'exchange' => 'string',
        'impact' => 'float',
        'industry_code' => 'float',
        'portdate' => 'string',
        'position' => 'float',
        'price_avg' => 'float',
        'price_max' => 'float',
        'price_min' => 'float',
        'share_change' => 'float',
        'shares' => 'float',
        'shares_outstanding' => 'float',
        'split_factor' => 'float',
        'stockid' => 'string',
        'symbol' => 'string',
        'value' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'action' => null,
        'change' => null,
        'class' => null,
        'comment' => null,
        'company_name' => null,
        'exchange' => null,
        'impact' => null,
        'industry_code' => null,
        'portdate' => null,
        'position' => null,
        'price_avg' => null,
        'price_max' => null,
        'price_min' => null,
        'share_change' => null,
        'shares' => null,
        'shares_outstanding' => null,
        'split_factor' => null,
        'stockid' => null,
        'symbol' => null,
        'value' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'action' => false,
        'change' => false,
        'class' => false,
        'comment' => false,
        'company_name' => false,
        'exchange' => false,
        'impact' => false,
        'industry_code' => false,
        'portdate' => false,
        'position' => false,
        'price_avg' => false,
        'price_max' => false,
        'price_min' => false,
        'share_change' => false,
        'shares' => false,
        'shares_outstanding' => false,
        'split_factor' => false,
        'stockid' => false,
        'symbol' => false,
        'value' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action' => 'action',
        'change' => 'change',
        'class' => 'class',
        'comment' => 'comment',
        'company_name' => 'company_name',
        'exchange' => 'exchange',
        'impact' => 'impact',
        'industry_code' => 'industry_code',
        'portdate' => 'portdate',
        'position' => 'position',
        'price_avg' => 'price_avg',
        'price_max' => 'price_max',
        'price_min' => 'price_min',
        'share_change' => 'share_change',
        'shares' => 'shares',
        'shares_outstanding' => 'shares_outstanding',
        'split_factor' => 'split_factor',
        'stockid' => 'stockid',
        'symbol' => 'symbol',
        'value' => 'value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action' => 'setAction',
        'change' => 'setChange',
        'class' => 'setClass',
        'comment' => 'setComment',
        'company_name' => 'setCompanyName',
        'exchange' => 'setExchange',
        'impact' => 'setImpact',
        'industry_code' => 'setIndustryCode',
        'portdate' => 'setPortdate',
        'position' => 'setPosition',
        'price_avg' => 'setPriceAvg',
        'price_max' => 'setPriceMax',
        'price_min' => 'setPriceMin',
        'share_change' => 'setShareChange',
        'shares' => 'setShares',
        'shares_outstanding' => 'setSharesOutstanding',
        'split_factor' => 'setSplitFactor',
        'stockid' => 'setStockid',
        'symbol' => 'setSymbol',
        'value' => 'setValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action' => 'getAction',
        'change' => 'getChange',
        'class' => 'getClass',
        'comment' => 'getComment',
        'company_name' => 'getCompanyName',
        'exchange' => 'getExchange',
        'impact' => 'getImpact',
        'industry_code' => 'getIndustryCode',
        'portdate' => 'getPortdate',
        'position' => 'getPosition',
        'price_avg' => 'getPriceAvg',
        'price_max' => 'getPriceMax',
        'price_min' => 'getPriceMin',
        'share_change' => 'getShareChange',
        'shares' => 'getShares',
        'shares_outstanding' => 'getSharesOutstanding',
        'split_factor' => 'getSplitFactor',
        'stockid' => 'getStockid',
        'symbol' => 'getSymbol',
        'value' => 'getValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('change', $data ?? [], null);
        $this->setIfExists('class', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('company_name', $data ?? [], null);
        $this->setIfExists('exchange', $data ?? [], null);
        $this->setIfExists('impact', $data ?? [], null);
        $this->setIfExists('industry_code', $data ?? [], null);
        $this->setIfExists('portdate', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('price_avg', $data ?? [], null);
        $this->setIfExists('price_max', $data ?? [], null);
        $this->setIfExists('price_min', $data ?? [], null);
        $this->setIfExists('share_change', $data ?? [], null);
        $this->setIfExists('shares', $data ?? [], null);
        $this->setIfExists('shares_outstanding', $data ?? [], null);
        $this->setIfExists('split_factor', $data ?? [], null);
        $this->setIfExists('stockid', $data ?? [], null);
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action
     *
     * @return string|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string|null $action The transaction type: add, buy, reduce, sold out
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets change
     *
     * @return float|null
     */
    public function getChange()
    {
        return $this->container['change'];
    }

    /**
     * Sets change
     *
     * @param float|null $change change
     *
     * @return self
     */
    public function setChange($change)
    {
        if (is_null($change)) {
            throw new \InvalidArgumentException('non-nullable change cannot be null');
        }
        $this->container['change'] = $change;

        return $this;
    }

    /**
     * Gets class
     *
     * @return string|null
     */
    public function getClass()
    {
        return $this->container['class'];
    }

    /**
     * Sets class
     *
     * @param string|null $class A unique identifier that describes the stock ticker's share class. Examples: Class A, Class C, ADR
     *
     * @return self
     */
    public function setClass($class)
    {
        if (is_null($class)) {
            throw new \InvalidArgumentException('non-nullable class cannot be null');
        }
        $this->container['class'] = $class;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name company_name
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        if (is_null($company_name)) {
            throw new \InvalidArgumentException('non-nullable company_name cannot be null');
        }
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets exchange
     *
     * @return string|null
     */
    public function getExchange()
    {
        return $this->container['exchange'];
    }

    /**
     * Sets exchange
     *
     * @param string|null $exchange The company's stock exchange. Example: NAS for Apple.
     *
     * @return self
     */
    public function setExchange($exchange)
    {
        if (is_null($exchange)) {
            throw new \InvalidArgumentException('non-nullable exchange cannot be null');
        }
        $this->container['exchange'] = $exchange;

        return $this;
    }

    /**
     * Gets impact
     *
     * @return float|null
     */
    public function getImpact()
    {
        return $this->container['impact'];
    }

    /**
     * Sets impact
     *
     * @param float|null $impact The ratio of the dollar value of the transaction relative to the total value of the portfolio.
     *
     * @return self
     */
    public function setImpact($impact)
    {
        if (is_null($impact)) {
            throw new \InvalidArgumentException('non-nullable impact cannot be null');
        }
        $this->container['impact'] = $impact;

        return $this;
    }

    /**
     * Gets industry_code
     *
     * @return float|null
     */
    public function getIndustryCode()
    {
        return $this->container['industry_code'];
    }

    /**
     * Sets industry_code
     *
     * @param float|null $industry_code industry_code
     *
     * @return self
     */
    public function setIndustryCode($industry_code)
    {
        if (is_null($industry_code)) {
            throw new \InvalidArgumentException('non-nullable industry_code cannot be null');
        }
        $this->container['industry_code'] = $industry_code;

        return $this;
    }

    /**
     * Gets portdate
     *
     * @return string|null
     */
    public function getPortdate()
    {
        return $this->container['portdate'];
    }

    /**
     * Sets portdate
     *
     * @param string|null $portdate If the date is the end of quarters, the trades are made during the quarter ended on the dates. Otherwise, the dates are the estimated trade dates.
     *
     * @return self
     */
    public function setPortdate($portdate)
    {
        if (is_null($portdate)) {
            throw new \InvalidArgumentException('non-nullable portdate cannot be null');
        }
        $this->container['portdate'] = $portdate;

        return $this;
    }

    /**
     * Gets position
     *
     * @return float|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param float|null $position position
     *
     * @return self
     */
    public function setPosition($position)
    {
        if (is_null($position)) {
            throw new \InvalidArgumentException('non-nullable position cannot be null');
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets price_avg
     *
     * @return float|null
     */
    public function getPriceAvg()
    {
        return $this->container['price_avg'];
    }

    /**
     * Sets price_avg
     *
     * @param float|null $price_avg price_avg
     *
     * @return self
     */
    public function setPriceAvg($price_avg)
    {
        if (is_null($price_avg)) {
            throw new \InvalidArgumentException('non-nullable price_avg cannot be null');
        }
        $this->container['price_avg'] = $price_avg;

        return $this;
    }

    /**
     * Gets price_max
     *
     * @return float|null
     */
    public function getPriceMax()
    {
        return $this->container['price_max'];
    }

    /**
     * Sets price_max
     *
     * @param float|null $price_max For a guru trade, the highest trading price over a specific quarter
     *
     * @return self
     */
    public function setPriceMax($price_max)
    {
        if (is_null($price_max)) {
            throw new \InvalidArgumentException('non-nullable price_max cannot be null');
        }
        $this->container['price_max'] = $price_max;

        return $this;
    }

    /**
     * Gets price_min
     *
     * @return float|null
     */
    public function getPriceMin()
    {
        return $this->container['price_min'];
    }

    /**
     * Sets price_min
     *
     * @param float|null $price_min For a guru trade, the minimum trading price over a specific quarter
     *
     * @return self
     */
    public function setPriceMin($price_min)
    {
        if (is_null($price_min)) {
            throw new \InvalidArgumentException('non-nullable price_min cannot be null');
        }
        $this->container['price_min'] = $price_min;

        return $this;
    }

    /**
     * Gets share_change
     *
     * @return float|null
     */
    public function getShareChange()
    {
        return $this->container['share_change'];
    }

    /**
     * Sets share_change
     *
     * @param float|null $share_change share_change
     *
     * @return self
     */
    public function setShareChange($share_change)
    {
        if (is_null($share_change)) {
            throw new \InvalidArgumentException('non-nullable share_change cannot be null');
        }
        $this->container['share_change'] = $share_change;

        return $this;
    }

    /**
     * Gets shares
     *
     * @return float|null
     */
    public function getShares()
    {
        return $this->container['shares'];
    }

    /**
     * Sets shares
     *
     * @param float|null $shares Outstanding shares refer to a company's stock currently held by all its shareholders, including share blocks held by institutional investors and restricted shares owned by the company's officers and insiders.
     *
     * @return self
     */
    public function setShares($shares)
    {
        if (is_null($shares)) {
            throw new \InvalidArgumentException('non-nullable shares cannot be null');
        }
        $this->container['shares'] = $shares;

        return $this;
    }

    /**
     * Gets shares_outstanding
     *
     * @return float|null
     */
    public function getSharesOutstanding()
    {
        return $this->container['shares_outstanding'];
    }

    /**
     * Sets shares_outstanding
     *
     * @param float|null $shares_outstanding <p>{{Cash_Flow_from_Others}} may include {{ChangeInWorkingCapital}}. These are cash differences caused by the {{ChangeInInventory}}, {{AccountsPayable}}, {{Accts_Rec}} etc. For instance, if a company pays its suppliers slower, its cash position will build up faster. If a company receives payments from its customers slower, its {{Accts_Rec}} will rise, and its cash position will grow more slowly (or even shrink).</p>
     *
     * @return self
     */
    public function setSharesOutstanding($shares_outstanding)
    {
        if (is_null($shares_outstanding)) {
            throw new \InvalidArgumentException('non-nullable shares_outstanding cannot be null');
        }
        $this->container['shares_outstanding'] = $shares_outstanding;

        return $this;
    }

    /**
     * Gets split_factor
     *
     * @return float|null
     */
    public function getSplitFactor()
    {
        return $this->container['split_factor'];
    }

    /**
     * Sets split_factor
     *
     * @param float|null $split_factor split_factor
     *
     * @return self
     */
    public function setSplitFactor($split_factor)
    {
        if (is_null($split_factor)) {
            throw new \InvalidArgumentException('non-nullable split_factor cannot be null');
        }
        $this->container['split_factor'] = $split_factor;

        return $this;
    }

    /**
     * Gets stockid
     *
     * @return string|null
     */
    public function getStockid()
    {
        return $this->container['stockid'];
    }

    /**
     * Sets stockid
     *
     * @param string|null $stockid A unique identifier for the stock
     *
     * @return self
     */
    public function setStockid($stockid)
    {
        if (is_null($stockid)) {
            throw new \InvalidArgumentException('non-nullable stockid cannot be null');
        }
        $this->container['stockid'] = $stockid;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string|null
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string|null $symbol The company's stock ticker symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets value
     *
     * @return float|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param float|null $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


