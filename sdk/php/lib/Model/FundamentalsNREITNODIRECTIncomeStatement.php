<?php
/**
 * FundamentalsNREITNODIRECTIncomeStatement
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gurufocus Data Package API
 *
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FundamentalsNREITNODIRECTIncomeStatement Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FundamentalsNREITNODIRECTIncomeStatement implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'fundamentals_N_REIT_NO_DIRECT_income_statement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cost_of_goods_sold' => 'float',
        'depreciation_depletion_amortization' => 'float',
        'ebit' => 'float',
        'ebitda' => 'float',
        'ebitda_margin' => 'float',
        'eps_basic' => 'float',
        'eps_diluated' => 'float',
        'gross_margin' => 'float',
        'gross_profit' => 'float',
        'interest_expense' => 'float',
        'interest_income' => 'float',
        'is_preferred_dividends' => 'float',
        'net_income' => 'float',
        'net_income_continuing_operations' => 'float',
        'net_income_discontinued_operations' => 'float',
        'net_income_including_noncontrolling_interests' => 'float',
        'net_interest_income' => 'float',
        'net_margin' => 'float',
        'operating_income' => 'float',
        'operating_margin' => 'float',
        'other_income_expense' => 'float',
        'other_income_minority_interest' => 'float',
        'other_net_income_loss' => 'float',
        'other_operating_charges' => 'float',
        'pretax_income' => 'float',
        'research_development' => 'float',
        'revenue' => 'float',
        'selling_general_admin_expense' => 'float',
        'shares_outstanding' => 'float',
        'tax_provision' => 'float',
        'tax_rate' => 'float',
        'total_operating_expense' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cost_of_goods_sold' => null,
        'depreciation_depletion_amortization' => null,
        'ebit' => null,
        'ebitda' => null,
        'ebitda_margin' => null,
        'eps_basic' => null,
        'eps_diluated' => null,
        'gross_margin' => null,
        'gross_profit' => null,
        'interest_expense' => null,
        'interest_income' => null,
        'is_preferred_dividends' => null,
        'net_income' => null,
        'net_income_continuing_operations' => null,
        'net_income_discontinued_operations' => null,
        'net_income_including_noncontrolling_interests' => null,
        'net_interest_income' => null,
        'net_margin' => null,
        'operating_income' => null,
        'operating_margin' => null,
        'other_income_expense' => null,
        'other_income_minority_interest' => null,
        'other_net_income_loss' => null,
        'other_operating_charges' => null,
        'pretax_income' => null,
        'research_development' => null,
        'revenue' => null,
        'selling_general_admin_expense' => null,
        'shares_outstanding' => null,
        'tax_provision' => null,
        'tax_rate' => null,
        'total_operating_expense' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cost_of_goods_sold' => false,
        'depreciation_depletion_amortization' => false,
        'ebit' => false,
        'ebitda' => false,
        'ebitda_margin' => false,
        'eps_basic' => false,
        'eps_diluated' => false,
        'gross_margin' => false,
        'gross_profit' => false,
        'interest_expense' => false,
        'interest_income' => false,
        'is_preferred_dividends' => false,
        'net_income' => false,
        'net_income_continuing_operations' => false,
        'net_income_discontinued_operations' => false,
        'net_income_including_noncontrolling_interests' => false,
        'net_interest_income' => false,
        'net_margin' => false,
        'operating_income' => false,
        'operating_margin' => false,
        'other_income_expense' => false,
        'other_income_minority_interest' => false,
        'other_net_income_loss' => false,
        'other_operating_charges' => false,
        'pretax_income' => false,
        'research_development' => false,
        'revenue' => false,
        'selling_general_admin_expense' => false,
        'shares_outstanding' => false,
        'tax_provision' => false,
        'tax_rate' => false,
        'total_operating_expense' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cost_of_goods_sold' => 'cost_of_goods_sold',
        'depreciation_depletion_amortization' => 'depreciation_depletion_amortization',
        'ebit' => 'ebit',
        'ebitda' => 'ebitda',
        'ebitda_margin' => 'ebitda_margin',
        'eps_basic' => 'eps_basic',
        'eps_diluated' => 'eps_diluated',
        'gross_margin' => 'gross_margin',
        'gross_profit' => 'gross_profit',
        'interest_expense' => 'interest_expense',
        'interest_income' => 'interest_income',
        'is_preferred_dividends' => 'is_preferred_dividends',
        'net_income' => 'net_income',
        'net_income_continuing_operations' => 'net_income_continuing_operations',
        'net_income_discontinued_operations' => 'net_income_discontinued_operations',
        'net_income_including_noncontrolling_interests' => 'net_income_including_noncontrolling_interests',
        'net_interest_income' => 'net_interest_income',
        'net_margin' => 'net_margin',
        'operating_income' => 'operating_income',
        'operating_margin' => 'operating_margin',
        'other_income_expense' => 'other_income_expense',
        'other_income_minority_interest' => 'other_income_minority_interest',
        'other_net_income_loss' => 'other_net_income_loss',
        'other_operating_charges' => 'other_operating_charges',
        'pretax_income' => 'pretax_income',
        'research_development' => 'research_development',
        'revenue' => 'revenue',
        'selling_general_admin_expense' => 'selling_general_admin_expense',
        'shares_outstanding' => 'shares_outstanding',
        'tax_provision' => 'tax_provision',
        'tax_rate' => 'tax_rate',
        'total_operating_expense' => 'total_operating_expense'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cost_of_goods_sold' => 'setCostOfGoodsSold',
        'depreciation_depletion_amortization' => 'setDepreciationDepletionAmortization',
        'ebit' => 'setEbit',
        'ebitda' => 'setEbitda',
        'ebitda_margin' => 'setEbitdaMargin',
        'eps_basic' => 'setEpsBasic',
        'eps_diluated' => 'setEpsDiluated',
        'gross_margin' => 'setGrossMargin',
        'gross_profit' => 'setGrossProfit',
        'interest_expense' => 'setInterestExpense',
        'interest_income' => 'setInterestIncome',
        'is_preferred_dividends' => 'setIsPreferredDividends',
        'net_income' => 'setNetIncome',
        'net_income_continuing_operations' => 'setNetIncomeContinuingOperations',
        'net_income_discontinued_operations' => 'setNetIncomeDiscontinuedOperations',
        'net_income_including_noncontrolling_interests' => 'setNetIncomeIncludingNoncontrollingInterests',
        'net_interest_income' => 'setNetInterestIncome',
        'net_margin' => 'setNetMargin',
        'operating_income' => 'setOperatingIncome',
        'operating_margin' => 'setOperatingMargin',
        'other_income_expense' => 'setOtherIncomeExpense',
        'other_income_minority_interest' => 'setOtherIncomeMinorityInterest',
        'other_net_income_loss' => 'setOtherNetIncomeLoss',
        'other_operating_charges' => 'setOtherOperatingCharges',
        'pretax_income' => 'setPretaxIncome',
        'research_development' => 'setResearchDevelopment',
        'revenue' => 'setRevenue',
        'selling_general_admin_expense' => 'setSellingGeneralAdminExpense',
        'shares_outstanding' => 'setSharesOutstanding',
        'tax_provision' => 'setTaxProvision',
        'tax_rate' => 'setTaxRate',
        'total_operating_expense' => 'setTotalOperatingExpense'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cost_of_goods_sold' => 'getCostOfGoodsSold',
        'depreciation_depletion_amortization' => 'getDepreciationDepletionAmortization',
        'ebit' => 'getEbit',
        'ebitda' => 'getEbitda',
        'ebitda_margin' => 'getEbitdaMargin',
        'eps_basic' => 'getEpsBasic',
        'eps_diluated' => 'getEpsDiluated',
        'gross_margin' => 'getGrossMargin',
        'gross_profit' => 'getGrossProfit',
        'interest_expense' => 'getInterestExpense',
        'interest_income' => 'getInterestIncome',
        'is_preferred_dividends' => 'getIsPreferredDividends',
        'net_income' => 'getNetIncome',
        'net_income_continuing_operations' => 'getNetIncomeContinuingOperations',
        'net_income_discontinued_operations' => 'getNetIncomeDiscontinuedOperations',
        'net_income_including_noncontrolling_interests' => 'getNetIncomeIncludingNoncontrollingInterests',
        'net_interest_income' => 'getNetInterestIncome',
        'net_margin' => 'getNetMargin',
        'operating_income' => 'getOperatingIncome',
        'operating_margin' => 'getOperatingMargin',
        'other_income_expense' => 'getOtherIncomeExpense',
        'other_income_minority_interest' => 'getOtherIncomeMinorityInterest',
        'other_net_income_loss' => 'getOtherNetIncomeLoss',
        'other_operating_charges' => 'getOtherOperatingCharges',
        'pretax_income' => 'getPretaxIncome',
        'research_development' => 'getResearchDevelopment',
        'revenue' => 'getRevenue',
        'selling_general_admin_expense' => 'getSellingGeneralAdminExpense',
        'shares_outstanding' => 'getSharesOutstanding',
        'tax_provision' => 'getTaxProvision',
        'tax_rate' => 'getTaxRate',
        'total_operating_expense' => 'getTotalOperatingExpense'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('cost_of_goods_sold', $data ?? [], null);
        $this->setIfExists('depreciation_depletion_amortization', $data ?? [], null);
        $this->setIfExists('ebit', $data ?? [], null);
        $this->setIfExists('ebitda', $data ?? [], null);
        $this->setIfExists('ebitda_margin', $data ?? [], null);
        $this->setIfExists('eps_basic', $data ?? [], null);
        $this->setIfExists('eps_diluated', $data ?? [], null);
        $this->setIfExists('gross_margin', $data ?? [], null);
        $this->setIfExists('gross_profit', $data ?? [], null);
        $this->setIfExists('interest_expense', $data ?? [], null);
        $this->setIfExists('interest_income', $data ?? [], null);
        $this->setIfExists('is_preferred_dividends', $data ?? [], null);
        $this->setIfExists('net_income', $data ?? [], null);
        $this->setIfExists('net_income_continuing_operations', $data ?? [], null);
        $this->setIfExists('net_income_discontinued_operations', $data ?? [], null);
        $this->setIfExists('net_income_including_noncontrolling_interests', $data ?? [], null);
        $this->setIfExists('net_interest_income', $data ?? [], null);
        $this->setIfExists('net_margin', $data ?? [], null);
        $this->setIfExists('operating_income', $data ?? [], null);
        $this->setIfExists('operating_margin', $data ?? [], null);
        $this->setIfExists('other_income_expense', $data ?? [], null);
        $this->setIfExists('other_income_minority_interest', $data ?? [], null);
        $this->setIfExists('other_net_income_loss', $data ?? [], null);
        $this->setIfExists('other_operating_charges', $data ?? [], null);
        $this->setIfExists('pretax_income', $data ?? [], null);
        $this->setIfExists('research_development', $data ?? [], null);
        $this->setIfExists('revenue', $data ?? [], null);
        $this->setIfExists('selling_general_admin_expense', $data ?? [], null);
        $this->setIfExists('shares_outstanding', $data ?? [], null);
        $this->setIfExists('tax_provision', $data ?? [], null);
        $this->setIfExists('tax_rate', $data ?? [], null);
        $this->setIfExists('total_operating_expense', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cost_of_goods_sold
     *
     * @return float|null
     */
    public function getCostOfGoodsSold()
    {
        return $this->container['cost_of_goods_sold'];
    }

    /**
     * Sets cost_of_goods_sold
     *
     * @param float|null $cost_of_goods_sold <p>{{cogs}} is the aggregate cost of goods produced and sold, and services rendered during the reporting period. It excludes {{TotalOperatingExpense}}, such as {{DDA}} and {{SGA}}. <br>{{cogs}} is directly linked to profitability of the company through {{grossmargin}}. {{grossmargin}} is calculated as ({{revenue}} - {{cogs}}) / {{revenue}}. <br>{{cogs}} is also directly linked to another concept called {{InventoryTurnover}}, which is calculated as {{COGS}} / Average {{Inventory}}.</p>
     *
     * @return self
     */
    public function setCostOfGoodsSold($cost_of_goods_sold)
    {
        if (is_null($cost_of_goods_sold)) {
            throw new \InvalidArgumentException('non-nullable cost_of_goods_sold cannot be null');
        }
        $this->container['cost_of_goods_sold'] = $cost_of_goods_sold;

        return $this;
    }

    /**
     * Gets depreciation_depletion_amortization
     *
     * @return float|null
     */
    public function getDepreciationDepletionAmortization()
    {
        return $this->container['depreciation_depletion_amortization'];
    }

    /**
     * Sets depreciation_depletion_amortization
     *
     * @param float|null $depreciation_depletion_amortization <p>{{DDA}} is a present expense that accounts for the past cost of an asset that is now providing benefits. Depletion and amortization are synonyms for depreciation. Generally: The term depreciation is used when discussing man made tangible assets. The term depletion is used when discussing natural tangible assets. The term amortization is used when discussing intangible assets</p>
     *
     * @return self
     */
    public function setDepreciationDepletionAmortization($depreciation_depletion_amortization)
    {
        if (is_null($depreciation_depletion_amortization)) {
            throw new \InvalidArgumentException('non-nullable depreciation_depletion_amortization cannot be null');
        }
        $this->container['depreciation_depletion_amortization'] = $depreciation_depletion_amortization;

        return $this;
    }

    /**
     * Gets ebit
     *
     * @return float|null
     */
    public function getEbit()
    {
        return $this->container['ebit'];
    }

    /**
     * Sets ebit
     *
     * @param float|null $ebit In accounting and finance, earnings before interest and taxes (EBIT), is a measure of a firm's profit that includes all expenses except interest and income tax expenses. It is the difference between operating revenues and operating expenses.
     *
     * @return self
     */
    public function setEbit($ebit)
    {
        if (is_null($ebit)) {
            throw new \InvalidArgumentException('non-nullable ebit cannot be null');
        }
        $this->container['ebit'] = $ebit;

        return $this;
    }

    /**
     * Gets ebitda
     *
     * @return float|null
     */
    public function getEbitda()
    {
        return $this->container['ebitda'];
    }

    /**
     * Sets ebitda
     *
     * @param float|null $ebitda <p>Earnings Before Interest, Taxes, Depreciation, and Amortization ({{EBITDA}}) is what the company earns before it expenses interest, taxes, depreciation and amortization. <br>{{EBITDA}} is calculated as {{EBITDA}} = {{Revenue}} - {{COGS}} - {{SGA}} - {{RD}} = {{Gross_Profit}} - {{SGA}} - {{RD}} <br> The use of {{EBITDA}} is an attempt to make the results of different companies more comparable and uniform.</p>
     *
     * @return self
     */
    public function setEbitda($ebitda)
    {
        if (is_null($ebitda)) {
            throw new \InvalidArgumentException('non-nullable ebitda cannot be null');
        }
        $this->container['ebitda'] = $ebitda;

        return $this;
    }

    /**
     * Gets ebitda_margin
     *
     * @return float|null
     */
    public function getEbitdaMargin()
    {
        return $this->container['ebitda_margin'];
    }

    /**
     * Sets ebitda_margin
     *
     * @param float|null $ebitda_margin ebitda_margin
     *
     * @return self
     */
    public function setEbitdaMargin($ebitda_margin)
    {
        if (is_null($ebitda_margin)) {
            throw new \InvalidArgumentException('non-nullable ebitda_margin cannot be null');
        }
        $this->container['ebitda_margin'] = $ebitda_margin;

        return $this;
    }

    /**
     * Gets eps_basic
     *
     * @return float|null
     */
    public function getEpsBasic()
    {
        return $this->container['eps_basic'];
    }

    /**
     * Sets eps_basic
     *
     * @param float|null $eps_basic <p>{{eps_basic}} is a rough measurement of the amount of a company's profit that can be allocated to one share of its stock. {{eps_basic}} do not factor in the dilutive effects on convertible securities. <br>{{eps_basic}} is calculated as: {{eps_basic}} = ({{Net_Income}} - {{IS_preferred_dividends}}) / {{shares_basic}}</p>
     *
     * @return self
     */
    public function setEpsBasic($eps_basic)
    {
        if (is_null($eps_basic)) {
            throw new \InvalidArgumentException('non-nullable eps_basic cannot be null');
        }
        $this->container['eps_basic'] = $eps_basic;

        return $this;
    }

    /**
     * Gets eps_diluated
     *
     * @return float|null
     */
    public function getEpsDiluated()
    {
        return $this->container['eps_diluated'];
    }

    /**
     * Sets eps_diluated
     *
     * @param float|null $eps_diluated <p>{{eps_diluated}} is a rough measurement of the amount of a company's profit that can be allocated to one share of its stock. {{eps_diluated}} takes into account all of the outstanding dilutive securities that could potentially be exercised (such as stock options and convertible {{Preferred_Stock}}) and shows how such an action would impact {{per_share_eps}}. <br>{{eps_diluated}} is calculated as: {{eps_diluated}} = ({{Net_Income}} - {{IS_preferred_dividends}}) / {{Shares_Outstanding}}</p>
     *
     * @return self
     */
    public function setEpsDiluated($eps_diluated)
    {
        if (is_null($eps_diluated)) {
            throw new \InvalidArgumentException('non-nullable eps_diluated cannot be null');
        }
        $this->container['eps_diluated'] = $eps_diluated;

        return $this;
    }

    /**
     * Gets gross_margin
     *
     * @return float|null
     */
    public function getGrossMargin()
    {
        return $this->container['gross_margin'];
    }

    /**
     * Sets gross_margin
     *
     * @param float|null $gross_margin Gross Margin % is calculated as gross profit divided by its revenue.
     *
     * @return self
     */
    public function setGrossMargin($gross_margin)
    {
        if (is_null($gross_margin)) {
            throw new \InvalidArgumentException('non-nullable gross_margin cannot be null');
        }
        $this->container['gross_margin'] = $gross_margin;

        return $this;
    }

    /**
     * Gets gross_profit
     *
     * @return float|null
     */
    public function getGrossProfit()
    {
        return $this->container['gross_profit'];
    }

    /**
     * Sets gross_profit
     *
     * @param float|null $gross_profit <p>{{Gross_Profit}} is the different between the sale prices and the cost of buying or producing the goods. It is calculated as {{Gross_Profit}} = {{Revenue}} - {{COGS}} <br>{{Gross_Profit}} is the numerator in the calculation of {{grossmargin}}: {{grossmargin}} = {{Gross_Profit}} / {{Revenue}} = ({{Revenue}} - {{COGS}}) / {{Revenue}} <br>A positive {{Gross_Profit}} is only the first step for a company to make a net profit. The {{Gross_Profit}} needs to be big enough to also cover related labor, equipment, rental, marketing/advertising, research and development and a lot of other costs in selling the products.</p>
     *
     * @return self
     */
    public function setGrossProfit($gross_profit)
    {
        if (is_null($gross_profit)) {
            throw new \InvalidArgumentException('non-nullable gross_profit cannot be null');
        }
        $this->container['gross_profit'] = $gross_profit;

        return $this;
    }

    /**
     * Gets interest_expense
     *
     * @return float|null
     */
    public function getInterestExpense()
    {
        return $this->container['interest_expense'];
    }

    /**
     * Sets interest_expense
     *
     * @param float|null $interest_expense <p>{{InterestExpense}} is the amount reported by a company or individual as an expense for borrowed money. It is related to {{interest_coverage}}, which is a ratio that determines how easily a company can pay interest expenses on outstanding debt. <br>{{interest_coverage}} is calculated as -1 * {{Operating_Income}} / {{InterestExpense}} <br>If both {{InterestExpense}} and {{InterestIncome}} are empty, while {{NetInterestIncome}} is negative, then use {{NetInterestIncome}} as {{InterestExpense}}.</p>
     *
     * @return self
     */
    public function setInterestExpense($interest_expense)
    {
        if (is_null($interest_expense)) {
            throw new \InvalidArgumentException('non-nullable interest_expense cannot be null');
        }
        $this->container['interest_expense'] = $interest_expense;

        return $this;
    }

    /**
     * Gets interest_income
     *
     * @return float|null
     */
    public function getInterestIncome()
    {
        return $this->container['interest_income'];
    }

    /**
     * Sets interest_income
     *
     * @param float|null $interest_income <p>{{InterestIncome}} is the interest earned on cash temporarily held in savings accounts, certificates of deposits, or other investments.</p>
     *
     * @return self
     */
    public function setInterestIncome($interest_income)
    {
        if (is_null($interest_income)) {
            throw new \InvalidArgumentException('non-nullable interest_income cannot be null');
        }
        $this->container['interest_income'] = $interest_income;

        return $this;
    }

    /**
     * Gets is_preferred_dividends
     *
     * @return float|null
     */
    public function getIsPreferredDividends()
    {
        return $this->container['is_preferred_dividends'];
    }

    /**
     * Sets is_preferred_dividends
     *
     * @param float|null $is_preferred_dividends <p>{{IS_preferred_dividends}} is a dividend that is accrued and paid on a company's preferred shares. In the event that a company is unable to pay all dividends, claims to {{IS_preferred_dividends}} take precedence over claims to dividends that are paid on common shares.</p>
     *
     * @return self
     */
    public function setIsPreferredDividends($is_preferred_dividends)
    {
        if (is_null($is_preferred_dividends)) {
            throw new \InvalidArgumentException('non-nullable is_preferred_dividends cannot be null');
        }
        $this->container['is_preferred_dividends'] = $is_preferred_dividends;

        return $this;
    }

    /**
     * Gets net_income
     *
     * @return float|null
     */
    public function getNetIncome()
    {
        return $this->container['net_income'];
    }

    /**
     * Sets net_income
     *
     * @param float|null $net_income <p>{{Net_Income}} is the net profit that a company earns after deducting all costs and losses including {{COGS}}, {{SGA}}, {{DDA}}, {{InterestExpense}}, non-recurring items and {{tax}}.  <br>{{Net_Income}}  = {{Revenue}} - {{COGS}}, - {{SGA}} - {{RD}}  - {{DDA}} - {{InterestExpense}} + Non-Recurring Items  - {{tax}} = Earnings Before Depreciation and Amortization - {{DDA}} - {{InterestExpense}} - Non-Recurring Items (NRI) - {{tax}} = {{Operating_Income}} - {{InterestExpense}} - Non-Recurring Items (NRI) - {{tax}} = {{Pretax_Income}} - {{tax}}</p>
     *
     * @return self
     */
    public function setNetIncome($net_income)
    {
        if (is_null($net_income)) {
            throw new \InvalidArgumentException('non-nullable net_income cannot be null');
        }
        $this->container['net_income'] = $net_income;

        return $this;
    }

    /**
     * Gets net_income_continuing_operations
     *
     * @return float|null
     */
    public function getNetIncomeContinuingOperations()
    {
        return $this->container['net_income_continuing_operations'];
    }

    /**
     * Sets net_income_continuing_operations
     *
     * @param float|null $net_income_continuing_operations <p>{{Net_Income_(Continuing_Operations)}} indicates the net income that a firm brings in from ongoing business activities. These activities are expected to continue into the next reporting period.</p>
     *
     * @return self
     */
    public function setNetIncomeContinuingOperations($net_income_continuing_operations)
    {
        if (is_null($net_income_continuing_operations)) {
            throw new \InvalidArgumentException('non-nullable net_income_continuing_operations cannot be null');
        }
        $this->container['net_income_continuing_operations'] = $net_income_continuing_operations;

        return $this;
    }

    /**
     * Gets net_income_discontinued_operations
     *
     * @return float|null
     */
    public function getNetIncomeDiscontinuedOperations()
    {
        return $this->container['net_income_discontinued_operations'];
    }

    /**
     * Sets net_income_discontinued_operations
     *
     * @param float|null $net_income_discontinued_operations <p>{{Net_Income_(Discontinued_Operations)}} indicates the net income that a firm brought in from operations that will not be used in future reporting periods.</p>
     *
     * @return self
     */
    public function setNetIncomeDiscontinuedOperations($net_income_discontinued_operations)
    {
        if (is_null($net_income_discontinued_operations)) {
            throw new \InvalidArgumentException('non-nullable net_income_discontinued_operations cannot be null');
        }
        $this->container['net_income_discontinued_operations'] = $net_income_discontinued_operations;

        return $this;
    }

    /**
     * Gets net_income_including_noncontrolling_interests
     *
     * @return float|null
     */
    public function getNetIncomeIncludingNoncontrollingInterests()
    {
        return $this->container['net_income_including_noncontrolling_interests'];
    }

    /**
     * Sets net_income_including_noncontrolling_interests
     *
     * @param float|null $net_income_including_noncontrolling_interests net_income_including_noncontrolling_interests
     *
     * @return self
     */
    public function setNetIncomeIncludingNoncontrollingInterests($net_income_including_noncontrolling_interests)
    {
        if (is_null($net_income_including_noncontrolling_interests)) {
            throw new \InvalidArgumentException('non-nullable net_income_including_noncontrolling_interests cannot be null');
        }
        $this->container['net_income_including_noncontrolling_interests'] = $net_income_including_noncontrolling_interests;

        return $this;
    }

    /**
     * Gets net_interest_income
     *
     * @return float|null
     */
    public function getNetInterestIncome()
    {
        return $this->container['net_interest_income'];
    }

    /**
     * Sets net_interest_income
     *
     * @param float|null $net_interest_income <p>{{IS_NetInterestIncome}} is the income earned by banks from the fund they have on their balance sheet.</p>
     *
     * @return self
     */
    public function setNetInterestIncome($net_interest_income)
    {
        if (is_null($net_interest_income)) {
            throw new \InvalidArgumentException('non-nullable net_interest_income cannot be null');
        }
        $this->container['net_interest_income'] = $net_interest_income;

        return $this;
    }

    /**
     * Gets net_margin
     *
     * @return float|null
     */
    public function getNetMargin()
    {
        return $this->container['net_margin'];
    }

    /**
     * Sets net_margin
     *
     * @param float|null $net_margin Net margin is calculated as Net Income divided by its Revenue.
     *
     * @return self
     */
    public function setNetMargin($net_margin)
    {
        if (is_null($net_margin)) {
            throw new \InvalidArgumentException('non-nullable net_margin cannot be null');
        }
        $this->container['net_margin'] = $net_margin;

        return $this;
    }

    /**
     * Gets operating_income
     *
     * @return float|null
     */
    public function getOperatingIncome()
    {
        return $this->container['operating_income'];
    }

    /**
     * Sets operating_income
     *
     * @param float|null $operating_income <p>{{Operating_Income}}, sometimes also called Earnings Before Interest and Taxes (EBIT), is the profit a company earned through operations. All expenses, including cash expenses such as {{COGS}}, {{RD}}, wages, and non-cash expenses, such as {{DDA}}, have been deducted from the sales. <br>{{Operating_Income}} (EBIT) = {{Revenue}} - {{COGS}} - {{SGA}} - {{RD}} - {{DDA}} = {{Gross_Profit}} - {{SGA}} - {{RD}} - {{DDA}} = {{EBITDA}} - {{DDA}}</p>
     *
     * @return self
     */
    public function setOperatingIncome($operating_income)
    {
        if (is_null($operating_income)) {
            throw new \InvalidArgumentException('non-nullable operating_income cannot be null');
        }
        $this->container['operating_income'] = $operating_income;

        return $this;
    }

    /**
     * Gets operating_margin
     *
     * @return float|null
     */
    public function getOperatingMargin()
    {
        return $this->container['operating_margin'];
    }

    /**
     * Sets operating_margin
     *
     * @param float|null $operating_margin Operating Margin % is calculated as Operating Income divided by its Revenue.
     *
     * @return self
     */
    public function setOperatingMargin($operating_margin)
    {
        if (is_null($operating_margin)) {
            throw new \InvalidArgumentException('non-nullable operating_margin cannot be null');
        }
        $this->container['operating_margin'] = $operating_margin;

        return $this;
    }

    /**
     * Gets other_income_expense
     *
     * @return float|null
     */
    public function getOtherIncomeExpense()
    {
        return $this->container['other_income_expense'];
    }

    /**
     * Sets other_income_expense
     *
     * @param float|null $other_income_expense <p>{{OtherIncomeExpense}} includes {{Minority_interest}}. {{Minority_interest}} is a significant but non-controlling ownership of less than 50% of a company's voting shares by either an investor or another company.</p>
     *
     * @return self
     */
    public function setOtherIncomeExpense($other_income_expense)
    {
        if (is_null($other_income_expense)) {
            throw new \InvalidArgumentException('non-nullable other_income_expense cannot be null');
        }
        $this->container['other_income_expense'] = $other_income_expense;

        return $this;
    }

    /**
     * Gets other_income_minority_interest
     *
     * @return float|null
     */
    public function getOtherIncomeMinorityInterest()
    {
        return $this->container['other_income_minority_interest'];
    }

    /**
     * Sets other_income_minority_interest
     *
     * @param float|null $other_income_minority_interest <p>{{OtherIncomeExpense}} includes {{Minority_interest}}. {{Minority_interest}} is a significant but non-controlling ownership of less than 50% of a company's voting shares by either an investor or another company.</p>
     *
     * @return self
     */
    public function setOtherIncomeMinorityInterest($other_income_minority_interest)
    {
        if (is_null($other_income_minority_interest)) {
            throw new \InvalidArgumentException('non-nullable other_income_minority_interest cannot be null');
        }
        $this->container['other_income_minority_interest'] = $other_income_minority_interest;

        return $this;
    }

    /**
     * Gets other_net_income_loss
     *
     * @return float|null
     */
    public function getOtherNetIncomeLoss()
    {
        return $this->container['other_net_income_loss'];
    }

    /**
     * Sets other_net_income_loss
     *
     * @param float|null $other_net_income_loss other_net_income_loss
     *
     * @return self
     */
    public function setOtherNetIncomeLoss($other_net_income_loss)
    {
        if (is_null($other_net_income_loss)) {
            throw new \InvalidArgumentException('non-nullable other_net_income_loss cannot be null');
        }
        $this->container['other_net_income_loss'] = $other_net_income_loss;

        return $this;
    }

    /**
     * Gets other_operating_charges
     *
     * @return float|null
     */
    public function getOtherOperatingCharges()
    {
        return $this->container['other_operating_charges'];
    }

    /**
     * Sets other_operating_charges
     *
     * @param float|null $other_operating_charges <p>GuruFocus uses a standardized financial statement format for all companies. For non-financial companies, GuruFocus lists {{SGA}}, Advertising, {{RD}}, and {{other_operating_charges}} under the \"{{TotalOperatingExpense}}\" section. {{other_operating_charges}} sometimes includes: Restructuring, and merger, Acquisition related and other, Litigation settlement charge, Other (too numerous to list). Some companies can and do choose to report each of these items separately. Yet, there are a variety of {{other_operating_charges}} which are simply too numerous to list.</p>
     *
     * @return self
     */
    public function setOtherOperatingCharges($other_operating_charges)
    {
        if (is_null($other_operating_charges)) {
            throw new \InvalidArgumentException('non-nullable other_operating_charges cannot be null');
        }
        $this->container['other_operating_charges'] = $other_operating_charges;

        return $this;
    }

    /**
     * Gets pretax_income
     *
     * @return float|null
     */
    public function getPretaxIncome()
    {
        return $this->container['pretax_income'];
    }

    /**
     * Sets pretax_income
     *
     * @param float|null $pretax_income <p>{{Pretax_Income}} is the income that a company earns before paying income taxes. <br>{{Pretax_Income}} is calculated as {{Operating_Income}} + {{Non_Operating_Income}} + {{InterestExpense}} + {{InterestIncome}} + other</p>
     *
     * @return self
     */
    public function setPretaxIncome($pretax_income)
    {
        if (is_null($pretax_income)) {
            throw new \InvalidArgumentException('non-nullable pretax_income cannot be null');
        }
        $this->container['pretax_income'] = $pretax_income;

        return $this;
    }

    /**
     * Gets research_development
     *
     * @return float|null
     */
    public function getResearchDevelopment()
    {
        return $this->container['research_development'];
    }

    /**
     * Sets research_development
     *
     * @param float|null $research_development <p>This is the expense the company spent on research and development.<br>If competitive advantage is created by a patent or tech advantage, at some point it will disappear. High {{RD}} usually dictates high {{SGA}} which threatens the competitive advantage.</p>
     *
     * @return self
     */
    public function setResearchDevelopment($research_development)
    {
        if (is_null($research_development)) {
            throw new \InvalidArgumentException('non-nullable research_development cannot be null');
        }
        $this->container['research_development'] = $research_development;

        return $this;
    }

    /**
     * Gets revenue
     *
     * @return float|null
     */
    public function getRevenue()
    {
        return $this->container['revenue'];
    }

    /**
     * Sets revenue
     *
     * @param float|null $revenue revenue
     *
     * @return self
     */
    public function setRevenue($revenue)
    {
        if (is_null($revenue)) {
            throw new \InvalidArgumentException('non-nullable revenue cannot be null');
        }
        $this->container['revenue'] = $revenue;

        return $this;
    }

    /**
     * Gets selling_general_admin_expense
     *
     * @return float|null
     */
    public function getSellingGeneralAdminExpense()
    {
        return $this->container['selling_general_admin_expense'];
    }

    /**
     * Sets selling_general_admin_expense
     *
     * @param float|null $selling_general_admin_expense Selling, General, & Admin. Expense (SGA) includes the direct and indirect costs and all general and administrative expenses of a company. For instance, personnel cost, advertising, rent, communication costs are all part of SGA.
     *
     * @return self
     */
    public function setSellingGeneralAdminExpense($selling_general_admin_expense)
    {
        if (is_null($selling_general_admin_expense)) {
            throw new \InvalidArgumentException('non-nullable selling_general_admin_expense cannot be null');
        }
        $this->container['selling_general_admin_expense'] = $selling_general_admin_expense;

        return $this;
    }

    /**
     * Gets shares_outstanding
     *
     * @return float|null
     */
    public function getSharesOutstanding()
    {
        return $this->container['shares_outstanding'];
    }

    /**
     * Sets shares_outstanding
     *
     * @param float|null $shares_outstanding <p>{{Cash_Flow_from_Others}} may include {{ChangeInWorkingCapital}}. These are cash differences caused by the {{ChangeInInventory}}, {{AccountsPayable}}, {{Accts_Rec}} etc. For instance, if a company pays its suppliers slower, its cash position will build up faster. If a company receives payments from its customers slower, its {{Accts_Rec}} will rise, and its cash position will grow more slowly (or even shrink).</p>
     *
     * @return self
     */
    public function setSharesOutstanding($shares_outstanding)
    {
        if (is_null($shares_outstanding)) {
            throw new \InvalidArgumentException('non-nullable shares_outstanding cannot be null');
        }
        $this->container['shares_outstanding'] = $shares_outstanding;

        return $this;
    }

    /**
     * Gets tax_provision
     *
     * @return float|null
     */
    public function getTaxProvision()
    {
        return $this->container['tax_provision'];
    }

    /**
     * Sets tax_provision
     *
     * @param float|null $tax_provision <p>{{TaxProvision}} is the tax to be paid.</p>
     *
     * @return self
     */
    public function setTaxProvision($tax_provision)
    {
        if (is_null($tax_provision)) {
            throw new \InvalidArgumentException('non-nullable tax_provision cannot be null');
        }
        $this->container['tax_provision'] = $tax_provision;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return float|null
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param float|null $tax_rate <p>{{TaxRate}} is the ratio of {{tax}} divided by {{Pretax_Income}}, usually presented in percent. <br> {{{TaxRate}} = {{tax}} / {{Pretax_Income}}</p>
     *
     * @return self
     */
    public function setTaxRate($tax_rate)
    {
        if (is_null($tax_rate)) {
            throw new \InvalidArgumentException('non-nullable tax_rate cannot be null');
        }
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets total_operating_expense
     *
     * @return float|null
     */
    public function getTotalOperatingExpense()
    {
        return $this->container['total_operating_expense'];
    }

    /**
     * Sets total_operating_expense
     *
     * @param float|null $total_operating_expense total_operating_expense
     *
     * @return self
     */
    public function setTotalOperatingExpense($total_operating_expense)
    {
        if (is_null($total_operating_expense)) {
            throw new \InvalidArgumentException('non-nullable total_operating_expense cannot be null');
        }
        $this->container['total_operating_expense'] = $total_operating_expense;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


