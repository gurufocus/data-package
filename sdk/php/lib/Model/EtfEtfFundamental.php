<?php
/**
 * EtfEtfFundamental
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gurufocus Data Package API
 *
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EtfEtfFundamental Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EtfEtfFundamental implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'etf_etf_fundamental';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mktcap' => 'float',
        'pb' => 'float',
        'pbhigh' => 'float',
        'pblow' => 'float',
        'pbmed' => 'float',
        'pe' => 'float',
        'pettmhigh' => 'float',
        'pettmlow' => 'float',
        'pettmmed' => 'float',
        'shares' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'mktcap' => null,
        'pb' => null,
        'pbhigh' => null,
        'pblow' => null,
        'pbmed' => null,
        'pe' => null,
        'pettmhigh' => null,
        'pettmlow' => null,
        'pettmmed' => null,
        'shares' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'mktcap' => false,
        'pb' => false,
        'pbhigh' => false,
        'pblow' => false,
        'pbmed' => false,
        'pe' => false,
        'pettmhigh' => false,
        'pettmlow' => false,
        'pettmmed' => false,
        'shares' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mktcap' => 'mktcap',
        'pb' => 'pb',
        'pbhigh' => 'pbhigh',
        'pblow' => 'pblow',
        'pbmed' => 'pbmed',
        'pe' => 'pe',
        'pettmhigh' => 'pettmhigh',
        'pettmlow' => 'pettmlow',
        'pettmmed' => 'pettmmed',
        'shares' => 'shares'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mktcap' => 'setMktcap',
        'pb' => 'setPb',
        'pbhigh' => 'setPbhigh',
        'pblow' => 'setPblow',
        'pbmed' => 'setPbmed',
        'pe' => 'setPe',
        'pettmhigh' => 'setPettmhigh',
        'pettmlow' => 'setPettmlow',
        'pettmmed' => 'setPettmmed',
        'shares' => 'setShares'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mktcap' => 'getMktcap',
        'pb' => 'getPb',
        'pbhigh' => 'getPbhigh',
        'pblow' => 'getPblow',
        'pbmed' => 'getPbmed',
        'pe' => 'getPe',
        'pettmhigh' => 'getPettmhigh',
        'pettmlow' => 'getPettmlow',
        'pettmmed' => 'getPettmmed',
        'shares' => 'getShares'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('mktcap', $data ?? [], null);
        $this->setIfExists('pb', $data ?? [], null);
        $this->setIfExists('pbhigh', $data ?? [], null);
        $this->setIfExists('pblow', $data ?? [], null);
        $this->setIfExists('pbmed', $data ?? [], null);
        $this->setIfExists('pe', $data ?? [], null);
        $this->setIfExists('pettmhigh', $data ?? [], null);
        $this->setIfExists('pettmlow', $data ?? [], null);
        $this->setIfExists('pettmmed', $data ?? [], null);
        $this->setIfExists('shares', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mktcap
     *
     * @return float|null
     */
    public function getMktcap()
    {
        return $this->container['mktcap'];
    }

    /**
     * Sets mktcap
     *
     * @param float|null $mktcap Market cap is the short version of market capitalization. It is the total market value to buy the whole company. It is equal to the share price times the number of shares outstanding.
     *
     * @return self
     */
    public function setMktcap($mktcap)
    {
        if (is_null($mktcap)) {
            throw new \InvalidArgumentException('non-nullable mktcap cannot be null');
        }
        $this->container['mktcap'] = $mktcap;

        return $this;
    }

    /**
     * Gets pb
     *
     * @return float|null
     */
    public function getPb()
    {
        return $this->container['pb'];
    }

    /**
     * Sets pb
     *
     * @param float|null $pb Companies use the price-to-book ratio to compare a firm's market to book value by dividing price per share by book value per share. Some people know it as the price-equity ratio.
     *
     * @return self
     */
    public function setPb($pb)
    {
        if (is_null($pb)) {
            throw new \InvalidArgumentException('non-nullable pb cannot be null');
        }
        $this->container['pb'] = $pb;

        return $this;
    }

    /**
     * Gets pbhigh
     *
     * @return float|null
     */
    public function getPbhigh()
    {
        return $this->container['pbhigh'];
    }

    /**
     * Sets pbhigh
     *
     * @param float|null $pbhigh Companies use the price-to-book ratio to compare a firm's market to book value by dividing price per share by book value per share. Some people know it as the price-equity ratio.
     *
     * @return self
     */
    public function setPbhigh($pbhigh)
    {
        if (is_null($pbhigh)) {
            throw new \InvalidArgumentException('non-nullable pbhigh cannot be null');
        }
        $this->container['pbhigh'] = $pbhigh;

        return $this;
    }

    /**
     * Gets pblow
     *
     * @return float|null
     */
    public function getPblow()
    {
        return $this->container['pblow'];
    }

    /**
     * Sets pblow
     *
     * @param float|null $pblow Companies use the price-to-book ratio to compare a firm's market to book value by dividing price per share by book value per share. Some people know it as the price-equity ratio.
     *
     * @return self
     */
    public function setPblow($pblow)
    {
        if (is_null($pblow)) {
            throw new \InvalidArgumentException('non-nullable pblow cannot be null');
        }
        $this->container['pblow'] = $pblow;

        return $this;
    }

    /**
     * Gets pbmed
     *
     * @return float|null
     */
    public function getPbmed()
    {
        return $this->container['pbmed'];
    }

    /**
     * Sets pbmed
     *
     * @param float|null $pbmed Companies use the price-to-book ratio to compare a firm's market to book value by dividing price per share by book value per share. Some people know it as the price-equity ratio.
     *
     * @return self
     */
    public function setPbmed($pbmed)
    {
        if (is_null($pbmed)) {
            throw new \InvalidArgumentException('non-nullable pbmed cannot be null');
        }
        $this->container['pbmed'] = $pbmed;

        return $this;
    }

    /**
     * Gets pe
     *
     * @return float|null
     */
    public function getPe()
    {
        return $this->container['pe'];
    }

    /**
     * Sets pe
     *
     * @param float|null $pe <p>The PE ratio, or Price-to-Earnings ratio, is the most widely used metric in the valuation of stocks. It is calculated as:  <b>PE Ratio = Share Price / {{eps_diluated}}</b>.   It can also be calculated from the numbers for the whole company:  <b>PE Ratio = {{mktcap}} / {{net_income}}</b>.</p>  <p>There are at least three kinds of PE ratios used among different investors. They are Trailing Twelve Month PE Ratio({{pettm}}), {{forwardPE}}, and {{penri}}. A new PE ratio based on inflation-adjusted normalized PE ratio is called {{ShillerPE}}, after Yale professor Robert Shiller.</p>  <p>In the calculation of {{pettm}}, the earnings per share used are the earnings per share over the past 12 months({{ttm_eps}}). For {{forwardPE}}, the earnings are the expected earnings for the next twelve months({{forward_eps}}). In the case of {{penri}}, the reported earnings less the non-recurring items are used({{eps_nri}}).For the {{ShillerPE}}, the earnings of the past 10 years are inflation-adjusted and averaged. Since {{ShillerPE}} looks at the average over the last 10 years, it is also called PE10.</p>
     *
     * @return self
     */
    public function setPe($pe)
    {
        if (is_null($pe)) {
            throw new \InvalidArgumentException('non-nullable pe cannot be null');
        }
        $this->container['pe'] = $pe;

        return $this;
    }

    /**
     * Gets pettmhigh
     *
     * @return float|null
     */
    public function getPettmhigh()
    {
        return $this->container['pettmhigh'];
    }

    /**
     * Sets pettmhigh
     *
     * @param float|null $pettmhigh The highest price-earnings ratio over the past 10 years
     *
     * @return self
     */
    public function setPettmhigh($pettmhigh)
    {
        if (is_null($pettmhigh)) {
            throw new \InvalidArgumentException('non-nullable pettmhigh cannot be null');
        }
        $this->container['pettmhigh'] = $pettmhigh;

        return $this;
    }

    /**
     * Gets pettmlow
     *
     * @return float|null
     */
    public function getPettmlow()
    {
        return $this->container['pettmlow'];
    }

    /**
     * Sets pettmlow
     *
     * @param float|null $pettmlow The lowest price-earnings ratio over the past 10 years
     *
     * @return self
     */
    public function setPettmlow($pettmlow)
    {
        if (is_null($pettmlow)) {
            throw new \InvalidArgumentException('non-nullable pettmlow cannot be null');
        }
        $this->container['pettmlow'] = $pettmlow;

        return $this;
    }

    /**
     * Gets pettmmed
     *
     * @return float|null
     */
    public function getPettmmed()
    {
        return $this->container['pettmmed'];
    }

    /**
     * Sets pettmmed
     *
     * @param float|null $pettmmed The median price-earnings ratio over the past 10 years
     *
     * @return self
     */
    public function setPettmmed($pettmmed)
    {
        if (is_null($pettmmed)) {
            throw new \InvalidArgumentException('non-nullable pettmmed cannot be null');
        }
        $this->container['pettmmed'] = $pettmmed;

        return $this;
    }

    /**
     * Gets shares
     *
     * @return float|null
     */
    public function getShares()
    {
        return $this->container['shares'];
    }

    /**
     * Sets shares
     *
     * @param float|null $shares Outstanding shares refer to a company's stock currently held by all its shareholders, including share blocks held by institutional investors and restricted shares owned by the company's officers and insiders.
     *
     * @return self
     */
    public function setShares($shares)
    {
        if (is_null($shares)) {
            throw new \InvalidArgumentException('non-nullable shares cannot be null');
        }
        $this->container['shares'] = $shares;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


