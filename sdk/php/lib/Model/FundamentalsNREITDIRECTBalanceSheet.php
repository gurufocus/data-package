<?php
/**
 * FundamentalsNREITDIRECTBalanceSheet
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gurufocus Data Package API
 *
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FundamentalsNREITDIRECTBalanceSheet Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FundamentalsNREITDIRECTBalanceSheet implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'fundamentals_N_REIT_DIRECT_balance_sheet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accounts_payable' => 'float',
        'accounts_payable_accrued_expense' => 'float',
        'accounts_receivable' => 'float',
        'accumulated_depreciation' => 'float',
        'accumulated_other_comprehensive_income' => 'float',
        'additional_paid_in_capital' => 'float',
        'bs_current_deferred_liabilities' => 'float',
        'buildings_and_improvements' => 'float',
        'cash_and_cash_equivalents' => 'float',
        'cash_equivalents_marketable_securities' => 'float',
        'common_stock' => 'float',
        'construction_in_progress' => 'float',
        'current_accrued_expenses' => 'float',
        'current_deferred_revenue' => 'float',
        'current_deferred_taxes_liabilities' => 'float',
        'debt_to_equity' => 'float',
        'equity_to_asset' => 'float',
        'finished_goods' => 'float',
        'good_will' => 'float',
        'gross_ppe' => 'float',
        'intangibles' => 'float',
        'inventories_adjustments_allowances' => 'float',
        'inventory' => 'float',
        'investments_and_advances' => 'float',
        'land_and_improvements' => 'float',
        'loans_receivable' => 'float',
        'long_term_capital_lease_obligation' => 'float',
        'long_term_debt' => 'float',
        'long_term_debt_and_capital_lease_obligation' => 'float',
        'machinery_furniture_equipment' => 'float',
        'marke_table_securities' => 'float',
        'minority_interest' => 'float',
        'net_ppe' => 'float',
        'non_current_deferred_income_tax' => 'float',
        'non_current_deferred_liabilities' => 'float',
        'notes_receivable' => 'float',
        'other_current_assets' => 'float',
        'other_current_liabilities' => 'float',
        'other_current_payables' => 'float',
        'other_current_receivables' => 'float',
        'other_equity' => 'float',
        'other_gross_ppe' => 'float',
        'other_inventories' => 'float',
        'other_long_term_assets' => 'float',
        'other_long_term_liabilities' => 'float',
        'pension_and_retirement_benefit' => 'float',
        'preferred_stock' => 'float',
        'raw_materials' => 'float',
        'retained_earnings' => 'float',
        'short_term_capital_lease_obligation' => 'float',
        'short_term_debt' => 'float',
        'short_term_debt_and_capital_lease_obligation' => 'float',
        'total_assets' => 'float',
        'total_current_assets' => 'float',
        'total_current_liabilities' => 'float',
        'total_equity' => 'float',
        'total_liabilities' => 'float',
        'total_non_current_assets' => 'float',
        'total_non_current_liabilities_net_minority_interest' => 'float',
        'total_receivables' => 'float',
        'total_stockholders_equity' => 'float',
        'total_tax_payable' => 'float',
        'treasury_stock' => 'float',
        'work_in_process' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accounts_payable' => null,
        'accounts_payable_accrued_expense' => null,
        'accounts_receivable' => null,
        'accumulated_depreciation' => null,
        'accumulated_other_comprehensive_income' => null,
        'additional_paid_in_capital' => null,
        'bs_current_deferred_liabilities' => null,
        'buildings_and_improvements' => null,
        'cash_and_cash_equivalents' => null,
        'cash_equivalents_marketable_securities' => null,
        'common_stock' => null,
        'construction_in_progress' => null,
        'current_accrued_expenses' => null,
        'current_deferred_revenue' => null,
        'current_deferred_taxes_liabilities' => null,
        'debt_to_equity' => null,
        'equity_to_asset' => null,
        'finished_goods' => null,
        'good_will' => null,
        'gross_ppe' => null,
        'intangibles' => null,
        'inventories_adjustments_allowances' => null,
        'inventory' => null,
        'investments_and_advances' => null,
        'land_and_improvements' => null,
        'loans_receivable' => null,
        'long_term_capital_lease_obligation' => null,
        'long_term_debt' => null,
        'long_term_debt_and_capital_lease_obligation' => null,
        'machinery_furniture_equipment' => null,
        'marke_table_securities' => null,
        'minority_interest' => null,
        'net_ppe' => null,
        'non_current_deferred_income_tax' => null,
        'non_current_deferred_liabilities' => null,
        'notes_receivable' => null,
        'other_current_assets' => null,
        'other_current_liabilities' => null,
        'other_current_payables' => null,
        'other_current_receivables' => null,
        'other_equity' => null,
        'other_gross_ppe' => null,
        'other_inventories' => null,
        'other_long_term_assets' => null,
        'other_long_term_liabilities' => null,
        'pension_and_retirement_benefit' => null,
        'preferred_stock' => null,
        'raw_materials' => null,
        'retained_earnings' => null,
        'short_term_capital_lease_obligation' => null,
        'short_term_debt' => null,
        'short_term_debt_and_capital_lease_obligation' => null,
        'total_assets' => null,
        'total_current_assets' => null,
        'total_current_liabilities' => null,
        'total_equity' => null,
        'total_liabilities' => null,
        'total_non_current_assets' => null,
        'total_non_current_liabilities_net_minority_interest' => null,
        'total_receivables' => null,
        'total_stockholders_equity' => null,
        'total_tax_payable' => null,
        'treasury_stock' => null,
        'work_in_process' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'accounts_payable' => false,
        'accounts_payable_accrued_expense' => false,
        'accounts_receivable' => false,
        'accumulated_depreciation' => false,
        'accumulated_other_comprehensive_income' => false,
        'additional_paid_in_capital' => false,
        'bs_current_deferred_liabilities' => false,
        'buildings_and_improvements' => false,
        'cash_and_cash_equivalents' => false,
        'cash_equivalents_marketable_securities' => false,
        'common_stock' => false,
        'construction_in_progress' => false,
        'current_accrued_expenses' => false,
        'current_deferred_revenue' => false,
        'current_deferred_taxes_liabilities' => false,
        'debt_to_equity' => false,
        'equity_to_asset' => false,
        'finished_goods' => false,
        'good_will' => false,
        'gross_ppe' => false,
        'intangibles' => false,
        'inventories_adjustments_allowances' => false,
        'inventory' => false,
        'investments_and_advances' => false,
        'land_and_improvements' => false,
        'loans_receivable' => false,
        'long_term_capital_lease_obligation' => false,
        'long_term_debt' => false,
        'long_term_debt_and_capital_lease_obligation' => false,
        'machinery_furniture_equipment' => false,
        'marke_table_securities' => false,
        'minority_interest' => false,
        'net_ppe' => false,
        'non_current_deferred_income_tax' => false,
        'non_current_deferred_liabilities' => false,
        'notes_receivable' => false,
        'other_current_assets' => false,
        'other_current_liabilities' => false,
        'other_current_payables' => false,
        'other_current_receivables' => false,
        'other_equity' => false,
        'other_gross_ppe' => false,
        'other_inventories' => false,
        'other_long_term_assets' => false,
        'other_long_term_liabilities' => false,
        'pension_and_retirement_benefit' => false,
        'preferred_stock' => false,
        'raw_materials' => false,
        'retained_earnings' => false,
        'short_term_capital_lease_obligation' => false,
        'short_term_debt' => false,
        'short_term_debt_and_capital_lease_obligation' => false,
        'total_assets' => false,
        'total_current_assets' => false,
        'total_current_liabilities' => false,
        'total_equity' => false,
        'total_liabilities' => false,
        'total_non_current_assets' => false,
        'total_non_current_liabilities_net_minority_interest' => false,
        'total_receivables' => false,
        'total_stockholders_equity' => false,
        'total_tax_payable' => false,
        'treasury_stock' => false,
        'work_in_process' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accounts_payable' => 'accounts_payable',
        'accounts_payable_accrued_expense' => 'accounts_payable_accrued_expense',
        'accounts_receivable' => 'accounts_receivable',
        'accumulated_depreciation' => 'accumulated_depreciation',
        'accumulated_other_comprehensive_income' => 'accumulated_other_comprehensive_income',
        'additional_paid_in_capital' => 'additional_paid_in_capital',
        'bs_current_deferred_liabilities' => 'bs_current_deferred_liabilities',
        'buildings_and_improvements' => 'buildings_and_improvements',
        'cash_and_cash_equivalents' => 'cash_and_cash_equivalents',
        'cash_equivalents_marketable_securities' => 'cash_equivalents_marketable_securities',
        'common_stock' => 'common_stock',
        'construction_in_progress' => 'construction_in_progress',
        'current_accrued_expenses' => 'current_accrued_expenses',
        'current_deferred_revenue' => 'current_deferred_revenue',
        'current_deferred_taxes_liabilities' => 'current_deferred_taxes_liabilities',
        'debt_to_equity' => 'debt_to_equity',
        'equity_to_asset' => 'equity_to_asset',
        'finished_goods' => 'finished_goods',
        'good_will' => 'good_will',
        'gross_ppe' => 'gross_ppe',
        'intangibles' => 'intangibles',
        'inventories_adjustments_allowances' => 'inventories_adjustments_allowances',
        'inventory' => 'inventory',
        'investments_and_advances' => 'investments_and_advances',
        'land_and_improvements' => 'land_and_improvements',
        'loans_receivable' => 'loans_receivable',
        'long_term_capital_lease_obligation' => 'long_term_capital_lease_obligation',
        'long_term_debt' => 'long_term_debt',
        'long_term_debt_and_capital_lease_obligation' => 'long_term_debt_and_capital_lease_obligation',
        'machinery_furniture_equipment' => 'machinery_furniture_equipment',
        'marke_table_securities' => 'marke_table_securities',
        'minority_interest' => 'minority_interest',
        'net_ppe' => 'net_ppe',
        'non_current_deferred_income_tax' => 'non_current_deferred_income_tax',
        'non_current_deferred_liabilities' => 'non_current_deferred_liabilities',
        'notes_receivable' => 'notes_receivable',
        'other_current_assets' => 'other_current_assets',
        'other_current_liabilities' => 'other_current_liabilities',
        'other_current_payables' => 'other_current_payables',
        'other_current_receivables' => 'other_current_receivables',
        'other_equity' => 'other_equity',
        'other_gross_ppe' => 'other_gross_ppe',
        'other_inventories' => 'other_inventories',
        'other_long_term_assets' => 'other_long_term_assets',
        'other_long_term_liabilities' => 'other_long_term_liabilities',
        'pension_and_retirement_benefit' => 'pension_and_retirement_benefit',
        'preferred_stock' => 'preferred_stock',
        'raw_materials' => 'raw_materials',
        'retained_earnings' => 'retained_earnings',
        'short_term_capital_lease_obligation' => 'short_term_capital_lease_obligation',
        'short_term_debt' => 'short_term_debt',
        'short_term_debt_and_capital_lease_obligation' => 'short_term_debt_and_capital_lease_obligation',
        'total_assets' => 'total_assets',
        'total_current_assets' => 'total_current_assets',
        'total_current_liabilities' => 'total_current_liabilities',
        'total_equity' => 'total_equity',
        'total_liabilities' => 'total_liabilities',
        'total_non_current_assets' => 'total_non_current_assets',
        'total_non_current_liabilities_net_minority_interest' => 'total_non_current_liabilities_net_minority_interest',
        'total_receivables' => 'total_receivables',
        'total_stockholders_equity' => 'total_stockholders_equity',
        'total_tax_payable' => 'total_tax_payable',
        'treasury_stock' => 'treasury_stock',
        'work_in_process' => 'work_in_process'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accounts_payable' => 'setAccountsPayable',
        'accounts_payable_accrued_expense' => 'setAccountsPayableAccruedExpense',
        'accounts_receivable' => 'setAccountsReceivable',
        'accumulated_depreciation' => 'setAccumulatedDepreciation',
        'accumulated_other_comprehensive_income' => 'setAccumulatedOtherComprehensiveIncome',
        'additional_paid_in_capital' => 'setAdditionalPaidInCapital',
        'bs_current_deferred_liabilities' => 'setBsCurrentDeferredLiabilities',
        'buildings_and_improvements' => 'setBuildingsAndImprovements',
        'cash_and_cash_equivalents' => 'setCashAndCashEquivalents',
        'cash_equivalents_marketable_securities' => 'setCashEquivalentsMarketableSecurities',
        'common_stock' => 'setCommonStock',
        'construction_in_progress' => 'setConstructionInProgress',
        'current_accrued_expenses' => 'setCurrentAccruedExpenses',
        'current_deferred_revenue' => 'setCurrentDeferredRevenue',
        'current_deferred_taxes_liabilities' => 'setCurrentDeferredTaxesLiabilities',
        'debt_to_equity' => 'setDebtToEquity',
        'equity_to_asset' => 'setEquityToAsset',
        'finished_goods' => 'setFinishedGoods',
        'good_will' => 'setGoodWill',
        'gross_ppe' => 'setGrossPpe',
        'intangibles' => 'setIntangibles',
        'inventories_adjustments_allowances' => 'setInventoriesAdjustmentsAllowances',
        'inventory' => 'setInventory',
        'investments_and_advances' => 'setInvestmentsAndAdvances',
        'land_and_improvements' => 'setLandAndImprovements',
        'loans_receivable' => 'setLoansReceivable',
        'long_term_capital_lease_obligation' => 'setLongTermCapitalLeaseObligation',
        'long_term_debt' => 'setLongTermDebt',
        'long_term_debt_and_capital_lease_obligation' => 'setLongTermDebtAndCapitalLeaseObligation',
        'machinery_furniture_equipment' => 'setMachineryFurnitureEquipment',
        'marke_table_securities' => 'setMarkeTableSecurities',
        'minority_interest' => 'setMinorityInterest',
        'net_ppe' => 'setNetPpe',
        'non_current_deferred_income_tax' => 'setNonCurrentDeferredIncomeTax',
        'non_current_deferred_liabilities' => 'setNonCurrentDeferredLiabilities',
        'notes_receivable' => 'setNotesReceivable',
        'other_current_assets' => 'setOtherCurrentAssets',
        'other_current_liabilities' => 'setOtherCurrentLiabilities',
        'other_current_payables' => 'setOtherCurrentPayables',
        'other_current_receivables' => 'setOtherCurrentReceivables',
        'other_equity' => 'setOtherEquity',
        'other_gross_ppe' => 'setOtherGrossPpe',
        'other_inventories' => 'setOtherInventories',
        'other_long_term_assets' => 'setOtherLongTermAssets',
        'other_long_term_liabilities' => 'setOtherLongTermLiabilities',
        'pension_and_retirement_benefit' => 'setPensionAndRetirementBenefit',
        'preferred_stock' => 'setPreferredStock',
        'raw_materials' => 'setRawMaterials',
        'retained_earnings' => 'setRetainedEarnings',
        'short_term_capital_lease_obligation' => 'setShortTermCapitalLeaseObligation',
        'short_term_debt' => 'setShortTermDebt',
        'short_term_debt_and_capital_lease_obligation' => 'setShortTermDebtAndCapitalLeaseObligation',
        'total_assets' => 'setTotalAssets',
        'total_current_assets' => 'setTotalCurrentAssets',
        'total_current_liabilities' => 'setTotalCurrentLiabilities',
        'total_equity' => 'setTotalEquity',
        'total_liabilities' => 'setTotalLiabilities',
        'total_non_current_assets' => 'setTotalNonCurrentAssets',
        'total_non_current_liabilities_net_minority_interest' => 'setTotalNonCurrentLiabilitiesNetMinorityInterest',
        'total_receivables' => 'setTotalReceivables',
        'total_stockholders_equity' => 'setTotalStockholdersEquity',
        'total_tax_payable' => 'setTotalTaxPayable',
        'treasury_stock' => 'setTreasuryStock',
        'work_in_process' => 'setWorkInProcess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accounts_payable' => 'getAccountsPayable',
        'accounts_payable_accrued_expense' => 'getAccountsPayableAccruedExpense',
        'accounts_receivable' => 'getAccountsReceivable',
        'accumulated_depreciation' => 'getAccumulatedDepreciation',
        'accumulated_other_comprehensive_income' => 'getAccumulatedOtherComprehensiveIncome',
        'additional_paid_in_capital' => 'getAdditionalPaidInCapital',
        'bs_current_deferred_liabilities' => 'getBsCurrentDeferredLiabilities',
        'buildings_and_improvements' => 'getBuildingsAndImprovements',
        'cash_and_cash_equivalents' => 'getCashAndCashEquivalents',
        'cash_equivalents_marketable_securities' => 'getCashEquivalentsMarketableSecurities',
        'common_stock' => 'getCommonStock',
        'construction_in_progress' => 'getConstructionInProgress',
        'current_accrued_expenses' => 'getCurrentAccruedExpenses',
        'current_deferred_revenue' => 'getCurrentDeferredRevenue',
        'current_deferred_taxes_liabilities' => 'getCurrentDeferredTaxesLiabilities',
        'debt_to_equity' => 'getDebtToEquity',
        'equity_to_asset' => 'getEquityToAsset',
        'finished_goods' => 'getFinishedGoods',
        'good_will' => 'getGoodWill',
        'gross_ppe' => 'getGrossPpe',
        'intangibles' => 'getIntangibles',
        'inventories_adjustments_allowances' => 'getInventoriesAdjustmentsAllowances',
        'inventory' => 'getInventory',
        'investments_and_advances' => 'getInvestmentsAndAdvances',
        'land_and_improvements' => 'getLandAndImprovements',
        'loans_receivable' => 'getLoansReceivable',
        'long_term_capital_lease_obligation' => 'getLongTermCapitalLeaseObligation',
        'long_term_debt' => 'getLongTermDebt',
        'long_term_debt_and_capital_lease_obligation' => 'getLongTermDebtAndCapitalLeaseObligation',
        'machinery_furniture_equipment' => 'getMachineryFurnitureEquipment',
        'marke_table_securities' => 'getMarkeTableSecurities',
        'minority_interest' => 'getMinorityInterest',
        'net_ppe' => 'getNetPpe',
        'non_current_deferred_income_tax' => 'getNonCurrentDeferredIncomeTax',
        'non_current_deferred_liabilities' => 'getNonCurrentDeferredLiabilities',
        'notes_receivable' => 'getNotesReceivable',
        'other_current_assets' => 'getOtherCurrentAssets',
        'other_current_liabilities' => 'getOtherCurrentLiabilities',
        'other_current_payables' => 'getOtherCurrentPayables',
        'other_current_receivables' => 'getOtherCurrentReceivables',
        'other_equity' => 'getOtherEquity',
        'other_gross_ppe' => 'getOtherGrossPpe',
        'other_inventories' => 'getOtherInventories',
        'other_long_term_assets' => 'getOtherLongTermAssets',
        'other_long_term_liabilities' => 'getOtherLongTermLiabilities',
        'pension_and_retirement_benefit' => 'getPensionAndRetirementBenefit',
        'preferred_stock' => 'getPreferredStock',
        'raw_materials' => 'getRawMaterials',
        'retained_earnings' => 'getRetainedEarnings',
        'short_term_capital_lease_obligation' => 'getShortTermCapitalLeaseObligation',
        'short_term_debt' => 'getShortTermDebt',
        'short_term_debt_and_capital_lease_obligation' => 'getShortTermDebtAndCapitalLeaseObligation',
        'total_assets' => 'getTotalAssets',
        'total_current_assets' => 'getTotalCurrentAssets',
        'total_current_liabilities' => 'getTotalCurrentLiabilities',
        'total_equity' => 'getTotalEquity',
        'total_liabilities' => 'getTotalLiabilities',
        'total_non_current_assets' => 'getTotalNonCurrentAssets',
        'total_non_current_liabilities_net_minority_interest' => 'getTotalNonCurrentLiabilitiesNetMinorityInterest',
        'total_receivables' => 'getTotalReceivables',
        'total_stockholders_equity' => 'getTotalStockholdersEquity',
        'total_tax_payable' => 'getTotalTaxPayable',
        'treasury_stock' => 'getTreasuryStock',
        'work_in_process' => 'getWorkInProcess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('accounts_payable', $data ?? [], null);
        $this->setIfExists('accounts_payable_accrued_expense', $data ?? [], null);
        $this->setIfExists('accounts_receivable', $data ?? [], null);
        $this->setIfExists('accumulated_depreciation', $data ?? [], null);
        $this->setIfExists('accumulated_other_comprehensive_income', $data ?? [], null);
        $this->setIfExists('additional_paid_in_capital', $data ?? [], null);
        $this->setIfExists('bs_current_deferred_liabilities', $data ?? [], null);
        $this->setIfExists('buildings_and_improvements', $data ?? [], null);
        $this->setIfExists('cash_and_cash_equivalents', $data ?? [], null);
        $this->setIfExists('cash_equivalents_marketable_securities', $data ?? [], null);
        $this->setIfExists('common_stock', $data ?? [], null);
        $this->setIfExists('construction_in_progress', $data ?? [], null);
        $this->setIfExists('current_accrued_expenses', $data ?? [], null);
        $this->setIfExists('current_deferred_revenue', $data ?? [], null);
        $this->setIfExists('current_deferred_taxes_liabilities', $data ?? [], null);
        $this->setIfExists('debt_to_equity', $data ?? [], null);
        $this->setIfExists('equity_to_asset', $data ?? [], null);
        $this->setIfExists('finished_goods', $data ?? [], null);
        $this->setIfExists('good_will', $data ?? [], null);
        $this->setIfExists('gross_ppe', $data ?? [], null);
        $this->setIfExists('intangibles', $data ?? [], null);
        $this->setIfExists('inventories_adjustments_allowances', $data ?? [], null);
        $this->setIfExists('inventory', $data ?? [], null);
        $this->setIfExists('investments_and_advances', $data ?? [], null);
        $this->setIfExists('land_and_improvements', $data ?? [], null);
        $this->setIfExists('loans_receivable', $data ?? [], null);
        $this->setIfExists('long_term_capital_lease_obligation', $data ?? [], null);
        $this->setIfExists('long_term_debt', $data ?? [], null);
        $this->setIfExists('long_term_debt_and_capital_lease_obligation', $data ?? [], null);
        $this->setIfExists('machinery_furniture_equipment', $data ?? [], null);
        $this->setIfExists('marke_table_securities', $data ?? [], null);
        $this->setIfExists('minority_interest', $data ?? [], null);
        $this->setIfExists('net_ppe', $data ?? [], null);
        $this->setIfExists('non_current_deferred_income_tax', $data ?? [], null);
        $this->setIfExists('non_current_deferred_liabilities', $data ?? [], null);
        $this->setIfExists('notes_receivable', $data ?? [], null);
        $this->setIfExists('other_current_assets', $data ?? [], null);
        $this->setIfExists('other_current_liabilities', $data ?? [], null);
        $this->setIfExists('other_current_payables', $data ?? [], null);
        $this->setIfExists('other_current_receivables', $data ?? [], null);
        $this->setIfExists('other_equity', $data ?? [], null);
        $this->setIfExists('other_gross_ppe', $data ?? [], null);
        $this->setIfExists('other_inventories', $data ?? [], null);
        $this->setIfExists('other_long_term_assets', $data ?? [], null);
        $this->setIfExists('other_long_term_liabilities', $data ?? [], null);
        $this->setIfExists('pension_and_retirement_benefit', $data ?? [], null);
        $this->setIfExists('preferred_stock', $data ?? [], null);
        $this->setIfExists('raw_materials', $data ?? [], null);
        $this->setIfExists('retained_earnings', $data ?? [], null);
        $this->setIfExists('short_term_capital_lease_obligation', $data ?? [], null);
        $this->setIfExists('short_term_debt', $data ?? [], null);
        $this->setIfExists('short_term_debt_and_capital_lease_obligation', $data ?? [], null);
        $this->setIfExists('total_assets', $data ?? [], null);
        $this->setIfExists('total_current_assets', $data ?? [], null);
        $this->setIfExists('total_current_liabilities', $data ?? [], null);
        $this->setIfExists('total_equity', $data ?? [], null);
        $this->setIfExists('total_liabilities', $data ?? [], null);
        $this->setIfExists('total_non_current_assets', $data ?? [], null);
        $this->setIfExists('total_non_current_liabilities_net_minority_interest', $data ?? [], null);
        $this->setIfExists('total_receivables', $data ?? [], null);
        $this->setIfExists('total_stockholders_equity', $data ?? [], null);
        $this->setIfExists('total_tax_payable', $data ?? [], null);
        $this->setIfExists('treasury_stock', $data ?? [], null);
        $this->setIfExists('work_in_process', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accounts_payable
     *
     * @return float|null
     */
    public function getAccountsPayable()
    {
        return $this->container['accounts_payable'];
    }

    /**
     * Sets accounts_payable
     *
     * @param float|null $accounts_payable <p>{{Accts_Payable}} usually includes {{AccountsPayable}}, accrued compensation and related benefits, etc. {{AccountsPayable}} is money owed by a business to its suppliers shown as a liability on a company's balance sheet. It is distinct from notes payable liabilities, which are debts created by formal legal instrument documents. It is part of the current portion of the liabilities (due within one year or within the normal operating cycle if longer) reflected on the balace sheet of the company. A higher {{AccountsPayable}} means lower Working Capital needed to operate the business.</p>
     *
     * @return self
     */
    public function setAccountsPayable($accounts_payable)
    {
        if (is_null($accounts_payable)) {
            throw new \InvalidArgumentException('non-nullable accounts_payable cannot be null');
        }
        $this->container['accounts_payable'] = $accounts_payable;

        return $this;
    }

    /**
     * Gets accounts_payable_accrued_expense
     *
     * @return float|null
     */
    public function getAccountsPayableAccruedExpense()
    {
        return $this->container['accounts_payable_accrued_expense'];
    }

    /**
     * Sets accounts_payable_accrued_expense
     *
     * @param float|null $accounts_payable_accrued_expense <p>{{Accts_Payable}} usually includes {{AccountsPayable}}, accrued compensation and related benefits, etc. It is money owed by a business to its suppliers shown as a liability on a company's balance sheet. It is distinct from notes payable liabilities, which are debts created by formal legal instrument documents. It is part of the current portion of the liabilities (due within one year or within the normal operating cycle if longer) reflected on the balace sheet of the company. A higher {{AccountsPayable}} means lower Working Capital needed to operate the business.</p>
     *
     * @return self
     */
    public function setAccountsPayableAccruedExpense($accounts_payable_accrued_expense)
    {
        if (is_null($accounts_payable_accrued_expense)) {
            throw new \InvalidArgumentException('non-nullable accounts_payable_accrued_expense cannot be null');
        }
        $this->container['accounts_payable_accrued_expense'] = $accounts_payable_accrued_expense;

        return $this;
    }

    /**
     * Gets accounts_receivable
     *
     * @return float|null
     */
    public function getAccountsReceivable()
    {
        return $this->container['accounts_receivable'];
    }

    /**
     * Sets accounts_receivable
     *
     * @param float|null $accounts_receivable <p>{{Accts_Rec}} is money owed to a business by customers and shown on its Balance Sheet as an asset. {{Accts_Rec}} are created when a customer has received a product but has not yet paid for that product. It is related to {{DaysSalesOutstanding}}, which measures of the average number of days that a company takes to collect revenue after a sale has been made. It is a financial ratio that illustrates how well a company's accounts receivables are being managed. <br>{{DaysSalesOutstanding}} = {{Accts_Rec}} / {{Revenue}} * Days in Period</p>
     *
     * @return self
     */
    public function setAccountsReceivable($accounts_receivable)
    {
        if (is_null($accounts_receivable)) {
            throw new \InvalidArgumentException('non-nullable accounts_receivable cannot be null');
        }
        $this->container['accounts_receivable'] = $accounts_receivable;

        return $this;
    }

    /**
     * Gets accumulated_depreciation
     *
     * @return float|null
     */
    public function getAccumulatedDepreciation()
    {
        return $this->container['accumulated_depreciation'];
    }

    /**
     * Sets accumulated_depreciation
     *
     * @param float|null $accumulated_depreciation <p>The {{AccumulatedDepreciation}} of an asset up to a single point in its life. Regardless of the method used to calculate it, the depreciation of an asset during a single period is added to the previous period's {{AccumulatedDepreciation}} to get the current {{AccumulatedDepreciation}}.</p>
     *
     * @return self
     */
    public function setAccumulatedDepreciation($accumulated_depreciation)
    {
        if (is_null($accumulated_depreciation)) {
            throw new \InvalidArgumentException('non-nullable accumulated_depreciation cannot be null');
        }
        $this->container['accumulated_depreciation'] = $accumulated_depreciation;

        return $this;
    }

    /**
     * Gets accumulated_other_comprehensive_income
     *
     * @return float|null
     */
    public function getAccumulatedOtherComprehensiveIncome()
    {
        return $this->container['accumulated_other_comprehensive_income'];
    }

    /**
     * Sets accumulated_other_comprehensive_income
     *
     * @param float|null $accumulated_other_comprehensive_income <p>{{accumulated_other_comprehensive_income}} is the aggregate amount of gains or losses that are not part of retained earnings.</p>
     *
     * @return self
     */
    public function setAccumulatedOtherComprehensiveIncome($accumulated_other_comprehensive_income)
    {
        if (is_null($accumulated_other_comprehensive_income)) {
            throw new \InvalidArgumentException('non-nullable accumulated_other_comprehensive_income cannot be null');
        }
        $this->container['accumulated_other_comprehensive_income'] = $accumulated_other_comprehensive_income;

        return $this;
    }

    /**
     * Gets additional_paid_in_capital
     *
     * @return float|null
     */
    public function getAdditionalPaidInCapital()
    {
        return $this->container['additional_paid_in_capital'];
    }

    /**
     * Sets additional_paid_in_capital
     *
     * @param float|null $additional_paid_in_capital <p>{{AdditionalPaidInCapital}} is the capital that a company raises in a financing round in excess of the capital's par value. The account represents the excess paid by an investor over the par-value price of a stock issue. {{AdditionalPaidInCapital}} can arise from issuing either preferred or common stock. <br>{{AdditionalPaidInCapital}} is calculated as: {{AdditionalPaidInCapital}} = (Issue Price - Par Value) * {{Shares_Outstanding}}</p>
     *
     * @return self
     */
    public function setAdditionalPaidInCapital($additional_paid_in_capital)
    {
        if (is_null($additional_paid_in_capital)) {
            throw new \InvalidArgumentException('non-nullable additional_paid_in_capital cannot be null');
        }
        $this->container['additional_paid_in_capital'] = $additional_paid_in_capital;

        return $this;
    }

    /**
     * Gets bs_current_deferred_liabilities
     *
     * @return float|null
     */
    public function getBsCurrentDeferredLiabilities()
    {
        return $this->container['bs_current_deferred_liabilities'];
    }

    /**
     * Sets bs_current_deferred_liabilities
     *
     * @param float|null $bs_current_deferred_liabilities <p>{{BS_CurrentDeferredLiabilities}} represents the current portion of obligations, which is a liability that usually would have been paid but is now pas due.</p>
     *
     * @return self
     */
    public function setBsCurrentDeferredLiabilities($bs_current_deferred_liabilities)
    {
        if (is_null($bs_current_deferred_liabilities)) {
            throw new \InvalidArgumentException('non-nullable bs_current_deferred_liabilities cannot be null');
        }
        $this->container['bs_current_deferred_liabilities'] = $bs_current_deferred_liabilities;

        return $this;
    }

    /**
     * Gets buildings_and_improvements
     *
     * @return float|null
     */
    public function getBuildingsAndImprovements()
    {
        return $this->container['buildings_and_improvements'];
    }

    /**
     * Sets buildings_and_improvements
     *
     * @param float|null $buildings_and_improvements <p>{{BuildingsAndImprovements}} are capital events that materially extend the useful life of a building or increase the value of a building, or both. A building improvement should be capitalized as betterment and recorded as an addition of value to the existing building if the expenditure for the improvement meets or exceeds the capitalization threshold, or the expenditure increases the life or value of the building by 25 percent of the original life period or cost.</p>
     *
     * @return self
     */
    public function setBuildingsAndImprovements($buildings_and_improvements)
    {
        if (is_null($buildings_and_improvements)) {
            throw new \InvalidArgumentException('non-nullable buildings_and_improvements cannot be null');
        }
        $this->container['buildings_and_improvements'] = $buildings_and_improvements;

        return $this;
    }

    /**
     * Gets cash_and_cash_equivalents
     *
     * @return float|null
     */
    public function getCashAndCashEquivalents()
    {
        return $this->container['cash_and_cash_equivalents'];
    }

    /**
     * Sets cash_and_cash_equivalents
     *
     * @param float|null $cash_and_cash_equivalents <p>{{CashAndCashEquivalents}} are the most liquid assets on the balance sheet. Cash equivalents are assets that are readily convertible into cash, such as money market holdings, short-term government bonds or Treasury bills, marketable securities and commercial paper. <br>A high number means either: 1) The company has competitive advantage generating lots of cash 2) Just sold a business or bonds (not necessarily good) <br>A low stockpile of cash usually means poor to mediocre economics.</p>
     *
     * @return self
     */
    public function setCashAndCashEquivalents($cash_and_cash_equivalents)
    {
        if (is_null($cash_and_cash_equivalents)) {
            throw new \InvalidArgumentException('non-nullable cash_and_cash_equivalents cannot be null');
        }
        $this->container['cash_and_cash_equivalents'] = $cash_and_cash_equivalents;

        return $this;
    }

    /**
     * Gets cash_equivalents_marketable_securities
     *
     * @return float|null
     */
    public function getCashEquivalentsMarketableSecurities()
    {
        return $this->container['cash_equivalents_marketable_securities'];
    }

    /**
     * Sets cash_equivalents_marketable_securities
     *
     * @param float|null $cash_equivalents_marketable_securities <p>{{Cash_and_Equiv}} are the most liquid assets on the balance sheet. Cash equivalents are assets that are readily convertible into cash, such as money market holdings, short-term government bonds or Treasury bills, marketable securities and commercial paper. Marketable Securities are very liquid securities that can be converted into cash quickly at a reasonable price.</p>
     *
     * @return self
     */
    public function setCashEquivalentsMarketableSecurities($cash_equivalents_marketable_securities)
    {
        if (is_null($cash_equivalents_marketable_securities)) {
            throw new \InvalidArgumentException('non-nullable cash_equivalents_marketable_securities cannot be null');
        }
        $this->container['cash_equivalents_marketable_securities'] = $cash_equivalents_marketable_securities;

        return $this;
    }

    /**
     * Gets common_stock
     *
     * @return float|null
     */
    public function getCommonStock()
    {
        return $this->container['common_stock'];
    }

    /**
     * Sets common_stock
     *
     * @param float|null $common_stock <p>{{CommonStock}} is listed on  the Balance Sheet at the par value of the total shares outstanding of a company. The par value of {{CommonStock}} is meaningless. It is usually set at an absurdly low number.</p>
     *
     * @return self
     */
    public function setCommonStock($common_stock)
    {
        if (is_null($common_stock)) {
            throw new \InvalidArgumentException('non-nullable common_stock cannot be null');
        }
        $this->container['common_stock'] = $common_stock;

        return $this;
    }

    /**
     * Gets construction_in_progress
     *
     * @return float|null
     */
    public function getConstructionInProgress()
    {
        return $this->container['construction_in_progress'];
    }

    /**
     * Sets construction_in_progress
     *
     * @param float|null $construction_in_progress <p>It records the cost of construction work, which is not yet completed (typically, applied to capital budget items). A {{ConstructionInProgress}} item is not depreciated until the asset is placed in service. Normally, upon completion, a construction in progress item is reclassified, and the reclassified asset is capitalized and depreciated.</p>
     *
     * @return self
     */
    public function setConstructionInProgress($construction_in_progress)
    {
        if (is_null($construction_in_progress)) {
            throw new \InvalidArgumentException('non-nullable construction_in_progress cannot be null');
        }
        $this->container['construction_in_progress'] = $construction_in_progress;

        return $this;
    }

    /**
     * Gets current_accrued_expenses
     *
     * @return float|null
     */
    public function getCurrentAccruedExpenses()
    {
        return $this->container['current_accrued_expenses'];
    }

    /**
     * Sets current_accrued_expenses
     *
     * @param float|null $current_accrued_expenses <p>{{CurrentAccruedExpenses}} is the expense incurred during the accounting period, but not required to be paid until a later date. It includes compensation, interest, pensions and all other miscellaneous accruals reported by the company.</p>
     *
     * @return self
     */
    public function setCurrentAccruedExpenses($current_accrued_expenses)
    {
        if (is_null($current_accrued_expenses)) {
            throw new \InvalidArgumentException('non-nullable current_accrued_expenses cannot be null');
        }
        $this->container['current_accrued_expenses'] = $current_accrued_expenses;

        return $this;
    }

    /**
     * Gets current_deferred_revenue
     *
     * @return float|null
     */
    public function getCurrentDeferredRevenue()
    {
        return $this->container['current_deferred_revenue'];
    }

    /**
     * Sets current_deferred_revenue
     *
     * @param float|null $current_deferred_revenue <p>{{CurrentDeferredRevenue}} represents collections of cash or other assets related to revenue producing activity for which revenue has not yet been recognized. Generally, an entity records deferred revenue when it receives consideration from a customer before achieving certain criteria that must be met for revenue to be recognized in conformity with GAAP. It can be either current or non-current item. Also called unearned revenue.</p>
     *
     * @return self
     */
    public function setCurrentDeferredRevenue($current_deferred_revenue)
    {
        if (is_null($current_deferred_revenue)) {
            throw new \InvalidArgumentException('non-nullable current_deferred_revenue cannot be null');
        }
        $this->container['current_deferred_revenue'] = $current_deferred_revenue;

        return $this;
    }

    /**
     * Gets current_deferred_taxes_liabilities
     *
     * @return float|null
     */
    public function getCurrentDeferredTaxesLiabilities()
    {
        return $this->container['current_deferred_taxes_liabilities'];
    }

    /**
     * Sets current_deferred_taxes_liabilities
     *
     * @param float|null $current_deferred_taxes_liabilities <p>{{CurrentDeferredTaxesLiabilities}} means a future tax liability, resulting from temporary differences between book (accounting) value of assets and liabilities and their tax value, or timing differences between the recognition of gains and losses in financial statements and their recognition in a tax computation. Deferred tax liabilities generally arise where tax relief is provided in advance of an accounting expense, or income is accrued but not taxed until received.</p>
     *
     * @return self
     */
    public function setCurrentDeferredTaxesLiabilities($current_deferred_taxes_liabilities)
    {
        if (is_null($current_deferred_taxes_liabilities)) {
            throw new \InvalidArgumentException('non-nullable current_deferred_taxes_liabilities cannot be null');
        }
        $this->container['current_deferred_taxes_liabilities'] = $current_deferred_taxes_liabilities;

        return $this;
    }

    /**
     * Gets debt_to_equity
     *
     * @return float|null
     */
    public function getDebtToEquity()
    {
        return $this->container['debt_to_equity'];
    }

    /**
     * Sets debt_to_equity
     *
     * @param float|null $debt_to_equity The Debt/Equity (D/E) Ratio is calculated by dividing a company’s total liabilities by its shareholder equity. The ratio is used to evaluate a company's financial leverage.
     *
     * @return self
     */
    public function setDebtToEquity($debt_to_equity)
    {
        if (is_null($debt_to_equity)) {
            throw new \InvalidArgumentException('non-nullable debt_to_equity cannot be null');
        }
        $this->container['debt_to_equity'] = $debt_to_equity;

        return $this;
    }

    /**
     * Gets equity_to_asset
     *
     * @return float|null
     */
    public function getEquityToAsset()
    {
        return $this->container['equity_to_asset'];
    }

    /**
     * Sets equity_to_asset
     *
     * @param float|null $equity_to_asset Equity to Asset ratio is calculated as shareholder's tangible equity divided by its total asset.
     *
     * @return self
     */
    public function setEquityToAsset($equity_to_asset)
    {
        if (is_null($equity_to_asset)) {
            throw new \InvalidArgumentException('non-nullable equity_to_asset cannot be null');
        }
        $this->container['equity_to_asset'] = $equity_to_asset;

        return $this;
    }

    /**
     * Gets finished_goods
     *
     * @return float|null
     */
    public function getFinishedGoods()
    {
        return $this->container['finished_goods'];
    }

    /**
     * Sets finished_goods
     *
     * @param float|null $finished_goods <p>{{FinishedGoods}} are the products in a manufacturer's inventory that are completed and are waiting to be sold.</p>
     *
     * @return self
     */
    public function setFinishedGoods($finished_goods)
    {
        if (is_null($finished_goods)) {
            throw new \InvalidArgumentException('non-nullable finished_goods cannot be null');
        }
        $this->container['finished_goods'] = $finished_goods;

        return $this;
    }

    /**
     * Gets good_will
     *
     * @return float|null
     */
    public function getGoodWill()
    {
        return $this->container['good_will'];
    }

    /**
     * Sets good_will
     *
     * @param float|null $good_will <p>A {{Goodwill}} is an {{Intangibles}} that arises as a result of the acquisition of one company by another for a premium value. The value of a company's brand name, solid customer base, good customer relations, good employee relations and any patents or proprietary technology represent {{Goodwill}}. {{Goodwill}} is considered an {{Intangibles}} because it is not a physical asset like buildings or equipment. The {{Goodwill}} account can be found in the assets portion of a company's balance sheet.</p>
     *
     * @return self
     */
    public function setGoodWill($good_will)
    {
        if (is_null($good_will)) {
            throw new \InvalidArgumentException('non-nullable good_will cannot be null');
        }
        $this->container['good_will'] = $good_will;

        return $this;
    }

    /**
     * Gets gross_ppe
     *
     * @return float|null
     */
    public function getGrossPpe()
    {
        return $this->container['gross_ppe'];
    }

    /**
     * Sets gross_ppe
     *
     * @param float|null $gross_ppe <p>Property, Plant and Equipment (PPE) are the fixed assets of the companyFixed assets are also known as non-current assets. Property, Plant and Equipment includes assets that will - in the normal course of business - neither be used up in the next year nor will become a part of any product sold to customers. Some of the most common parts of Property, Plant and Equipment are: Land, Buildings (and leasehold improvements), Transportation equipment, Manufacturing equipment, Office equipment, Office furniture. Companies with lots of Property, Plant and Equipment often have special categories. For example, railroad property includes: Track, Ties, Ballast, Bridges, Tunnels, Signals, Locomotives, Freight Cars. There is often a note in the financial statements - found in a company's 10-K - that will explain the different categories of property a company owns. <br>The market value of Property, Plant and Equipment can differ tremendously from the book value of Property, Plant and Equipment. For example, when Berkshire Hathaway liquidated its textile mills, it had to pay the buyers of the company's manufacturing equipment to haul the equipment  away. That property, plant, and equipment was literally worth less than zero. On the other hand, some companies own thousands of acres of land. All Property, Plant and Equipment other than land is depreciated. Land is never depreciated. However, land is not marked up to market value either. Under Generally Accepted Accounting Principles (GAAP), land is shown on the balance sheet at cost. <br>The Property, Plant and Equipment line shown on the balance sheet is {{GrossPPE}}. This means it is the cost of the property, plant, and equipment not less accumulated depreciation.</p>
     *
     * @return self
     */
    public function setGrossPpe($gross_ppe)
    {
        if (is_null($gross_ppe)) {
            throw new \InvalidArgumentException('non-nullable gross_ppe cannot be null');
        }
        $this->container['gross_ppe'] = $gross_ppe;

        return $this;
    }

    /**
     * Gets intangibles
     *
     * @return float|null
     */
    public function getIntangibles()
    {
        return $this->container['intangibles'];
    }

    /**
     * Sets intangibles
     *
     * @param float|null $intangibles <p>{{Intangibles}} are defined as identifiable non-monetary assets that cannot be seen, touched or physically measured.  Examples of {{Intangibles}} include trade secrets, copyrights, patents, trademarks. If a company acquires assets at the prices above the book value, it may carry {{Goodwill}} on its balance sheet. {{Goodwill}} reflects the difference between the price the company paid and the book value of the assets. If a company (company A) received a patent through their own work, though it has value, it does not show up on its balance sheet as an intangible asset. However, if company A sells this patent to company B, it will show up on company B's balance sheet as an {{Intangibles}}. The same applies to brand names, trade secrets etc. For instance, Coca-Cola's brand is extremely valuable, but the brand does not appear on its balance sheet, because the brand was never acquired.</p>
     *
     * @return self
     */
    public function setIntangibles($intangibles)
    {
        if (is_null($intangibles)) {
            throw new \InvalidArgumentException('non-nullable intangibles cannot be null');
        }
        $this->container['intangibles'] = $intangibles;

        return $this;
    }

    /**
     * Gets inventories_adjustments_allowances
     *
     * @return float|null
     */
    public function getInventoriesAdjustmentsAllowances()
    {
        return $this->container['inventories_adjustments_allowances'];
    }

    /**
     * Sets inventories_adjustments_allowances
     *
     * @param float|null $inventories_adjustments_allowances <p>{{InventoriesAdjustmentsAllowances}} represents certain charges made in the current period in inventory resulting from breakage, spoilage, employee theft and shoplifting, etc.</p>
     *
     * @return self
     */
    public function setInventoriesAdjustmentsAllowances($inventories_adjustments_allowances)
    {
        if (is_null($inventories_adjustments_allowances)) {
            throw new \InvalidArgumentException('non-nullable inventories_adjustments_allowances cannot be null');
        }
        $this->container['inventories_adjustments_allowances'] = $inventories_adjustments_allowances;

        return $this;
    }

    /**
     * Gets inventory
     *
     * @return float|null
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param float|null $inventory <p>{{Inventory}} includes the raw materials, work-in-process goods and completely finished goods of a company. It is a portion of a company™s current assets.</p>
     *
     * @return self
     */
    public function setInventory($inventory)
    {
        if (is_null($inventory)) {
            throw new \InvalidArgumentException('non-nullable inventory cannot be null');
        }
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets investments_and_advances
     *
     * @return float|null
     */
    public function getInvestmentsAndAdvances()
    {
        return $this->container['investments_and_advances'];
    }

    /**
     * Sets investments_and_advances
     *
     * @param float|null $investments_and_advances <p>{{InvestmentsAndAdvances}} includes all the non-current investments in affiliates, real estate, securities, etc.</p>
     *
     * @return self
     */
    public function setInvestmentsAndAdvances($investments_and_advances)
    {
        if (is_null($investments_and_advances)) {
            throw new \InvalidArgumentException('non-nullable investments_and_advances cannot be null');
        }
        $this->container['investments_and_advances'] = $investments_and_advances;

        return $this;
    }

    /**
     * Gets land_and_improvements
     *
     * @return float|null
     */
    public function getLandAndImprovements()
    {
        return $this->container['land_and_improvements'];
    }

    /**
     * Sets land_and_improvements
     *
     * @param float|null $land_and_improvements <p>Land is the surface or crust of the earth, which can be used to support structures, and may be used to grow crops, grass, shrubs, and trees. Land is characterized as having an unlimited life (indefinite). {{LandAndImprovements}} is a long-term asset which indicates the cost of the constructed improvements to land, such as driveways, walkways, lighting, and parking lots.</p>
     *
     * @return self
     */
    public function setLandAndImprovements($land_and_improvements)
    {
        if (is_null($land_and_improvements)) {
            throw new \InvalidArgumentException('non-nullable land_and_improvements cannot be null');
        }
        $this->container['land_and_improvements'] = $land_and_improvements;

        return $this;
    }

    /**
     * Gets loans_receivable
     *
     * @return float|null
     */
    public function getLoansReceivable()
    {
        return $this->container['loans_receivable'];
    }

    /**
     * Sets loans_receivable
     *
     * @param float|null $loans_receivable loans_receivable
     *
     * @return self
     */
    public function setLoansReceivable($loans_receivable)
    {
        if (is_null($loans_receivable)) {
            throw new \InvalidArgumentException('non-nullable loans_receivable cannot be null');
        }
        $this->container['loans_receivable'] = $loans_receivable;

        return $this;
    }

    /**
     * Gets long_term_capital_lease_obligation
     *
     * @return float|null
     */
    public function getLongTermCapitalLeaseObligation()
    {
        return $this->container['long_term_capital_lease_obligation'];
    }

    /**
     * Sets long_term_capital_lease_obligation
     *
     * @param float|null $long_term_capital_lease_obligation <p>{{LongTermCapitalLeaseObligation}} are the amount due for long-term asset lease agreements that are nearly equivalent to asset purchases. Capital lease obligations are installment payments that constitute a payment of principal plus interest for the capital lease. The {{ShortTermCapitalLeaseObligation}} is the portion of a {{LongTermCapitalLeaseObligation}} that is due over the next year.</p>
     *
     * @return self
     */
    public function setLongTermCapitalLeaseObligation($long_term_capital_lease_obligation)
    {
        if (is_null($long_term_capital_lease_obligation)) {
            throw new \InvalidArgumentException('non-nullable long_term_capital_lease_obligation cannot be null');
        }
        $this->container['long_term_capital_lease_obligation'] = $long_term_capital_lease_obligation;

        return $this;
    }

    /**
     * Gets long_term_debt
     *
     * @return float|null
     */
    public function getLongTermDebt()
    {
        return $this->container['long_term_debt'];
    }

    /**
     * Sets long_term_debt
     *
     * @param float|null $long_term_debt <p>{{LongTermDebt}} is the sum of the carrying values as of the balance sheet date of all long-term debt, which is debt initially having maturities due after one year or beyond the operating cycle, if longer, but excluding the portions thereof scheduled to be repaid within one year or the normal operating cycle, if longer.</p>
     *
     * @return self
     */
    public function setLongTermDebt($long_term_debt)
    {
        if (is_null($long_term_debt)) {
            throw new \InvalidArgumentException('non-nullable long_term_debt cannot be null');
        }
        $this->container['long_term_debt'] = $long_term_debt;

        return $this;
    }

    /**
     * Gets long_term_debt_and_capital_lease_obligation
     *
     * @return float|null
     */
    public function getLongTermDebtAndCapitalLeaseObligation()
    {
        return $this->container['long_term_debt_and_capital_lease_obligation'];
    }

    /**
     * Sets long_term_debt_and_capital_lease_obligation
     *
     * @param float|null $long_term_debt_and_capital_lease_obligation <p>{{LongTermDebt}} is the debt due more than 12 months in the future. The debt can be owed to banks or bondholders. Some companies issue bonds to investors and pay interest on the bonds. <br>{{LongTermCapitalLeaseObligation}} represents the total liability for long-term leases lasting over one year. It's amount equal to the present value (the principal) at the beginning of the lease term less lease payments during the lease term. <br>{{Long-Term_Debt}} can be used to calculate {{ltd2asset}}: {{ltd2asset}} = {{Long-Term_Debt}} / {{Total_Assets}}</p>
     *
     * @return self
     */
    public function setLongTermDebtAndCapitalLeaseObligation($long_term_debt_and_capital_lease_obligation)
    {
        if (is_null($long_term_debt_and_capital_lease_obligation)) {
            throw new \InvalidArgumentException('non-nullable long_term_debt_and_capital_lease_obligation cannot be null');
        }
        $this->container['long_term_debt_and_capital_lease_obligation'] = $long_term_debt_and_capital_lease_obligation;

        return $this;
    }

    /**
     * Gets machinery_furniture_equipment
     *
     * @return float|null
     */
    public function getMachineryFurnitureEquipment()
    {
        return $this->container['machinery_furniture_equipment'];
    }

    /**
     * Sets machinery_furniture_equipment
     *
     * @param float|null $machinery_furniture_equipment <p>{{MachineryFurnitureEquipment}} represents those fixed assets specifically dealing with tools, equipment and office furniture.</p>
     *
     * @return self
     */
    public function setMachineryFurnitureEquipment($machinery_furniture_equipment)
    {
        if (is_null($machinery_furniture_equipment)) {
            throw new \InvalidArgumentException('non-nullable machinery_furniture_equipment cannot be null');
        }
        $this->container['machinery_furniture_equipment'] = $machinery_furniture_equipment;

        return $this;
    }

    /**
     * Gets marke_table_securities
     *
     * @return float|null
     */
    public function getMarkeTableSecurities()
    {
        return $this->container['marke_table_securities'];
    }

    /**
     * Sets marke_table_securities
     *
     * @param float|null $marke_table_securities <p>{{MarketableSecurities}} are very liquid securities that can be converted into cash quickly at a reasonable price.</p>
     *
     * @return self
     */
    public function setMarkeTableSecurities($marke_table_securities)
    {
        if (is_null($marke_table_securities)) {
            throw new \InvalidArgumentException('non-nullable marke_table_securities cannot be null');
        }
        $this->container['marke_table_securities'] = $marke_table_securities;

        return $this;
    }

    /**
     * Gets minority_interest
     *
     * @return float|null
     */
    public function getMinorityInterest()
    {
        return $this->container['minority_interest'];
    }

    /**
     * Sets minority_interest
     *
     * @param float|null $minority_interest <p>{{Minority_interest}} is the carrying amount of the equity interests owned by non-controlling shareholders, partners, or other equity holders in one or more of the entities included in the reporting entity's consolidated financial statements.</p>
     *
     * @return self
     */
    public function setMinorityInterest($minority_interest)
    {
        if (is_null($minority_interest)) {
            throw new \InvalidArgumentException('non-nullable minority_interest cannot be null');
        }
        $this->container['minority_interest'] = $minority_interest;

        return $this;
    }

    /**
     * Gets net_ppe
     *
     * @return float|null
     */
    public function getNetPpe()
    {
        return $this->container['net_ppe'];
    }

    /**
     * Sets net_ppe
     *
     * @param float|null $net_ppe <p>{{Net_PPE}} (PPE) are the fixed assets of the companyFixed assets are also known as non-current assets. {{Net_PPE}} includes assets that will - in the normal course of business - neither be used up in the next year nor will become a part of any product sold to customers. Some of the most common parts of property, plant, and equipment are: Land, Buildings (and leasehold improvements), Transportation equipment, Manufacturing equipment, Office equipment, Office furniture. Companies with lots of property, plant, and equipment often have special categories. For example, railroad property includes: Track, Ties, Ballast, Bridges, Tunnels, Signals, Locomotives, Freight Cars. There is often a note in the financial statements - found in a company's 10-K - that will explain the different categories of property a company owns. <br>The market value of {{Net_PPE}} can differ tremendously from the book value of {{Net_PPE}}. For example, when Berkshire Hathaway liquidated its textile mills, it had to pay the buyers of the company's manufacturing equipment to haul the equipment  away. That {{Net_PPE}} was literally worth less than zero. On the other hand, some companies own thousands of acres of land. All {{Net_PPE}} other than land is depreciated. Land is never depreciated. However, land is not marked up to market value either. Under Generally Accepted Accounting Principles (GAAP), land is shown on the balance sheet at cost. <br>The {{Net_PPE}} line shown on the balance sheet is usually net {{Net_PPE}}. This means it is the cost of the {{Net_PPE}} less accumulated depreciation.</p>
     *
     * @return self
     */
    public function setNetPpe($net_ppe)
    {
        if (is_null($net_ppe)) {
            throw new \InvalidArgumentException('non-nullable net_ppe cannot be null');
        }
        $this->container['net_ppe'] = $net_ppe;

        return $this;
    }

    /**
     * Gets non_current_deferred_income_tax
     *
     * @return float|null
     */
    public function getNonCurrentDeferredIncomeTax()
    {
        return $this->container['non_current_deferred_income_tax'];
    }

    /**
     * Sets non_current_deferred_income_tax
     *
     * @param float|null $non_current_deferred_income_tax The NonCurrent Deferred Income Tax represents the non-current portion of deferred income taxes, which is the difference in income recognition between tax laws and the accounting methods.
     *
     * @return self
     */
    public function setNonCurrentDeferredIncomeTax($non_current_deferred_income_tax)
    {
        if (is_null($non_current_deferred_income_tax)) {
            throw new \InvalidArgumentException('non-nullable non_current_deferred_income_tax cannot be null');
        }
        $this->container['non_current_deferred_income_tax'] = $non_current_deferred_income_tax;

        return $this;
    }

    /**
     * Gets non_current_deferred_liabilities
     *
     * @return float|null
     */
    public function getNonCurrentDeferredLiabilities()
    {
        return $this->container['non_current_deferred_liabilities'];
    }

    /**
     * Sets non_current_deferred_liabilities
     *
     * @param float|null $non_current_deferred_liabilities <p>{{NonCurrentDeferredLiabilities}} represents the non-current portion of obligations, which is a liability that usually would have been paid but is now pas due.</p>
     *
     * @return self
     */
    public function setNonCurrentDeferredLiabilities($non_current_deferred_liabilities)
    {
        if (is_null($non_current_deferred_liabilities)) {
            throw new \InvalidArgumentException('non-nullable non_current_deferred_liabilities cannot be null');
        }
        $this->container['non_current_deferred_liabilities'] = $non_current_deferred_liabilities;

        return $this;
    }

    /**
     * Gets notes_receivable
     *
     * @return float|null
     */
    public function getNotesReceivable()
    {
        return $this->container['notes_receivable'];
    }

    /**
     * Sets notes_receivable
     *
     * @param float|null $notes_receivable <p>{{NotesReceivable}} is an unconditional promise to receive a definite sum of money at a future date(s) within one year of the balance sheet date or the normal operating cycle, whichever is longer.</p>
     *
     * @return self
     */
    public function setNotesReceivable($notes_receivable)
    {
        if (is_null($notes_receivable)) {
            throw new \InvalidArgumentException('non-nullable notes_receivable cannot be null');
        }
        $this->container['notes_receivable'] = $notes_receivable;

        return $this;
    }

    /**
     * Gets other_current_assets
     *
     * @return float|null
     */
    public function getOtherCurrentAssets()
    {
        return $this->container['other_current_assets'];
    }

    /**
     * Sets other_current_assets
     *
     * @param float|null $other_current_assets <p>Technically, {{Other_Current_Assets}} line may include any asset that will be used up within the next 12 months. However, {{Other_Current_Assets}} never include assets that are listed elsewhere in the current assets section of the balance sheet. For this reason, {{Other_Current_Assets}} are almost never: Cash, Trade Receivables, {{Inventory}}. The assets grouped under {{Other_Current_Assets}} are most commonly: Prepaid Expenses, Tax Assets, Non-Trade Receivables, Other (too numerous to list). Some companies can and do choose to report each of these items separately. {{Other_Current_Assets}} may be made up largely of Prepaid Expenses - unless these are listed on a separate line of the balance sheet. <br>There are a variety of {{Other_Current_Assets}} like non-trade receivables which are simply too numerous to list. If a company is following correct reporting procedures, it should not lump items that are different from one another and yet individually important to the company together under the line {{Other_Current_Assets}}. <br>At most companies, {{Other_Current_Assets}} are a small and unimportant part of the total balance sheet.</p>
     *
     * @return self
     */
    public function setOtherCurrentAssets($other_current_assets)
    {
        if (is_null($other_current_assets)) {
            throw new \InvalidArgumentException('non-nullable other_current_assets cannot be null');
        }
        $this->container['other_current_assets'] = $other_current_assets;

        return $this;
    }

    /**
     * Gets other_current_liabilities
     *
     * @return float|null
     */
    public function getOtherCurrentLiabilities()
    {
        return $this->container['other_current_liabilities'];
    }

    /**
     * Sets other_current_liabilities
     *
     * @param float|null $other_current_liabilities <p>The liability a company needs to pay in the next 12 months, but not assigned to {{AccountsPayable}} or Debt. For instance, Wal-Mart (WMT) has accrued wages, salaries, valuation, bonuses, insurance liabilities, accrued tax etc. These are all included in {{Other_Current_Liab}}.</p>
     *
     * @return self
     */
    public function setOtherCurrentLiabilities($other_current_liabilities)
    {
        if (is_null($other_current_liabilities)) {
            throw new \InvalidArgumentException('non-nullable other_current_liabilities cannot be null');
        }
        $this->container['other_current_liabilities'] = $other_current_liabilities;

        return $this;
    }

    /**
     * Gets other_current_payables
     *
     * @return float|null
     */
    public function getOtherCurrentPayables()
    {
        return $this->container['other_current_payables'];
    }

    /**
     * Sets other_current_payables
     *
     * @param float|null $other_current_payables <p>{{OtherCurrentPayables}} is the payables owed and expected to be paid within one year or one operating cycle that not otherwise classified. It includes dividends payable and all other current payables.</p>
     *
     * @return self
     */
    public function setOtherCurrentPayables($other_current_payables)
    {
        if (is_null($other_current_payables)) {
            throw new \InvalidArgumentException('non-nullable other_current_payables cannot be null');
        }
        $this->container['other_current_payables'] = $other_current_payables;

        return $this;
    }

    /**
     * Gets other_current_receivables
     *
     * @return float|null
     */
    public function getOtherCurrentReceivables()
    {
        return $this->container['other_current_receivables'];
    }

    /**
     * Sets other_current_receivables
     *
     * @param float|null $other_current_receivables <p>{{OtherCurrentReceivables}} is other current receivables of that not otherwise classified. GuruFocus uses a standardized financial statement format for all companies. GuruFocus lists {{Accts_Rec}}, {{NotesReceivable}}, {{LoansReceivable}} and {{OtherCurrentReceivables}} under the \"{{TotalReceivables}}\" section.</p>
     *
     * @return self
     */
    public function setOtherCurrentReceivables($other_current_receivables)
    {
        if (is_null($other_current_receivables)) {
            throw new \InvalidArgumentException('non-nullable other_current_receivables cannot be null');
        }
        $this->container['other_current_receivables'] = $other_current_receivables;

        return $this;
    }

    /**
     * Gets other_equity
     *
     * @return float|null
     */
    public function getOtherEquity()
    {
        return $this->container['other_equity'];
    }

    /**
     * Sets other_equity
     *
     * @param float|null $other_equity <p>{{OtherEquity}} is instruments issued by the company that cannot be identified by other specific items in the Equity section. GuruFocus lists following items in \"{{Total_Equity}}\" section: {{CommonStock}}, {{Preferred_Stock}}, {{Retained_Earnings}}, {{accumulated_other_comprehensive_income}}, {{AdditionalPaidInCapital}}, {{Treasury_Stock}}, {{OtherEquity}}.</p>
     *
     * @return self
     */
    public function setOtherEquity($other_equity)
    {
        if (is_null($other_equity)) {
            throw new \InvalidArgumentException('non-nullable other_equity cannot be null');
        }
        $this->container['other_equity'] = $other_equity;

        return $this;
    }

    /**
     * Gets other_gross_ppe
     *
     * @return float|null
     */
    public function getOtherGrossPpe()
    {
        return $this->container['other_gross_ppe'];
    }

    /**
     * Sets other_gross_ppe
     *
     * @param float|null $other_gross_ppe <p>{{OtherGrossPPE}} is property, plant and equipment recorded on a company's balance sheet that not otherwise classified. GuruFocus lists {{LandAndImprovements}}, {{BuildingsAndImprovements}}, {{MachineryFurnitureEquipment}}, {{ConstructionInProgress}} and {{OtherGrossPPE}} under the \"{{GrossPPE}}\" section.</p>
     *
     * @return self
     */
    public function setOtherGrossPpe($other_gross_ppe)
    {
        if (is_null($other_gross_ppe)) {
            throw new \InvalidArgumentException('non-nullable other_gross_ppe cannot be null');
        }
        $this->container['other_gross_ppe'] = $other_gross_ppe;

        return $this;
    }

    /**
     * Gets other_inventories
     *
     * @return float|null
     */
    public function getOtherInventories()
    {
        return $this->container['other_inventories'];
    }

    /**
     * Sets other_inventories
     *
     * @param float|null $other_inventories <p>Other inventories including goods for resale, stocks in transit, consignment stocks, etc.</p>
     *
     * @return self
     */
    public function setOtherInventories($other_inventories)
    {
        if (is_null($other_inventories)) {
            throw new \InvalidArgumentException('non-nullable other_inventories cannot be null');
        }
        $this->container['other_inventories'] = $other_inventories;

        return $this;
    }

    /**
     * Gets other_long_term_assets
     *
     * @return float|null
     */
    public function getOtherLongTermAssets()
    {
        return $this->container['other_long_term_assets'];
    }

    /**
     * Sets other_long_term_assets
     *
     * @param float|null $other_long_term_assets <p>GuruFocus lists {{InvestmentsAndAdvances}}, {{Intangibles}}, {{Net_PPE}} and {{Other_Long-Term_Assets}} under the \"{{TotalNonCurrentAssets}}\" section. <br>{{Other_Long-Term_Assets}} includes following items: Investment in Properties, Non-current Accounts Receivable, Non-current Note Receivables, Non-current Deferred Assets, Non-current Prepaid Assets, Defined Pension Benefit, Other (too numerous to list). Some companies can do choose to report each of these items separately. Yet, there are a variety of {{Other_Long-Term_Assets}} which are simply too numerous to list.</p>
     *
     * @return self
     */
    public function setOtherLongTermAssets($other_long_term_assets)
    {
        if (is_null($other_long_term_assets)) {
            throw new \InvalidArgumentException('non-nullable other_long_term_assets cannot be null');
        }
        $this->container['other_long_term_assets'] = $other_long_term_assets;

        return $this;
    }

    /**
     * Gets other_long_term_liabilities
     *
     * @return float|null
     */
    public function getOtherLongTermLiabilities()
    {
        return $this->container['other_long_term_liabilities'];
    }

    /**
     * Sets other_long_term_liabilities
     *
     * @param float|null $other_long_term_liabilities <p>{{Other_Long-Term_Liab}} are the other liabilities on the balance sheet that do not need to be repaid within the next 12 months, but still need to be repaid over time.</p>
     *
     * @return self
     */
    public function setOtherLongTermLiabilities($other_long_term_liabilities)
    {
        if (is_null($other_long_term_liabilities)) {
            throw new \InvalidArgumentException('non-nullable other_long_term_liabilities cannot be null');
        }
        $this->container['other_long_term_liabilities'] = $other_long_term_liabilities;

        return $this;
    }

    /**
     * Gets pension_and_retirement_benefit
     *
     * @return float|null
     */
    public function getPensionAndRetirementBenefit()
    {
        return $this->container['pension_and_retirement_benefit'];
    }

    /**
     * Sets pension_and_retirement_benefit
     *
     * @param float|null $pension_and_retirement_benefit The total about of pension and retirement benefits
     *
     * @return self
     */
    public function setPensionAndRetirementBenefit($pension_and_retirement_benefit)
    {
        if (is_null($pension_and_retirement_benefit)) {
            throw new \InvalidArgumentException('non-nullable pension_and_retirement_benefit cannot be null');
        }
        $this->container['pension_and_retirement_benefit'] = $pension_and_retirement_benefit;

        return $this;
    }

    /**
     * Gets preferred_stock
     *
     * @return float|null
     */
    public function getPreferredStock()
    {
        return $this->container['preferred_stock'];
    }

    /**
     * Sets preferred_stock
     *
     * @param float|null $preferred_stock <p>{{Preferred_Stock}} is a special equity security that has properties of both equity and debt. It is generally considered a hybrid instrument. {{Preferred_Stock}} is senior to {{CommonStock}}, but is subordinate to bonds in terms of claim or rights to their share of the assets of the company. {{Preferred_Stock}} has priority over {{CommonStock}} in the payment of dividends and any payments received when a company liquidates. <br>{{Preferred_Stock}} comes in many forms. It can be: Convertible or Non-Convertible, Cumulative or Non-Cumulative, Voting or Non-Voting, Callable or Non-Callable, Maturity Date or No Maturity Date. <br>A {{Preferred_Stock}} without a maturity date is called a perpetual preferred stock. These are relatively rare. A good example of perpetual {{Preferred_Stock}} is the many series of Public Storage (PSA) preferred shares that trade on the New York Stock Exchange. <br>Before investing in preferred stock, it is important to know which of the above groups the stock belongs to. Is it convertible or non-convertible? Are dividends cumulative or non-cumulative? It is also critical that an investor knows what bonds the company has in front of the {{Preferred_Stock}}. Bondholders get paid first. So the decision to buy a {{Preferred_Stock}} can be similar to the decision to buy a bond. But, remember, the {{Preferred_Stock}} of a company with bonds is junior to those bonds.  <br>Unless a {{Preferred_Stock}} is convertible, the upside in a preferred stock investment is more limited than in a {{CommonStock}} investment. If a company doubles its earnings, it is usually under no more obligation to double the dividends paid to preferred shareholders than it is to double the interest paid to its bankers and bondholders.So {{Preferred_Stock}} is very different from {{CommonStock}}.</p>
     *
     * @return self
     */
    public function setPreferredStock($preferred_stock)
    {
        if (is_null($preferred_stock)) {
            throw new \InvalidArgumentException('non-nullable preferred_stock cannot be null');
        }
        $this->container['preferred_stock'] = $preferred_stock;

        return $this;
    }

    /**
     * Gets raw_materials
     *
     * @return float|null
     */
    public function getRawMaterials()
    {
        return $this->container['raw_materials'];
    }

    /**
     * Sets raw_materials
     *
     * @param float|null $raw_materials <p>{{RawMaterials}} are materials and components scheduled for use in making a product.</p>
     *
     * @return self
     */
    public function setRawMaterials($raw_materials)
    {
        if (is_null($raw_materials)) {
            throw new \InvalidArgumentException('non-nullable raw_materials cannot be null');
        }
        $this->container['raw_materials'] = $raw_materials;

        return $this;
    }

    /**
     * Gets retained_earnings
     *
     * @return float|null
     */
    public function getRetainedEarnings()
    {
        return $this->container['retained_earnings'];
    }

    /**
     * Sets retained_earnings
     *
     * @param float|null $retained_earnings <p>{{Retained_Earnings}} is the accumulated portion of {{Net_Income}} that is not distributed to shareholders. Because the {{Net_Income}} was not distributed to shareholders, shareholders' equity is increased by the same amount. Of course, if a company loses, it is called retained losses, or accumulated losses. Historically profitable companies sometimes have negative {{Retained_Earnings}}. This is because they have cumulatively paid out more to shareholders than they reported in profits. If a company has negative {{Retained_Earnings}}, investors should check the 10-year financial results. They should not assume that negative {{Retained_Earnings}} prove a company has generally lost money in the past. Of course, many companies with negative {{Retained_Earnings}} have indeed lost money in the past.</p>
     *
     * @return self
     */
    public function setRetainedEarnings($retained_earnings)
    {
        if (is_null($retained_earnings)) {
            throw new \InvalidArgumentException('non-nullable retained_earnings cannot be null');
        }
        $this->container['retained_earnings'] = $retained_earnings;

        return $this;
    }

    /**
     * Gets short_term_capital_lease_obligation
     *
     * @return float|null
     */
    public function getShortTermCapitalLeaseObligation()
    {
        return $this->container['short_term_capital_lease_obligation'];
    }

    /**
     * Sets short_term_capital_lease_obligation
     *
     * @param float|null $short_term_capital_lease_obligation short_term_capital_lease_obligation
     *
     * @return self
     */
    public function setShortTermCapitalLeaseObligation($short_term_capital_lease_obligation)
    {
        if (is_null($short_term_capital_lease_obligation)) {
            throw new \InvalidArgumentException('non-nullable short_term_capital_lease_obligation cannot be null');
        }
        $this->container['short_term_capital_lease_obligation'] = $short_term_capital_lease_obligation;

        return $this;
    }

    /**
     * Gets short_term_debt
     *
     * @return float|null
     */
    public function getShortTermDebt()
    {
        return $this->container['short_term_debt'];
    }

    /**
     * Sets short_term_debt
     *
     * @param float|null $short_term_debt short_term_debt
     *
     * @return self
     */
    public function setShortTermDebt($short_term_debt)
    {
        if (is_null($short_term_debt)) {
            throw new \InvalidArgumentException('non-nullable short_term_debt cannot be null');
        }
        $this->container['short_term_debt'] = $short_term_debt;

        return $this;
    }

    /**
     * Gets short_term_debt_and_capital_lease_obligation
     *
     * @return float|null
     */
    public function getShortTermDebtAndCapitalLeaseObligation()
    {
        return $this->container['short_term_debt_and_capital_lease_obligation'];
    }

    /**
     * Sets short_term_debt_and_capital_lease_obligation
     *
     * @param float|null $short_term_debt_and_capital_lease_obligation <p>{{Short-Term_Debt}} is the portion of a company's debt and capital lease obligation that need to be paid within the next 12 months. It equals {{ShortTermDebt_without_lease}} plus {{ShortTermCapitalLeaseObligation}}. This gives investors an idea of how much money the company needs to pay down for the principle of its debt.</p>
     *
     * @return self
     */
    public function setShortTermDebtAndCapitalLeaseObligation($short_term_debt_and_capital_lease_obligation)
    {
        if (is_null($short_term_debt_and_capital_lease_obligation)) {
            throw new \InvalidArgumentException('non-nullable short_term_debt_and_capital_lease_obligation cannot be null');
        }
        $this->container['short_term_debt_and_capital_lease_obligation'] = $short_term_debt_and_capital_lease_obligation;

        return $this;
    }

    /**
     * Gets total_assets
     *
     * @return float|null
     */
    public function getTotalAssets()
    {
        return $this->container['total_assets'];
    }

    /**
     * Sets total_assets
     *
     * @param float|null $total_assets <p>{{Total_Assets}} are all the assets a company owns. From the capital sources of the assets, some of the assets are funded through shareholder's paid in capital and {{Retained_Earnings}} of the business. Others are funded through borrowed money. <br>Therefore, total assets can be calculated as: {{Total_Assets}} = {{Total_Current_Assets}} + {{TotalNonCurrentAssets}} = Total Shareholder's Equity + {{Total_Liabilities}} <br>Total Assets is connected with Return on Assets by {{ROA}} = {{Net_Income}} / {{Total_Assets}} <br> Total Assets is linked to {{Revenue}} through {{turnover}}: {{turnover}}  = {{Revenue}} / {{Total_Assets}} <br>Therefore, if a company grows its {{Total_Assets}} faster than its {{Revenue}}, the {{turnover}} will decline. This might be a warning sign for the business.</p>
     *
     * @return self
     */
    public function setTotalAssets($total_assets)
    {
        if (is_null($total_assets)) {
            throw new \InvalidArgumentException('non-nullable total_assets cannot be null');
        }
        $this->container['total_assets'] = $total_assets;

        return $this;
    }

    /**
     * Gets total_current_assets
     *
     * @return float|null
     */
    public function getTotalCurrentAssets()
    {
        return $this->container['total_current_assets'];
    }

    /**
     * Sets total_current_assets
     *
     * @param float|null $total_current_assets <p>{{Total_Current_Assets}} are the asset that can be converted to cash or used to pay current liabilities within 12 months. <br>{{Total_Current_Assets}} = {{CashAndCashEquivalents}} + {{Accts_Rec}} + {{Inventory}} + {{Other_Current_Assets}} <br>{{Total_Current_Assets}} is linked to the {{current_ratio}}, which is calculated as {{Total_Current_Assets}} = {{Total_Current_Assets}} / {{Total_Current_Liabilities}} <br>It is frequently used as an indicator of a company\\'s liquidity, its ability to meet short-term obligations. <br>{{Total_Current_Assets}} is also linked to {{NCAV}}, {{NCAV}} = {{Total_Current_Assets}} - {{Total_Current_Liabilities}}.</p>
     *
     * @return self
     */
    public function setTotalCurrentAssets($total_current_assets)
    {
        if (is_null($total_current_assets)) {
            throw new \InvalidArgumentException('non-nullable total_current_assets cannot be null');
        }
        $this->container['total_current_assets'] = $total_current_assets;

        return $this;
    }

    /**
     * Gets total_current_liabilities
     *
     * @return float|null
     */
    public function getTotalCurrentLiabilities()
    {
        return $this->container['total_current_liabilities'];
    }

    /**
     * Sets total_current_liabilities
     *
     * @param float|null $total_current_liabilities <p>{{Total_Current_Liabilities}} is the total amount of liabilities that the company needs to pay over the next 12 months. <br>{{Total_Current_Liabilities}} = {{AccountsPayable}} + Current Portion of {{LongTermDebt}} + {{Other_Current_Liab}} <br>The increase of {{Total_Current_Liabilities}} of a company is not necessarily a bad thing. This may conserve the company's cash and contribute positively to cash flow. {{Total_Current_Liabilities}} is linked to {{Total_Current_Assets}} through {{NCAV}} and {{current_ratio}}. The {{current_ratio}} is equal to dividing {{Total_Current_Assets}} by {{Total_Current_Liabilities}}. It is frequently used as an indicator of a company's liquidity, its ability to meet short-term obligations. <br>{{Total_Current_Liabilities}} is also linked to {{NCAV}}, {{NCAV}} is calculated as {{Total_Current_Assets}} minus {{Total_Current_Liabilities}}.</p>
     *
     * @return self
     */
    public function setTotalCurrentLiabilities($total_current_liabilities)
    {
        if (is_null($total_current_liabilities)) {
            throw new \InvalidArgumentException('non-nullable total_current_liabilities cannot be null');
        }
        $this->container['total_current_liabilities'] = $total_current_liabilities;

        return $this;
    }

    /**
     * Gets total_equity
     *
     * @return float|null
     */
    public function getTotalEquity()
    {
        return $this->container['total_equity'];
    }

    /**
     * Sets total_equity
     *
     * @param float|null $total_equity <p>{{TotalEquityGrossMinorityInterest}} is residual interest, including minority interest, that remains in the assets of the enterprise after deducting its liabilities. Equity is increased by owners’ investments and by comprehensive income, and it is reduced by distributions to the owners.</p>
     *
     * @return self
     */
    public function setTotalEquity($total_equity)
    {
        if (is_null($total_equity)) {
            throw new \InvalidArgumentException('non-nullable total_equity cannot be null');
        }
        $this->container['total_equity'] = $total_equity;

        return $this;
    }

    /**
     * Gets total_liabilities
     *
     * @return float|null
     */
    public function getTotalLiabilities()
    {
        return $this->container['total_liabilities'];
    }

    /**
     * Sets total_liabilities
     *
     * @param float|null $total_liabilities <p>{{Total_Liabilities}} = {{Total_Current_Liabilities}} + {{TotalNonCurrentLiabilitiesNetMinorityInterest}} = {{Total_Current_Liabilities}} + {{Long-Term_Debt}} + {{ther_Long-Term_Liab}} <br>{{Total_Liabilities}} = {{Total_Assets}} - {{TotalEquityGrossMinorityInterest}} <br>{{Total_Liabilities}} are the liabilities that the company has to pay others. It is a part of the balance sheet of a company that shareholders do not own, and would be obligated to pay back if the company liquidated.</p>
     *
     * @return self
     */
    public function setTotalLiabilities($total_liabilities)
    {
        if (is_null($total_liabilities)) {
            throw new \InvalidArgumentException('non-nullable total_liabilities cannot be null');
        }
        $this->container['total_liabilities'] = $total_liabilities;

        return $this;
    }

    /**
     * Gets total_non_current_assets
     *
     * @return float|null
     */
    public function getTotalNonCurrentAssets()
    {
        return $this->container['total_non_current_assets'];
    }

    /**
     * Sets total_non_current_assets
     *
     * @param float|null $total_non_current_assets total_non_current_assets
     *
     * @return self
     */
    public function setTotalNonCurrentAssets($total_non_current_assets)
    {
        if (is_null($total_non_current_assets)) {
            throw new \InvalidArgumentException('non-nullable total_non_current_assets cannot be null');
        }
        $this->container['total_non_current_assets'] = $total_non_current_assets;

        return $this;
    }

    /**
     * Gets total_non_current_liabilities_net_minority_interest
     *
     * @return float|null
     */
    public function getTotalNonCurrentLiabilitiesNetMinorityInterest()
    {
        return $this->container['total_non_current_liabilities_net_minority_interest'];
    }

    /**
     * Sets total_non_current_liabilities_net_minority_interest
     *
     * @param float|null $total_non_current_liabilities_net_minority_interest total_non_current_liabilities_net_minority_interest
     *
     * @return self
     */
    public function setTotalNonCurrentLiabilitiesNetMinorityInterest($total_non_current_liabilities_net_minority_interest)
    {
        if (is_null($total_non_current_liabilities_net_minority_interest)) {
            throw new \InvalidArgumentException('non-nullable total_non_current_liabilities_net_minority_interest cannot be null');
        }
        $this->container['total_non_current_liabilities_net_minority_interest'] = $total_non_current_liabilities_net_minority_interest;

        return $this;
    }

    /**
     * Gets total_receivables
     *
     * @return float|null
     */
    public function getTotalReceivables()
    {
        return $this->container['total_receivables'];
    }

    /**
     * Sets total_receivables
     *
     * @param float|null $total_receivables <p>{{TotalReceivables}} is the sum of all receivables owed by customers and affiliates within one year, including {{Accts_Rec}}, {{NotesReceivable}}, {{LoansReceivable}},{{OtherCurrentReceivables}}.</p>
     *
     * @return self
     */
    public function setTotalReceivables($total_receivables)
    {
        if (is_null($total_receivables)) {
            throw new \InvalidArgumentException('non-nullable total_receivables cannot be null');
        }
        $this->container['total_receivables'] = $total_receivables;

        return $this;
    }

    /**
     * Gets total_stockholders_equity
     *
     * @return float|null
     */
    public function getTotalStockholdersEquity()
    {
        return $this->container['total_stockholders_equity'];
    }

    /**
     * Sets total_stockholders_equity
     *
     * @param float|null $total_stockholders_equity <p>{{Total_Equity}} refers to the net assets owned by shareholders. <br>{{Total_Equity}} = {{Preferred_Stock}} + {{CommonStock}} + Capital Surplus + {{Retained_Earnings}} <br>{{Total_Equity}} and {{Total_Liabilities}} are the two components for {{Total_Assets}}: <br>Total Assets = Total Shareholder's Equity + {{Total_Liabilities}}  = {{Total_Current_Assets}} + {{TotalNonCurrentAssets}} <br>{{Total_Equity}} is used to calculate {{Book_Value_Per_Share}}: {{Book_Value_Per_Share}} = ({{Total_Equity}} - {{Preferred_Stock}})/ {{BS_share}}. <br>The ratio of a company's debt over equity can be used to measure how leveraged this company is: {{deb2equity}} = ({{Long-Term_Debt}} + {{Short-Term_Debt}})/{{Total_Equity}}.</p>
     *
     * @return self
     */
    public function setTotalStockholdersEquity($total_stockholders_equity)
    {
        if (is_null($total_stockholders_equity)) {
            throw new \InvalidArgumentException('non-nullable total_stockholders_equity cannot be null');
        }
        $this->container['total_stockholders_equity'] = $total_stockholders_equity;

        return $this;
    }

    /**
     * Gets total_tax_payable
     *
     * @return float|null
     */
    public function getTotalTaxPayable()
    {
        return $this->container['total_tax_payable'];
    }

    /**
     * Sets total_tax_payable
     *
     * @param float|null $total_tax_payable <p>{{TotalTaxPayable}} is the taxes liability owed to federal, state, and local tax authorities. It is the carrying value as of the balance sheet date of obligations incurred and payable for statutory income, sales, use, payroll, excise, real, property and other taxes.</p>
     *
     * @return self
     */
    public function setTotalTaxPayable($total_tax_payable)
    {
        if (is_null($total_tax_payable)) {
            throw new \InvalidArgumentException('non-nullable total_tax_payable cannot be null');
        }
        $this->container['total_tax_payable'] = $total_tax_payable;

        return $this;
    }

    /**
     * Gets treasury_stock
     *
     * @return float|null
     */
    public function getTreasuryStock()
    {
        return $this->container['treasury_stock'];
    }

    /**
     * Sets treasury_stock
     *
     * @param float|null $treasury_stock <p>{{Treasury_Stock}} is the portion of shares that a company keeps in their own treasury. {{Treasury_Stock}} may have come from a repurchase or buyback from shareholders; or it may have never been issued to the public in the first place. These shares don't pay dividends, have no voting rights, and should not be included in shares outstanding calculations.</p>
     *
     * @return self
     */
    public function setTreasuryStock($treasury_stock)
    {
        if (is_null($treasury_stock)) {
            throw new \InvalidArgumentException('non-nullable treasury_stock cannot be null');
        }
        $this->container['treasury_stock'] = $treasury_stock;

        return $this;
    }

    /**
     * Gets work_in_process
     *
     * @return float|null
     */
    public function getWorkInProcess()
    {
        return $this->container['work_in_process'];
    }

    /**
     * Sets work_in_process
     *
     * @param float|null $work_in_process <p>That part of a manufacturer's inventory that is in the production process and has not yet been completed and transferred to the finished goods inventory. This account contains the cost of the direct material, direct labor, and factory overhead placed into the products on the factory floor. A manufacturer must disclose in its financial statements the cost of its work-in-process as well as the cost of finished goods and materials on hand.</p>
     *
     * @return self
     */
    public function setWorkInProcess($work_in_process)
    {
        if (is_null($work_in_process)) {
            throw new \InvalidArgumentException('non-nullable work_in_process cannot be null');
        }
        $this->container['work_in_process'] = $work_in_process;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


