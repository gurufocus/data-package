<?php
/**
 * StockRankingsGuruFocusRankings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gurufocus Data Package API
 *
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * StockRankingsGuruFocusRankings Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StockRankingsGuruFocusRankings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'stock_rankings_guru_focus_rankings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'gf_score' => 'float',
        'gf_score_high' => 'float',
        'gf_score_low' => 'float',
        'gf_score_med' => 'float',
        'gf_score_med_5y' => 'float',
        'gf_value' => 'float',
        'gf_value_est' => 'float',
        'gf_value_est_2nd' => 'float',
        'gf_value_est_3rd' => 'float',
        'gf_value_pct_change' => 'float',
        'margin_gf_value' => 'float',
        'p2gf_value' => 'float',
        'p2gf_value_est' => 'float',
        'p2gf_value_high' => 'float',
        'p2gf_value_low' => 'float',
        'p2gf_value_med' => 'float',
        'predictability' => 'string',
        'rank_balancesheet' => 'float',
        'rank_balancesheet_high' => 'float',
        'rank_balancesheet_low' => 'float',
        'rank_balancesheet_med' => 'float',
        'rank_gf_value' => 'float',
        'rank_gf_value_high' => 'float',
        'rank_gf_value_low' => 'float',
        'rank_growth' => 'float',
        'rank_growth_high' => 'float',
        'rank_growth_low' => 'float',
        'rank_growth_med' => 'float',
        'rank_momentum' => 'float',
        'rank_momentum_high' => 'float',
        'rank_momentum_low' => 'float',
        'rank_momentum_med' => 'float',
        'rank_profitability' => 'float',
        'rank_profitability_high' => 'float',
        'rank_profitability_low' => 'float',
        'rank_profitability_med' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'gf_score' => null,
        'gf_score_high' => null,
        'gf_score_low' => null,
        'gf_score_med' => null,
        'gf_score_med_5y' => null,
        'gf_value' => null,
        'gf_value_est' => null,
        'gf_value_est_2nd' => null,
        'gf_value_est_3rd' => null,
        'gf_value_pct_change' => null,
        'margin_gf_value' => null,
        'p2gf_value' => null,
        'p2gf_value_est' => null,
        'p2gf_value_high' => null,
        'p2gf_value_low' => null,
        'p2gf_value_med' => null,
        'predictability' => null,
        'rank_balancesheet' => null,
        'rank_balancesheet_high' => null,
        'rank_balancesheet_low' => null,
        'rank_balancesheet_med' => null,
        'rank_gf_value' => null,
        'rank_gf_value_high' => null,
        'rank_gf_value_low' => null,
        'rank_growth' => null,
        'rank_growth_high' => null,
        'rank_growth_low' => null,
        'rank_growth_med' => null,
        'rank_momentum' => null,
        'rank_momentum_high' => null,
        'rank_momentum_low' => null,
        'rank_momentum_med' => null,
        'rank_profitability' => null,
        'rank_profitability_high' => null,
        'rank_profitability_low' => null,
        'rank_profitability_med' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'gf_score' => false,
        'gf_score_high' => false,
        'gf_score_low' => false,
        'gf_score_med' => false,
        'gf_score_med_5y' => false,
        'gf_value' => false,
        'gf_value_est' => false,
        'gf_value_est_2nd' => false,
        'gf_value_est_3rd' => false,
        'gf_value_pct_change' => false,
        'margin_gf_value' => false,
        'p2gf_value' => false,
        'p2gf_value_est' => false,
        'p2gf_value_high' => false,
        'p2gf_value_low' => false,
        'p2gf_value_med' => false,
        'predictability' => false,
        'rank_balancesheet' => false,
        'rank_balancesheet_high' => false,
        'rank_balancesheet_low' => false,
        'rank_balancesheet_med' => false,
        'rank_gf_value' => false,
        'rank_gf_value_high' => false,
        'rank_gf_value_low' => false,
        'rank_growth' => false,
        'rank_growth_high' => false,
        'rank_growth_low' => false,
        'rank_growth_med' => false,
        'rank_momentum' => false,
        'rank_momentum_high' => false,
        'rank_momentum_low' => false,
        'rank_momentum_med' => false,
        'rank_profitability' => false,
        'rank_profitability_high' => false,
        'rank_profitability_low' => false,
        'rank_profitability_med' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gf_score' => 'gf_score',
        'gf_score_high' => 'gf_score_high',
        'gf_score_low' => 'gf_score_low',
        'gf_score_med' => 'gf_score_med',
        'gf_score_med_5y' => 'gf_score_med_5y',
        'gf_value' => 'gf_value',
        'gf_value_est' => 'gf_value_est',
        'gf_value_est_2nd' => 'gf_value_est_2nd',
        'gf_value_est_3rd' => 'gf_value_est_3rd',
        'gf_value_pct_change' => 'gf_value_pct_change',
        'margin_gf_value' => 'margin_gf_value',
        'p2gf_value' => 'p2gf_value',
        'p2gf_value_est' => 'p2gf_value_est',
        'p2gf_value_high' => 'p2gf_value_high',
        'p2gf_value_low' => 'p2gf_value_low',
        'p2gf_value_med' => 'p2gf_value_med',
        'predictability' => 'predictability',
        'rank_balancesheet' => 'rank_balancesheet',
        'rank_balancesheet_high' => 'rank_balancesheet_high',
        'rank_balancesheet_low' => 'rank_balancesheet_low',
        'rank_balancesheet_med' => 'rank_balancesheet_med',
        'rank_gf_value' => 'rank_gf_value',
        'rank_gf_value_high' => 'rank_gf_value_high',
        'rank_gf_value_low' => 'rank_gf_value_low',
        'rank_growth' => 'rank_growth',
        'rank_growth_high' => 'rank_growth_high',
        'rank_growth_low' => 'rank_growth_low',
        'rank_growth_med' => 'rank_growth_med',
        'rank_momentum' => 'rank_momentum',
        'rank_momentum_high' => 'rank_momentum_high',
        'rank_momentum_low' => 'rank_momentum_low',
        'rank_momentum_med' => 'rank_momentum_med',
        'rank_profitability' => 'rank_profitability',
        'rank_profitability_high' => 'rank_profitability_high',
        'rank_profitability_low' => 'rank_profitability_low',
        'rank_profitability_med' => 'rank_profitability_med'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gf_score' => 'setGfScore',
        'gf_score_high' => 'setGfScoreHigh',
        'gf_score_low' => 'setGfScoreLow',
        'gf_score_med' => 'setGfScoreMed',
        'gf_score_med_5y' => 'setGfScoreMed5y',
        'gf_value' => 'setGfValue',
        'gf_value_est' => 'setGfValueEst',
        'gf_value_est_2nd' => 'setGfValueEst2nd',
        'gf_value_est_3rd' => 'setGfValueEst3rd',
        'gf_value_pct_change' => 'setGfValuePctChange',
        'margin_gf_value' => 'setMarginGfValue',
        'p2gf_value' => 'setP2gfValue',
        'p2gf_value_est' => 'setP2gfValueEst',
        'p2gf_value_high' => 'setP2gfValueHigh',
        'p2gf_value_low' => 'setP2gfValueLow',
        'p2gf_value_med' => 'setP2gfValueMed',
        'predictability' => 'setPredictability',
        'rank_balancesheet' => 'setRankBalancesheet',
        'rank_balancesheet_high' => 'setRankBalancesheetHigh',
        'rank_balancesheet_low' => 'setRankBalancesheetLow',
        'rank_balancesheet_med' => 'setRankBalancesheetMed',
        'rank_gf_value' => 'setRankGfValue',
        'rank_gf_value_high' => 'setRankGfValueHigh',
        'rank_gf_value_low' => 'setRankGfValueLow',
        'rank_growth' => 'setRankGrowth',
        'rank_growth_high' => 'setRankGrowthHigh',
        'rank_growth_low' => 'setRankGrowthLow',
        'rank_growth_med' => 'setRankGrowthMed',
        'rank_momentum' => 'setRankMomentum',
        'rank_momentum_high' => 'setRankMomentumHigh',
        'rank_momentum_low' => 'setRankMomentumLow',
        'rank_momentum_med' => 'setRankMomentumMed',
        'rank_profitability' => 'setRankProfitability',
        'rank_profitability_high' => 'setRankProfitabilityHigh',
        'rank_profitability_low' => 'setRankProfitabilityLow',
        'rank_profitability_med' => 'setRankProfitabilityMed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gf_score' => 'getGfScore',
        'gf_score_high' => 'getGfScoreHigh',
        'gf_score_low' => 'getGfScoreLow',
        'gf_score_med' => 'getGfScoreMed',
        'gf_score_med_5y' => 'getGfScoreMed5y',
        'gf_value' => 'getGfValue',
        'gf_value_est' => 'getGfValueEst',
        'gf_value_est_2nd' => 'getGfValueEst2nd',
        'gf_value_est_3rd' => 'getGfValueEst3rd',
        'gf_value_pct_change' => 'getGfValuePctChange',
        'margin_gf_value' => 'getMarginGfValue',
        'p2gf_value' => 'getP2gfValue',
        'p2gf_value_est' => 'getP2gfValueEst',
        'p2gf_value_high' => 'getP2gfValueHigh',
        'p2gf_value_low' => 'getP2gfValueLow',
        'p2gf_value_med' => 'getP2gfValueMed',
        'predictability' => 'getPredictability',
        'rank_balancesheet' => 'getRankBalancesheet',
        'rank_balancesheet_high' => 'getRankBalancesheetHigh',
        'rank_balancesheet_low' => 'getRankBalancesheetLow',
        'rank_balancesheet_med' => 'getRankBalancesheetMed',
        'rank_gf_value' => 'getRankGfValue',
        'rank_gf_value_high' => 'getRankGfValueHigh',
        'rank_gf_value_low' => 'getRankGfValueLow',
        'rank_growth' => 'getRankGrowth',
        'rank_growth_high' => 'getRankGrowthHigh',
        'rank_growth_low' => 'getRankGrowthLow',
        'rank_growth_med' => 'getRankGrowthMed',
        'rank_momentum' => 'getRankMomentum',
        'rank_momentum_high' => 'getRankMomentumHigh',
        'rank_momentum_low' => 'getRankMomentumLow',
        'rank_momentum_med' => 'getRankMomentumMed',
        'rank_profitability' => 'getRankProfitability',
        'rank_profitability_high' => 'getRankProfitabilityHigh',
        'rank_profitability_low' => 'getRankProfitabilityLow',
        'rank_profitability_med' => 'getRankProfitabilityMed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('gf_score', $data ?? [], null);
        $this->setIfExists('gf_score_high', $data ?? [], null);
        $this->setIfExists('gf_score_low', $data ?? [], null);
        $this->setIfExists('gf_score_med', $data ?? [], null);
        $this->setIfExists('gf_score_med_5y', $data ?? [], null);
        $this->setIfExists('gf_value', $data ?? [], null);
        $this->setIfExists('gf_value_est', $data ?? [], null);
        $this->setIfExists('gf_value_est_2nd', $data ?? [], null);
        $this->setIfExists('gf_value_est_3rd', $data ?? [], null);
        $this->setIfExists('gf_value_pct_change', $data ?? [], null);
        $this->setIfExists('margin_gf_value', $data ?? [], null);
        $this->setIfExists('p2gf_value', $data ?? [], null);
        $this->setIfExists('p2gf_value_est', $data ?? [], null);
        $this->setIfExists('p2gf_value_high', $data ?? [], null);
        $this->setIfExists('p2gf_value_low', $data ?? [], null);
        $this->setIfExists('p2gf_value_med', $data ?? [], null);
        $this->setIfExists('predictability', $data ?? [], null);
        $this->setIfExists('rank_balancesheet', $data ?? [], null);
        $this->setIfExists('rank_balancesheet_high', $data ?? [], null);
        $this->setIfExists('rank_balancesheet_low', $data ?? [], null);
        $this->setIfExists('rank_balancesheet_med', $data ?? [], null);
        $this->setIfExists('rank_gf_value', $data ?? [], null);
        $this->setIfExists('rank_gf_value_high', $data ?? [], null);
        $this->setIfExists('rank_gf_value_low', $data ?? [], null);
        $this->setIfExists('rank_growth', $data ?? [], null);
        $this->setIfExists('rank_growth_high', $data ?? [], null);
        $this->setIfExists('rank_growth_low', $data ?? [], null);
        $this->setIfExists('rank_growth_med', $data ?? [], null);
        $this->setIfExists('rank_momentum', $data ?? [], null);
        $this->setIfExists('rank_momentum_high', $data ?? [], null);
        $this->setIfExists('rank_momentum_low', $data ?? [], null);
        $this->setIfExists('rank_momentum_med', $data ?? [], null);
        $this->setIfExists('rank_profitability', $data ?? [], null);
        $this->setIfExists('rank_profitability_high', $data ?? [], null);
        $this->setIfExists('rank_profitability_low', $data ?? [], null);
        $this->setIfExists('rank_profitability_med', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gf_score
     *
     * @return float|null
     */
    public function getGfScore()
    {
        return $this->container['gf_score'];
    }

    /**
     * Sets gf_score
     *
     * @param float|null $gf_score GF Score is a stock performance ranking system developed by GuruFocus using five aspects of valuation.
     *
     * @return self
     */
    public function setGfScore($gf_score)
    {
        if (is_null($gf_score)) {
            throw new \InvalidArgumentException('non-nullable gf_score cannot be null');
        }
        $this->container['gf_score'] = $gf_score;

        return $this;
    }

    /**
     * Gets gf_score_high
     *
     * @return float|null
     */
    public function getGfScoreHigh()
    {
        return $this->container['gf_score_high'];
    }

    /**
     * Sets gf_score_high
     *
     * @param float|null $gf_score_high gf_score_high
     *
     * @return self
     */
    public function setGfScoreHigh($gf_score_high)
    {
        if (is_null($gf_score_high)) {
            throw new \InvalidArgumentException('non-nullable gf_score_high cannot be null');
        }
        $this->container['gf_score_high'] = $gf_score_high;

        return $this;
    }

    /**
     * Gets gf_score_low
     *
     * @return float|null
     */
    public function getGfScoreLow()
    {
        return $this->container['gf_score_low'];
    }

    /**
     * Sets gf_score_low
     *
     * @param float|null $gf_score_low gf_score_low
     *
     * @return self
     */
    public function setGfScoreLow($gf_score_low)
    {
        if (is_null($gf_score_low)) {
            throw new \InvalidArgumentException('non-nullable gf_score_low cannot be null');
        }
        $this->container['gf_score_low'] = $gf_score_low;

        return $this;
    }

    /**
     * Gets gf_score_med
     *
     * @return float|null
     */
    public function getGfScoreMed()
    {
        return $this->container['gf_score_med'];
    }

    /**
     * Sets gf_score_med
     *
     * @param float|null $gf_score_med gf_score_med
     *
     * @return self
     */
    public function setGfScoreMed($gf_score_med)
    {
        if (is_null($gf_score_med)) {
            throw new \InvalidArgumentException('non-nullable gf_score_med cannot be null');
        }
        $this->container['gf_score_med'] = $gf_score_med;

        return $this;
    }

    /**
     * Gets gf_score_med_5y
     *
     * @return float|null
     */
    public function getGfScoreMed5y()
    {
        return $this->container['gf_score_med_5y'];
    }

    /**
     * Sets gf_score_med_5y
     *
     * @param float|null $gf_score_med_5y gf_score_med_5y
     *
     * @return self
     */
    public function setGfScoreMed5y($gf_score_med_5y)
    {
        if (is_null($gf_score_med_5y)) {
            throw new \InvalidArgumentException('non-nullable gf_score_med_5y cannot be null');
        }
        $this->container['gf_score_med_5y'] = $gf_score_med_5y;

        return $this;
    }

    /**
     * Gets gf_value
     *
     * @return float|null
     */
    public function getGfValue()
    {
        return $this->container['gf_value'];
    }

    /**
     * Sets gf_value
     *
     * @param float|null $gf_value gf_value
     *
     * @return self
     */
    public function setGfValue($gf_value)
    {
        if (is_null($gf_value)) {
            throw new \InvalidArgumentException('non-nullable gf_value cannot be null');
        }
        $this->container['gf_value'] = $gf_value;

        return $this;
    }

    /**
     * Gets gf_value_est
     *
     * @return float|null
     */
    public function getGfValueEst()
    {
        return $this->container['gf_value_est'];
    }

    /**
     * Sets gf_value_est
     *
     * @param float|null $gf_value_est The estimated GF value at the end of the fiscal year immediately following the current fiscal year. FY1 represents the fiscal year immediately following the current fiscal year.
     *
     * @return self
     */
    public function setGfValueEst($gf_value_est)
    {
        if (is_null($gf_value_est)) {
            throw new \InvalidArgumentException('non-nullable gf_value_est cannot be null');
        }
        $this->container['gf_value_est'] = $gf_value_est;

        return $this;
    }

    /**
     * Gets gf_value_est_2nd
     *
     * @return float|null
     */
    public function getGfValueEst2nd()
    {
        return $this->container['gf_value_est_2nd'];
    }

    /**
     * Sets gf_value_est_2nd
     *
     * @param float|null $gf_value_est_2nd The estimated GF value at the end of the second fiscal year after the current fiscal year. FY2 represents the second fiscal year after the current fiscal year.
     *
     * @return self
     */
    public function setGfValueEst2nd($gf_value_est_2nd)
    {
        if (is_null($gf_value_est_2nd)) {
            throw new \InvalidArgumentException('non-nullable gf_value_est_2nd cannot be null');
        }
        $this->container['gf_value_est_2nd'] = $gf_value_est_2nd;

        return $this;
    }

    /**
     * Gets gf_value_est_3rd
     *
     * @return float|null
     */
    public function getGfValueEst3rd()
    {
        return $this->container['gf_value_est_3rd'];
    }

    /**
     * Sets gf_value_est_3rd
     *
     * @param float|null $gf_value_est_3rd The estimated GF value at the end of the third fiscal year after the current fiscal year. FY3 represents the third fiscal year after the current fiscal year.
     *
     * @return self
     */
    public function setGfValueEst3rd($gf_value_est_3rd)
    {
        if (is_null($gf_value_est_3rd)) {
            throw new \InvalidArgumentException('non-nullable gf_value_est_3rd cannot be null');
        }
        $this->container['gf_value_est_3rd'] = $gf_value_est_3rd;

        return $this;
    }

    /**
     * Gets gf_value_pct_change
     *
     * @return float|null
     */
    public function getGfValuePctChange()
    {
        return $this->container['gf_value_pct_change'];
    }

    /**
     * Sets gf_value_pct_change
     *
     * @param float|null $gf_value_pct_change The percentage change in a company's GF value from the previous month.
     *
     * @return self
     */
    public function setGfValuePctChange($gf_value_pct_change)
    {
        if (is_null($gf_value_pct_change)) {
            throw new \InvalidArgumentException('non-nullable gf_value_pct_change cannot be null');
        }
        $this->container['gf_value_pct_change'] = $gf_value_pct_change;

        return $this;
    }

    /**
     * Gets margin_gf_value
     *
     * @return float|null
     */
    public function getMarginGfValue()
    {
        return $this->container['margin_gf_value'];
    }

    /**
     * Sets margin_gf_value
     *
     * @param float|null $margin_gf_value The difference between current price and intrinsic value based on GF Value model.
     *
     * @return self
     */
    public function setMarginGfValue($margin_gf_value)
    {
        if (is_null($margin_gf_value)) {
            throw new \InvalidArgumentException('non-nullable margin_gf_value cannot be null');
        }
        $this->container['margin_gf_value'] = $margin_gf_value;

        return $this;
    }

    /**
     * Gets p2gf_value
     *
     * @return float|null
     */
    public function getP2gfValue()
    {
        return $this->container['p2gf_value'];
    }

    /**
     * Sets p2gf_value
     *
     * @param float|null $p2gf_value p2gf_value
     *
     * @return self
     */
    public function setP2gfValue($p2gf_value)
    {
        if (is_null($p2gf_value)) {
            throw new \InvalidArgumentException('non-nullable p2gf_value cannot be null');
        }
        $this->container['p2gf_value'] = $p2gf_value;

        return $this;
    }

    /**
     * Gets p2gf_value_est
     *
     * @return float|null
     */
    public function getP2gfValueEst()
    {
        return $this->container['p2gf_value_est'];
    }

    /**
     * Sets p2gf_value_est
     *
     * @param float|null $p2gf_value_est p2gf_value_est
     *
     * @return self
     */
    public function setP2gfValueEst($p2gf_value_est)
    {
        if (is_null($p2gf_value_est)) {
            throw new \InvalidArgumentException('non-nullable p2gf_value_est cannot be null');
        }
        $this->container['p2gf_value_est'] = $p2gf_value_est;

        return $this;
    }

    /**
     * Gets p2gf_value_high
     *
     * @return float|null
     */
    public function getP2gfValueHigh()
    {
        return $this->container['p2gf_value_high'];
    }

    /**
     * Sets p2gf_value_high
     *
     * @param float|null $p2gf_value_high p2gf_value_high
     *
     * @return self
     */
    public function setP2gfValueHigh($p2gf_value_high)
    {
        if (is_null($p2gf_value_high)) {
            throw new \InvalidArgumentException('non-nullable p2gf_value_high cannot be null');
        }
        $this->container['p2gf_value_high'] = $p2gf_value_high;

        return $this;
    }

    /**
     * Gets p2gf_value_low
     *
     * @return float|null
     */
    public function getP2gfValueLow()
    {
        return $this->container['p2gf_value_low'];
    }

    /**
     * Sets p2gf_value_low
     *
     * @param float|null $p2gf_value_low p2gf_value_low
     *
     * @return self
     */
    public function setP2gfValueLow($p2gf_value_low)
    {
        if (is_null($p2gf_value_low)) {
            throw new \InvalidArgumentException('non-nullable p2gf_value_low cannot be null');
        }
        $this->container['p2gf_value_low'] = $p2gf_value_low;

        return $this;
    }

    /**
     * Gets p2gf_value_med
     *
     * @return float|null
     */
    public function getP2gfValueMed()
    {
        return $this->container['p2gf_value_med'];
    }

    /**
     * Sets p2gf_value_med
     *
     * @param float|null $p2gf_value_med p2gf_value_med
     *
     * @return self
     */
    public function setP2gfValueMed($p2gf_value_med)
    {
        if (is_null($p2gf_value_med)) {
            throw new \InvalidArgumentException('non-nullable p2gf_value_med cannot be null');
        }
        $this->container['p2gf_value_med'] = $p2gf_value_med;

        return $this;
    }

    /**
     * Gets predictability
     *
     * @return string|null
     */
    public function getPredictability()
    {
        return $this->container['predictability'];
    }

    /**
     * Sets predictability
     *
     * @param string|null $predictability <table class=\"normal-table\">         <thead>           <tr>             <th>Rank</th>             <th>Average Gain</th>             <th>% of Stocks that are in still loss if held for 10yrs</th>           </tr>         </thead>         <tbody>           <tr>             <td>               2 Star             </td>             <td>6% per year</td>             <td>16%</td>           </tr>            <tr>             <td>               2.5 Star             </td>             <td>7.3% per year</td>             <td>18%</td>           </tr>            <tr>             <td>               3 Star             </td>             <td>8.2% per year</td>             <td>11%</td>           </tr>            <tr>             <td>               3.5 Star             </td>             <td>9.3% per year</td>             <td>9%</td>           </tr>            <tr>             <td>               4 Star             </td>             <td>9.8% per year</td>             <td>8%</td>           </tr>            <tr>             <td>               4.5 Star             </td>             <td>10.6% per year</td>             <td>10%</td>           </tr>            <tr>             <td>               5 Star             </td>             <td>12.1% per year</td>             <td>3%</td>           </tr>         </tbody>       </table>
     *
     * @return self
     */
    public function setPredictability($predictability)
    {
        if (is_null($predictability)) {
            throw new \InvalidArgumentException('non-nullable predictability cannot be null');
        }
        $this->container['predictability'] = $predictability;

        return $this;
    }

    /**
     * Gets rank_balancesheet
     *
     * @return float|null
     */
    public function getRankBalancesheet()
    {
        return $this->container['rank_balancesheet'];
    }

    /**
     * Sets rank_balancesheet
     *
     * @param float|null $rank_balancesheet Financial Strength is a measure of a company's overall financial health, rated on a scale of 1 to 10. It evaluates key factors such as interest coverage, debt-to-revenue ratio, and the Altman Z-Score, among others. <br>A higher score indicates a stronger financial position, with companies rated 7 or above considered financially stable and unlikely to face distress. Conversely, a score of 3 or below suggests potential financial difficulties, indicating a higher risk of distress.
     *
     * @return self
     */
    public function setRankBalancesheet($rank_balancesheet)
    {
        if (is_null($rank_balancesheet)) {
            throw new \InvalidArgumentException('non-nullable rank_balancesheet cannot be null');
        }
        $this->container['rank_balancesheet'] = $rank_balancesheet;

        return $this;
    }

    /**
     * Gets rank_balancesheet_high
     *
     * @return float|null
     */
    public function getRankBalancesheetHigh()
    {
        return $this->container['rank_balancesheet_high'];
    }

    /**
     * Sets rank_balancesheet_high
     *
     * @param float|null $rank_balancesheet_high rank_balancesheet_high
     *
     * @return self
     */
    public function setRankBalancesheetHigh($rank_balancesheet_high)
    {
        if (is_null($rank_balancesheet_high)) {
            throw new \InvalidArgumentException('non-nullable rank_balancesheet_high cannot be null');
        }
        $this->container['rank_balancesheet_high'] = $rank_balancesheet_high;

        return $this;
    }

    /**
     * Gets rank_balancesheet_low
     *
     * @return float|null
     */
    public function getRankBalancesheetLow()
    {
        return $this->container['rank_balancesheet_low'];
    }

    /**
     * Sets rank_balancesheet_low
     *
     * @param float|null $rank_balancesheet_low rank_balancesheet_low
     *
     * @return self
     */
    public function setRankBalancesheetLow($rank_balancesheet_low)
    {
        if (is_null($rank_balancesheet_low)) {
            throw new \InvalidArgumentException('non-nullable rank_balancesheet_low cannot be null');
        }
        $this->container['rank_balancesheet_low'] = $rank_balancesheet_low;

        return $this;
    }

    /**
     * Gets rank_balancesheet_med
     *
     * @return float|null
     */
    public function getRankBalancesheetMed()
    {
        return $this->container['rank_balancesheet_med'];
    }

    /**
     * Sets rank_balancesheet_med
     *
     * @param float|null $rank_balancesheet_med rank_balancesheet_med
     *
     * @return self
     */
    public function setRankBalancesheetMed($rank_balancesheet_med)
    {
        if (is_null($rank_balancesheet_med)) {
            throw new \InvalidArgumentException('non-nullable rank_balancesheet_med cannot be null');
        }
        $this->container['rank_balancesheet_med'] = $rank_balancesheet_med;

        return $this;
    }

    /**
     * Gets rank_gf_value
     *
     * @return float|null
     */
    public function getRankGfValue()
    {
        return $this->container['rank_gf_value'];
    }

    /**
     * Sets rank_gf_value
     *
     * @param float|null $rank_gf_value GF Value Rank evaluates the exclusive GuruFocus valuation and performance of a stock, rated on a scale from 1 to 10. It is primarily determined by the price-to-GF value ratio and backtesting results. Stocks in the third lowest percentile of valuation receive the highest rank of 10. <br> A higher score indicates a stock with a relatively low valuation and substantial potential for outperformance. Conversely, a lower score often reflects stocks that are either highly overvalued or deeply undervalued, both of which tend to underperform.
     *
     * @return self
     */
    public function setRankGfValue($rank_gf_value)
    {
        if (is_null($rank_gf_value)) {
            throw new \InvalidArgumentException('non-nullable rank_gf_value cannot be null');
        }
        $this->container['rank_gf_value'] = $rank_gf_value;

        return $this;
    }

    /**
     * Gets rank_gf_value_high
     *
     * @return float|null
     */
    public function getRankGfValueHigh()
    {
        return $this->container['rank_gf_value_high'];
    }

    /**
     * Sets rank_gf_value_high
     *
     * @param float|null $rank_gf_value_high rank_gf_value_high
     *
     * @return self
     */
    public function setRankGfValueHigh($rank_gf_value_high)
    {
        if (is_null($rank_gf_value_high)) {
            throw new \InvalidArgumentException('non-nullable rank_gf_value_high cannot be null');
        }
        $this->container['rank_gf_value_high'] = $rank_gf_value_high;

        return $this;
    }

    /**
     * Gets rank_gf_value_low
     *
     * @return float|null
     */
    public function getRankGfValueLow()
    {
        return $this->container['rank_gf_value_low'];
    }

    /**
     * Sets rank_gf_value_low
     *
     * @param float|null $rank_gf_value_low rank_gf_value_low
     *
     * @return self
     */
    public function setRankGfValueLow($rank_gf_value_low)
    {
        if (is_null($rank_gf_value_low)) {
            throw new \InvalidArgumentException('non-nullable rank_gf_value_low cannot be null');
        }
        $this->container['rank_gf_value_low'] = $rank_gf_value_low;

        return $this;
    }

    /**
     * Gets rank_growth
     *
     * @return float|null
     */
    public function getRankGrowth()
    {
        return $this->container['rank_growth'];
    }

    /**
     * Sets rank_growth
     *
     * @param float|null $rank_growth Growth Rank measures the growth of a company in terms of its revenue and profitability, rated on a scale from 1 to 10. It considers key factors such as revenue and EBITDA growth rates, as well as the consistency and predictability of revenue. <br> A higher score reflects a greater ability to drive business growth, with companies considered to have strong and sustainable expansion potential. Conversely, a lower score indicates challenges in achieving consistent growth and scalability.
     *
     * @return self
     */
    public function setRankGrowth($rank_growth)
    {
        if (is_null($rank_growth)) {
            throw new \InvalidArgumentException('non-nullable rank_growth cannot be null');
        }
        $this->container['rank_growth'] = $rank_growth;

        return $this;
    }

    /**
     * Gets rank_growth_high
     *
     * @return float|null
     */
    public function getRankGrowthHigh()
    {
        return $this->container['rank_growth_high'];
    }

    /**
     * Sets rank_growth_high
     *
     * @param float|null $rank_growth_high rank_growth_high
     *
     * @return self
     */
    public function setRankGrowthHigh($rank_growth_high)
    {
        if (is_null($rank_growth_high)) {
            throw new \InvalidArgumentException('non-nullable rank_growth_high cannot be null');
        }
        $this->container['rank_growth_high'] = $rank_growth_high;

        return $this;
    }

    /**
     * Gets rank_growth_low
     *
     * @return float|null
     */
    public function getRankGrowthLow()
    {
        return $this->container['rank_growth_low'];
    }

    /**
     * Sets rank_growth_low
     *
     * @param float|null $rank_growth_low rank_growth_low
     *
     * @return self
     */
    public function setRankGrowthLow($rank_growth_low)
    {
        if (is_null($rank_growth_low)) {
            throw new \InvalidArgumentException('non-nullable rank_growth_low cannot be null');
        }
        $this->container['rank_growth_low'] = $rank_growth_low;

        return $this;
    }

    /**
     * Gets rank_growth_med
     *
     * @return float|null
     */
    public function getRankGrowthMed()
    {
        return $this->container['rank_growth_med'];
    }

    /**
     * Sets rank_growth_med
     *
     * @param float|null $rank_growth_med rank_growth_med
     *
     * @return self
     */
    public function setRankGrowthMed($rank_growth_med)
    {
        if (is_null($rank_growth_med)) {
            throw new \InvalidArgumentException('non-nullable rank_growth_med cannot be null');
        }
        $this->container['rank_growth_med'] = $rank_growth_med;

        return $this;
    }

    /**
     * Gets rank_momentum
     *
     * @return float|null
     */
    public function getRankMomentum()
    {
        return $this->container['rank_momentum'];
    }

    /**
     * Sets rank_momentum
     *
     * @param float|null $rank_momentum Momentum Rank measures the strength and persistence of a stock's price movement over time, rated on a scale of 1 to 10. It incorporates the standardized momentum ratio and several other performance metrics. Stocks in the 70th percentile of the momentum ratio receive the highest rank of 10, based on the backtesting result of the stock price performance and the momentum ratio. <br> A higher score reflects strong price momentum and indicates greater potential for superior performance. Conversely, a lower score indicates that momentum is either too high or too low, and stocks tend to underperform.
     *
     * @return self
     */
    public function setRankMomentum($rank_momentum)
    {
        if (is_null($rank_momentum)) {
            throw new \InvalidArgumentException('non-nullable rank_momentum cannot be null');
        }
        $this->container['rank_momentum'] = $rank_momentum;

        return $this;
    }

    /**
     * Gets rank_momentum_high
     *
     * @return float|null
     */
    public function getRankMomentumHigh()
    {
        return $this->container['rank_momentum_high'];
    }

    /**
     * Sets rank_momentum_high
     *
     * @param float|null $rank_momentum_high rank_momentum_high
     *
     * @return self
     */
    public function setRankMomentumHigh($rank_momentum_high)
    {
        if (is_null($rank_momentum_high)) {
            throw new \InvalidArgumentException('non-nullable rank_momentum_high cannot be null');
        }
        $this->container['rank_momentum_high'] = $rank_momentum_high;

        return $this;
    }

    /**
     * Gets rank_momentum_low
     *
     * @return float|null
     */
    public function getRankMomentumLow()
    {
        return $this->container['rank_momentum_low'];
    }

    /**
     * Sets rank_momentum_low
     *
     * @param float|null $rank_momentum_low rank_momentum_low
     *
     * @return self
     */
    public function setRankMomentumLow($rank_momentum_low)
    {
        if (is_null($rank_momentum_low)) {
            throw new \InvalidArgumentException('non-nullable rank_momentum_low cannot be null');
        }
        $this->container['rank_momentum_low'] = $rank_momentum_low;

        return $this;
    }

    /**
     * Gets rank_momentum_med
     *
     * @return float|null
     */
    public function getRankMomentumMed()
    {
        return $this->container['rank_momentum_med'];
    }

    /**
     * Sets rank_momentum_med
     *
     * @param float|null $rank_momentum_med rank_momentum_med
     *
     * @return self
     */
    public function setRankMomentumMed($rank_momentum_med)
    {
        if (is_null($rank_momentum_med)) {
            throw new \InvalidArgumentException('non-nullable rank_momentum_med cannot be null');
        }
        $this->container['rank_momentum_med'] = $rank_momentum_med;

        return $this;
    }

    /**
     * Gets rank_profitability
     *
     * @return float|null
     */
    public function getRankProfitability()
    {
        return $this->container['rank_profitability'];
    }

    /**
     * Sets rank_profitability
     *
     * @param float|null $rank_profitability Profitability Rank measures a company's profitability and financial stability, rated on a scale of 1 to 10. It takes into account critical factors such as operating margin and its growth, Piotroski F-Score, predictability, and revenue growth, among others. <br> A higher score indicates superior profitability, with companies rated 7 or above considered to have more robust and sustainable profit generation. Conversely, a score of 3 or lower suggests challenges in generating consistent profits.
     *
     * @return self
     */
    public function setRankProfitability($rank_profitability)
    {
        if (is_null($rank_profitability)) {
            throw new \InvalidArgumentException('non-nullable rank_profitability cannot be null');
        }
        $this->container['rank_profitability'] = $rank_profitability;

        return $this;
    }

    /**
     * Gets rank_profitability_high
     *
     * @return float|null
     */
    public function getRankProfitabilityHigh()
    {
        return $this->container['rank_profitability_high'];
    }

    /**
     * Sets rank_profitability_high
     *
     * @param float|null $rank_profitability_high rank_profitability_high
     *
     * @return self
     */
    public function setRankProfitabilityHigh($rank_profitability_high)
    {
        if (is_null($rank_profitability_high)) {
            throw new \InvalidArgumentException('non-nullable rank_profitability_high cannot be null');
        }
        $this->container['rank_profitability_high'] = $rank_profitability_high;

        return $this;
    }

    /**
     * Gets rank_profitability_low
     *
     * @return float|null
     */
    public function getRankProfitabilityLow()
    {
        return $this->container['rank_profitability_low'];
    }

    /**
     * Sets rank_profitability_low
     *
     * @param float|null $rank_profitability_low rank_profitability_low
     *
     * @return self
     */
    public function setRankProfitabilityLow($rank_profitability_low)
    {
        if (is_null($rank_profitability_low)) {
            throw new \InvalidArgumentException('non-nullable rank_profitability_low cannot be null');
        }
        $this->container['rank_profitability_low'] = $rank_profitability_low;

        return $this;
    }

    /**
     * Gets rank_profitability_med
     *
     * @return float|null
     */
    public function getRankProfitabilityMed()
    {
        return $this->container['rank_profitability_med'];
    }

    /**
     * Sets rank_profitability_med
     *
     * @param float|null $rank_profitability_med rank_profitability_med
     *
     * @return self
     */
    public function setRankProfitabilityMed($rank_profitability_med)
    {
        if (is_null($rank_profitability_med)) {
            throw new \InvalidArgumentException('non-nullable rank_profitability_med cannot be null');
        }
        $this->container['rank_profitability_med'] = $rank_profitability_med;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


