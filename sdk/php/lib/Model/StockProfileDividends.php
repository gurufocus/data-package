<?php
/**
 * StockProfileDividends
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gurufocus Data Package API
 *
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * StockProfileDividends Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StockProfileDividends implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'stock_profile_dividends';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dividend2_ffo' => 'float',
        'forward_dividend' => 'float',
        'forward_dividend_yield' => 'float',
        'dividend_freq' => 'float',
        'dividend_months' => 'float',
        'dividend_startyear' => 'string',
        'dividend_startyear_real' => 'string',
        'increase_dividend_startyear' => 'string',
        'next_dividend_amount' => 'string',
        'next_dividend_date' => 'string',
        'payout' => 'float',
        'payout_high' => 'float',
        'payout_low' => 'float',
        'payout_med' => 'float',
        'ttm_dividend' => 'float',
        'yield' => 'float',
        'yield_high' => 'float',
        'yield_low' => 'float',
        'yield_med' => 'float',
        'yield_on_cost' => 'float',
        'yield_on_cost_high' => 'float',
        'yield_on_cost_low' => 'float',
        'yield_on_cost_med' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dividend2_ffo' => null,
        'forward_dividend' => null,
        'forward_dividend_yield' => null,
        'dividend_freq' => null,
        'dividend_months' => null,
        'dividend_startyear' => null,
        'dividend_startyear_real' => null,
        'increase_dividend_startyear' => null,
        'next_dividend_amount' => null,
        'next_dividend_date' => null,
        'payout' => null,
        'payout_high' => null,
        'payout_low' => null,
        'payout_med' => null,
        'ttm_dividend' => null,
        'yield' => null,
        'yield_high' => null,
        'yield_low' => null,
        'yield_med' => null,
        'yield_on_cost' => null,
        'yield_on_cost_high' => null,
        'yield_on_cost_low' => null,
        'yield_on_cost_med' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'dividend2_ffo' => false,
        'forward_dividend' => false,
        'forward_dividend_yield' => false,
        'dividend_freq' => false,
        'dividend_months' => false,
        'dividend_startyear' => false,
        'dividend_startyear_real' => false,
        'increase_dividend_startyear' => false,
        'next_dividend_amount' => false,
        'next_dividend_date' => false,
        'payout' => false,
        'payout_high' => false,
        'payout_low' => false,
        'payout_med' => false,
        'ttm_dividend' => false,
        'yield' => false,
        'yield_high' => false,
        'yield_low' => false,
        'yield_med' => false,
        'yield_on_cost' => false,
        'yield_on_cost_high' => false,
        'yield_on_cost_low' => false,
        'yield_on_cost_med' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dividend2_ffo' => 'Dividend2FFO',
        'forward_dividend' => 'ForwardDividend',
        'forward_dividend_yield' => 'ForwardDividendYield',
        'dividend_freq' => 'dividend_freq',
        'dividend_months' => 'dividend_months',
        'dividend_startyear' => 'dividend_startyear',
        'dividend_startyear_real' => 'dividend_startyear_real',
        'increase_dividend_startyear' => 'increase_dividend_startyear',
        'next_dividend_amount' => 'next_dividend_amount',
        'next_dividend_date' => 'next_dividend_date',
        'payout' => 'payout',
        'payout_high' => 'payout_high',
        'payout_low' => 'payout_low',
        'payout_med' => 'payout_med',
        'ttm_dividend' => 'ttm_dividend',
        'yield' => 'yield',
        'yield_high' => 'yield_high',
        'yield_low' => 'yield_low',
        'yield_med' => 'yield_med',
        'yield_on_cost' => 'yield_on_cost',
        'yield_on_cost_high' => 'yield_on_cost_high',
        'yield_on_cost_low' => 'yield_on_cost_low',
        'yield_on_cost_med' => 'yield_on_cost_med'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dividend2_ffo' => 'setDividend2Ffo',
        'forward_dividend' => 'setForwardDividend',
        'forward_dividend_yield' => 'setForwardDividendYield',
        'dividend_freq' => 'setDividendFreq',
        'dividend_months' => 'setDividendMonths',
        'dividend_startyear' => 'setDividendStartyear',
        'dividend_startyear_real' => 'setDividendStartyearReal',
        'increase_dividend_startyear' => 'setIncreaseDividendStartyear',
        'next_dividend_amount' => 'setNextDividendAmount',
        'next_dividend_date' => 'setNextDividendDate',
        'payout' => 'setPayout',
        'payout_high' => 'setPayoutHigh',
        'payout_low' => 'setPayoutLow',
        'payout_med' => 'setPayoutMed',
        'ttm_dividend' => 'setTtmDividend',
        'yield' => 'setYield',
        'yield_high' => 'setYieldHigh',
        'yield_low' => 'setYieldLow',
        'yield_med' => 'setYieldMed',
        'yield_on_cost' => 'setYieldOnCost',
        'yield_on_cost_high' => 'setYieldOnCostHigh',
        'yield_on_cost_low' => 'setYieldOnCostLow',
        'yield_on_cost_med' => 'setYieldOnCostMed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dividend2_ffo' => 'getDividend2Ffo',
        'forward_dividend' => 'getForwardDividend',
        'forward_dividend_yield' => 'getForwardDividendYield',
        'dividend_freq' => 'getDividendFreq',
        'dividend_months' => 'getDividendMonths',
        'dividend_startyear' => 'getDividendStartyear',
        'dividend_startyear_real' => 'getDividendStartyearReal',
        'increase_dividend_startyear' => 'getIncreaseDividendStartyear',
        'next_dividend_amount' => 'getNextDividendAmount',
        'next_dividend_date' => 'getNextDividendDate',
        'payout' => 'getPayout',
        'payout_high' => 'getPayoutHigh',
        'payout_low' => 'getPayoutLow',
        'payout_med' => 'getPayoutMed',
        'ttm_dividend' => 'getTtmDividend',
        'yield' => 'getYield',
        'yield_high' => 'getYieldHigh',
        'yield_low' => 'getYieldLow',
        'yield_med' => 'getYieldMed',
        'yield_on_cost' => 'getYieldOnCost',
        'yield_on_cost_high' => 'getYieldOnCostHigh',
        'yield_on_cost_low' => 'getYieldOnCostLow',
        'yield_on_cost_med' => 'getYieldOnCostMed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('dividend2_ffo', $data ?? [], null);
        $this->setIfExists('forward_dividend', $data ?? [], null);
        $this->setIfExists('forward_dividend_yield', $data ?? [], null);
        $this->setIfExists('dividend_freq', $data ?? [], null);
        $this->setIfExists('dividend_months', $data ?? [], null);
        $this->setIfExists('dividend_startyear', $data ?? [], null);
        $this->setIfExists('dividend_startyear_real', $data ?? [], null);
        $this->setIfExists('increase_dividend_startyear', $data ?? [], null);
        $this->setIfExists('next_dividend_amount', $data ?? [], null);
        $this->setIfExists('next_dividend_date', $data ?? [], null);
        $this->setIfExists('payout', $data ?? [], null);
        $this->setIfExists('payout_high', $data ?? [], null);
        $this->setIfExists('payout_low', $data ?? [], null);
        $this->setIfExists('payout_med', $data ?? [], null);
        $this->setIfExists('ttm_dividend', $data ?? [], null);
        $this->setIfExists('yield', $data ?? [], null);
        $this->setIfExists('yield_high', $data ?? [], null);
        $this->setIfExists('yield_low', $data ?? [], null);
        $this->setIfExists('yield_med', $data ?? [], null);
        $this->setIfExists('yield_on_cost', $data ?? [], null);
        $this->setIfExists('yield_on_cost_high', $data ?? [], null);
        $this->setIfExists('yield_on_cost_low', $data ?? [], null);
        $this->setIfExists('yield_on_cost_med', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dividend2_ffo
     *
     * @return float|null
     */
    public function getDividend2Ffo()
    {
        return $this->container['dividend2_ffo'];
    }

    /**
     * Sets dividend2_ffo
     *
     * @param float|null $dividend2_ffo Cash dividends declared on the company's primary issue of common stock as a percent of funds from operations, on a per-share basis
     *
     * @return self
     */
    public function setDividend2Ffo($dividend2_ffo)
    {
        if (is_null($dividend2_ffo)) {
            throw new \InvalidArgumentException('non-nullable dividend2_ffo cannot be null');
        }
        $this->container['dividend2_ffo'] = $dividend2_ffo;

        return $this;
    }

    /**
     * Gets forward_dividend
     *
     * @return float|null
     */
    public function getForwardDividend()
    {
        return $this->container['forward_dividend'];
    }

    /**
     * Sets forward_dividend
     *
     * @param float|null $forward_dividend The aggregate amount of expected dividends for the next 12 months
     *
     * @return self
     */
    public function setForwardDividend($forward_dividend)
    {
        if (is_null($forward_dividend)) {
            throw new \InvalidArgumentException('non-nullable forward_dividend cannot be null');
        }
        $this->container['forward_dividend'] = $forward_dividend;

        return $this;
    }

    /**
     * Gets forward_dividend_yield
     *
     * @return float|null
     */
    public function getForwardDividendYield()
    {
        return $this->container['forward_dividend_yield'];
    }

    /**
     * Sets forward_dividend_yield
     *
     * @param float|null $forward_dividend_yield A forward dividend yield is an estimation of a year's dividend expressed as a percentage of the current stock price.
     *
     * @return self
     */
    public function setForwardDividendYield($forward_dividend_yield)
    {
        if (is_null($forward_dividend_yield)) {
            throw new \InvalidArgumentException('non-nullable forward_dividend_yield cannot be null');
        }
        $this->container['forward_dividend_yield'] = $forward_dividend_yield;

        return $this;
    }

    /**
     * Gets dividend_freq
     *
     * @return float|null
     */
    public function getDividendFreq()
    {
        return $this->container['dividend_freq'];
    }

    /**
     * Sets dividend_freq
     *
     * @param float|null $dividend_freq The number of times a company pays a dividend per year. Example: 4 means quarterly.
     *
     * @return self
     */
    public function setDividendFreq($dividend_freq)
    {
        if (is_null($dividend_freq)) {
            throw new \InvalidArgumentException('non-nullable dividend_freq cannot be null');
        }
        $this->container['dividend_freq'] = $dividend_freq;

        return $this;
    }

    /**
     * Gets dividend_months
     *
     * @return float|null
     */
    public function getDividendMonths()
    {
        return $this->container['dividend_months'];
    }

    /**
     * Sets dividend_months
     *
     * @param float|null $dividend_months The months where the company pays its dividend.
     *
     * @return self
     */
    public function setDividendMonths($dividend_months)
    {
        if (is_null($dividend_months)) {
            throw new \InvalidArgumentException('non-nullable dividend_months cannot be null');
        }
        $this->container['dividend_months'] = $dividend_months;

        return $this;
    }

    /**
     * Gets dividend_startyear
     *
     * @return string|null
     */
    public function getDividendStartyear()
    {
        return $this->container['dividend_startyear'];
    }

    /**
     * Sets dividend_startyear
     *
     * @param string|null $dividend_startyear The starting year for dividends that either remain consistent or increase in the subsequent years.
     *
     * @return self
     */
    public function setDividendStartyear($dividend_startyear)
    {
        if (is_null($dividend_startyear)) {
            throw new \InvalidArgumentException('non-nullable dividend_startyear cannot be null');
        }
        $this->container['dividend_startyear'] = $dividend_startyear;

        return $this;
    }

    /**
     * Gets dividend_startyear_real
     *
     * @return string|null
     */
    public function getDividendStartyearReal()
    {
        return $this->container['dividend_startyear_real'];
    }

    /**
     * Sets dividend_startyear_real
     *
     * @param string|null $dividend_startyear_real The starting year for the first dividend payments available on GuruFocus.
     *
     * @return self
     */
    public function setDividendStartyearReal($dividend_startyear_real)
    {
        if (is_null($dividend_startyear_real)) {
            throw new \InvalidArgumentException('non-nullable dividend_startyear_real cannot be null');
        }
        $this->container['dividend_startyear_real'] = $dividend_startyear_real;

        return $this;
    }

    /**
     * Gets increase_dividend_startyear
     *
     * @return string|null
     */
    public function getIncreaseDividendStartyear()
    {
        return $this->container['increase_dividend_startyear'];
    }

    /**
     * Sets increase_dividend_startyear
     *
     * @param string|null $increase_dividend_startyear The starting year from which dividends have consistently increased in subsequent years.
     *
     * @return self
     */
    public function setIncreaseDividendStartyear($increase_dividend_startyear)
    {
        if (is_null($increase_dividend_startyear)) {
            throw new \InvalidArgumentException('non-nullable increase_dividend_startyear cannot be null');
        }
        $this->container['increase_dividend_startyear'] = $increase_dividend_startyear;

        return $this;
    }

    /**
     * Gets next_dividend_amount
     *
     * @return string|null
     */
    public function getNextDividendAmount()
    {
        return $this->container['next_dividend_amount'];
    }

    /**
     * Sets next_dividend_amount
     *
     * @param string|null $next_dividend_amount The amount of the company's next dividend
     *
     * @return self
     */
    public function setNextDividendAmount($next_dividend_amount)
    {
        if (is_null($next_dividend_amount)) {
            throw new \InvalidArgumentException('non-nullable next_dividend_amount cannot be null');
        }
        $this->container['next_dividend_amount'] = $next_dividend_amount;

        return $this;
    }

    /**
     * Gets next_dividend_date
     *
     * @return string|null
     */
    public function getNextDividendDate()
    {
        return $this->container['next_dividend_date'];
    }

    /**
     * Sets next_dividend_date
     *
     * @param string|null $next_dividend_date The next date the company goes ex-dividend.
     *
     * @return self
     */
    public function setNextDividendDate($next_dividend_date)
    {
        if (is_null($next_dividend_date)) {
            throw new \InvalidArgumentException('non-nullable next_dividend_date cannot be null');
        }
        $this->container['next_dividend_date'] = $next_dividend_date;

        return $this;
    }

    /**
     * Gets payout
     *
     * @return float|null
     */
    public function getPayout()
    {
        return $this->container['payout'];
    }

    /**
     * Sets payout
     *
     * @param float|null $payout The dividend payout ratio is the ratio of the total amount of dividends paid out to shareholders relative to the net income of the company.
     *
     * @return self
     */
    public function setPayout($payout)
    {
        if (is_null($payout)) {
            throw new \InvalidArgumentException('non-nullable payout cannot be null');
        }
        $this->container['payout'] = $payout;

        return $this;
    }

    /**
     * Gets payout_high
     *
     * @return float|null
     */
    public function getPayoutHigh()
    {
        return $this->container['payout_high'];
    }

    /**
     * Sets payout_high
     *
     * @param float|null $payout_high The dividend payout ratio is the ratio of the total amount of dividends paid out to shareholders relative to the net income of the company.
     *
     * @return self
     */
    public function setPayoutHigh($payout_high)
    {
        if (is_null($payout_high)) {
            throw new \InvalidArgumentException('non-nullable payout_high cannot be null');
        }
        $this->container['payout_high'] = $payout_high;

        return $this;
    }

    /**
     * Gets payout_low
     *
     * @return float|null
     */
    public function getPayoutLow()
    {
        return $this->container['payout_low'];
    }

    /**
     * Sets payout_low
     *
     * @param float|null $payout_low The dividend payout ratio is the ratio of the total amount of dividends paid out to shareholders relative to the net income of the company.
     *
     * @return self
     */
    public function setPayoutLow($payout_low)
    {
        if (is_null($payout_low)) {
            throw new \InvalidArgumentException('non-nullable payout_low cannot be null');
        }
        $this->container['payout_low'] = $payout_low;

        return $this;
    }

    /**
     * Gets payout_med
     *
     * @return float|null
     */
    public function getPayoutMed()
    {
        return $this->container['payout_med'];
    }

    /**
     * Sets payout_med
     *
     * @param float|null $payout_med The dividend payout ratio is the ratio of the total amount of dividends paid out to shareholders relative to the net income of the company.
     *
     * @return self
     */
    public function setPayoutMed($payout_med)
    {
        if (is_null($payout_med)) {
            throw new \InvalidArgumentException('non-nullable payout_med cannot be null');
        }
        $this->container['payout_med'] = $payout_med;

        return $this;
    }

    /**
     * Gets ttm_dividend
     *
     * @return float|null
     */
    public function getTtmDividend()
    {
        return $this->container['ttm_dividend'];
    }

    /**
     * Sets ttm_dividend
     *
     * @param float|null $ttm_dividend The aggregate amount of dividends over the trailing 12 months
     *
     * @return self
     */
    public function setTtmDividend($ttm_dividend)
    {
        if (is_null($ttm_dividend)) {
            throw new \InvalidArgumentException('non-nullable ttm_dividend cannot be null');
        }
        $this->container['ttm_dividend'] = $ttm_dividend;

        return $this;
    }

    /**
     * Gets yield
     *
     * @return float|null
     */
    public function getYield()
    {
        return $this->container['yield'];
    }

    /**
     * Sets yield
     *
     * @param float|null $yield The dividend yield is the ratio of a company's annual dividend compared to its share price.
     *
     * @return self
     */
    public function setYield($yield)
    {
        if (is_null($yield)) {
            throw new \InvalidArgumentException('non-nullable yield cannot be null');
        }
        $this->container['yield'] = $yield;

        return $this;
    }

    /**
     * Gets yield_high
     *
     * @return float|null
     */
    public function getYieldHigh()
    {
        return $this->container['yield_high'];
    }

    /**
     * Sets yield_high
     *
     * @param float|null $yield_high The dividend yield is the ratio of a company's annual dividend compared to its share price.
     *
     * @return self
     */
    public function setYieldHigh($yield_high)
    {
        if (is_null($yield_high)) {
            throw new \InvalidArgumentException('non-nullable yield_high cannot be null');
        }
        $this->container['yield_high'] = $yield_high;

        return $this;
    }

    /**
     * Gets yield_low
     *
     * @return float|null
     */
    public function getYieldLow()
    {
        return $this->container['yield_low'];
    }

    /**
     * Sets yield_low
     *
     * @param float|null $yield_low The dividend yield is the ratio of a company's annual dividend compared to its share price.
     *
     * @return self
     */
    public function setYieldLow($yield_low)
    {
        if (is_null($yield_low)) {
            throw new \InvalidArgumentException('non-nullable yield_low cannot be null');
        }
        $this->container['yield_low'] = $yield_low;

        return $this;
    }

    /**
     * Gets yield_med
     *
     * @return float|null
     */
    public function getYieldMed()
    {
        return $this->container['yield_med'];
    }

    /**
     * Sets yield_med
     *
     * @param float|null $yield_med The dividend yield is the ratio of a company's annual dividend compared to its share price.
     *
     * @return self
     */
    public function setYieldMed($yield_med)
    {
        if (is_null($yield_med)) {
            throw new \InvalidArgumentException('non-nullable yield_med cannot be null');
        }
        $this->container['yield_med'] = $yield_med;

        return $this;
    }

    /**
     * Gets yield_on_cost
     *
     * @return float|null
     */
    public function getYieldOnCost()
    {
        return $this->container['yield_on_cost'];
    }

    /**
     * Sets yield_on_cost
     *
     * @param float|null $yield_on_cost Yield on Cost (YOC) is the annual dividend rate of a security, divided by its average cost basis.
     *
     * @return self
     */
    public function setYieldOnCost($yield_on_cost)
    {
        if (is_null($yield_on_cost)) {
            throw new \InvalidArgumentException('non-nullable yield_on_cost cannot be null');
        }
        $this->container['yield_on_cost'] = $yield_on_cost;

        return $this;
    }

    /**
     * Gets yield_on_cost_high
     *
     * @return float|null
     */
    public function getYieldOnCostHigh()
    {
        return $this->container['yield_on_cost_high'];
    }

    /**
     * Sets yield_on_cost_high
     *
     * @param float|null $yield_on_cost_high The highest yield-on-cost over the past 10 years
     *
     * @return self
     */
    public function setYieldOnCostHigh($yield_on_cost_high)
    {
        if (is_null($yield_on_cost_high)) {
            throw new \InvalidArgumentException('non-nullable yield_on_cost_high cannot be null');
        }
        $this->container['yield_on_cost_high'] = $yield_on_cost_high;

        return $this;
    }

    /**
     * Gets yield_on_cost_low
     *
     * @return float|null
     */
    public function getYieldOnCostLow()
    {
        return $this->container['yield_on_cost_low'];
    }

    /**
     * Sets yield_on_cost_low
     *
     * @param float|null $yield_on_cost_low The lowest yield-on-cost over the past 10 years
     *
     * @return self
     */
    public function setYieldOnCostLow($yield_on_cost_low)
    {
        if (is_null($yield_on_cost_low)) {
            throw new \InvalidArgumentException('non-nullable yield_on_cost_low cannot be null');
        }
        $this->container['yield_on_cost_low'] = $yield_on_cost_low;

        return $this;
    }

    /**
     * Gets yield_on_cost_med
     *
     * @return float|null
     */
    public function getYieldOnCostMed()
    {
        return $this->container['yield_on_cost_med'];
    }

    /**
     * Sets yield_on_cost_med
     *
     * @param float|null $yield_on_cost_med The median yield-on-cost over the past 10 years
     *
     * @return self
     */
    public function setYieldOnCostMed($yield_on_cost_med)
    {
        if (is_null($yield_on_cost_med)) {
            throw new \InvalidArgumentException('non-nullable yield_on_cost_med cannot be null');
        }
        $this->container['yield_on_cost_med'] = $yield_on_cost_med;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


