<?php
/**
 * FundamentalsINOREITNODIRECTIncomeStatement
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gurufocus Data Package API
 *
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FundamentalsINOREITNODIRECTIncomeStatement Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FundamentalsINOREITNODIRECTIncomeStatement implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'fundamentals_I_NO_REIT_NO_DIRECT_income_statement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'depreciation_depletion_amortization' => 'float',
        'ebit' => 'float',
        'ebitda' => 'float',
        'ebitda_margin' => 'float',
        'eps_basic' => 'float',
        'eps_diluated' => 'float',
        'interest_income' => 'float',
        'is_fee_revenue_and_other_income' => 'float',
        'is_interest_expense' => 'float',
        'is_net_investment_income' => 'float',
        'is_net_policyholder_benefits_and_claims' => 'float',
        'is_other_expense_insurance' => 'float',
        'is_policy_acquisition_expense' => 'float',
        'is_preferred_dividends' => 'float',
        'is_total_premiums_earned' => 'float',
        'net_income' => 'float',
        'net_income_continuing_operations' => 'float',
        'net_income_discontinued_operations' => 'float',
        'net_income_including_noncontrolling_interests' => 'float',
        'net_margin' => 'float',
        'other_income_minority_interest' => 'float',
        'other_net_income_loss' => 'float',
        'pretax_income' => 'float',
        'revenue' => 'float',
        'selling_general_admin_expense' => 'float',
        'shares_outstanding' => 'float',
        'tax_provision' => 'float',
        'tax_rate' => 'float',
        'total_expenses_insurance' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'depreciation_depletion_amortization' => null,
        'ebit' => null,
        'ebitda' => null,
        'ebitda_margin' => null,
        'eps_basic' => null,
        'eps_diluated' => null,
        'interest_income' => null,
        'is_fee_revenue_and_other_income' => null,
        'is_interest_expense' => null,
        'is_net_investment_income' => null,
        'is_net_policyholder_benefits_and_claims' => null,
        'is_other_expense_insurance' => null,
        'is_policy_acquisition_expense' => null,
        'is_preferred_dividends' => null,
        'is_total_premiums_earned' => null,
        'net_income' => null,
        'net_income_continuing_operations' => null,
        'net_income_discontinued_operations' => null,
        'net_income_including_noncontrolling_interests' => null,
        'net_margin' => null,
        'other_income_minority_interest' => null,
        'other_net_income_loss' => null,
        'pretax_income' => null,
        'revenue' => null,
        'selling_general_admin_expense' => null,
        'shares_outstanding' => null,
        'tax_provision' => null,
        'tax_rate' => null,
        'total_expenses_insurance' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'depreciation_depletion_amortization' => false,
        'ebit' => false,
        'ebitda' => false,
        'ebitda_margin' => false,
        'eps_basic' => false,
        'eps_diluated' => false,
        'interest_income' => false,
        'is_fee_revenue_and_other_income' => false,
        'is_interest_expense' => false,
        'is_net_investment_income' => false,
        'is_net_policyholder_benefits_and_claims' => false,
        'is_other_expense_insurance' => false,
        'is_policy_acquisition_expense' => false,
        'is_preferred_dividends' => false,
        'is_total_premiums_earned' => false,
        'net_income' => false,
        'net_income_continuing_operations' => false,
        'net_income_discontinued_operations' => false,
        'net_income_including_noncontrolling_interests' => false,
        'net_margin' => false,
        'other_income_minority_interest' => false,
        'other_net_income_loss' => false,
        'pretax_income' => false,
        'revenue' => false,
        'selling_general_admin_expense' => false,
        'shares_outstanding' => false,
        'tax_provision' => false,
        'tax_rate' => false,
        'total_expenses_insurance' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'depreciation_depletion_amortization' => 'depreciation_depletion_amortization',
        'ebit' => 'ebit',
        'ebitda' => 'ebitda',
        'ebitda_margin' => 'ebitda_margin',
        'eps_basic' => 'eps_basic',
        'eps_diluated' => 'eps_diluated',
        'interest_income' => 'interest_income',
        'is_fee_revenue_and_other_income' => 'is_fee_revenue_and_other_income',
        'is_interest_expense' => 'is_interest_expense',
        'is_net_investment_income' => 'is_net_investment_income',
        'is_net_policyholder_benefits_and_claims' => 'is_net_policyholder_benefits_and_claims',
        'is_other_expense_insurance' => 'is_other_expense_insurance',
        'is_policy_acquisition_expense' => 'is_policy_acquisition_expense',
        'is_preferred_dividends' => 'is_preferred_dividends',
        'is_total_premiums_earned' => 'is_total_premiums_earned',
        'net_income' => 'net_income',
        'net_income_continuing_operations' => 'net_income_continuing_operations',
        'net_income_discontinued_operations' => 'net_income_discontinued_operations',
        'net_income_including_noncontrolling_interests' => 'net_income_including_noncontrolling_interests',
        'net_margin' => 'net_margin',
        'other_income_minority_interest' => 'other_income_minority_interest',
        'other_net_income_loss' => 'other_net_income_loss',
        'pretax_income' => 'pretax_income',
        'revenue' => 'revenue',
        'selling_general_admin_expense' => 'selling_general_admin_expense',
        'shares_outstanding' => 'shares_outstanding',
        'tax_provision' => 'tax_provision',
        'tax_rate' => 'tax_rate',
        'total_expenses_insurance' => 'total_expenses_insurance'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'depreciation_depletion_amortization' => 'setDepreciationDepletionAmortization',
        'ebit' => 'setEbit',
        'ebitda' => 'setEbitda',
        'ebitda_margin' => 'setEbitdaMargin',
        'eps_basic' => 'setEpsBasic',
        'eps_diluated' => 'setEpsDiluated',
        'interest_income' => 'setInterestIncome',
        'is_fee_revenue_and_other_income' => 'setIsFeeRevenueAndOtherIncome',
        'is_interest_expense' => 'setIsInterestExpense',
        'is_net_investment_income' => 'setIsNetInvestmentIncome',
        'is_net_policyholder_benefits_and_claims' => 'setIsNetPolicyholderBenefitsAndClaims',
        'is_other_expense_insurance' => 'setIsOtherExpenseInsurance',
        'is_policy_acquisition_expense' => 'setIsPolicyAcquisitionExpense',
        'is_preferred_dividends' => 'setIsPreferredDividends',
        'is_total_premiums_earned' => 'setIsTotalPremiumsEarned',
        'net_income' => 'setNetIncome',
        'net_income_continuing_operations' => 'setNetIncomeContinuingOperations',
        'net_income_discontinued_operations' => 'setNetIncomeDiscontinuedOperations',
        'net_income_including_noncontrolling_interests' => 'setNetIncomeIncludingNoncontrollingInterests',
        'net_margin' => 'setNetMargin',
        'other_income_minority_interest' => 'setOtherIncomeMinorityInterest',
        'other_net_income_loss' => 'setOtherNetIncomeLoss',
        'pretax_income' => 'setPretaxIncome',
        'revenue' => 'setRevenue',
        'selling_general_admin_expense' => 'setSellingGeneralAdminExpense',
        'shares_outstanding' => 'setSharesOutstanding',
        'tax_provision' => 'setTaxProvision',
        'tax_rate' => 'setTaxRate',
        'total_expenses_insurance' => 'setTotalExpensesInsurance'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'depreciation_depletion_amortization' => 'getDepreciationDepletionAmortization',
        'ebit' => 'getEbit',
        'ebitda' => 'getEbitda',
        'ebitda_margin' => 'getEbitdaMargin',
        'eps_basic' => 'getEpsBasic',
        'eps_diluated' => 'getEpsDiluated',
        'interest_income' => 'getInterestIncome',
        'is_fee_revenue_and_other_income' => 'getIsFeeRevenueAndOtherIncome',
        'is_interest_expense' => 'getIsInterestExpense',
        'is_net_investment_income' => 'getIsNetInvestmentIncome',
        'is_net_policyholder_benefits_and_claims' => 'getIsNetPolicyholderBenefitsAndClaims',
        'is_other_expense_insurance' => 'getIsOtherExpenseInsurance',
        'is_policy_acquisition_expense' => 'getIsPolicyAcquisitionExpense',
        'is_preferred_dividends' => 'getIsPreferredDividends',
        'is_total_premiums_earned' => 'getIsTotalPremiumsEarned',
        'net_income' => 'getNetIncome',
        'net_income_continuing_operations' => 'getNetIncomeContinuingOperations',
        'net_income_discontinued_operations' => 'getNetIncomeDiscontinuedOperations',
        'net_income_including_noncontrolling_interests' => 'getNetIncomeIncludingNoncontrollingInterests',
        'net_margin' => 'getNetMargin',
        'other_income_minority_interest' => 'getOtherIncomeMinorityInterest',
        'other_net_income_loss' => 'getOtherNetIncomeLoss',
        'pretax_income' => 'getPretaxIncome',
        'revenue' => 'getRevenue',
        'selling_general_admin_expense' => 'getSellingGeneralAdminExpense',
        'shares_outstanding' => 'getSharesOutstanding',
        'tax_provision' => 'getTaxProvision',
        'tax_rate' => 'getTaxRate',
        'total_expenses_insurance' => 'getTotalExpensesInsurance'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('depreciation_depletion_amortization', $data ?? [], null);
        $this->setIfExists('ebit', $data ?? [], null);
        $this->setIfExists('ebitda', $data ?? [], null);
        $this->setIfExists('ebitda_margin', $data ?? [], null);
        $this->setIfExists('eps_basic', $data ?? [], null);
        $this->setIfExists('eps_diluated', $data ?? [], null);
        $this->setIfExists('interest_income', $data ?? [], null);
        $this->setIfExists('is_fee_revenue_and_other_income', $data ?? [], null);
        $this->setIfExists('is_interest_expense', $data ?? [], null);
        $this->setIfExists('is_net_investment_income', $data ?? [], null);
        $this->setIfExists('is_net_policyholder_benefits_and_claims', $data ?? [], null);
        $this->setIfExists('is_other_expense_insurance', $data ?? [], null);
        $this->setIfExists('is_policy_acquisition_expense', $data ?? [], null);
        $this->setIfExists('is_preferred_dividends', $data ?? [], null);
        $this->setIfExists('is_total_premiums_earned', $data ?? [], null);
        $this->setIfExists('net_income', $data ?? [], null);
        $this->setIfExists('net_income_continuing_operations', $data ?? [], null);
        $this->setIfExists('net_income_discontinued_operations', $data ?? [], null);
        $this->setIfExists('net_income_including_noncontrolling_interests', $data ?? [], null);
        $this->setIfExists('net_margin', $data ?? [], null);
        $this->setIfExists('other_income_minority_interest', $data ?? [], null);
        $this->setIfExists('other_net_income_loss', $data ?? [], null);
        $this->setIfExists('pretax_income', $data ?? [], null);
        $this->setIfExists('revenue', $data ?? [], null);
        $this->setIfExists('selling_general_admin_expense', $data ?? [], null);
        $this->setIfExists('shares_outstanding', $data ?? [], null);
        $this->setIfExists('tax_provision', $data ?? [], null);
        $this->setIfExists('tax_rate', $data ?? [], null);
        $this->setIfExists('total_expenses_insurance', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets depreciation_depletion_amortization
     *
     * @return float|null
     */
    public function getDepreciationDepletionAmortization()
    {
        return $this->container['depreciation_depletion_amortization'];
    }

    /**
     * Sets depreciation_depletion_amortization
     *
     * @param float|null $depreciation_depletion_amortization <p>{{DDA}} is a present expense that accounts for the past cost of an asset that is now providing benefits. Depletion and amortization are synonyms for depreciation. Generally: The term depreciation is used when discussing man made tangible assets. The term depletion is used when discussing natural tangible assets. The term amortization is used when discussing intangible assets</p>
     *
     * @return self
     */
    public function setDepreciationDepletionAmortization($depreciation_depletion_amortization)
    {
        if (is_null($depreciation_depletion_amortization)) {
            throw new \InvalidArgumentException('non-nullable depreciation_depletion_amortization cannot be null');
        }
        $this->container['depreciation_depletion_amortization'] = $depreciation_depletion_amortization;

        return $this;
    }

    /**
     * Gets ebit
     *
     * @return float|null
     */
    public function getEbit()
    {
        return $this->container['ebit'];
    }

    /**
     * Sets ebit
     *
     * @param float|null $ebit In accounting and finance, earnings before interest and taxes (EBIT), is a measure of a firm's profit that includes all expenses except interest and income tax expenses. It is the difference between operating revenues and operating expenses.
     *
     * @return self
     */
    public function setEbit($ebit)
    {
        if (is_null($ebit)) {
            throw new \InvalidArgumentException('non-nullable ebit cannot be null');
        }
        $this->container['ebit'] = $ebit;

        return $this;
    }

    /**
     * Gets ebitda
     *
     * @return float|null
     */
    public function getEbitda()
    {
        return $this->container['ebitda'];
    }

    /**
     * Sets ebitda
     *
     * @param float|null $ebitda <p>Earnings Before Interest, Taxes, Depreciation, and Amortization ({{EBITDA}}) is what the company earns before it expenses interest, taxes, depreciation and amortization. <br>{{EBITDA}} is calculated as {{EBITDA}} = {{Revenue}} - {{COGS}} - {{SGA}} - {{RD}} = {{Gross_Profit}} - {{SGA}} - {{RD}} <br> The use of {{EBITDA}} is an attempt to make the results of different companies more comparable and uniform.</p>
     *
     * @return self
     */
    public function setEbitda($ebitda)
    {
        if (is_null($ebitda)) {
            throw new \InvalidArgumentException('non-nullable ebitda cannot be null');
        }
        $this->container['ebitda'] = $ebitda;

        return $this;
    }

    /**
     * Gets ebitda_margin
     *
     * @return float|null
     */
    public function getEbitdaMargin()
    {
        return $this->container['ebitda_margin'];
    }

    /**
     * Sets ebitda_margin
     *
     * @param float|null $ebitda_margin ebitda_margin
     *
     * @return self
     */
    public function setEbitdaMargin($ebitda_margin)
    {
        if (is_null($ebitda_margin)) {
            throw new \InvalidArgumentException('non-nullable ebitda_margin cannot be null');
        }
        $this->container['ebitda_margin'] = $ebitda_margin;

        return $this;
    }

    /**
     * Gets eps_basic
     *
     * @return float|null
     */
    public function getEpsBasic()
    {
        return $this->container['eps_basic'];
    }

    /**
     * Sets eps_basic
     *
     * @param float|null $eps_basic <p>{{eps_basic}} is a rough measurement of the amount of a company's profit that can be allocated to one share of its stock. {{eps_basic}} do not factor in the dilutive effects on convertible securities. <br>{{eps_basic}} is calculated as: {{eps_basic}} = ({{Net_Income}} - {{IS_preferred_dividends}}) / {{shares_basic}}</p>
     *
     * @return self
     */
    public function setEpsBasic($eps_basic)
    {
        if (is_null($eps_basic)) {
            throw new \InvalidArgumentException('non-nullable eps_basic cannot be null');
        }
        $this->container['eps_basic'] = $eps_basic;

        return $this;
    }

    /**
     * Gets eps_diluated
     *
     * @return float|null
     */
    public function getEpsDiluated()
    {
        return $this->container['eps_diluated'];
    }

    /**
     * Sets eps_diluated
     *
     * @param float|null $eps_diluated <p>{{eps_diluated}} is a rough measurement of the amount of a company's profit that can be allocated to one share of its stock. {{eps_diluated}} takes into account all of the outstanding dilutive securities that could potentially be exercised (such as stock options and convertible {{Preferred_Stock}}) and shows how such an action would impact {{per_share_eps}}. <br>{{eps_diluated}} is calculated as: {{eps_diluated}} = ({{Net_Income}} - {{IS_preferred_dividends}}) / {{Shares_Outstanding}}</p>
     *
     * @return self
     */
    public function setEpsDiluated($eps_diluated)
    {
        if (is_null($eps_diluated)) {
            throw new \InvalidArgumentException('non-nullable eps_diluated cannot be null');
        }
        $this->container['eps_diluated'] = $eps_diluated;

        return $this;
    }

    /**
     * Gets interest_income
     *
     * @return float|null
     */
    public function getInterestIncome()
    {
        return $this->container['interest_income'];
    }

    /**
     * Sets interest_income
     *
     * @param float|null $interest_income <p>{{InterestIncome}} is the interest earned on cash temporarily held in savings accounts, certificates of deposits, or other investments.</p>
     *
     * @return self
     */
    public function setInterestIncome($interest_income)
    {
        if (is_null($interest_income)) {
            throw new \InvalidArgumentException('non-nullable interest_income cannot be null');
        }
        $this->container['interest_income'] = $interest_income;

        return $this;
    }

    /**
     * Gets is_fee_revenue_and_other_income
     *
     * @return float|null
     */
    public function getIsFeeRevenueAndOtherIncome()
    {
        return $this->container['is_fee_revenue_and_other_income'];
    }

    /**
     * Sets is_fee_revenue_and_other_income
     *
     * @param float|null $is_fee_revenue_and_other_income <p>{{IS_FeeRevenueAndOtherIncome}} is the income earned by insurance companies other than providing insurances. It includes investing income, fees and interest income.</p>
     *
     * @return self
     */
    public function setIsFeeRevenueAndOtherIncome($is_fee_revenue_and_other_income)
    {
        if (is_null($is_fee_revenue_and_other_income)) {
            throw new \InvalidArgumentException('non-nullable is_fee_revenue_and_other_income cannot be null');
        }
        $this->container['is_fee_revenue_and_other_income'] = $is_fee_revenue_and_other_income;

        return $this;
    }

    /**
     * Gets is_interest_expense
     *
     * @return float|null
     */
    public function getIsInterestExpense()
    {
        return $this->container['is_interest_expense'];
    }

    /**
     * Sets is_interest_expense
     *
     * @param float|null $is_interest_expense is_interest_expense
     *
     * @return self
     */
    public function setIsInterestExpense($is_interest_expense)
    {
        if (is_null($is_interest_expense)) {
            throw new \InvalidArgumentException('non-nullable is_interest_expense cannot be null');
        }
        $this->container['is_interest_expense'] = $is_interest_expense;

        return $this;
    }

    /**
     * Gets is_net_investment_income
     *
     * @return float|null
     */
    public function getIsNetInvestmentIncome()
    {
        return $this->container['is_net_investment_income'];
    }

    /**
     * Sets is_net_investment_income
     *
     * @param float|null $is_net_investment_income <p>{{IS_NetInvestmentIncome}} is the income earned by insurance companies through investments. Insurance companies usually invest the float they received in stocks or bonds to generate additional income before the premium is paid to cover insurance losses.</p>
     *
     * @return self
     */
    public function setIsNetInvestmentIncome($is_net_investment_income)
    {
        if (is_null($is_net_investment_income)) {
            throw new \InvalidArgumentException('non-nullable is_net_investment_income cannot be null');
        }
        $this->container['is_net_investment_income'] = $is_net_investment_income;

        return $this;
    }

    /**
     * Gets is_net_policyholder_benefits_and_claims
     *
     * @return float|null
     */
    public function getIsNetPolicyholderBenefitsAndClaims()
    {
        return $this->container['is_net_policyholder_benefits_and_claims'];
    }

    /**
     * Sets is_net_policyholder_benefits_and_claims
     *
     * @param float|null $is_net_policyholder_benefits_and_claims <p>{{IS_NetPolicyholderBenefitsAndClaims}} is the fund paid out by insurances companies to cover the insurance losses, liabilities and expenses</p>
     *
     * @return self
     */
    public function setIsNetPolicyholderBenefitsAndClaims($is_net_policyholder_benefits_and_claims)
    {
        if (is_null($is_net_policyholder_benefits_and_claims)) {
            throw new \InvalidArgumentException('non-nullable is_net_policyholder_benefits_and_claims cannot be null');
        }
        $this->container['is_net_policyholder_benefits_and_claims'] = $is_net_policyholder_benefits_and_claims;

        return $this;
    }

    /**
     * Gets is_other_expense_insurance
     *
     * @return float|null
     */
    public function getIsOtherExpenseInsurance()
    {
        return $this->container['is_other_expense_insurance'];
    }

    /**
     * Sets is_other_expense_insurance
     *
     * @param float|null $is_other_expense_insurance is_other_expense_insurance
     *
     * @return self
     */
    public function setIsOtherExpenseInsurance($is_other_expense_insurance)
    {
        if (is_null($is_other_expense_insurance)) {
            throw new \InvalidArgumentException('non-nullable is_other_expense_insurance cannot be null');
        }
        $this->container['is_other_expense_insurance'] = $is_other_expense_insurance;

        return $this;
    }

    /**
     * Gets is_policy_acquisition_expense
     *
     * @return float|null
     */
    public function getIsPolicyAcquisitionExpense()
    {
        return $this->container['is_policy_acquisition_expense'];
    }

    /**
     * Sets is_policy_acquisition_expense
     *
     * @param float|null $is_policy_acquisition_expense <p>{{IS_PolicyAcquisitionExpense}} is the expenses incurred by insurance companies in activities such as marketing, advertising, commissions etc.</p>
     *
     * @return self
     */
    public function setIsPolicyAcquisitionExpense($is_policy_acquisition_expense)
    {
        if (is_null($is_policy_acquisition_expense)) {
            throw new \InvalidArgumentException('non-nullable is_policy_acquisition_expense cannot be null');
        }
        $this->container['is_policy_acquisition_expense'] = $is_policy_acquisition_expense;

        return $this;
    }

    /**
     * Gets is_preferred_dividends
     *
     * @return float|null
     */
    public function getIsPreferredDividends()
    {
        return $this->container['is_preferred_dividends'];
    }

    /**
     * Sets is_preferred_dividends
     *
     * @param float|null $is_preferred_dividends <p>{{IS_preferred_dividends}} is a dividend that is accrued and paid on a company's preferred shares. In the event that a company is unable to pay all dividends, claims to {{IS_preferred_dividends}} take precedence over claims to dividends that are paid on common shares.</p>
     *
     * @return self
     */
    public function setIsPreferredDividends($is_preferred_dividends)
    {
        if (is_null($is_preferred_dividends)) {
            throw new \InvalidArgumentException('non-nullable is_preferred_dividends cannot be null');
        }
        $this->container['is_preferred_dividends'] = $is_preferred_dividends;

        return $this;
    }

    /**
     * Gets is_total_premiums_earned
     *
     * @return float|null
     */
    public function getIsTotalPremiumsEarned()
    {
        return $this->container['is_total_premiums_earned'];
    }

    /**
     * Sets is_total_premiums_earned
     *
     * @param float|null $is_total_premiums_earned <p>{{IS_TotalPremiumsEarned}} is the portion of the premium that insurance companies earned by providing insurances for the time period that has already passed.</p>
     *
     * @return self
     */
    public function setIsTotalPremiumsEarned($is_total_premiums_earned)
    {
        if (is_null($is_total_premiums_earned)) {
            throw new \InvalidArgumentException('non-nullable is_total_premiums_earned cannot be null');
        }
        $this->container['is_total_premiums_earned'] = $is_total_premiums_earned;

        return $this;
    }

    /**
     * Gets net_income
     *
     * @return float|null
     */
    public function getNetIncome()
    {
        return $this->container['net_income'];
    }

    /**
     * Sets net_income
     *
     * @param float|null $net_income <p>{{Net_Income}} is the net profit that a company earns after deducting all costs and losses including {{COGS}}, {{SGA}}, {{DDA}}, {{InterestExpense}}, non-recurring items and {{tax}}.  <br>{{Net_Income}}  = {{Revenue}} - {{COGS}}, - {{SGA}} - {{RD}}  - {{DDA}} - {{InterestExpense}} + Non-Recurring Items  - {{tax}} = Earnings Before Depreciation and Amortization - {{DDA}} - {{InterestExpense}} - Non-Recurring Items (NRI) - {{tax}} = {{Operating_Income}} - {{InterestExpense}} - Non-Recurring Items (NRI) - {{tax}} = {{Pretax_Income}} - {{tax}}</p>
     *
     * @return self
     */
    public function setNetIncome($net_income)
    {
        if (is_null($net_income)) {
            throw new \InvalidArgumentException('non-nullable net_income cannot be null');
        }
        $this->container['net_income'] = $net_income;

        return $this;
    }

    /**
     * Gets net_income_continuing_operations
     *
     * @return float|null
     */
    public function getNetIncomeContinuingOperations()
    {
        return $this->container['net_income_continuing_operations'];
    }

    /**
     * Sets net_income_continuing_operations
     *
     * @param float|null $net_income_continuing_operations <p>{{Net_Income_(Continuing_Operations)}} indicates the net income that a firm brings in from ongoing business activities. These activities are expected to continue into the next reporting period.</p>
     *
     * @return self
     */
    public function setNetIncomeContinuingOperations($net_income_continuing_operations)
    {
        if (is_null($net_income_continuing_operations)) {
            throw new \InvalidArgumentException('non-nullable net_income_continuing_operations cannot be null');
        }
        $this->container['net_income_continuing_operations'] = $net_income_continuing_operations;

        return $this;
    }

    /**
     * Gets net_income_discontinued_operations
     *
     * @return float|null
     */
    public function getNetIncomeDiscontinuedOperations()
    {
        return $this->container['net_income_discontinued_operations'];
    }

    /**
     * Sets net_income_discontinued_operations
     *
     * @param float|null $net_income_discontinued_operations <p>{{Net_Income_(Discontinued_Operations)}} indicates the net income that a firm brought in from operations that will not be used in future reporting periods.</p>
     *
     * @return self
     */
    public function setNetIncomeDiscontinuedOperations($net_income_discontinued_operations)
    {
        if (is_null($net_income_discontinued_operations)) {
            throw new \InvalidArgumentException('non-nullable net_income_discontinued_operations cannot be null');
        }
        $this->container['net_income_discontinued_operations'] = $net_income_discontinued_operations;

        return $this;
    }

    /**
     * Gets net_income_including_noncontrolling_interests
     *
     * @return float|null
     */
    public function getNetIncomeIncludingNoncontrollingInterests()
    {
        return $this->container['net_income_including_noncontrolling_interests'];
    }

    /**
     * Sets net_income_including_noncontrolling_interests
     *
     * @param float|null $net_income_including_noncontrolling_interests net_income_including_noncontrolling_interests
     *
     * @return self
     */
    public function setNetIncomeIncludingNoncontrollingInterests($net_income_including_noncontrolling_interests)
    {
        if (is_null($net_income_including_noncontrolling_interests)) {
            throw new \InvalidArgumentException('non-nullable net_income_including_noncontrolling_interests cannot be null');
        }
        $this->container['net_income_including_noncontrolling_interests'] = $net_income_including_noncontrolling_interests;

        return $this;
    }

    /**
     * Gets net_margin
     *
     * @return float|null
     */
    public function getNetMargin()
    {
        return $this->container['net_margin'];
    }

    /**
     * Sets net_margin
     *
     * @param float|null $net_margin Net margin is calculated as Net Income divided by its Revenue.
     *
     * @return self
     */
    public function setNetMargin($net_margin)
    {
        if (is_null($net_margin)) {
            throw new \InvalidArgumentException('non-nullable net_margin cannot be null');
        }
        $this->container['net_margin'] = $net_margin;

        return $this;
    }

    /**
     * Gets other_income_minority_interest
     *
     * @return float|null
     */
    public function getOtherIncomeMinorityInterest()
    {
        return $this->container['other_income_minority_interest'];
    }

    /**
     * Sets other_income_minority_interest
     *
     * @param float|null $other_income_minority_interest <p>{{OtherIncomeExpense}} includes {{Minority_interest}}. {{Minority_interest}} is a significant but non-controlling ownership of less than 50% of a company's voting shares by either an investor or another company.</p>
     *
     * @return self
     */
    public function setOtherIncomeMinorityInterest($other_income_minority_interest)
    {
        if (is_null($other_income_minority_interest)) {
            throw new \InvalidArgumentException('non-nullable other_income_minority_interest cannot be null');
        }
        $this->container['other_income_minority_interest'] = $other_income_minority_interest;

        return $this;
    }

    /**
     * Gets other_net_income_loss
     *
     * @return float|null
     */
    public function getOtherNetIncomeLoss()
    {
        return $this->container['other_net_income_loss'];
    }

    /**
     * Sets other_net_income_loss
     *
     * @param float|null $other_net_income_loss other_net_income_loss
     *
     * @return self
     */
    public function setOtherNetIncomeLoss($other_net_income_loss)
    {
        if (is_null($other_net_income_loss)) {
            throw new \InvalidArgumentException('non-nullable other_net_income_loss cannot be null');
        }
        $this->container['other_net_income_loss'] = $other_net_income_loss;

        return $this;
    }

    /**
     * Gets pretax_income
     *
     * @return float|null
     */
    public function getPretaxIncome()
    {
        return $this->container['pretax_income'];
    }

    /**
     * Sets pretax_income
     *
     * @param float|null $pretax_income <p>{{Pretax_Income}} is the income that a company earns before paying income taxes. <br>{{Pretax_Income}} is calculated as {{Operating_Income}} + {{Non_Operating_Income}} + {{InterestExpense}} + {{InterestIncome}} + other</p>
     *
     * @return self
     */
    public function setPretaxIncome($pretax_income)
    {
        if (is_null($pretax_income)) {
            throw new \InvalidArgumentException('non-nullable pretax_income cannot be null');
        }
        $this->container['pretax_income'] = $pretax_income;

        return $this;
    }

    /**
     * Gets revenue
     *
     * @return float|null
     */
    public function getRevenue()
    {
        return $this->container['revenue'];
    }

    /**
     * Sets revenue
     *
     * @param float|null $revenue revenue
     *
     * @return self
     */
    public function setRevenue($revenue)
    {
        if (is_null($revenue)) {
            throw new \InvalidArgumentException('non-nullable revenue cannot be null');
        }
        $this->container['revenue'] = $revenue;

        return $this;
    }

    /**
     * Gets selling_general_admin_expense
     *
     * @return float|null
     */
    public function getSellingGeneralAdminExpense()
    {
        return $this->container['selling_general_admin_expense'];
    }

    /**
     * Sets selling_general_admin_expense
     *
     * @param float|null $selling_general_admin_expense Selling, General, & Admin. Expense (SGA) includes the direct and indirect costs and all general and administrative expenses of a company. For instance, personnel cost, advertising, rent, communication costs are all part of SGA.
     *
     * @return self
     */
    public function setSellingGeneralAdminExpense($selling_general_admin_expense)
    {
        if (is_null($selling_general_admin_expense)) {
            throw new \InvalidArgumentException('non-nullable selling_general_admin_expense cannot be null');
        }
        $this->container['selling_general_admin_expense'] = $selling_general_admin_expense;

        return $this;
    }

    /**
     * Gets shares_outstanding
     *
     * @return float|null
     */
    public function getSharesOutstanding()
    {
        return $this->container['shares_outstanding'];
    }

    /**
     * Sets shares_outstanding
     *
     * @param float|null $shares_outstanding <p>{{Cash_Flow_from_Others}} may include {{ChangeInWorkingCapital}}. These are cash differences caused by the {{ChangeInInventory}}, {{AccountsPayable}}, {{Accts_Rec}} etc. For instance, if a company pays its suppliers slower, its cash position will build up faster. If a company receives payments from its customers slower, its {{Accts_Rec}} will rise, and its cash position will grow more slowly (or even shrink).</p>
     *
     * @return self
     */
    public function setSharesOutstanding($shares_outstanding)
    {
        if (is_null($shares_outstanding)) {
            throw new \InvalidArgumentException('non-nullable shares_outstanding cannot be null');
        }
        $this->container['shares_outstanding'] = $shares_outstanding;

        return $this;
    }

    /**
     * Gets tax_provision
     *
     * @return float|null
     */
    public function getTaxProvision()
    {
        return $this->container['tax_provision'];
    }

    /**
     * Sets tax_provision
     *
     * @param float|null $tax_provision <p>{{TaxProvision}} is the tax to be paid.</p>
     *
     * @return self
     */
    public function setTaxProvision($tax_provision)
    {
        if (is_null($tax_provision)) {
            throw new \InvalidArgumentException('non-nullable tax_provision cannot be null');
        }
        $this->container['tax_provision'] = $tax_provision;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return float|null
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param float|null $tax_rate <p>{{TaxRate}} is the ratio of {{tax}} divided by {{Pretax_Income}}, usually presented in percent. <br> {{{TaxRate}} = {{tax}} / {{Pretax_Income}}</p>
     *
     * @return self
     */
    public function setTaxRate($tax_rate)
    {
        if (is_null($tax_rate)) {
            throw new \InvalidArgumentException('non-nullable tax_rate cannot be null');
        }
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets total_expenses_insurance
     *
     * @return float|null
     */
    public function getTotalExpensesInsurance()
    {
        return $this->container['total_expenses_insurance'];
    }

    /**
     * Sets total_expenses_insurance
     *
     * @param float|null $total_expenses_insurance total_expenses_insurance
     *
     * @return self
     */
    public function setTotalExpensesInsurance($total_expenses_insurance)
    {
        if (is_null($total_expenses_insurance)) {
            throw new \InvalidArgumentException('non-nullable total_expenses_insurance cannot be null');
        }
        $this->container['total_expenses_insurance'] = $total_expenses_insurance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


