<?php
/**
 * StockProfilePrice
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gurufocus Data Package API
 *
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * StockProfilePrice Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StockProfilePrice implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'stock_profile_price';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'beta' => 'float',
        'death_cross_ema_20_vs_200' => 'string',
        'death_cross_ema_20_vs_50' => 'string',
        'death_cross_ema_50_vs_200' => 'string',
        'death_cross_sma_20_vs_200' => 'string',
        'death_cross_sma_20_vs_50' => 'string',
        'death_cross_sma_50_vs_200' => 'string',
        'display_timestamp' => 'string',
        'ema_20' => 'float',
        'ema_200' => 'float',
        'ema_50' => 'float',
        'float' => 'float',
        'golden_cross_ema_20_vs_200' => 'string',
        'golden_cross_ema_20_vs_50' => 'string',
        'golden_cross_ema_50_vs_200' => 'string',
        'golden_cross_sma_20_vs_200' => 'string',
        'golden_cross_sma_20_vs_50' => 'string',
        'golden_cross_sma_50_vs_200' => 'string',
        'high' => 'float',
        'low' => 'float',
        'macd_death_cross_signal' => 'string',
        'macd_golden_cross_signal' => 'string',
        'macd_line' => 'float',
        'macd_signal_line' => 'float',
        'open' => 'float',
        'p_pct_change' => 'float',
        'pchange_sp_10y' => 'float',
        'pchange_sp_12w' => 'float',
        'pchange_sp_15y' => 'float',
        'pchange_sp_1w' => 'float',
        'pchange_sp_20y' => 'float',
        'pchange_sp_24w' => 'float',
        'pchange_sp_3y' => 'float',
        'pchange_sp_4w' => 'float',
        'pchange_sp_52w' => 'float',
        'pchange_sp_5y' => 'float',
        'pchange_sp_ytd' => 'float',
        'pchange_10y' => 'float',
        'pchange_12_1m' => 'float',
        'pchange_12w' => 'float',
        'pchange_15y' => 'float',
        'pchange_1w' => 'float',
        'pchange_20y' => 'float',
        'pchange_24w' => 'float',
        'pchange_3_1m' => 'float',
        'pchange_3y' => 'float',
        'pchange_4w' => 'float',
        'pchange_52w' => 'float',
        'pchange_5y' => 'float',
        'pchange_6_1m' => 'float',
        'pchange_ytd' => 'float',
        'price' => 'float',
        'price10yhigh' => 'float',
        'price10ylow' => 'float',
        'price3yhigh' => 'float',
        'price3ylow' => 'float',
        'price52whigh' => 'float',
        'price52wlow' => 'float',
        'price5yhigh' => 'float',
        'price5ylow' => 'float',
        'price_stdv_20' => 'float',
        'price_stdv_200' => 'float',
        'price_stdv_50' => 'float',
        'pricehishigh' => 'float',
        'pricehislow' => 'float',
        'priceindex_6m' => 'float',
        'rsi_14' => 'float',
        'rsi_30' => 'float',
        'rsi_5' => 'float',
        'rsi_9' => 'float',
        'sharpe_ratio' => 'float',
        'sharpe_ratio_10y' => 'float',
        'sharpe_ratio_3y' => 'float',
        'sharpe_ratio_5y' => 'float',
        'sma_20' => 'float',
        'sma_200' => 'float',
        'sma_50' => 'float',
        'sortino_ratio_10y' => 'float',
        'sortino_ratio_1y' => 'float',
        'sortino_ratio_3y' => 'float',
        'sortino_ratio_5y' => 'float',
        'volatility' => 'float',
        'volatility_10y' => 'float',
        'volatility_1m' => 'float',
        'volatility_1w' => 'float',
        'volatility_3y' => 'float',
        'volatility_5y' => 'float',
        'volume' => 'float',
        'volume_3m' => 'float',
        'volume_total' => 'float',
        'volume_total_3m' => 'float',
        'volumn_day' => 'float',
        'volumn_day_total' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'beta' => null,
        'death_cross_ema_20_vs_200' => null,
        'death_cross_ema_20_vs_50' => null,
        'death_cross_ema_50_vs_200' => null,
        'death_cross_sma_20_vs_200' => null,
        'death_cross_sma_20_vs_50' => null,
        'death_cross_sma_50_vs_200' => null,
        'display_timestamp' => null,
        'ema_20' => null,
        'ema_200' => null,
        'ema_50' => null,
        'float' => null,
        'golden_cross_ema_20_vs_200' => null,
        'golden_cross_ema_20_vs_50' => null,
        'golden_cross_ema_50_vs_200' => null,
        'golden_cross_sma_20_vs_200' => null,
        'golden_cross_sma_20_vs_50' => null,
        'golden_cross_sma_50_vs_200' => null,
        'high' => null,
        'low' => null,
        'macd_death_cross_signal' => null,
        'macd_golden_cross_signal' => null,
        'macd_line' => null,
        'macd_signal_line' => null,
        'open' => null,
        'p_pct_change' => null,
        'pchange_sp_10y' => null,
        'pchange_sp_12w' => null,
        'pchange_sp_15y' => null,
        'pchange_sp_1w' => null,
        'pchange_sp_20y' => null,
        'pchange_sp_24w' => null,
        'pchange_sp_3y' => null,
        'pchange_sp_4w' => null,
        'pchange_sp_52w' => null,
        'pchange_sp_5y' => null,
        'pchange_sp_ytd' => null,
        'pchange_10y' => null,
        'pchange_12_1m' => null,
        'pchange_12w' => null,
        'pchange_15y' => null,
        'pchange_1w' => null,
        'pchange_20y' => null,
        'pchange_24w' => null,
        'pchange_3_1m' => null,
        'pchange_3y' => null,
        'pchange_4w' => null,
        'pchange_52w' => null,
        'pchange_5y' => null,
        'pchange_6_1m' => null,
        'pchange_ytd' => null,
        'price' => null,
        'price10yhigh' => null,
        'price10ylow' => null,
        'price3yhigh' => null,
        'price3ylow' => null,
        'price52whigh' => null,
        'price52wlow' => null,
        'price5yhigh' => null,
        'price5ylow' => null,
        'price_stdv_20' => null,
        'price_stdv_200' => null,
        'price_stdv_50' => null,
        'pricehishigh' => null,
        'pricehislow' => null,
        'priceindex_6m' => null,
        'rsi_14' => null,
        'rsi_30' => null,
        'rsi_5' => null,
        'rsi_9' => null,
        'sharpe_ratio' => null,
        'sharpe_ratio_10y' => null,
        'sharpe_ratio_3y' => null,
        'sharpe_ratio_5y' => null,
        'sma_20' => null,
        'sma_200' => null,
        'sma_50' => null,
        'sortino_ratio_10y' => null,
        'sortino_ratio_1y' => null,
        'sortino_ratio_3y' => null,
        'sortino_ratio_5y' => null,
        'volatility' => null,
        'volatility_10y' => null,
        'volatility_1m' => null,
        'volatility_1w' => null,
        'volatility_3y' => null,
        'volatility_5y' => null,
        'volume' => null,
        'volume_3m' => null,
        'volume_total' => null,
        'volume_total_3m' => null,
        'volumn_day' => null,
        'volumn_day_total' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'beta' => false,
        'death_cross_ema_20_vs_200' => false,
        'death_cross_ema_20_vs_50' => false,
        'death_cross_ema_50_vs_200' => false,
        'death_cross_sma_20_vs_200' => false,
        'death_cross_sma_20_vs_50' => false,
        'death_cross_sma_50_vs_200' => false,
        'display_timestamp' => false,
        'ema_20' => false,
        'ema_200' => false,
        'ema_50' => false,
        'float' => false,
        'golden_cross_ema_20_vs_200' => false,
        'golden_cross_ema_20_vs_50' => false,
        'golden_cross_ema_50_vs_200' => false,
        'golden_cross_sma_20_vs_200' => false,
        'golden_cross_sma_20_vs_50' => false,
        'golden_cross_sma_50_vs_200' => false,
        'high' => false,
        'low' => false,
        'macd_death_cross_signal' => false,
        'macd_golden_cross_signal' => false,
        'macd_line' => false,
        'macd_signal_line' => false,
        'open' => false,
        'p_pct_change' => false,
        'pchange_sp_10y' => false,
        'pchange_sp_12w' => false,
        'pchange_sp_15y' => false,
        'pchange_sp_1w' => false,
        'pchange_sp_20y' => false,
        'pchange_sp_24w' => false,
        'pchange_sp_3y' => false,
        'pchange_sp_4w' => false,
        'pchange_sp_52w' => false,
        'pchange_sp_5y' => false,
        'pchange_sp_ytd' => false,
        'pchange_10y' => false,
        'pchange_12_1m' => false,
        'pchange_12w' => false,
        'pchange_15y' => false,
        'pchange_1w' => false,
        'pchange_20y' => false,
        'pchange_24w' => false,
        'pchange_3_1m' => false,
        'pchange_3y' => false,
        'pchange_4w' => false,
        'pchange_52w' => false,
        'pchange_5y' => false,
        'pchange_6_1m' => false,
        'pchange_ytd' => false,
        'price' => false,
        'price10yhigh' => false,
        'price10ylow' => false,
        'price3yhigh' => false,
        'price3ylow' => false,
        'price52whigh' => false,
        'price52wlow' => false,
        'price5yhigh' => false,
        'price5ylow' => false,
        'price_stdv_20' => false,
        'price_stdv_200' => false,
        'price_stdv_50' => false,
        'pricehishigh' => false,
        'pricehislow' => false,
        'priceindex_6m' => false,
        'rsi_14' => false,
        'rsi_30' => false,
        'rsi_5' => false,
        'rsi_9' => false,
        'sharpe_ratio' => false,
        'sharpe_ratio_10y' => false,
        'sharpe_ratio_3y' => false,
        'sharpe_ratio_5y' => false,
        'sma_20' => false,
        'sma_200' => false,
        'sma_50' => false,
        'sortino_ratio_10y' => false,
        'sortino_ratio_1y' => false,
        'sortino_ratio_3y' => false,
        'sortino_ratio_5y' => false,
        'volatility' => false,
        'volatility_10y' => false,
        'volatility_1m' => false,
        'volatility_1w' => false,
        'volatility_3y' => false,
        'volatility_5y' => false,
        'volume' => false,
        'volume_3m' => false,
        'volume_total' => false,
        'volume_total_3m' => false,
        'volumn_day' => false,
        'volumn_day_total' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'beta' => 'beta',
        'death_cross_ema_20_vs_200' => 'death_cross_ema_20_vs_200',
        'death_cross_ema_20_vs_50' => 'death_cross_ema_20_vs_50',
        'death_cross_ema_50_vs_200' => 'death_cross_ema_50_vs_200',
        'death_cross_sma_20_vs_200' => 'death_cross_sma_20_vs_200',
        'death_cross_sma_20_vs_50' => 'death_cross_sma_20_vs_50',
        'death_cross_sma_50_vs_200' => 'death_cross_sma_50_vs_200',
        'display_timestamp' => 'display_timestamp',
        'ema_20' => 'ema_20',
        'ema_200' => 'ema_200',
        'ema_50' => 'ema_50',
        'float' => 'float',
        'golden_cross_ema_20_vs_200' => 'golden_cross_ema_20_vs_200',
        'golden_cross_ema_20_vs_50' => 'golden_cross_ema_20_vs_50',
        'golden_cross_ema_50_vs_200' => 'golden_cross_ema_50_vs_200',
        'golden_cross_sma_20_vs_200' => 'golden_cross_sma_20_vs_200',
        'golden_cross_sma_20_vs_50' => 'golden_cross_sma_20_vs_50',
        'golden_cross_sma_50_vs_200' => 'golden_cross_sma_50_vs_200',
        'high' => 'high',
        'low' => 'low',
        'macd_death_cross_signal' => 'macd_death_cross_signal',
        'macd_golden_cross_signal' => 'macd_golden_cross_signal',
        'macd_line' => 'macd_line',
        'macd_signal_line' => 'macd_signal_line',
        'open' => 'open',
        'p_pct_change' => 'p_pct_change',
        'pchange_sp_10y' => 'pchangeSP_10y',
        'pchange_sp_12w' => 'pchangeSP_12w',
        'pchange_sp_15y' => 'pchangeSP_15y',
        'pchange_sp_1w' => 'pchangeSP_1w',
        'pchange_sp_20y' => 'pchangeSP_20y',
        'pchange_sp_24w' => 'pchangeSP_24w',
        'pchange_sp_3y' => 'pchangeSP_3y',
        'pchange_sp_4w' => 'pchangeSP_4w',
        'pchange_sp_52w' => 'pchangeSP_52w',
        'pchange_sp_5y' => 'pchangeSP_5y',
        'pchange_sp_ytd' => 'pchangeSP_ytd',
        'pchange_10y' => 'pchange_10y',
        'pchange_12_1m' => 'pchange_12_1m',
        'pchange_12w' => 'pchange_12w',
        'pchange_15y' => 'pchange_15y',
        'pchange_1w' => 'pchange_1w',
        'pchange_20y' => 'pchange_20y',
        'pchange_24w' => 'pchange_24w',
        'pchange_3_1m' => 'pchange_3_1m',
        'pchange_3y' => 'pchange_3y',
        'pchange_4w' => 'pchange_4w',
        'pchange_52w' => 'pchange_52w',
        'pchange_5y' => 'pchange_5y',
        'pchange_6_1m' => 'pchange_6_1m',
        'pchange_ytd' => 'pchange_ytd',
        'price' => 'price',
        'price10yhigh' => 'price10yhigh',
        'price10ylow' => 'price10ylow',
        'price3yhigh' => 'price3yhigh',
        'price3ylow' => 'price3ylow',
        'price52whigh' => 'price52whigh',
        'price52wlow' => 'price52wlow',
        'price5yhigh' => 'price5yhigh',
        'price5ylow' => 'price5ylow',
        'price_stdv_20' => 'price_stdv_20',
        'price_stdv_200' => 'price_stdv_200',
        'price_stdv_50' => 'price_stdv_50',
        'pricehishigh' => 'pricehishigh',
        'pricehislow' => 'pricehislow',
        'priceindex_6m' => 'priceindex_6m',
        'rsi_14' => 'rsi_14',
        'rsi_30' => 'rsi_30',
        'rsi_5' => 'rsi_5',
        'rsi_9' => 'rsi_9',
        'sharpe_ratio' => 'sharpe_ratio',
        'sharpe_ratio_10y' => 'sharpe_ratio_10y',
        'sharpe_ratio_3y' => 'sharpe_ratio_3y',
        'sharpe_ratio_5y' => 'sharpe_ratio_5y',
        'sma_20' => 'sma_20',
        'sma_200' => 'sma_200',
        'sma_50' => 'sma_50',
        'sortino_ratio_10y' => 'sortino_ratio_10y',
        'sortino_ratio_1y' => 'sortino_ratio_1y',
        'sortino_ratio_3y' => 'sortino_ratio_3y',
        'sortino_ratio_5y' => 'sortino_ratio_5y',
        'volatility' => 'volatility',
        'volatility_10y' => 'volatility_10y',
        'volatility_1m' => 'volatility_1m',
        'volatility_1w' => 'volatility_1w',
        'volatility_3y' => 'volatility_3y',
        'volatility_5y' => 'volatility_5y',
        'volume' => 'volume',
        'volume_3m' => 'volume_3m',
        'volume_total' => 'volume_total',
        'volume_total_3m' => 'volume_total_3m',
        'volumn_day' => 'volumn_day',
        'volumn_day_total' => 'volumn_day_total'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'beta' => 'setBeta',
        'death_cross_ema_20_vs_200' => 'setDeathCrossEma20Vs200',
        'death_cross_ema_20_vs_50' => 'setDeathCrossEma20Vs50',
        'death_cross_ema_50_vs_200' => 'setDeathCrossEma50Vs200',
        'death_cross_sma_20_vs_200' => 'setDeathCrossSma20Vs200',
        'death_cross_sma_20_vs_50' => 'setDeathCrossSma20Vs50',
        'death_cross_sma_50_vs_200' => 'setDeathCrossSma50Vs200',
        'display_timestamp' => 'setDisplayTimestamp',
        'ema_20' => 'setEma20',
        'ema_200' => 'setEma200',
        'ema_50' => 'setEma50',
        'float' => 'setFloat',
        'golden_cross_ema_20_vs_200' => 'setGoldenCrossEma20Vs200',
        'golden_cross_ema_20_vs_50' => 'setGoldenCrossEma20Vs50',
        'golden_cross_ema_50_vs_200' => 'setGoldenCrossEma50Vs200',
        'golden_cross_sma_20_vs_200' => 'setGoldenCrossSma20Vs200',
        'golden_cross_sma_20_vs_50' => 'setGoldenCrossSma20Vs50',
        'golden_cross_sma_50_vs_200' => 'setGoldenCrossSma50Vs200',
        'high' => 'setHigh',
        'low' => 'setLow',
        'macd_death_cross_signal' => 'setMacdDeathCrossSignal',
        'macd_golden_cross_signal' => 'setMacdGoldenCrossSignal',
        'macd_line' => 'setMacdLine',
        'macd_signal_line' => 'setMacdSignalLine',
        'open' => 'setOpen',
        'p_pct_change' => 'setPPctChange',
        'pchange_sp_10y' => 'setPchangeSp10y',
        'pchange_sp_12w' => 'setPchangeSp12w',
        'pchange_sp_15y' => 'setPchangeSp15y',
        'pchange_sp_1w' => 'setPchangeSp1w',
        'pchange_sp_20y' => 'setPchangeSp20y',
        'pchange_sp_24w' => 'setPchangeSp24w',
        'pchange_sp_3y' => 'setPchangeSp3y',
        'pchange_sp_4w' => 'setPchangeSp4w',
        'pchange_sp_52w' => 'setPchangeSp52w',
        'pchange_sp_5y' => 'setPchangeSp5y',
        'pchange_sp_ytd' => 'setPchangeSpYtd',
        'pchange_10y' => 'setPchange10y',
        'pchange_12_1m' => 'setPchange121m',
        'pchange_12w' => 'setPchange12w',
        'pchange_15y' => 'setPchange15y',
        'pchange_1w' => 'setPchange1w',
        'pchange_20y' => 'setPchange20y',
        'pchange_24w' => 'setPchange24w',
        'pchange_3_1m' => 'setPchange31m',
        'pchange_3y' => 'setPchange3y',
        'pchange_4w' => 'setPchange4w',
        'pchange_52w' => 'setPchange52w',
        'pchange_5y' => 'setPchange5y',
        'pchange_6_1m' => 'setPchange61m',
        'pchange_ytd' => 'setPchangeYtd',
        'price' => 'setPrice',
        'price10yhigh' => 'setPrice10yhigh',
        'price10ylow' => 'setPrice10ylow',
        'price3yhigh' => 'setPrice3yhigh',
        'price3ylow' => 'setPrice3ylow',
        'price52whigh' => 'setPrice52whigh',
        'price52wlow' => 'setPrice52wlow',
        'price5yhigh' => 'setPrice5yhigh',
        'price5ylow' => 'setPrice5ylow',
        'price_stdv_20' => 'setPriceStdv20',
        'price_stdv_200' => 'setPriceStdv200',
        'price_stdv_50' => 'setPriceStdv50',
        'pricehishigh' => 'setPricehishigh',
        'pricehislow' => 'setPricehislow',
        'priceindex_6m' => 'setPriceindex6m',
        'rsi_14' => 'setRsi14',
        'rsi_30' => 'setRsi30',
        'rsi_5' => 'setRsi5',
        'rsi_9' => 'setRsi9',
        'sharpe_ratio' => 'setSharpeRatio',
        'sharpe_ratio_10y' => 'setSharpeRatio10y',
        'sharpe_ratio_3y' => 'setSharpeRatio3y',
        'sharpe_ratio_5y' => 'setSharpeRatio5y',
        'sma_20' => 'setSma20',
        'sma_200' => 'setSma200',
        'sma_50' => 'setSma50',
        'sortino_ratio_10y' => 'setSortinoRatio10y',
        'sortino_ratio_1y' => 'setSortinoRatio1y',
        'sortino_ratio_3y' => 'setSortinoRatio3y',
        'sortino_ratio_5y' => 'setSortinoRatio5y',
        'volatility' => 'setVolatility',
        'volatility_10y' => 'setVolatility10y',
        'volatility_1m' => 'setVolatility1m',
        'volatility_1w' => 'setVolatility1w',
        'volatility_3y' => 'setVolatility3y',
        'volatility_5y' => 'setVolatility5y',
        'volume' => 'setVolume',
        'volume_3m' => 'setVolume3m',
        'volume_total' => 'setVolumeTotal',
        'volume_total_3m' => 'setVolumeTotal3m',
        'volumn_day' => 'setVolumnDay',
        'volumn_day_total' => 'setVolumnDayTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'beta' => 'getBeta',
        'death_cross_ema_20_vs_200' => 'getDeathCrossEma20Vs200',
        'death_cross_ema_20_vs_50' => 'getDeathCrossEma20Vs50',
        'death_cross_ema_50_vs_200' => 'getDeathCrossEma50Vs200',
        'death_cross_sma_20_vs_200' => 'getDeathCrossSma20Vs200',
        'death_cross_sma_20_vs_50' => 'getDeathCrossSma20Vs50',
        'death_cross_sma_50_vs_200' => 'getDeathCrossSma50Vs200',
        'display_timestamp' => 'getDisplayTimestamp',
        'ema_20' => 'getEma20',
        'ema_200' => 'getEma200',
        'ema_50' => 'getEma50',
        'float' => 'getFloat',
        'golden_cross_ema_20_vs_200' => 'getGoldenCrossEma20Vs200',
        'golden_cross_ema_20_vs_50' => 'getGoldenCrossEma20Vs50',
        'golden_cross_ema_50_vs_200' => 'getGoldenCrossEma50Vs200',
        'golden_cross_sma_20_vs_200' => 'getGoldenCrossSma20Vs200',
        'golden_cross_sma_20_vs_50' => 'getGoldenCrossSma20Vs50',
        'golden_cross_sma_50_vs_200' => 'getGoldenCrossSma50Vs200',
        'high' => 'getHigh',
        'low' => 'getLow',
        'macd_death_cross_signal' => 'getMacdDeathCrossSignal',
        'macd_golden_cross_signal' => 'getMacdGoldenCrossSignal',
        'macd_line' => 'getMacdLine',
        'macd_signal_line' => 'getMacdSignalLine',
        'open' => 'getOpen',
        'p_pct_change' => 'getPPctChange',
        'pchange_sp_10y' => 'getPchangeSp10y',
        'pchange_sp_12w' => 'getPchangeSp12w',
        'pchange_sp_15y' => 'getPchangeSp15y',
        'pchange_sp_1w' => 'getPchangeSp1w',
        'pchange_sp_20y' => 'getPchangeSp20y',
        'pchange_sp_24w' => 'getPchangeSp24w',
        'pchange_sp_3y' => 'getPchangeSp3y',
        'pchange_sp_4w' => 'getPchangeSp4w',
        'pchange_sp_52w' => 'getPchangeSp52w',
        'pchange_sp_5y' => 'getPchangeSp5y',
        'pchange_sp_ytd' => 'getPchangeSpYtd',
        'pchange_10y' => 'getPchange10y',
        'pchange_12_1m' => 'getPchange121m',
        'pchange_12w' => 'getPchange12w',
        'pchange_15y' => 'getPchange15y',
        'pchange_1w' => 'getPchange1w',
        'pchange_20y' => 'getPchange20y',
        'pchange_24w' => 'getPchange24w',
        'pchange_3_1m' => 'getPchange31m',
        'pchange_3y' => 'getPchange3y',
        'pchange_4w' => 'getPchange4w',
        'pchange_52w' => 'getPchange52w',
        'pchange_5y' => 'getPchange5y',
        'pchange_6_1m' => 'getPchange61m',
        'pchange_ytd' => 'getPchangeYtd',
        'price' => 'getPrice',
        'price10yhigh' => 'getPrice10yhigh',
        'price10ylow' => 'getPrice10ylow',
        'price3yhigh' => 'getPrice3yhigh',
        'price3ylow' => 'getPrice3ylow',
        'price52whigh' => 'getPrice52whigh',
        'price52wlow' => 'getPrice52wlow',
        'price5yhigh' => 'getPrice5yhigh',
        'price5ylow' => 'getPrice5ylow',
        'price_stdv_20' => 'getPriceStdv20',
        'price_stdv_200' => 'getPriceStdv200',
        'price_stdv_50' => 'getPriceStdv50',
        'pricehishigh' => 'getPricehishigh',
        'pricehislow' => 'getPricehislow',
        'priceindex_6m' => 'getPriceindex6m',
        'rsi_14' => 'getRsi14',
        'rsi_30' => 'getRsi30',
        'rsi_5' => 'getRsi5',
        'rsi_9' => 'getRsi9',
        'sharpe_ratio' => 'getSharpeRatio',
        'sharpe_ratio_10y' => 'getSharpeRatio10y',
        'sharpe_ratio_3y' => 'getSharpeRatio3y',
        'sharpe_ratio_5y' => 'getSharpeRatio5y',
        'sma_20' => 'getSma20',
        'sma_200' => 'getSma200',
        'sma_50' => 'getSma50',
        'sortino_ratio_10y' => 'getSortinoRatio10y',
        'sortino_ratio_1y' => 'getSortinoRatio1y',
        'sortino_ratio_3y' => 'getSortinoRatio3y',
        'sortino_ratio_5y' => 'getSortinoRatio5y',
        'volatility' => 'getVolatility',
        'volatility_10y' => 'getVolatility10y',
        'volatility_1m' => 'getVolatility1m',
        'volatility_1w' => 'getVolatility1w',
        'volatility_3y' => 'getVolatility3y',
        'volatility_5y' => 'getVolatility5y',
        'volume' => 'getVolume',
        'volume_3m' => 'getVolume3m',
        'volume_total' => 'getVolumeTotal',
        'volume_total_3m' => 'getVolumeTotal3m',
        'volumn_day' => 'getVolumnDay',
        'volumn_day_total' => 'getVolumnDayTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('beta', $data ?? [], null);
        $this->setIfExists('death_cross_ema_20_vs_200', $data ?? [], null);
        $this->setIfExists('death_cross_ema_20_vs_50', $data ?? [], null);
        $this->setIfExists('death_cross_ema_50_vs_200', $data ?? [], null);
        $this->setIfExists('death_cross_sma_20_vs_200', $data ?? [], null);
        $this->setIfExists('death_cross_sma_20_vs_50', $data ?? [], null);
        $this->setIfExists('death_cross_sma_50_vs_200', $data ?? [], null);
        $this->setIfExists('display_timestamp', $data ?? [], null);
        $this->setIfExists('ema_20', $data ?? [], null);
        $this->setIfExists('ema_200', $data ?? [], null);
        $this->setIfExists('ema_50', $data ?? [], null);
        $this->setIfExists('float', $data ?? [], null);
        $this->setIfExists('golden_cross_ema_20_vs_200', $data ?? [], null);
        $this->setIfExists('golden_cross_ema_20_vs_50', $data ?? [], null);
        $this->setIfExists('golden_cross_ema_50_vs_200', $data ?? [], null);
        $this->setIfExists('golden_cross_sma_20_vs_200', $data ?? [], null);
        $this->setIfExists('golden_cross_sma_20_vs_50', $data ?? [], null);
        $this->setIfExists('golden_cross_sma_50_vs_200', $data ?? [], null);
        $this->setIfExists('high', $data ?? [], null);
        $this->setIfExists('low', $data ?? [], null);
        $this->setIfExists('macd_death_cross_signal', $data ?? [], null);
        $this->setIfExists('macd_golden_cross_signal', $data ?? [], null);
        $this->setIfExists('macd_line', $data ?? [], null);
        $this->setIfExists('macd_signal_line', $data ?? [], null);
        $this->setIfExists('open', $data ?? [], null);
        $this->setIfExists('p_pct_change', $data ?? [], null);
        $this->setIfExists('pchange_sp_10y', $data ?? [], null);
        $this->setIfExists('pchange_sp_12w', $data ?? [], null);
        $this->setIfExists('pchange_sp_15y', $data ?? [], null);
        $this->setIfExists('pchange_sp_1w', $data ?? [], null);
        $this->setIfExists('pchange_sp_20y', $data ?? [], null);
        $this->setIfExists('pchange_sp_24w', $data ?? [], null);
        $this->setIfExists('pchange_sp_3y', $data ?? [], null);
        $this->setIfExists('pchange_sp_4w', $data ?? [], null);
        $this->setIfExists('pchange_sp_52w', $data ?? [], null);
        $this->setIfExists('pchange_sp_5y', $data ?? [], null);
        $this->setIfExists('pchange_sp_ytd', $data ?? [], null);
        $this->setIfExists('pchange_10y', $data ?? [], null);
        $this->setIfExists('pchange_12_1m', $data ?? [], null);
        $this->setIfExists('pchange_12w', $data ?? [], null);
        $this->setIfExists('pchange_15y', $data ?? [], null);
        $this->setIfExists('pchange_1w', $data ?? [], null);
        $this->setIfExists('pchange_20y', $data ?? [], null);
        $this->setIfExists('pchange_24w', $data ?? [], null);
        $this->setIfExists('pchange_3_1m', $data ?? [], null);
        $this->setIfExists('pchange_3y', $data ?? [], null);
        $this->setIfExists('pchange_4w', $data ?? [], null);
        $this->setIfExists('pchange_52w', $data ?? [], null);
        $this->setIfExists('pchange_5y', $data ?? [], null);
        $this->setIfExists('pchange_6_1m', $data ?? [], null);
        $this->setIfExists('pchange_ytd', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('price10yhigh', $data ?? [], null);
        $this->setIfExists('price10ylow', $data ?? [], null);
        $this->setIfExists('price3yhigh', $data ?? [], null);
        $this->setIfExists('price3ylow', $data ?? [], null);
        $this->setIfExists('price52whigh', $data ?? [], null);
        $this->setIfExists('price52wlow', $data ?? [], null);
        $this->setIfExists('price5yhigh', $data ?? [], null);
        $this->setIfExists('price5ylow', $data ?? [], null);
        $this->setIfExists('price_stdv_20', $data ?? [], null);
        $this->setIfExists('price_stdv_200', $data ?? [], null);
        $this->setIfExists('price_stdv_50', $data ?? [], null);
        $this->setIfExists('pricehishigh', $data ?? [], null);
        $this->setIfExists('pricehislow', $data ?? [], null);
        $this->setIfExists('priceindex_6m', $data ?? [], null);
        $this->setIfExists('rsi_14', $data ?? [], null);
        $this->setIfExists('rsi_30', $data ?? [], null);
        $this->setIfExists('rsi_5', $data ?? [], null);
        $this->setIfExists('rsi_9', $data ?? [], null);
        $this->setIfExists('sharpe_ratio', $data ?? [], null);
        $this->setIfExists('sharpe_ratio_10y', $data ?? [], null);
        $this->setIfExists('sharpe_ratio_3y', $data ?? [], null);
        $this->setIfExists('sharpe_ratio_5y', $data ?? [], null);
        $this->setIfExists('sma_20', $data ?? [], null);
        $this->setIfExists('sma_200', $data ?? [], null);
        $this->setIfExists('sma_50', $data ?? [], null);
        $this->setIfExists('sortino_ratio_10y', $data ?? [], null);
        $this->setIfExists('sortino_ratio_1y', $data ?? [], null);
        $this->setIfExists('sortino_ratio_3y', $data ?? [], null);
        $this->setIfExists('sortino_ratio_5y', $data ?? [], null);
        $this->setIfExists('volatility', $data ?? [], null);
        $this->setIfExists('volatility_10y', $data ?? [], null);
        $this->setIfExists('volatility_1m', $data ?? [], null);
        $this->setIfExists('volatility_1w', $data ?? [], null);
        $this->setIfExists('volatility_3y', $data ?? [], null);
        $this->setIfExists('volatility_5y', $data ?? [], null);
        $this->setIfExists('volume', $data ?? [], null);
        $this->setIfExists('volume_3m', $data ?? [], null);
        $this->setIfExists('volume_total', $data ?? [], null);
        $this->setIfExists('volume_total_3m', $data ?? [], null);
        $this->setIfExists('volumn_day', $data ?? [], null);
        $this->setIfExists('volumn_day_total', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets beta
     *
     * @return float|null
     */
    public function getBeta()
    {
        return $this->container['beta'];
    }

    /**
     * Sets beta
     *
     * @param float|null $beta Beta measures the volatility or systematic risk of a security in comparison to the market. It is calculated using the latest three years of monthly returns of the stock and the benchmark.<br>- A beta of 1 indicates that the stock's price will move with the market. <br>- A beta of less than 1 indicates that the stock will be less volatile than the market. <br>- A beta greater than 1 indicates that the stock's price will be more volatile than the market.
     *
     * @return self
     */
    public function setBeta($beta)
    {
        if (is_null($beta)) {
            throw new \InvalidArgumentException('non-nullable beta cannot be null');
        }
        $this->container['beta'] = $beta;

        return $this;
    }

    /**
     * Gets death_cross_ema_20_vs_200
     *
     * @return string|null
     */
    public function getDeathCrossEma20Vs200()
    {
        return $this->container['death_cross_ema_20_vs_200'];
    }

    /**
     * Sets death_cross_ema_20_vs_200
     *
     * @param string|null $death_cross_ema_20_vs_200 A death cross (EMA 20 vs 200) occurs when a stock's 20-day exponential moving average crosses from above to below its 200-day exponential moving average at some point in the past week.
     *
     * @return self
     */
    public function setDeathCrossEma20Vs200($death_cross_ema_20_vs_200)
    {
        if (is_null($death_cross_ema_20_vs_200)) {
            throw new \InvalidArgumentException('non-nullable death_cross_ema_20_vs_200 cannot be null');
        }
        $this->container['death_cross_ema_20_vs_200'] = $death_cross_ema_20_vs_200;

        return $this;
    }

    /**
     * Gets death_cross_ema_20_vs_50
     *
     * @return string|null
     */
    public function getDeathCrossEma20Vs50()
    {
        return $this->container['death_cross_ema_20_vs_50'];
    }

    /**
     * Sets death_cross_ema_20_vs_50
     *
     * @param string|null $death_cross_ema_20_vs_50 A death cross (EMA 20 vs 50) occurs when a stock's 20-day exponential moving average crosses from above to below its 50-day exponential moving average at some point in the past week.
     *
     * @return self
     */
    public function setDeathCrossEma20Vs50($death_cross_ema_20_vs_50)
    {
        if (is_null($death_cross_ema_20_vs_50)) {
            throw new \InvalidArgumentException('non-nullable death_cross_ema_20_vs_50 cannot be null');
        }
        $this->container['death_cross_ema_20_vs_50'] = $death_cross_ema_20_vs_50;

        return $this;
    }

    /**
     * Gets death_cross_ema_50_vs_200
     *
     * @return string|null
     */
    public function getDeathCrossEma50Vs200()
    {
        return $this->container['death_cross_ema_50_vs_200'];
    }

    /**
     * Sets death_cross_ema_50_vs_200
     *
     * @param string|null $death_cross_ema_50_vs_200 A death cross (EMA 50 vs 200) occurs when a stock's 50-day exponential moving average crosses from above to below its 200-day exponential moving average at some point in the past week.
     *
     * @return self
     */
    public function setDeathCrossEma50Vs200($death_cross_ema_50_vs_200)
    {
        if (is_null($death_cross_ema_50_vs_200)) {
            throw new \InvalidArgumentException('non-nullable death_cross_ema_50_vs_200 cannot be null');
        }
        $this->container['death_cross_ema_50_vs_200'] = $death_cross_ema_50_vs_200;

        return $this;
    }

    /**
     * Gets death_cross_sma_20_vs_200
     *
     * @return string|null
     */
    public function getDeathCrossSma20Vs200()
    {
        return $this->container['death_cross_sma_20_vs_200'];
    }

    /**
     * Sets death_cross_sma_20_vs_200
     *
     * @param string|null $death_cross_sma_20_vs_200 A death cross occurs when a stock's 20-day moving average crosses from above to below its 200-day moving average at some point in the past week.
     *
     * @return self
     */
    public function setDeathCrossSma20Vs200($death_cross_sma_20_vs_200)
    {
        if (is_null($death_cross_sma_20_vs_200)) {
            throw new \InvalidArgumentException('non-nullable death_cross_sma_20_vs_200 cannot be null');
        }
        $this->container['death_cross_sma_20_vs_200'] = $death_cross_sma_20_vs_200;

        return $this;
    }

    /**
     * Gets death_cross_sma_20_vs_50
     *
     * @return string|null
     */
    public function getDeathCrossSma20Vs50()
    {
        return $this->container['death_cross_sma_20_vs_50'];
    }

    /**
     * Sets death_cross_sma_20_vs_50
     *
     * @param string|null $death_cross_sma_20_vs_50 A death cross occurs when a stock's 20-day moving average crosses from above to below its 50-day moving average at some point in the past week.
     *
     * @return self
     */
    public function setDeathCrossSma20Vs50($death_cross_sma_20_vs_50)
    {
        if (is_null($death_cross_sma_20_vs_50)) {
            throw new \InvalidArgumentException('non-nullable death_cross_sma_20_vs_50 cannot be null');
        }
        $this->container['death_cross_sma_20_vs_50'] = $death_cross_sma_20_vs_50;

        return $this;
    }

    /**
     * Gets death_cross_sma_50_vs_200
     *
     * @return string|null
     */
    public function getDeathCrossSma50Vs200()
    {
        return $this->container['death_cross_sma_50_vs_200'];
    }

    /**
     * Sets death_cross_sma_50_vs_200
     *
     * @param string|null $death_cross_sma_50_vs_200 A death cross occurs when a stock's 50-day moving average crosses from above to below its 200-day moving average at some point in the past week.
     *
     * @return self
     */
    public function setDeathCrossSma50Vs200($death_cross_sma_50_vs_200)
    {
        if (is_null($death_cross_sma_50_vs_200)) {
            throw new \InvalidArgumentException('non-nullable death_cross_sma_50_vs_200 cannot be null');
        }
        $this->container['death_cross_sma_50_vs_200'] = $death_cross_sma_50_vs_200;

        return $this;
    }

    /**
     * Gets display_timestamp
     *
     * @return string|null
     */
    public function getDisplayTimestamp()
    {
        return $this->container['display_timestamp'];
    }

    /**
     * Sets display_timestamp
     *
     * @param string|null $display_timestamp display_timestamp
     *
     * @return self
     */
    public function setDisplayTimestamp($display_timestamp)
    {
        if (is_null($display_timestamp)) {
            throw new \InvalidArgumentException('non-nullable display_timestamp cannot be null');
        }
        $this->container['display_timestamp'] = $display_timestamp;

        return $this;
    }

    /**
     * Gets ema_20
     *
     * @return float|null
     */
    public function getEma20()
    {
        return $this->container['ema_20'];
    }

    /**
     * Sets ema_20
     *
     * @param float|null $ema_20 The exponential moving average, i.e., the exponential smoothing average share price, over the past 20 days.
     *
     * @return self
     */
    public function setEma20($ema_20)
    {
        if (is_null($ema_20)) {
            throw new \InvalidArgumentException('non-nullable ema_20 cannot be null');
        }
        $this->container['ema_20'] = $ema_20;

        return $this;
    }

    /**
     * Gets ema_200
     *
     * @return float|null
     */
    public function getEma200()
    {
        return $this->container['ema_200'];
    }

    /**
     * Sets ema_200
     *
     * @param float|null $ema_200 The exponential moving average, i.e., the exponential smoothing average share price, over the past 200 days.
     *
     * @return self
     */
    public function setEma200($ema_200)
    {
        if (is_null($ema_200)) {
            throw new \InvalidArgumentException('non-nullable ema_200 cannot be null');
        }
        $this->container['ema_200'] = $ema_200;

        return $this;
    }

    /**
     * Gets ema_50
     *
     * @return float|null
     */
    public function getEma50()
    {
        return $this->container['ema_50'];
    }

    /**
     * Sets ema_50
     *
     * @param float|null $ema_50 The exponential moving average, i.e., the exponential smoothing average share price, over the past 50 days.
     *
     * @return self
     */
    public function setEma50($ema_50)
    {
        if (is_null($ema_50)) {
            throw new \InvalidArgumentException('non-nullable ema_50 cannot be null');
        }
        $this->container['ema_50'] = $ema_50;

        return $this;
    }

    /**
     * Gets float
     *
     * @return float|null
     */
    public function getFloat()
    {
        return $this->container['float'];
    }

    /**
     * Sets float
     *
     * @param float|null $float The actual number of company shares available for trading
     *
     * @return self
     */
    public function setFloat($float)
    {
        if (is_null($float)) {
            throw new \InvalidArgumentException('non-nullable float cannot be null');
        }
        $this->container['float'] = $float;

        return $this;
    }

    /**
     * Gets golden_cross_ema_20_vs_200
     *
     * @return string|null
     */
    public function getGoldenCrossEma20Vs200()
    {
        return $this->container['golden_cross_ema_20_vs_200'];
    }

    /**
     * Sets golden_cross_ema_20_vs_200
     *
     * @param string|null $golden_cross_ema_20_vs_200 A golden cross (EMA 20 vs 200) occurs when a stock's 20-day exponential moving average crosses above its 200-day exponential moving average at some point in the past week.
     *
     * @return self
     */
    public function setGoldenCrossEma20Vs200($golden_cross_ema_20_vs_200)
    {
        if (is_null($golden_cross_ema_20_vs_200)) {
            throw new \InvalidArgumentException('non-nullable golden_cross_ema_20_vs_200 cannot be null');
        }
        $this->container['golden_cross_ema_20_vs_200'] = $golden_cross_ema_20_vs_200;

        return $this;
    }

    /**
     * Gets golden_cross_ema_20_vs_50
     *
     * @return string|null
     */
    public function getGoldenCrossEma20Vs50()
    {
        return $this->container['golden_cross_ema_20_vs_50'];
    }

    /**
     * Sets golden_cross_ema_20_vs_50
     *
     * @param string|null $golden_cross_ema_20_vs_50 A golden cross (EMA 20 vs 50) occurs when a stock's 20-day exponential moving average crosses above its 50-day exponential moving average at some point in the past week.
     *
     * @return self
     */
    public function setGoldenCrossEma20Vs50($golden_cross_ema_20_vs_50)
    {
        if (is_null($golden_cross_ema_20_vs_50)) {
            throw new \InvalidArgumentException('non-nullable golden_cross_ema_20_vs_50 cannot be null');
        }
        $this->container['golden_cross_ema_20_vs_50'] = $golden_cross_ema_20_vs_50;

        return $this;
    }

    /**
     * Gets golden_cross_ema_50_vs_200
     *
     * @return string|null
     */
    public function getGoldenCrossEma50Vs200()
    {
        return $this->container['golden_cross_ema_50_vs_200'];
    }

    /**
     * Sets golden_cross_ema_50_vs_200
     *
     * @param string|null $golden_cross_ema_50_vs_200 A golden cross (EMA 50 vs 200) occurs when a stock's 50-day exponential moving average crosses above its 200-day exponential moving average at some point in the past week.
     *
     * @return self
     */
    public function setGoldenCrossEma50Vs200($golden_cross_ema_50_vs_200)
    {
        if (is_null($golden_cross_ema_50_vs_200)) {
            throw new \InvalidArgumentException('non-nullable golden_cross_ema_50_vs_200 cannot be null');
        }
        $this->container['golden_cross_ema_50_vs_200'] = $golden_cross_ema_50_vs_200;

        return $this;
    }

    /**
     * Gets golden_cross_sma_20_vs_200
     *
     * @return string|null
     */
    public function getGoldenCrossSma20Vs200()
    {
        return $this->container['golden_cross_sma_20_vs_200'];
    }

    /**
     * Sets golden_cross_sma_20_vs_200
     *
     * @param string|null $golden_cross_sma_20_vs_200 A golden cross occurs when a stock's 20-day moving average crosses above its 200-day moving average at some point in the past week.
     *
     * @return self
     */
    public function setGoldenCrossSma20Vs200($golden_cross_sma_20_vs_200)
    {
        if (is_null($golden_cross_sma_20_vs_200)) {
            throw new \InvalidArgumentException('non-nullable golden_cross_sma_20_vs_200 cannot be null');
        }
        $this->container['golden_cross_sma_20_vs_200'] = $golden_cross_sma_20_vs_200;

        return $this;
    }

    /**
     * Gets golden_cross_sma_20_vs_50
     *
     * @return string|null
     */
    public function getGoldenCrossSma20Vs50()
    {
        return $this->container['golden_cross_sma_20_vs_50'];
    }

    /**
     * Sets golden_cross_sma_20_vs_50
     *
     * @param string|null $golden_cross_sma_20_vs_50 A golden cross occurs when a stock's 20-day moving average crosses above its 50-day moving average at some point in the past week.
     *
     * @return self
     */
    public function setGoldenCrossSma20Vs50($golden_cross_sma_20_vs_50)
    {
        if (is_null($golden_cross_sma_20_vs_50)) {
            throw new \InvalidArgumentException('non-nullable golden_cross_sma_20_vs_50 cannot be null');
        }
        $this->container['golden_cross_sma_20_vs_50'] = $golden_cross_sma_20_vs_50;

        return $this;
    }

    /**
     * Gets golden_cross_sma_50_vs_200
     *
     * @return string|null
     */
    public function getGoldenCrossSma50Vs200()
    {
        return $this->container['golden_cross_sma_50_vs_200'];
    }

    /**
     * Sets golden_cross_sma_50_vs_200
     *
     * @param string|null $golden_cross_sma_50_vs_200 A golden cross occurs when a stock's 50-day moving average crosses above its 200-day moving average at some point in the past week.
     *
     * @return self
     */
    public function setGoldenCrossSma50Vs200($golden_cross_sma_50_vs_200)
    {
        if (is_null($golden_cross_sma_50_vs_200)) {
            throw new \InvalidArgumentException('non-nullable golden_cross_sma_50_vs_200 cannot be null');
        }
        $this->container['golden_cross_sma_50_vs_200'] = $golden_cross_sma_50_vs_200;

        return $this;
    }

    /**
     * Gets high
     *
     * @return float|null
     */
    public function getHigh()
    {
        return $this->container['high'];
    }

    /**
     * Sets high
     *
     * @param float|null $high The company's intraday high share price
     *
     * @return self
     */
    public function setHigh($high)
    {
        if (is_null($high)) {
            throw new \InvalidArgumentException('non-nullable high cannot be null');
        }
        $this->container['high'] = $high;

        return $this;
    }

    /**
     * Gets low
     *
     * @return float|null
     */
    public function getLow()
    {
        return $this->container['low'];
    }

    /**
     * Sets low
     *
     * @param float|null $low The company's intraday low share price
     *
     * @return self
     */
    public function setLow($low)
    {
        if (is_null($low)) {
            throw new \InvalidArgumentException('non-nullable low cannot be null');
        }
        $this->container['low'] = $low;

        return $this;
    }

    /**
     * Gets macd_death_cross_signal
     *
     * @return string|null
     */
    public function getMacdDeathCrossSignal()
    {
        return $this->container['macd_death_cross_signal'];
    }

    /**
     * Sets macd_death_cross_signal
     *
     * @param string|null $macd_death_cross_signal MACD Crossed Below Signal indicates that the macd line crossed below the signal line at some point in the past week.
     *
     * @return self
     */
    public function setMacdDeathCrossSignal($macd_death_cross_signal)
    {
        if (is_null($macd_death_cross_signal)) {
            throw new \InvalidArgumentException('non-nullable macd_death_cross_signal cannot be null');
        }
        $this->container['macd_death_cross_signal'] = $macd_death_cross_signal;

        return $this;
    }

    /**
     * Gets macd_golden_cross_signal
     *
     * @return string|null
     */
    public function getMacdGoldenCrossSignal()
    {
        return $this->container['macd_golden_cross_signal'];
    }

    /**
     * Sets macd_golden_cross_signal
     *
     * @param string|null $macd_golden_cross_signal MACD Crossed Above Signal indicates that the macd line crossed above the signal line at some point in the past week.
     *
     * @return self
     */
    public function setMacdGoldenCrossSignal($macd_golden_cross_signal)
    {
        if (is_null($macd_golden_cross_signal)) {
            throw new \InvalidArgumentException('non-nullable macd_golden_cross_signal cannot be null');
        }
        $this->container['macd_golden_cross_signal'] = $macd_golden_cross_signal;

        return $this;
    }

    /**
     * Gets macd_line
     *
     * @return float|null
     */
    public function getMacdLine()
    {
        return $this->container['macd_line'];
    }

    /**
     * Sets macd_line
     *
     * @param float|null $macd_line An MACD Line is created by subtracting the 26-period EMA from the 12-period EMA.
     *
     * @return self
     */
    public function setMacdLine($macd_line)
    {
        if (is_null($macd_line)) {
            throw new \InvalidArgumentException('non-nullable macd_line cannot be null');
        }
        $this->container['macd_line'] = $macd_line;

        return $this;
    }

    /**
     * Gets macd_signal_line
     *
     * @return float|null
     */
    public function getMacdSignalLine()
    {
        return $this->container['macd_signal_line'];
    }

    /**
     * Sets macd_signal_line
     *
     * @param float|null $macd_signal_line An MACD Signal Line is a nine-day EMA of the MACD line.
     *
     * @return self
     */
    public function setMacdSignalLine($macd_signal_line)
    {
        if (is_null($macd_signal_line)) {
            throw new \InvalidArgumentException('non-nullable macd_signal_line cannot be null');
        }
        $this->container['macd_signal_line'] = $macd_signal_line;

        return $this;
    }

    /**
     * Gets open
     *
     * @return float|null
     */
    public function getOpen()
    {
        return $this->container['open'];
    }

    /**
     * Sets open
     *
     * @param float|null $open The company's share price at market open
     *
     * @return self
     */
    public function setOpen($open)
    {
        if (is_null($open)) {
            throw new \InvalidArgumentException('non-nullable open cannot be null');
        }
        $this->container['open'] = $open;

        return $this;
    }

    /**
     * Gets p_pct_change
     *
     * @return float|null
     */
    public function getPPctChange()
    {
        return $this->container['p_pct_change'];
    }

    /**
     * Sets p_pct_change
     *
     * @param float|null $p_pct_change The percent change of a company's share price based on the previous close.
     *
     * @return self
     */
    public function setPPctChange($p_pct_change)
    {
        if (is_null($p_pct_change)) {
            throw new \InvalidArgumentException('non-nullable p_pct_change cannot be null');
        }
        $this->container['p_pct_change'] = $p_pct_change;

        return $this;
    }

    /**
     * Gets pchange_sp_10y
     *
     * @return float|null
     */
    public function getPchangeSp10y()
    {
        return $this->container['pchange_sp_10y'];
    }

    /**
     * Sets pchange_sp_10y
     *
     * @param float|null $pchange_sp_10y The annulized total return of the stock over the past ten years, relative to the S&P 500.
     *
     * @return self
     */
    public function setPchangeSp10y($pchange_sp_10y)
    {
        if (is_null($pchange_sp_10y)) {
            throw new \InvalidArgumentException('non-nullable pchange_sp_10y cannot be null');
        }
        $this->container['pchange_sp_10y'] = $pchange_sp_10y;

        return $this;
    }

    /**
     * Gets pchange_sp_12w
     *
     * @return float|null
     */
    public function getPchangeSp12w()
    {
        return $this->container['pchange_sp_12w'];
    }

    /**
     * Sets pchange_sp_12w
     *
     * @param float|null $pchange_sp_12w The total return of the stock over the past three months, relative to the S&P 500
     *
     * @return self
     */
    public function setPchangeSp12w($pchange_sp_12w)
    {
        if (is_null($pchange_sp_12w)) {
            throw new \InvalidArgumentException('non-nullable pchange_sp_12w cannot be null');
        }
        $this->container['pchange_sp_12w'] = $pchange_sp_12w;

        return $this;
    }

    /**
     * Gets pchange_sp_15y
     *
     * @return float|null
     */
    public function getPchangeSp15y()
    {
        return $this->container['pchange_sp_15y'];
    }

    /**
     * Sets pchange_sp_15y
     *
     * @param float|null $pchange_sp_15y The annulized total return of the stock over the past 15 years, relative to the S&P 500.
     *
     * @return self
     */
    public function setPchangeSp15y($pchange_sp_15y)
    {
        if (is_null($pchange_sp_15y)) {
            throw new \InvalidArgumentException('non-nullable pchange_sp_15y cannot be null');
        }
        $this->container['pchange_sp_15y'] = $pchange_sp_15y;

        return $this;
    }

    /**
     * Gets pchange_sp_1w
     *
     * @return float|null
     */
    public function getPchangeSp1w()
    {
        return $this->container['pchange_sp_1w'];
    }

    /**
     * Sets pchange_sp_1w
     *
     * @param float|null $pchange_sp_1w The total return of the stock over the past week, relative to the S&P 500
     *
     * @return self
     */
    public function setPchangeSp1w($pchange_sp_1w)
    {
        if (is_null($pchange_sp_1w)) {
            throw new \InvalidArgumentException('non-nullable pchange_sp_1w cannot be null');
        }
        $this->container['pchange_sp_1w'] = $pchange_sp_1w;

        return $this;
    }

    /**
     * Gets pchange_sp_20y
     *
     * @return float|null
     */
    public function getPchangeSp20y()
    {
        return $this->container['pchange_sp_20y'];
    }

    /**
     * Sets pchange_sp_20y
     *
     * @param float|null $pchange_sp_20y The annulized total return of the stock over the past 20 years, relative to the S&P 500.
     *
     * @return self
     */
    public function setPchangeSp20y($pchange_sp_20y)
    {
        if (is_null($pchange_sp_20y)) {
            throw new \InvalidArgumentException('non-nullable pchange_sp_20y cannot be null');
        }
        $this->container['pchange_sp_20y'] = $pchange_sp_20y;

        return $this;
    }

    /**
     * Gets pchange_sp_24w
     *
     * @return float|null
     */
    public function getPchangeSp24w()
    {
        return $this->container['pchange_sp_24w'];
    }

    /**
     * Sets pchange_sp_24w
     *
     * @param float|null $pchange_sp_24w The total return of the stock over the past six months, relative to the S&P 500
     *
     * @return self
     */
    public function setPchangeSp24w($pchange_sp_24w)
    {
        if (is_null($pchange_sp_24w)) {
            throw new \InvalidArgumentException('non-nullable pchange_sp_24w cannot be null');
        }
        $this->container['pchange_sp_24w'] = $pchange_sp_24w;

        return $this;
    }

    /**
     * Gets pchange_sp_3y
     *
     * @return float|null
     */
    public function getPchangeSp3y()
    {
        return $this->container['pchange_sp_3y'];
    }

    /**
     * Sets pchange_sp_3y
     *
     * @param float|null $pchange_sp_3y The annulized total return of the stock over the past three years, relative to the S&P 500.
     *
     * @return self
     */
    public function setPchangeSp3y($pchange_sp_3y)
    {
        if (is_null($pchange_sp_3y)) {
            throw new \InvalidArgumentException('non-nullable pchange_sp_3y cannot be null');
        }
        $this->container['pchange_sp_3y'] = $pchange_sp_3y;

        return $this;
    }

    /**
     * Gets pchange_sp_4w
     *
     * @return float|null
     */
    public function getPchangeSp4w()
    {
        return $this->container['pchange_sp_4w'];
    }

    /**
     * Sets pchange_sp_4w
     *
     * @param float|null $pchange_sp_4w The total return of the stock over the past month, relative to the S&P 500
     *
     * @return self
     */
    public function setPchangeSp4w($pchange_sp_4w)
    {
        if (is_null($pchange_sp_4w)) {
            throw new \InvalidArgumentException('non-nullable pchange_sp_4w cannot be null');
        }
        $this->container['pchange_sp_4w'] = $pchange_sp_4w;

        return $this;
    }

    /**
     * Gets pchange_sp_52w
     *
     * @return float|null
     */
    public function getPchangeSp52w()
    {
        return $this->container['pchange_sp_52w'];
    }

    /**
     * Sets pchange_sp_52w
     *
     * @param float|null $pchange_sp_52w The total return of the stock over the past 12 months, relative to the S&P 500
     *
     * @return self
     */
    public function setPchangeSp52w($pchange_sp_52w)
    {
        if (is_null($pchange_sp_52w)) {
            throw new \InvalidArgumentException('non-nullable pchange_sp_52w cannot be null');
        }
        $this->container['pchange_sp_52w'] = $pchange_sp_52w;

        return $this;
    }

    /**
     * Gets pchange_sp_5y
     *
     * @return float|null
     */
    public function getPchangeSp5y()
    {
        return $this->container['pchange_sp_5y'];
    }

    /**
     * Sets pchange_sp_5y
     *
     * @param float|null $pchange_sp_5y The annulized total return of the stock over the past five years, relative to the S&P 500.
     *
     * @return self
     */
    public function setPchangeSp5y($pchange_sp_5y)
    {
        if (is_null($pchange_sp_5y)) {
            throw new \InvalidArgumentException('non-nullable pchange_sp_5y cannot be null');
        }
        $this->container['pchange_sp_5y'] = $pchange_sp_5y;

        return $this;
    }

    /**
     * Gets pchange_sp_ytd
     *
     * @return float|null
     */
    public function getPchangeSpYtd()
    {
        return $this->container['pchange_sp_ytd'];
    }

    /**
     * Sets pchange_sp_ytd
     *
     * @param float|null $pchange_sp_ytd The total return of the stock year to date, relative to the S&P 500
     *
     * @return self
     */
    public function setPchangeSpYtd($pchange_sp_ytd)
    {
        if (is_null($pchange_sp_ytd)) {
            throw new \InvalidArgumentException('non-nullable pchange_sp_ytd cannot be null');
        }
        $this->container['pchange_sp_ytd'] = $pchange_sp_ytd;

        return $this;
    }

    /**
     * Gets pchange_10y
     *
     * @return float|null
     */
    public function getPchange10y()
    {
        return $this->container['pchange_10y'];
    }

    /**
     * Sets pchange_10y
     *
     * @param float|null $pchange_10y The total return of the stock on a 10-year, annualized basis
     *
     * @return self
     */
    public function setPchange10y($pchange_10y)
    {
        if (is_null($pchange_10y)) {
            throw new \InvalidArgumentException('non-nullable pchange_10y cannot be null');
        }
        $this->container['pchange_10y'] = $pchange_10y;

        return $this;
    }

    /**
     * Gets pchange_12_1m
     *
     * @return float|null
     */
    public function getPchange121m()
    {
        return $this->container['pchange_12_1m'];
    }

    /**
     * Sets pchange_12_1m
     *
     * @param float|null $pchange_12_1m The total return of the stock from 12-month ago to 1-month ago.
     *
     * @return self
     */
    public function setPchange121m($pchange_12_1m)
    {
        if (is_null($pchange_12_1m)) {
            throw new \InvalidArgumentException('non-nullable pchange_12_1m cannot be null');
        }
        $this->container['pchange_12_1m'] = $pchange_12_1m;

        return $this;
    }

    /**
     * Gets pchange_12w
     *
     * @return float|null
     */
    public function getPchange12w()
    {
        return $this->container['pchange_12w'];
    }

    /**
     * Sets pchange_12w
     *
     * @param float|null $pchange_12w The total return of the stock over the past three months
     *
     * @return self
     */
    public function setPchange12w($pchange_12w)
    {
        if (is_null($pchange_12w)) {
            throw new \InvalidArgumentException('non-nullable pchange_12w cannot be null');
        }
        $this->container['pchange_12w'] = $pchange_12w;

        return $this;
    }

    /**
     * Gets pchange_15y
     *
     * @return float|null
     */
    public function getPchange15y()
    {
        return $this->container['pchange_15y'];
    }

    /**
     * Sets pchange_15y
     *
     * @param float|null $pchange_15y The annulized total return of the stock over the past 15 years.
     *
     * @return self
     */
    public function setPchange15y($pchange_15y)
    {
        if (is_null($pchange_15y)) {
            throw new \InvalidArgumentException('non-nullable pchange_15y cannot be null');
        }
        $this->container['pchange_15y'] = $pchange_15y;

        return $this;
    }

    /**
     * Gets pchange_1w
     *
     * @return float|null
     */
    public function getPchange1w()
    {
        return $this->container['pchange_1w'];
    }

    /**
     * Sets pchange_1w
     *
     * @param float|null $pchange_1w The total return of the stock over the past week
     *
     * @return self
     */
    public function setPchange1w($pchange_1w)
    {
        if (is_null($pchange_1w)) {
            throw new \InvalidArgumentException('non-nullable pchange_1w cannot be null');
        }
        $this->container['pchange_1w'] = $pchange_1w;

        return $this;
    }

    /**
     * Gets pchange_20y
     *
     * @return float|null
     */
    public function getPchange20y()
    {
        return $this->container['pchange_20y'];
    }

    /**
     * Sets pchange_20y
     *
     * @param float|null $pchange_20y The annulized total return of the stock over the past 20 years.
     *
     * @return self
     */
    public function setPchange20y($pchange_20y)
    {
        if (is_null($pchange_20y)) {
            throw new \InvalidArgumentException('non-nullable pchange_20y cannot be null');
        }
        $this->container['pchange_20y'] = $pchange_20y;

        return $this;
    }

    /**
     * Gets pchange_24w
     *
     * @return float|null
     */
    public function getPchange24w()
    {
        return $this->container['pchange_24w'];
    }

    /**
     * Sets pchange_24w
     *
     * @param float|null $pchange_24w The total return of the stock over the past six months
     *
     * @return self
     */
    public function setPchange24w($pchange_24w)
    {
        if (is_null($pchange_24w)) {
            throw new \InvalidArgumentException('non-nullable pchange_24w cannot be null');
        }
        $this->container['pchange_24w'] = $pchange_24w;

        return $this;
    }

    /**
     * Gets pchange_3_1m
     *
     * @return float|null
     */
    public function getPchange31m()
    {
        return $this->container['pchange_3_1m'];
    }

    /**
     * Sets pchange_3_1m
     *
     * @param float|null $pchange_3_1m The total return of the stock from 3-month ago to 1-month ago.
     *
     * @return self
     */
    public function setPchange31m($pchange_3_1m)
    {
        if (is_null($pchange_3_1m)) {
            throw new \InvalidArgumentException('non-nullable pchange_3_1m cannot be null');
        }
        $this->container['pchange_3_1m'] = $pchange_3_1m;

        return $this;
    }

    /**
     * Gets pchange_3y
     *
     * @return float|null
     */
    public function getPchange3y()
    {
        return $this->container['pchange_3y'];
    }

    /**
     * Sets pchange_3y
     *
     * @param float|null $pchange_3y The total return of the stock on a three-year, annualized basis
     *
     * @return self
     */
    public function setPchange3y($pchange_3y)
    {
        if (is_null($pchange_3y)) {
            throw new \InvalidArgumentException('non-nullable pchange_3y cannot be null');
        }
        $this->container['pchange_3y'] = $pchange_3y;

        return $this;
    }

    /**
     * Gets pchange_4w
     *
     * @return float|null
     */
    public function getPchange4w()
    {
        return $this->container['pchange_4w'];
    }

    /**
     * Sets pchange_4w
     *
     * @param float|null $pchange_4w The total return of the stock over the past month
     *
     * @return self
     */
    public function setPchange4w($pchange_4w)
    {
        if (is_null($pchange_4w)) {
            throw new \InvalidArgumentException('non-nullable pchange_4w cannot be null');
        }
        $this->container['pchange_4w'] = $pchange_4w;

        return $this;
    }

    /**
     * Gets pchange_52w
     *
     * @return float|null
     */
    public function getPchange52w()
    {
        return $this->container['pchange_52w'];
    }

    /**
     * Sets pchange_52w
     *
     * @param float|null $pchange_52w The total return of the stock over the past 12 months
     *
     * @return self
     */
    public function setPchange52w($pchange_52w)
    {
        if (is_null($pchange_52w)) {
            throw new \InvalidArgumentException('non-nullable pchange_52w cannot be null');
        }
        $this->container['pchange_52w'] = $pchange_52w;

        return $this;
    }

    /**
     * Gets pchange_5y
     *
     * @return float|null
     */
    public function getPchange5y()
    {
        return $this->container['pchange_5y'];
    }

    /**
     * Sets pchange_5y
     *
     * @param float|null $pchange_5y The total return of the stock on a five-year, annualized basis
     *
     * @return self
     */
    public function setPchange5y($pchange_5y)
    {
        if (is_null($pchange_5y)) {
            throw new \InvalidArgumentException('non-nullable pchange_5y cannot be null');
        }
        $this->container['pchange_5y'] = $pchange_5y;

        return $this;
    }

    /**
     * Gets pchange_6_1m
     *
     * @return float|null
     */
    public function getPchange61m()
    {
        return $this->container['pchange_6_1m'];
    }

    /**
     * Sets pchange_6_1m
     *
     * @param float|null $pchange_6_1m The total return of the stock from 6-month ago to 1-month ago.
     *
     * @return self
     */
    public function setPchange61m($pchange_6_1m)
    {
        if (is_null($pchange_6_1m)) {
            throw new \InvalidArgumentException('non-nullable pchange_6_1m cannot be null');
        }
        $this->container['pchange_6_1m'] = $pchange_6_1m;

        return $this;
    }

    /**
     * Gets pchange_ytd
     *
     * @return float|null
     */
    public function getPchangeYtd()
    {
        return $this->container['pchange_ytd'];
    }

    /**
     * Sets pchange_ytd
     *
     * @param float|null $pchange_ytd The total return of the stock year to date
     *
     * @return self
     */
    public function setPchangeYtd($pchange_ytd)
    {
        if (is_null($pchange_ytd)) {
            throw new \InvalidArgumentException('non-nullable pchange_ytd cannot be null');
        }
        $this->container['pchange_ytd'] = $pchange_ytd;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price The current share price of the stock
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price10yhigh
     *
     * @return float|null
     */
    public function getPrice10yhigh()
    {
        return $this->container['price10yhigh'];
    }

    /**
     * Sets price10yhigh
     *
     * @param float|null $price10yhigh The highest share price over the past 10 years
     *
     * @return self
     */
    public function setPrice10yhigh($price10yhigh)
    {
        if (is_null($price10yhigh)) {
            throw new \InvalidArgumentException('non-nullable price10yhigh cannot be null');
        }
        $this->container['price10yhigh'] = $price10yhigh;

        return $this;
    }

    /**
     * Gets price10ylow
     *
     * @return float|null
     */
    public function getPrice10ylow()
    {
        return $this->container['price10ylow'];
    }

    /**
     * Sets price10ylow
     *
     * @param float|null $price10ylow The lowest share price over the past 10 years
     *
     * @return self
     */
    public function setPrice10ylow($price10ylow)
    {
        if (is_null($price10ylow)) {
            throw new \InvalidArgumentException('non-nullable price10ylow cannot be null');
        }
        $this->container['price10ylow'] = $price10ylow;

        return $this;
    }

    /**
     * Gets price3yhigh
     *
     * @return float|null
     */
    public function getPrice3yhigh()
    {
        return $this->container['price3yhigh'];
    }

    /**
     * Sets price3yhigh
     *
     * @param float|null $price3yhigh The highest share price over the past three years
     *
     * @return self
     */
    public function setPrice3yhigh($price3yhigh)
    {
        if (is_null($price3yhigh)) {
            throw new \InvalidArgumentException('non-nullable price3yhigh cannot be null');
        }
        $this->container['price3yhigh'] = $price3yhigh;

        return $this;
    }

    /**
     * Gets price3ylow
     *
     * @return float|null
     */
    public function getPrice3ylow()
    {
        return $this->container['price3ylow'];
    }

    /**
     * Sets price3ylow
     *
     * @param float|null $price3ylow The lowest share price over the past three years
     *
     * @return self
     */
    public function setPrice3ylow($price3ylow)
    {
        if (is_null($price3ylow)) {
            throw new \InvalidArgumentException('non-nullable price3ylow cannot be null');
        }
        $this->container['price3ylow'] = $price3ylow;

        return $this;
    }

    /**
     * Gets price52whigh
     *
     * @return float|null
     */
    public function getPrice52whigh()
    {
        return $this->container['price52whigh'];
    }

    /**
     * Sets price52whigh
     *
     * @param float|null $price52whigh The highest share price over the past 52 weeks
     *
     * @return self
     */
    public function setPrice52whigh($price52whigh)
    {
        if (is_null($price52whigh)) {
            throw new \InvalidArgumentException('non-nullable price52whigh cannot be null');
        }
        $this->container['price52whigh'] = $price52whigh;

        return $this;
    }

    /**
     * Gets price52wlow
     *
     * @return float|null
     */
    public function getPrice52wlow()
    {
        return $this->container['price52wlow'];
    }

    /**
     * Sets price52wlow
     *
     * @param float|null $price52wlow The lowest share price over the past 52 weeks
     *
     * @return self
     */
    public function setPrice52wlow($price52wlow)
    {
        if (is_null($price52wlow)) {
            throw new \InvalidArgumentException('non-nullable price52wlow cannot be null');
        }
        $this->container['price52wlow'] = $price52wlow;

        return $this;
    }

    /**
     * Gets price5yhigh
     *
     * @return float|null
     */
    public function getPrice5yhigh()
    {
        return $this->container['price5yhigh'];
    }

    /**
     * Sets price5yhigh
     *
     * @param float|null $price5yhigh The highest share price over the past five years
     *
     * @return self
     */
    public function setPrice5yhigh($price5yhigh)
    {
        if (is_null($price5yhigh)) {
            throw new \InvalidArgumentException('non-nullable price5yhigh cannot be null');
        }
        $this->container['price5yhigh'] = $price5yhigh;

        return $this;
    }

    /**
     * Gets price5ylow
     *
     * @return float|null
     */
    public function getPrice5ylow()
    {
        return $this->container['price5ylow'];
    }

    /**
     * Sets price5ylow
     *
     * @param float|null $price5ylow The lowest share price over the past five years
     *
     * @return self
     */
    public function setPrice5ylow($price5ylow)
    {
        if (is_null($price5ylow)) {
            throw new \InvalidArgumentException('non-nullable price5ylow cannot be null');
        }
        $this->container['price5ylow'] = $price5ylow;

        return $this;
    }

    /**
     * Gets price_stdv_20
     *
     * @return float|null
     */
    public function getPriceStdv20()
    {
        return $this->container['price_stdv_20'];
    }

    /**
     * Sets price_stdv_20
     *
     * @param float|null $price_stdv_20 price_stdv_20
     *
     * @return self
     */
    public function setPriceStdv20($price_stdv_20)
    {
        if (is_null($price_stdv_20)) {
            throw new \InvalidArgumentException('non-nullable price_stdv_20 cannot be null');
        }
        $this->container['price_stdv_20'] = $price_stdv_20;

        return $this;
    }

    /**
     * Gets price_stdv_200
     *
     * @return float|null
     */
    public function getPriceStdv200()
    {
        return $this->container['price_stdv_200'];
    }

    /**
     * Sets price_stdv_200
     *
     * @param float|null $price_stdv_200 price_stdv_200
     *
     * @return self
     */
    public function setPriceStdv200($price_stdv_200)
    {
        if (is_null($price_stdv_200)) {
            throw new \InvalidArgumentException('non-nullable price_stdv_200 cannot be null');
        }
        $this->container['price_stdv_200'] = $price_stdv_200;

        return $this;
    }

    /**
     * Gets price_stdv_50
     *
     * @return float|null
     */
    public function getPriceStdv50()
    {
        return $this->container['price_stdv_50'];
    }

    /**
     * Sets price_stdv_50
     *
     * @param float|null $price_stdv_50 price_stdv_50
     *
     * @return self
     */
    public function setPriceStdv50($price_stdv_50)
    {
        if (is_null($price_stdv_50)) {
            throw new \InvalidArgumentException('non-nullable price_stdv_50 cannot be null');
        }
        $this->container['price_stdv_50'] = $price_stdv_50;

        return $this;
    }

    /**
     * Gets pricehishigh
     *
     * @return float|null
     */
    public function getPricehishigh()
    {
        return $this->container['pricehishigh'];
    }

    /**
     * Sets pricehishigh
     *
     * @param float|null $pricehishigh pricehishigh
     *
     * @return self
     */
    public function setPricehishigh($pricehishigh)
    {
        if (is_null($pricehishigh)) {
            throw new \InvalidArgumentException('non-nullable pricehishigh cannot be null');
        }
        $this->container['pricehishigh'] = $pricehishigh;

        return $this;
    }

    /**
     * Gets pricehislow
     *
     * @return float|null
     */
    public function getPricehislow()
    {
        return $this->container['pricehislow'];
    }

    /**
     * Sets pricehislow
     *
     * @param float|null $pricehislow pricehislow
     *
     * @return self
     */
    public function setPricehislow($pricehislow)
    {
        if (is_null($pricehislow)) {
            throw new \InvalidArgumentException('non-nullable pricehislow cannot be null');
        }
        $this->container['pricehislow'] = $pricehislow;

        return $this;
    }

    /**
     * Gets priceindex_6m
     *
     * @return float|null
     */
    public function getPriceindex6m()
    {
        return $this->container['priceindex_6m'];
    }

    /**
     * Sets priceindex_6m
     *
     * @param float|null $priceindex_6m The six-month price index: Current Share Price divided by Share Price Six Months Ago
     *
     * @return self
     */
    public function setPriceindex6m($priceindex_6m)
    {
        if (is_null($priceindex_6m)) {
            throw new \InvalidArgumentException('non-nullable priceindex_6m cannot be null');
        }
        $this->container['priceindex_6m'] = $priceindex_6m;

        return $this;
    }

    /**
     * Gets rsi_14
     *
     * @return float|null
     */
    public function getRsi14()
    {
        return $this->container['rsi_14'];
    }

    /**
     * Sets rsi_14
     *
     * @param float|null $rsi_14 The relative strength index, i.e., a value that closely captures the average gain on up days divided by the average loss non down days, over the past 14 days
     *
     * @return self
     */
    public function setRsi14($rsi_14)
    {
        if (is_null($rsi_14)) {
            throw new \InvalidArgumentException('non-nullable rsi_14 cannot be null');
        }
        $this->container['rsi_14'] = $rsi_14;

        return $this;
    }

    /**
     * Gets rsi_30
     *
     * @return float|null
     */
    public function getRsi30()
    {
        return $this->container['rsi_30'];
    }

    /**
     * Sets rsi_30
     *
     * @param float|null $rsi_30 rsi_30
     *
     * @return self
     */
    public function setRsi30($rsi_30)
    {
        if (is_null($rsi_30)) {
            throw new \InvalidArgumentException('non-nullable rsi_30 cannot be null');
        }
        $this->container['rsi_30'] = $rsi_30;

        return $this;
    }

    /**
     * Gets rsi_5
     *
     * @return float|null
     */
    public function getRsi5()
    {
        return $this->container['rsi_5'];
    }

    /**
     * Sets rsi_5
     *
     * @param float|null $rsi_5 rsi_5
     *
     * @return self
     */
    public function setRsi5($rsi_5)
    {
        if (is_null($rsi_5)) {
            throw new \InvalidArgumentException('non-nullable rsi_5 cannot be null');
        }
        $this->container['rsi_5'] = $rsi_5;

        return $this;
    }

    /**
     * Gets rsi_9
     *
     * @return float|null
     */
    public function getRsi9()
    {
        return $this->container['rsi_9'];
    }

    /**
     * Sets rsi_9
     *
     * @param float|null $rsi_9 rsi_9
     *
     * @return self
     */
    public function setRsi9($rsi_9)
    {
        if (is_null($rsi_9)) {
            throw new \InvalidArgumentException('non-nullable rsi_9 cannot be null');
        }
        $this->container['rsi_9'] = $rsi_9;

        return $this;
    }

    /**
     * Gets sharpe_ratio
     *
     * @return float|null
     */
    public function getSharpeRatio()
    {
        return $this->container['sharpe_ratio'];
    }

    /**
     * Sets sharpe_ratio
     *
     * @param float|null $sharpe_ratio The 1-Year Sharpe Ratio measures the risk-adjusted return of an investment over the past year. It is calculated as the annualized result of the average monthly excess return divided by its standard deviation over the past year. The monthly excess return is the monthly investment return minus the monthly risk-free rate (typically the 10-year Treasury Constant Maturity Rate). If the risk-free rate for a specific region is not available, U.S. data is used by default.
     *
     * @return self
     */
    public function setSharpeRatio($sharpe_ratio)
    {
        if (is_null($sharpe_ratio)) {
            throw new \InvalidArgumentException('non-nullable sharpe_ratio cannot be null');
        }
        $this->container['sharpe_ratio'] = $sharpe_ratio;

        return $this;
    }

    /**
     * Gets sharpe_ratio_10y
     *
     * @return float|null
     */
    public function getSharpeRatio10y()
    {
        return $this->container['sharpe_ratio_10y'];
    }

    /**
     * Sets sharpe_ratio_10y
     *
     * @param float|null $sharpe_ratio_10y The 10-Year Sharpe Ratio measures the risk-adjusted return of an investment over the past ten years. It is calculated as the annualized result of the average monthly excess return divided by its standard deviation over the past ten years. The monthly excess return is the monthly investment return minus the monthly risk-free rate (typically the 10-year Treasury Constant Maturity Rate). If the risk-free rate for a specific region is not available, U.S. data is used by default.
     *
     * @return self
     */
    public function setSharpeRatio10y($sharpe_ratio_10y)
    {
        if (is_null($sharpe_ratio_10y)) {
            throw new \InvalidArgumentException('non-nullable sharpe_ratio_10y cannot be null');
        }
        $this->container['sharpe_ratio_10y'] = $sharpe_ratio_10y;

        return $this;
    }

    /**
     * Gets sharpe_ratio_3y
     *
     * @return float|null
     */
    public function getSharpeRatio3y()
    {
        return $this->container['sharpe_ratio_3y'];
    }

    /**
     * Sets sharpe_ratio_3y
     *
     * @param float|null $sharpe_ratio_3y The 3-Year Sharpe Ratio measures the risk-adjusted return of an investment over the past three years. It is calculated as the annualized result of the average monthly excess return divided by its standard deviation over the past three years. The monthly excess return is the monthly investment return minus the monthly risk-free rate (typically the 10-year Treasury Constant Maturity Rate). If the risk-free rate for a specific region is not available, U.S. data is used by default.
     *
     * @return self
     */
    public function setSharpeRatio3y($sharpe_ratio_3y)
    {
        if (is_null($sharpe_ratio_3y)) {
            throw new \InvalidArgumentException('non-nullable sharpe_ratio_3y cannot be null');
        }
        $this->container['sharpe_ratio_3y'] = $sharpe_ratio_3y;

        return $this;
    }

    /**
     * Gets sharpe_ratio_5y
     *
     * @return float|null
     */
    public function getSharpeRatio5y()
    {
        return $this->container['sharpe_ratio_5y'];
    }

    /**
     * Sets sharpe_ratio_5y
     *
     * @param float|null $sharpe_ratio_5y The 5-Year Sharpe Ratio measures the risk-adjusted return of an investment over the past five years. It is calculated as the annualized result of the average monthly excess return divided by its standard deviation over the past five years. The monthly excess return is the monthly investment return minus the monthly risk-free rate (typically the 10-year Treasury Constant Maturity Rate). If the risk-free rate for a specific region is not available, U.S. data is used by default.
     *
     * @return self
     */
    public function setSharpeRatio5y($sharpe_ratio_5y)
    {
        if (is_null($sharpe_ratio_5y)) {
            throw new \InvalidArgumentException('non-nullable sharpe_ratio_5y cannot be null');
        }
        $this->container['sharpe_ratio_5y'] = $sharpe_ratio_5y;

        return $this;
    }

    /**
     * Gets sma_20
     *
     * @return float|null
     */
    public function getSma20()
    {
        return $this->container['sma_20'];
    }

    /**
     * Sets sma_20
     *
     * @param float|null $sma_20 The simple moving average, i.e., the arithmetic average share price, over the past 20 days.
     *
     * @return self
     */
    public function setSma20($sma_20)
    {
        if (is_null($sma_20)) {
            throw new \InvalidArgumentException('non-nullable sma_20 cannot be null');
        }
        $this->container['sma_20'] = $sma_20;

        return $this;
    }

    /**
     * Gets sma_200
     *
     * @return float|null
     */
    public function getSma200()
    {
        return $this->container['sma_200'];
    }

    /**
     * Sets sma_200
     *
     * @param float|null $sma_200 The simple moving average, i.e., the arithmetic average share price, over the past 200 days.
     *
     * @return self
     */
    public function setSma200($sma_200)
    {
        if (is_null($sma_200)) {
            throw new \InvalidArgumentException('non-nullable sma_200 cannot be null');
        }
        $this->container['sma_200'] = $sma_200;

        return $this;
    }

    /**
     * Gets sma_50
     *
     * @return float|null
     */
    public function getSma50()
    {
        return $this->container['sma_50'];
    }

    /**
     * Sets sma_50
     *
     * @param float|null $sma_50 The simple moving average, i.e., the arithmetic average share price, over the past 50 days.
     *
     * @return self
     */
    public function setSma50($sma_50)
    {
        if (is_null($sma_50)) {
            throw new \InvalidArgumentException('non-nullable sma_50 cannot be null');
        }
        $this->container['sma_50'] = $sma_50;

        return $this;
    }

    /**
     * Gets sortino_ratio_10y
     *
     * @return float|null
     */
    public function getSortinoRatio10y()
    {
        return $this->container['sortino_ratio_10y'];
    }

    /**
     * Sets sortino_ratio_10y
     *
     * @param float|null $sortino_ratio_10y The 10-Year Sortino Ratio measures the risk-adjusted return of an investment over the past ten years, focusing specifically on downside risk rather than total risk. It is calculated as the annualized result of the average monthly excess return divided by its downside deviation (accounts for negative excess return) over the past ten years. The monthly excess return is the monthly investment return minus the monthly risk-free rate (typically the 10-year Treasury Constant Maturity Rate). If the risk-free rate for a specific region is not available, U.S. data is used by default.
     *
     * @return self
     */
    public function setSortinoRatio10y($sortino_ratio_10y)
    {
        if (is_null($sortino_ratio_10y)) {
            throw new \InvalidArgumentException('non-nullable sortino_ratio_10y cannot be null');
        }
        $this->container['sortino_ratio_10y'] = $sortino_ratio_10y;

        return $this;
    }

    /**
     * Gets sortino_ratio_1y
     *
     * @return float|null
     */
    public function getSortinoRatio1y()
    {
        return $this->container['sortino_ratio_1y'];
    }

    /**
     * Sets sortino_ratio_1y
     *
     * @param float|null $sortino_ratio_1y The 1-Year Sortino Ratio measures the risk-adjusted return of an investment over the past year, focusing specifically on downside risk rather than total risk. It is calculated as the annualized result of the average monthly excess return divided by its downside deviation (accounts for negative excess return) over the past year. The monthly excess return is the monthly investment return minus the monthly risk-free rate (typically the 10-year Treasury Constant Maturity Rate). If the risk-free rate for a specific region is not available, U.S. data is used by default.
     *
     * @return self
     */
    public function setSortinoRatio1y($sortino_ratio_1y)
    {
        if (is_null($sortino_ratio_1y)) {
            throw new \InvalidArgumentException('non-nullable sortino_ratio_1y cannot be null');
        }
        $this->container['sortino_ratio_1y'] = $sortino_ratio_1y;

        return $this;
    }

    /**
     * Gets sortino_ratio_3y
     *
     * @return float|null
     */
    public function getSortinoRatio3y()
    {
        return $this->container['sortino_ratio_3y'];
    }

    /**
     * Sets sortino_ratio_3y
     *
     * @param float|null $sortino_ratio_3y The 3-Year Sortino Ratio measures the risk-adjusted return of an investment over the past three years, focusing specifically on downside risk rather than total risk. It is calculated as the annualized result of the average monthly excess return divided by its downside deviation (accounts for negative excess return) over the past three years. The monthly excess return is the monthly investment return minus the monthly risk-free rate (typically the 10-year Treasury Constant Maturity Rate). If the risk-free rate for a specific region is not available, U.S. data is used by default.
     *
     * @return self
     */
    public function setSortinoRatio3y($sortino_ratio_3y)
    {
        if (is_null($sortino_ratio_3y)) {
            throw new \InvalidArgumentException('non-nullable sortino_ratio_3y cannot be null');
        }
        $this->container['sortino_ratio_3y'] = $sortino_ratio_3y;

        return $this;
    }

    /**
     * Gets sortino_ratio_5y
     *
     * @return float|null
     */
    public function getSortinoRatio5y()
    {
        return $this->container['sortino_ratio_5y'];
    }

    /**
     * Sets sortino_ratio_5y
     *
     * @param float|null $sortino_ratio_5y The 5-Year Sortino Ratio measures the risk-adjusted return of an investment over the past five years, focusing specifically on downside risk rather than total risk. It is calculated as the annualized result of the average monthly excess return divided by its downside deviation (accounts for negative excess return) over the past five years. The monthly excess return is the monthly investment return minus the monthly risk-free rate (typically the 10-year Treasury Constant Maturity Rate). If the risk-free rate for a specific region is not available, U.S. data is used by default.
     *
     * @return self
     */
    public function setSortinoRatio5y($sortino_ratio_5y)
    {
        if (is_null($sortino_ratio_5y)) {
            throw new \InvalidArgumentException('non-nullable sortino_ratio_5y cannot be null');
        }
        $this->container['sortino_ratio_5y'] = $sortino_ratio_5y;

        return $this;
    }

    /**
     * Gets volatility
     *
     * @return float|null
     */
    public function getVolatility()
    {
        return $this->container['volatility'];
    }

    /**
     * Sets volatility
     *
     * @param float|null $volatility The annualized volatility of the stock over the past year
     *
     * @return self
     */
    public function setVolatility($volatility)
    {
        if (is_null($volatility)) {
            throw new \InvalidArgumentException('non-nullable volatility cannot be null');
        }
        $this->container['volatility'] = $volatility;

        return $this;
    }

    /**
     * Gets volatility_10y
     *
     * @return float|null
     */
    public function getVolatility10y()
    {
        return $this->container['volatility_10y'];
    }

    /**
     * Sets volatility_10y
     *
     * @param float|null $volatility_10y volatility_10y
     *
     * @return self
     */
    public function setVolatility10y($volatility_10y)
    {
        if (is_null($volatility_10y)) {
            throw new \InvalidArgumentException('non-nullable volatility_10y cannot be null');
        }
        $this->container['volatility_10y'] = $volatility_10y;

        return $this;
    }

    /**
     * Gets volatility_1m
     *
     * @return float|null
     */
    public function getVolatility1m()
    {
        return $this->container['volatility_1m'];
    }

    /**
     * Sets volatility_1m
     *
     * @param float|null $volatility_1m The stock's daily volatility over the past month.
     *
     * @return self
     */
    public function setVolatility1m($volatility_1m)
    {
        if (is_null($volatility_1m)) {
            throw new \InvalidArgumentException('non-nullable volatility_1m cannot be null');
        }
        $this->container['volatility_1m'] = $volatility_1m;

        return $this;
    }

    /**
     * Gets volatility_1w
     *
     * @return float|null
     */
    public function getVolatility1w()
    {
        return $this->container['volatility_1w'];
    }

    /**
     * Sets volatility_1w
     *
     * @param float|null $volatility_1w The stock's daily volatility over the past week.
     *
     * @return self
     */
    public function setVolatility1w($volatility_1w)
    {
        if (is_null($volatility_1w)) {
            throw new \InvalidArgumentException('non-nullable volatility_1w cannot be null');
        }
        $this->container['volatility_1w'] = $volatility_1w;

        return $this;
    }

    /**
     * Gets volatility_3y
     *
     * @return float|null
     */
    public function getVolatility3y()
    {
        return $this->container['volatility_3y'];
    }

    /**
     * Sets volatility_3y
     *
     * @param float|null $volatility_3y volatility_3y
     *
     * @return self
     */
    public function setVolatility3y($volatility_3y)
    {
        if (is_null($volatility_3y)) {
            throw new \InvalidArgumentException('non-nullable volatility_3y cannot be null');
        }
        $this->container['volatility_3y'] = $volatility_3y;

        return $this;
    }

    /**
     * Gets volatility_5y
     *
     * @return float|null
     */
    public function getVolatility5y()
    {
        return $this->container['volatility_5y'];
    }

    /**
     * Sets volatility_5y
     *
     * @param float|null $volatility_5y volatility_5y
     *
     * @return self
     */
    public function setVolatility5y($volatility_5y)
    {
        if (is_null($volatility_5y)) {
            throw new \InvalidArgumentException('non-nullable volatility_5y cannot be null');
        }
        $this->container['volatility_5y'] = $volatility_5y;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return float|null
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param float|null $volume The average daily trading volume of a security over the last two months.
     *
     * @return self
     */
    public function setVolume($volume)
    {
        if (is_null($volume)) {
            throw new \InvalidArgumentException('non-nullable volume cannot be null');
        }
        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets volume_3m
     *
     * @return float|null
     */
    public function getVolume3m()
    {
        return $this->container['volume_3m'];
    }

    /**
     * Sets volume_3m
     *
     * @param float|null $volume_3m The average daily trading volume of a security over the last three months.
     *
     * @return self
     */
    public function setVolume3m($volume_3m)
    {
        if (is_null($volume_3m)) {
            throw new \InvalidArgumentException('non-nullable volume_3m cannot be null');
        }
        $this->container['volume_3m'] = $volume_3m;

        return $this;
    }

    /**
     * Gets volume_total
     *
     * @return float|null
     */
    public function getVolumeTotal()
    {
        return $this->container['volume_total'];
    }

    /**
     * Sets volume_total
     *
     * @param float|null $volume_total The sum of average daily trading volume for all securities of the company over the last two months.
     *
     * @return self
     */
    public function setVolumeTotal($volume_total)
    {
        if (is_null($volume_total)) {
            throw new \InvalidArgumentException('non-nullable volume_total cannot be null');
        }
        $this->container['volume_total'] = $volume_total;

        return $this;
    }

    /**
     * Gets volume_total_3m
     *
     * @return float|null
     */
    public function getVolumeTotal3m()
    {
        return $this->container['volume_total_3m'];
    }

    /**
     * Sets volume_total_3m
     *
     * @param float|null $volume_total_3m The sum of average daily trading volume for all securities of the company over the last three months.
     *
     * @return self
     */
    public function setVolumeTotal3m($volume_total_3m)
    {
        if (is_null($volume_total_3m)) {
            throw new \InvalidArgumentException('non-nullable volume_total_3m cannot be null');
        }
        $this->container['volume_total_3m'] = $volume_total_3m;

        return $this;
    }

    /**
     * Gets volumn_day
     *
     * @return float|null
     */
    public function getVolumnDay()
    {
        return $this->container['volumn_day'];
    }

    /**
     * Sets volumn_day
     *
     * @param float|null $volumn_day The daily trading volume of a security.
     *
     * @return self
     */
    public function setVolumnDay($volumn_day)
    {
        if (is_null($volumn_day)) {
            throw new \InvalidArgumentException('non-nullable volumn_day cannot be null');
        }
        $this->container['volumn_day'] = $volumn_day;

        return $this;
    }

    /**
     * Gets volumn_day_total
     *
     * @return float|null
     */
    public function getVolumnDayTotal()
    {
        return $this->container['volumn_day_total'];
    }

    /**
     * Sets volumn_day_total
     *
     * @param float|null $volumn_day_total The sum of daily trading volume for all securities of the company.
     *
     * @return self
     */
    public function setVolumnDayTotal($volumn_day_total)
    {
        if (is_null($volumn_day_total)) {
            throw new \InvalidArgumentException('non-nullable volumn_day_total cannot be null');
        }
        $this->container['volumn_day_total'] = $volumn_day_total;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


