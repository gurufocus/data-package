<?php
/**
 * EtfEtfKeyStatistics
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gurufocus Data Package API
 *
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EtfEtfKeyStatistics Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EtfEtfKeyStatistics implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'etf_etf_key_statistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'beta' => 'float',
        'display_timestamp' => 'string',
        'high' => 'float',
        'low' => 'float',
        'open' => 'float',
        'p_pct_change' => 'float',
        'price' => 'float',
        'price52whigh' => 'float',
        'price52wlow' => 'float',
        'rsi_14' => 'float',
        'sharpe_ratio_3y' => 'float',
        'sma_20' => 'float',
        'sortino_ratio_3y' => 'float',
        'volatility' => 'float',
        'volumn_day' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'beta' => null,
        'display_timestamp' => null,
        'high' => null,
        'low' => null,
        'open' => null,
        'p_pct_change' => null,
        'price' => null,
        'price52whigh' => null,
        'price52wlow' => null,
        'rsi_14' => null,
        'sharpe_ratio_3y' => null,
        'sma_20' => null,
        'sortino_ratio_3y' => null,
        'volatility' => null,
        'volumn_day' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'beta' => false,
        'display_timestamp' => false,
        'high' => false,
        'low' => false,
        'open' => false,
        'p_pct_change' => false,
        'price' => false,
        'price52whigh' => false,
        'price52wlow' => false,
        'rsi_14' => false,
        'sharpe_ratio_3y' => false,
        'sma_20' => false,
        'sortino_ratio_3y' => false,
        'volatility' => false,
        'volumn_day' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'beta' => 'beta',
        'display_timestamp' => 'display_timestamp',
        'high' => 'high',
        'low' => 'low',
        'open' => 'open',
        'p_pct_change' => 'p_pct_change',
        'price' => 'price',
        'price52whigh' => 'price52whigh',
        'price52wlow' => 'price52wlow',
        'rsi_14' => 'rsi_14',
        'sharpe_ratio_3y' => 'sharpe_ratio_3y',
        'sma_20' => 'sma_20',
        'sortino_ratio_3y' => 'sortino_ratio_3y',
        'volatility' => 'volatility',
        'volumn_day' => 'volumn_day'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'beta' => 'setBeta',
        'display_timestamp' => 'setDisplayTimestamp',
        'high' => 'setHigh',
        'low' => 'setLow',
        'open' => 'setOpen',
        'p_pct_change' => 'setPPctChange',
        'price' => 'setPrice',
        'price52whigh' => 'setPrice52whigh',
        'price52wlow' => 'setPrice52wlow',
        'rsi_14' => 'setRsi14',
        'sharpe_ratio_3y' => 'setSharpeRatio3y',
        'sma_20' => 'setSma20',
        'sortino_ratio_3y' => 'setSortinoRatio3y',
        'volatility' => 'setVolatility',
        'volumn_day' => 'setVolumnDay'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'beta' => 'getBeta',
        'display_timestamp' => 'getDisplayTimestamp',
        'high' => 'getHigh',
        'low' => 'getLow',
        'open' => 'getOpen',
        'p_pct_change' => 'getPPctChange',
        'price' => 'getPrice',
        'price52whigh' => 'getPrice52whigh',
        'price52wlow' => 'getPrice52wlow',
        'rsi_14' => 'getRsi14',
        'sharpe_ratio_3y' => 'getSharpeRatio3y',
        'sma_20' => 'getSma20',
        'sortino_ratio_3y' => 'getSortinoRatio3y',
        'volatility' => 'getVolatility',
        'volumn_day' => 'getVolumnDay'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('beta', $data ?? [], null);
        $this->setIfExists('display_timestamp', $data ?? [], null);
        $this->setIfExists('high', $data ?? [], null);
        $this->setIfExists('low', $data ?? [], null);
        $this->setIfExists('open', $data ?? [], null);
        $this->setIfExists('p_pct_change', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('price52whigh', $data ?? [], null);
        $this->setIfExists('price52wlow', $data ?? [], null);
        $this->setIfExists('rsi_14', $data ?? [], null);
        $this->setIfExists('sharpe_ratio_3y', $data ?? [], null);
        $this->setIfExists('sma_20', $data ?? [], null);
        $this->setIfExists('sortino_ratio_3y', $data ?? [], null);
        $this->setIfExists('volatility', $data ?? [], null);
        $this->setIfExists('volumn_day', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets beta
     *
     * @return float|null
     */
    public function getBeta()
    {
        return $this->container['beta'];
    }

    /**
     * Sets beta
     *
     * @param float|null $beta Beta measures the volatility or systematic risk of a security in comparison to the market. It is calculated using the latest three years of monthly returns of the stock and the benchmark.<br>- A beta of 1 indicates that the stock's price will move with the market. <br>- A beta of less than 1 indicates that the stock will be less volatile than the market. <br>- A beta greater than 1 indicates that the stock's price will be more volatile than the market.
     *
     * @return self
     */
    public function setBeta($beta)
    {
        if (is_null($beta)) {
            throw new \InvalidArgumentException('non-nullable beta cannot be null');
        }
        $this->container['beta'] = $beta;

        return $this;
    }

    /**
     * Gets display_timestamp
     *
     * @return string|null
     */
    public function getDisplayTimestamp()
    {
        return $this->container['display_timestamp'];
    }

    /**
     * Sets display_timestamp
     *
     * @param string|null $display_timestamp display_timestamp
     *
     * @return self
     */
    public function setDisplayTimestamp($display_timestamp)
    {
        if (is_null($display_timestamp)) {
            throw new \InvalidArgumentException('non-nullable display_timestamp cannot be null');
        }
        $this->container['display_timestamp'] = $display_timestamp;

        return $this;
    }

    /**
     * Gets high
     *
     * @return float|null
     */
    public function getHigh()
    {
        return $this->container['high'];
    }

    /**
     * Sets high
     *
     * @param float|null $high The company's intraday high share price
     *
     * @return self
     */
    public function setHigh($high)
    {
        if (is_null($high)) {
            throw new \InvalidArgumentException('non-nullable high cannot be null');
        }
        $this->container['high'] = $high;

        return $this;
    }

    /**
     * Gets low
     *
     * @return float|null
     */
    public function getLow()
    {
        return $this->container['low'];
    }

    /**
     * Sets low
     *
     * @param float|null $low The company's intraday low share price
     *
     * @return self
     */
    public function setLow($low)
    {
        if (is_null($low)) {
            throw new \InvalidArgumentException('non-nullable low cannot be null');
        }
        $this->container['low'] = $low;

        return $this;
    }

    /**
     * Gets open
     *
     * @return float|null
     */
    public function getOpen()
    {
        return $this->container['open'];
    }

    /**
     * Sets open
     *
     * @param float|null $open The company's share price at market open
     *
     * @return self
     */
    public function setOpen($open)
    {
        if (is_null($open)) {
            throw new \InvalidArgumentException('non-nullable open cannot be null');
        }
        $this->container['open'] = $open;

        return $this;
    }

    /**
     * Gets p_pct_change
     *
     * @return float|null
     */
    public function getPPctChange()
    {
        return $this->container['p_pct_change'];
    }

    /**
     * Sets p_pct_change
     *
     * @param float|null $p_pct_change The percent change of a company's share price based on the previous close.
     *
     * @return self
     */
    public function setPPctChange($p_pct_change)
    {
        if (is_null($p_pct_change)) {
            throw new \InvalidArgumentException('non-nullable p_pct_change cannot be null');
        }
        $this->container['p_pct_change'] = $p_pct_change;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price The current share price of the stock
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price52whigh
     *
     * @return float|null
     */
    public function getPrice52whigh()
    {
        return $this->container['price52whigh'];
    }

    /**
     * Sets price52whigh
     *
     * @param float|null $price52whigh The highest share price over the past 52 weeks
     *
     * @return self
     */
    public function setPrice52whigh($price52whigh)
    {
        if (is_null($price52whigh)) {
            throw new \InvalidArgumentException('non-nullable price52whigh cannot be null');
        }
        $this->container['price52whigh'] = $price52whigh;

        return $this;
    }

    /**
     * Gets price52wlow
     *
     * @return float|null
     */
    public function getPrice52wlow()
    {
        return $this->container['price52wlow'];
    }

    /**
     * Sets price52wlow
     *
     * @param float|null $price52wlow The lowest share price over the past 52 weeks
     *
     * @return self
     */
    public function setPrice52wlow($price52wlow)
    {
        if (is_null($price52wlow)) {
            throw new \InvalidArgumentException('non-nullable price52wlow cannot be null');
        }
        $this->container['price52wlow'] = $price52wlow;

        return $this;
    }

    /**
     * Gets rsi_14
     *
     * @return float|null
     */
    public function getRsi14()
    {
        return $this->container['rsi_14'];
    }

    /**
     * Sets rsi_14
     *
     * @param float|null $rsi_14 The relative strength index, i.e., a value that closely captures the average gain on up days divided by the average loss non down days, over the past 14 days
     *
     * @return self
     */
    public function setRsi14($rsi_14)
    {
        if (is_null($rsi_14)) {
            throw new \InvalidArgumentException('non-nullable rsi_14 cannot be null');
        }
        $this->container['rsi_14'] = $rsi_14;

        return $this;
    }

    /**
     * Gets sharpe_ratio_3y
     *
     * @return float|null
     */
    public function getSharpeRatio3y()
    {
        return $this->container['sharpe_ratio_3y'];
    }

    /**
     * Sets sharpe_ratio_3y
     *
     * @param float|null $sharpe_ratio_3y The 3-Year Sharpe Ratio measures the risk-adjusted return of an investment over the past three years. It is calculated as the annualized result of the average monthly excess return divided by its standard deviation over the past three years. The monthly excess return is the monthly investment return minus the monthly risk-free rate (typically the 10-year Treasury Constant Maturity Rate). If the risk-free rate for a specific region is not available, U.S. data is used by default.
     *
     * @return self
     */
    public function setSharpeRatio3y($sharpe_ratio_3y)
    {
        if (is_null($sharpe_ratio_3y)) {
            throw new \InvalidArgumentException('non-nullable sharpe_ratio_3y cannot be null');
        }
        $this->container['sharpe_ratio_3y'] = $sharpe_ratio_3y;

        return $this;
    }

    /**
     * Gets sma_20
     *
     * @return float|null
     */
    public function getSma20()
    {
        return $this->container['sma_20'];
    }

    /**
     * Sets sma_20
     *
     * @param float|null $sma_20 The simple moving average, i.e., the arithmetic average share price, over the past 20 days.
     *
     * @return self
     */
    public function setSma20($sma_20)
    {
        if (is_null($sma_20)) {
            throw new \InvalidArgumentException('non-nullable sma_20 cannot be null');
        }
        $this->container['sma_20'] = $sma_20;

        return $this;
    }

    /**
     * Gets sortino_ratio_3y
     *
     * @return float|null
     */
    public function getSortinoRatio3y()
    {
        return $this->container['sortino_ratio_3y'];
    }

    /**
     * Sets sortino_ratio_3y
     *
     * @param float|null $sortino_ratio_3y The 3-Year Sortino Ratio measures the risk-adjusted return of an investment over the past three years, focusing specifically on downside risk rather than total risk. It is calculated as the annualized result of the average monthly excess return divided by its downside deviation (accounts for negative excess return) over the past three years. The monthly excess return is the monthly investment return minus the monthly risk-free rate (typically the 10-year Treasury Constant Maturity Rate). If the risk-free rate for a specific region is not available, U.S. data is used by default.
     *
     * @return self
     */
    public function setSortinoRatio3y($sortino_ratio_3y)
    {
        if (is_null($sortino_ratio_3y)) {
            throw new \InvalidArgumentException('non-nullable sortino_ratio_3y cannot be null');
        }
        $this->container['sortino_ratio_3y'] = $sortino_ratio_3y;

        return $this;
    }

    /**
     * Gets volatility
     *
     * @return float|null
     */
    public function getVolatility()
    {
        return $this->container['volatility'];
    }

    /**
     * Sets volatility
     *
     * @param float|null $volatility The annualized volatility of the stock over the past year
     *
     * @return self
     */
    public function setVolatility($volatility)
    {
        if (is_null($volatility)) {
            throw new \InvalidArgumentException('non-nullable volatility cannot be null');
        }
        $this->container['volatility'] = $volatility;

        return $this;
    }

    /**
     * Gets volumn_day
     *
     * @return float|null
     */
    public function getVolumnDay()
    {
        return $this->container['volumn_day'];
    }

    /**
     * Sets volumn_day
     *
     * @param float|null $volumn_day The daily trading volume of a security.
     *
     * @return self
     */
    public function setVolumnDay($volumn_day)
    {
        if (is_null($volumn_day)) {
            throw new \InvalidArgumentException('non-nullable volumn_day cannot be null');
        }
        $this->container['volumn_day'] = $volumn_day;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


