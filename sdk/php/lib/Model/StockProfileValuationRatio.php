<?php
/**
 * StockProfileValuationRatio
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gurufocus Data Package API
 *
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * StockProfileValuationRatio Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StockProfileValuationRatio implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'stock_profile_valuation_ratio';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'epv' => 'float',
        'fc_fyield' => 'float',
        'fc_fyield_high' => 'float',
        'fc_fyield_low' => 'float',
        'fc_fyield_med' => 'float',
        'fc_fyield_med_5y' => 'float',
        'owner_earnings' => 'float',
        'rate_of_return' => 'float',
        'rate_of_return_high' => 'float',
        'rate_of_return_low' => 'float',
        'rate_of_return_med' => 'float',
        'shiller_pe' => 'float',
        'shiller_pe_high' => 'float',
        'shiller_pe_low' => 'float',
        'shiller_pe_med' => 'float',
        'cyclically_adjusted_book' => 'float',
        'cyclically_adjusted_fcf' => 'float',
        'cyclically_adjusted_pb' => 'float',
        'cyclically_adjusted_pb_high' => 'float',
        'cyclically_adjusted_pb_low' => 'float',
        'cyclically_adjusted_pb_med' => 'float',
        'cyclically_adjusted_pfcf' => 'float',
        'cyclically_adjusted_pfcf_high' => 'float',
        'cyclically_adjusted_pfcf_low' => 'float',
        'cyclically_adjusted_pfcf_med' => 'float',
        'cyclically_adjusted_ps' => 'float',
        'cyclically_adjusted_ps_high' => 'float',
        'cyclically_adjusted_ps_low' => 'float',
        'cyclically_adjusted_ps_med' => 'float',
        'cyclically_adjusted_rvn' => 'float',
        'e10' => 'float',
        'earning_yield' => 'float',
        'earning_yield_greenblatt' => 'float',
        'earning_yield_greenblatt_high' => 'float',
        'earning_yield_greenblatt_low' => 'float',
        'earning_yield_greenblatt_med' => 'float',
        'earning_yield_high' => 'float',
        'earning_yield_low' => 'float',
        'earning_yield_med' => 'float',
        'ev2ebit' => 'float',
        'ev2ebitda' => 'float',
        'ev2ebitdahigh' => 'float',
        'ev2ebitdalow' => 'float',
        'ev2ebitdamed' => 'float',
        'ev2ebithigh' => 'float',
        'ev2ebitlow' => 'float',
        'ev2ebitmed' => 'float',
        'ev2fcf' => 'float',
        'ev2fcfhigh' => 'float',
        'ev2fcflow' => 'float',
        'ev2fcfmed' => 'float',
        'ev2pretaxincome' => 'float',
        'ev2rev' => 'float',
        'ev2revhigh' => 'float',
        'ev2revlow' => 'float',
        'ev2revmed' => 'float',
        'ev_to_forward_ebit' => 'float',
        'ev_to_forward_ebitda' => 'float',
        'ev_to_forward_revenue' => 'float',
        'forward_pe' => 'float',
        'forward_fcf_yield' => 'float',
        'forward_peg_ratio' => 'float',
        'grahamnumber' => 'float',
        'iv_dc_earning' => 'float',
        'iv_dcf' => 'float',
        'iv_dcf_dividend' => 'float',
        'iv_dcf_share' => 'float',
        'lynchvalue' => 'float',
        'margin_dc_earning' => 'float',
        'margin_dcf' => 'float',
        'margin_dcf_dividend' => 'float',
        'medpbvalue' => 'float',
        'medpsvalue' => 'float',
        'ncav' => 'float',
        'ncav_real' => 'float',
        'net_cash' => 'float',
        'p2_epv' => 'float',
        'p2_owner_earnings' => 'float',
        'p2_owner_earnings_high' => 'float',
        'p2_owner_earnings_low' => 'float',
        'p2_owner_earnings_med' => 'float',
        'p2ffo' => 'float',
        'p2grahamnumber' => 'float',
        'p2grahamnumber_high' => 'float',
        'p2grahamnumber_low' => 'float',
        'p2grahamnumber_med' => 'float',
        'p2iv_dc_earning' => 'float',
        'p2iv_dc_earning_high' => 'float',
        'p2iv_dc_earning_low' => 'float',
        'p2iv_dc_earning_med' => 'float',
        'p2iv_dcf' => 'float',
        'p2iv_dcf_dividend' => 'float',
        'p2iv_dcf_dividend_high' => 'float',
        'p2iv_dcf_dividend_low' => 'float',
        'p2iv_dcf_dividend_med' => 'float',
        'p2iv_dcf_high' => 'float',
        'p2iv_dcf_low' => 'float',
        'p2iv_dcf_med' => 'float',
        'p2iv_dcf_share' => 'float',
        'p2iv_dcf_share_high' => 'float',
        'p2iv_dcf_share_low' => 'float',
        'p2iv_dcf_share_med' => 'float',
        'p2lynchvalue' => 'float',
        'p2lynchvalue_high' => 'float',
        'p2lynchvalue_low' => 'float',
        'p2lynchvalue_med' => 'float',
        'p2medpbvalue' => 'float',
        'p2medpbvalue_high' => 'float',
        'p2medpbvalue_low' => 'float',
        'p2medpbvalue_med' => 'float',
        'p2medpsvalue' => 'float',
        'p2medpsvalue_high' => 'float',
        'p2medpsvalue_low' => 'float',
        'p2medpsvalue_med' => 'float',
        'p2ncav' => 'float',
        'p2ncav_high' => 'float',
        'p2ncav_low' => 'float',
        'p2ncav_med' => 'float',
        'p2net_cash' => 'float',
        'p2net_cash_high' => 'float',
        'p2net_cash_low' => 'float',
        'p2net_cash_med' => 'float',
        'p2nnwc' => 'float',
        'p2tangible_book' => 'float',
        'p2tangible_book_high' => 'float',
        'p2tangible_book_low' => 'float',
        'p2tangible_book_med' => 'float',
        'pb' => 'float',
        'pbhigh' => 'float',
        'pblow' => 'float',
        'pbmed' => 'float',
        'pe' => 'float',
        'pebit_med' => 'float',
        'pebitda_med' => 'float',
        'peg' => 'float',
        'peghigh' => 'float',
        'peglow' => 'float',
        'pegmed' => 'float',
        'penri' => 'float',
        'penrihigh' => 'float',
        'penrilow' => 'float',
        'penrimed' => 'float',
        'pettmhigh' => 'float',
        'pettmlow' => 'float',
        'pettmmed' => 'float',
        'pfcf' => 'float',
        'pfcfhigh' => 'float',
        'pfcflow' => 'float',
        'pfcfmed' => 'float',
        'pocf' => 'float',
        'pocfhigh' => 'float',
        'pocflow' => 'float',
        'pocfmed' => 'float',
        'ps' => 'float',
        'pshigh' => 'float',
        'pslow' => 'float',
        'psmed' => 'float',
        'tangible_book' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'epv' => null,
        'fc_fyield' => null,
        'fc_fyield_high' => null,
        'fc_fyield_low' => null,
        'fc_fyield_med' => null,
        'fc_fyield_med_5y' => null,
        'owner_earnings' => null,
        'rate_of_return' => null,
        'rate_of_return_high' => null,
        'rate_of_return_low' => null,
        'rate_of_return_med' => null,
        'shiller_pe' => null,
        'shiller_pe_high' => null,
        'shiller_pe_low' => null,
        'shiller_pe_med' => null,
        'cyclically_adjusted_book' => null,
        'cyclically_adjusted_fcf' => null,
        'cyclically_adjusted_pb' => null,
        'cyclically_adjusted_pb_high' => null,
        'cyclically_adjusted_pb_low' => null,
        'cyclically_adjusted_pb_med' => null,
        'cyclically_adjusted_pfcf' => null,
        'cyclically_adjusted_pfcf_high' => null,
        'cyclically_adjusted_pfcf_low' => null,
        'cyclically_adjusted_pfcf_med' => null,
        'cyclically_adjusted_ps' => null,
        'cyclically_adjusted_ps_high' => null,
        'cyclically_adjusted_ps_low' => null,
        'cyclically_adjusted_ps_med' => null,
        'cyclically_adjusted_rvn' => null,
        'e10' => null,
        'earning_yield' => null,
        'earning_yield_greenblatt' => null,
        'earning_yield_greenblatt_high' => null,
        'earning_yield_greenblatt_low' => null,
        'earning_yield_greenblatt_med' => null,
        'earning_yield_high' => null,
        'earning_yield_low' => null,
        'earning_yield_med' => null,
        'ev2ebit' => null,
        'ev2ebitda' => null,
        'ev2ebitdahigh' => null,
        'ev2ebitdalow' => null,
        'ev2ebitdamed' => null,
        'ev2ebithigh' => null,
        'ev2ebitlow' => null,
        'ev2ebitmed' => null,
        'ev2fcf' => null,
        'ev2fcfhigh' => null,
        'ev2fcflow' => null,
        'ev2fcfmed' => null,
        'ev2pretaxincome' => null,
        'ev2rev' => null,
        'ev2revhigh' => null,
        'ev2revlow' => null,
        'ev2revmed' => null,
        'ev_to_forward_ebit' => null,
        'ev_to_forward_ebitda' => null,
        'ev_to_forward_revenue' => null,
        'forward_pe' => null,
        'forward_fcf_yield' => null,
        'forward_peg_ratio' => null,
        'grahamnumber' => null,
        'iv_dc_earning' => null,
        'iv_dcf' => null,
        'iv_dcf_dividend' => null,
        'iv_dcf_share' => null,
        'lynchvalue' => null,
        'margin_dc_earning' => null,
        'margin_dcf' => null,
        'margin_dcf_dividend' => null,
        'medpbvalue' => null,
        'medpsvalue' => null,
        'ncav' => null,
        'ncav_real' => null,
        'net_cash' => null,
        'p2_epv' => null,
        'p2_owner_earnings' => null,
        'p2_owner_earnings_high' => null,
        'p2_owner_earnings_low' => null,
        'p2_owner_earnings_med' => null,
        'p2ffo' => null,
        'p2grahamnumber' => null,
        'p2grahamnumber_high' => null,
        'p2grahamnumber_low' => null,
        'p2grahamnumber_med' => null,
        'p2iv_dc_earning' => null,
        'p2iv_dc_earning_high' => null,
        'p2iv_dc_earning_low' => null,
        'p2iv_dc_earning_med' => null,
        'p2iv_dcf' => null,
        'p2iv_dcf_dividend' => null,
        'p2iv_dcf_dividend_high' => null,
        'p2iv_dcf_dividend_low' => null,
        'p2iv_dcf_dividend_med' => null,
        'p2iv_dcf_high' => null,
        'p2iv_dcf_low' => null,
        'p2iv_dcf_med' => null,
        'p2iv_dcf_share' => null,
        'p2iv_dcf_share_high' => null,
        'p2iv_dcf_share_low' => null,
        'p2iv_dcf_share_med' => null,
        'p2lynchvalue' => null,
        'p2lynchvalue_high' => null,
        'p2lynchvalue_low' => null,
        'p2lynchvalue_med' => null,
        'p2medpbvalue' => null,
        'p2medpbvalue_high' => null,
        'p2medpbvalue_low' => null,
        'p2medpbvalue_med' => null,
        'p2medpsvalue' => null,
        'p2medpsvalue_high' => null,
        'p2medpsvalue_low' => null,
        'p2medpsvalue_med' => null,
        'p2ncav' => null,
        'p2ncav_high' => null,
        'p2ncav_low' => null,
        'p2ncav_med' => null,
        'p2net_cash' => null,
        'p2net_cash_high' => null,
        'p2net_cash_low' => null,
        'p2net_cash_med' => null,
        'p2nnwc' => null,
        'p2tangible_book' => null,
        'p2tangible_book_high' => null,
        'p2tangible_book_low' => null,
        'p2tangible_book_med' => null,
        'pb' => null,
        'pbhigh' => null,
        'pblow' => null,
        'pbmed' => null,
        'pe' => null,
        'pebit_med' => null,
        'pebitda_med' => null,
        'peg' => null,
        'peghigh' => null,
        'peglow' => null,
        'pegmed' => null,
        'penri' => null,
        'penrihigh' => null,
        'penrilow' => null,
        'penrimed' => null,
        'pettmhigh' => null,
        'pettmlow' => null,
        'pettmmed' => null,
        'pfcf' => null,
        'pfcfhigh' => null,
        'pfcflow' => null,
        'pfcfmed' => null,
        'pocf' => null,
        'pocfhigh' => null,
        'pocflow' => null,
        'pocfmed' => null,
        'ps' => null,
        'pshigh' => null,
        'pslow' => null,
        'psmed' => null,
        'tangible_book' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'epv' => false,
        'fc_fyield' => false,
        'fc_fyield_high' => false,
        'fc_fyield_low' => false,
        'fc_fyield_med' => false,
        'fc_fyield_med_5y' => false,
        'owner_earnings' => false,
        'rate_of_return' => false,
        'rate_of_return_high' => false,
        'rate_of_return_low' => false,
        'rate_of_return_med' => false,
        'shiller_pe' => false,
        'shiller_pe_high' => false,
        'shiller_pe_low' => false,
        'shiller_pe_med' => false,
        'cyclically_adjusted_book' => false,
        'cyclically_adjusted_fcf' => false,
        'cyclically_adjusted_pb' => false,
        'cyclically_adjusted_pb_high' => false,
        'cyclically_adjusted_pb_low' => false,
        'cyclically_adjusted_pb_med' => false,
        'cyclically_adjusted_pfcf' => false,
        'cyclically_adjusted_pfcf_high' => false,
        'cyclically_adjusted_pfcf_low' => false,
        'cyclically_adjusted_pfcf_med' => false,
        'cyclically_adjusted_ps' => false,
        'cyclically_adjusted_ps_high' => false,
        'cyclically_adjusted_ps_low' => false,
        'cyclically_adjusted_ps_med' => false,
        'cyclically_adjusted_rvn' => false,
        'e10' => false,
        'earning_yield' => false,
        'earning_yield_greenblatt' => false,
        'earning_yield_greenblatt_high' => false,
        'earning_yield_greenblatt_low' => false,
        'earning_yield_greenblatt_med' => false,
        'earning_yield_high' => false,
        'earning_yield_low' => false,
        'earning_yield_med' => false,
        'ev2ebit' => false,
        'ev2ebitda' => false,
        'ev2ebitdahigh' => false,
        'ev2ebitdalow' => false,
        'ev2ebitdamed' => false,
        'ev2ebithigh' => false,
        'ev2ebitlow' => false,
        'ev2ebitmed' => false,
        'ev2fcf' => false,
        'ev2fcfhigh' => false,
        'ev2fcflow' => false,
        'ev2fcfmed' => false,
        'ev2pretaxincome' => false,
        'ev2rev' => false,
        'ev2revhigh' => false,
        'ev2revlow' => false,
        'ev2revmed' => false,
        'ev_to_forward_ebit' => false,
        'ev_to_forward_ebitda' => false,
        'ev_to_forward_revenue' => false,
        'forward_pe' => false,
        'forward_fcf_yield' => false,
        'forward_peg_ratio' => false,
        'grahamnumber' => false,
        'iv_dc_earning' => false,
        'iv_dcf' => false,
        'iv_dcf_dividend' => false,
        'iv_dcf_share' => false,
        'lynchvalue' => false,
        'margin_dc_earning' => false,
        'margin_dcf' => false,
        'margin_dcf_dividend' => false,
        'medpbvalue' => false,
        'medpsvalue' => false,
        'ncav' => false,
        'ncav_real' => false,
        'net_cash' => false,
        'p2_epv' => false,
        'p2_owner_earnings' => false,
        'p2_owner_earnings_high' => false,
        'p2_owner_earnings_low' => false,
        'p2_owner_earnings_med' => false,
        'p2ffo' => false,
        'p2grahamnumber' => false,
        'p2grahamnumber_high' => false,
        'p2grahamnumber_low' => false,
        'p2grahamnumber_med' => false,
        'p2iv_dc_earning' => false,
        'p2iv_dc_earning_high' => false,
        'p2iv_dc_earning_low' => false,
        'p2iv_dc_earning_med' => false,
        'p2iv_dcf' => false,
        'p2iv_dcf_dividend' => false,
        'p2iv_dcf_dividend_high' => false,
        'p2iv_dcf_dividend_low' => false,
        'p2iv_dcf_dividend_med' => false,
        'p2iv_dcf_high' => false,
        'p2iv_dcf_low' => false,
        'p2iv_dcf_med' => false,
        'p2iv_dcf_share' => false,
        'p2iv_dcf_share_high' => false,
        'p2iv_dcf_share_low' => false,
        'p2iv_dcf_share_med' => false,
        'p2lynchvalue' => false,
        'p2lynchvalue_high' => false,
        'p2lynchvalue_low' => false,
        'p2lynchvalue_med' => false,
        'p2medpbvalue' => false,
        'p2medpbvalue_high' => false,
        'p2medpbvalue_low' => false,
        'p2medpbvalue_med' => false,
        'p2medpsvalue' => false,
        'p2medpsvalue_high' => false,
        'p2medpsvalue_low' => false,
        'p2medpsvalue_med' => false,
        'p2ncav' => false,
        'p2ncav_high' => false,
        'p2ncav_low' => false,
        'p2ncav_med' => false,
        'p2net_cash' => false,
        'p2net_cash_high' => false,
        'p2net_cash_low' => false,
        'p2net_cash_med' => false,
        'p2nnwc' => false,
        'p2tangible_book' => false,
        'p2tangible_book_high' => false,
        'p2tangible_book_low' => false,
        'p2tangible_book_med' => false,
        'pb' => false,
        'pbhigh' => false,
        'pblow' => false,
        'pbmed' => false,
        'pe' => false,
        'pebit_med' => false,
        'pebitda_med' => false,
        'peg' => false,
        'peghigh' => false,
        'peglow' => false,
        'pegmed' => false,
        'penri' => false,
        'penrihigh' => false,
        'penrilow' => false,
        'penrimed' => false,
        'pettmhigh' => false,
        'pettmlow' => false,
        'pettmmed' => false,
        'pfcf' => false,
        'pfcfhigh' => false,
        'pfcflow' => false,
        'pfcfmed' => false,
        'pocf' => false,
        'pocfhigh' => false,
        'pocflow' => false,
        'pocfmed' => false,
        'ps' => false,
        'pshigh' => false,
        'pslow' => false,
        'psmed' => false,
        'tangible_book' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'epv' => 'EPV',
        'fc_fyield' => 'FCFyield',
        'fc_fyield_high' => 'FCFyield_high',
        'fc_fyield_low' => 'FCFyield_low',
        'fc_fyield_med' => 'FCFyield_med',
        'fc_fyield_med_5y' => 'FCFyield_med_5y',
        'owner_earnings' => 'Owner_Earnings',
        'rate_of_return' => 'RateOfReturn',
        'rate_of_return_high' => 'RateOfReturn_high',
        'rate_of_return_low' => 'RateOfReturn_low',
        'rate_of_return_med' => 'RateOfReturn_med',
        'shiller_pe' => 'ShillerPE',
        'shiller_pe_high' => 'ShillerPE_high',
        'shiller_pe_low' => 'ShillerPE_low',
        'shiller_pe_med' => 'ShillerPE_med',
        'cyclically_adjusted_book' => 'cyclically_adjusted_book',
        'cyclically_adjusted_fcf' => 'cyclically_adjusted_fcf',
        'cyclically_adjusted_pb' => 'cyclically_adjusted_pb',
        'cyclically_adjusted_pb_high' => 'cyclically_adjusted_pb_high',
        'cyclically_adjusted_pb_low' => 'cyclically_adjusted_pb_low',
        'cyclically_adjusted_pb_med' => 'cyclically_adjusted_pb_med',
        'cyclically_adjusted_pfcf' => 'cyclically_adjusted_pfcf',
        'cyclically_adjusted_pfcf_high' => 'cyclically_adjusted_pfcf_high',
        'cyclically_adjusted_pfcf_low' => 'cyclically_adjusted_pfcf_low',
        'cyclically_adjusted_pfcf_med' => 'cyclically_adjusted_pfcf_med',
        'cyclically_adjusted_ps' => 'cyclically_adjusted_ps',
        'cyclically_adjusted_ps_high' => 'cyclically_adjusted_ps_high',
        'cyclically_adjusted_ps_low' => 'cyclically_adjusted_ps_low',
        'cyclically_adjusted_ps_med' => 'cyclically_adjusted_ps_med',
        'cyclically_adjusted_rvn' => 'cyclically_adjusted_rvn',
        'e10' => 'e10',
        'earning_yield' => 'earning_yield',
        'earning_yield_greenblatt' => 'earning_yield_greenblatt',
        'earning_yield_greenblatt_high' => 'earning_yield_greenblatt_high',
        'earning_yield_greenblatt_low' => 'earning_yield_greenblatt_low',
        'earning_yield_greenblatt_med' => 'earning_yield_greenblatt_med',
        'earning_yield_high' => 'earning_yield_high',
        'earning_yield_low' => 'earning_yield_low',
        'earning_yield_med' => 'earning_yield_med',
        'ev2ebit' => 'ev2ebit',
        'ev2ebitda' => 'ev2ebitda',
        'ev2ebitdahigh' => 'ev2ebitdahigh',
        'ev2ebitdalow' => 'ev2ebitdalow',
        'ev2ebitdamed' => 'ev2ebitdamed',
        'ev2ebithigh' => 'ev2ebithigh',
        'ev2ebitlow' => 'ev2ebitlow',
        'ev2ebitmed' => 'ev2ebitmed',
        'ev2fcf' => 'ev2fcf',
        'ev2fcfhigh' => 'ev2fcfhigh',
        'ev2fcflow' => 'ev2fcflow',
        'ev2fcfmed' => 'ev2fcfmed',
        'ev2pretaxincome' => 'ev2pretaxincome',
        'ev2rev' => 'ev2rev',
        'ev2revhigh' => 'ev2revhigh',
        'ev2revlow' => 'ev2revlow',
        'ev2revmed' => 'ev2revmed',
        'ev_to_forward_ebit' => 'ev_to_forward_ebit',
        'ev_to_forward_ebitda' => 'ev_to_forward_ebitda',
        'ev_to_forward_revenue' => 'ev_to_forward_revenue',
        'forward_pe' => 'forwardPE',
        'forward_fcf_yield' => 'forward_fcf_yield',
        'forward_peg_ratio' => 'forward_peg_ratio',
        'grahamnumber' => 'grahamnumber',
        'iv_dc_earning' => 'iv_dcEarning',
        'iv_dcf' => 'iv_dcf',
        'iv_dcf_dividend' => 'iv_dcf_dividend',
        'iv_dcf_share' => 'iv_dcf_share',
        'lynchvalue' => 'lynchvalue',
        'margin_dc_earning' => 'margin_dcEarning',
        'margin_dcf' => 'margin_dcf',
        'margin_dcf_dividend' => 'margin_dcf_dividend',
        'medpbvalue' => 'medpbvalue',
        'medpsvalue' => 'medpsvalue',
        'ncav' => 'ncav',
        'ncav_real' => 'ncav_real',
        'net_cash' => 'net_cash',
        'p2_epv' => 'p2EPV',
        'p2_owner_earnings' => 'p2Owner_Earnings',
        'p2_owner_earnings_high' => 'p2Owner_Earnings_high',
        'p2_owner_earnings_low' => 'p2Owner_Earnings_low',
        'p2_owner_earnings_med' => 'p2Owner_Earnings_med',
        'p2ffo' => 'p2ffo',
        'p2grahamnumber' => 'p2grahamnumber',
        'p2grahamnumber_high' => 'p2grahamnumber_high',
        'p2grahamnumber_low' => 'p2grahamnumber_low',
        'p2grahamnumber_med' => 'p2grahamnumber_med',
        'p2iv_dc_earning' => 'p2iv_dcEarning',
        'p2iv_dc_earning_high' => 'p2iv_dcEarning_high',
        'p2iv_dc_earning_low' => 'p2iv_dcEarning_low',
        'p2iv_dc_earning_med' => 'p2iv_dcEarning_med',
        'p2iv_dcf' => 'p2iv_dcf',
        'p2iv_dcf_dividend' => 'p2iv_dcf_dividend',
        'p2iv_dcf_dividend_high' => 'p2iv_dcf_dividend_high',
        'p2iv_dcf_dividend_low' => 'p2iv_dcf_dividend_low',
        'p2iv_dcf_dividend_med' => 'p2iv_dcf_dividend_med',
        'p2iv_dcf_high' => 'p2iv_dcf_high',
        'p2iv_dcf_low' => 'p2iv_dcf_low',
        'p2iv_dcf_med' => 'p2iv_dcf_med',
        'p2iv_dcf_share' => 'p2iv_dcf_share',
        'p2iv_dcf_share_high' => 'p2iv_dcf_share_high',
        'p2iv_dcf_share_low' => 'p2iv_dcf_share_low',
        'p2iv_dcf_share_med' => 'p2iv_dcf_share_med',
        'p2lynchvalue' => 'p2lynchvalue',
        'p2lynchvalue_high' => 'p2lynchvalue_high',
        'p2lynchvalue_low' => 'p2lynchvalue_low',
        'p2lynchvalue_med' => 'p2lynchvalue_med',
        'p2medpbvalue' => 'p2medpbvalue',
        'p2medpbvalue_high' => 'p2medpbvalue_high',
        'p2medpbvalue_low' => 'p2medpbvalue_low',
        'p2medpbvalue_med' => 'p2medpbvalue_med',
        'p2medpsvalue' => 'p2medpsvalue',
        'p2medpsvalue_high' => 'p2medpsvalue_high',
        'p2medpsvalue_low' => 'p2medpsvalue_low',
        'p2medpsvalue_med' => 'p2medpsvalue_med',
        'p2ncav' => 'p2ncav',
        'p2ncav_high' => 'p2ncav_high',
        'p2ncav_low' => 'p2ncav_low',
        'p2ncav_med' => 'p2ncav_med',
        'p2net_cash' => 'p2net_cash',
        'p2net_cash_high' => 'p2net_cash_high',
        'p2net_cash_low' => 'p2net_cash_low',
        'p2net_cash_med' => 'p2net_cash_med',
        'p2nnwc' => 'p2nnwc',
        'p2tangible_book' => 'p2tangible_book',
        'p2tangible_book_high' => 'p2tangible_book_high',
        'p2tangible_book_low' => 'p2tangible_book_low',
        'p2tangible_book_med' => 'p2tangible_book_med',
        'pb' => 'pb',
        'pbhigh' => 'pbhigh',
        'pblow' => 'pblow',
        'pbmed' => 'pbmed',
        'pe' => 'pe',
        'pebit_med' => 'pebit_med',
        'pebitda_med' => 'pebitda_med',
        'peg' => 'peg',
        'peghigh' => 'peghigh',
        'peglow' => 'peglow',
        'pegmed' => 'pegmed',
        'penri' => 'penri',
        'penrihigh' => 'penrihigh',
        'penrilow' => 'penrilow',
        'penrimed' => 'penrimed',
        'pettmhigh' => 'pettmhigh',
        'pettmlow' => 'pettmlow',
        'pettmmed' => 'pettmmed',
        'pfcf' => 'pfcf',
        'pfcfhigh' => 'pfcfhigh',
        'pfcflow' => 'pfcflow',
        'pfcfmed' => 'pfcfmed',
        'pocf' => 'pocf',
        'pocfhigh' => 'pocfhigh',
        'pocflow' => 'pocflow',
        'pocfmed' => 'pocfmed',
        'ps' => 'ps',
        'pshigh' => 'pshigh',
        'pslow' => 'pslow',
        'psmed' => 'psmed',
        'tangible_book' => 'tangible_book'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'epv' => 'setEpv',
        'fc_fyield' => 'setFcFyield',
        'fc_fyield_high' => 'setFcFyieldHigh',
        'fc_fyield_low' => 'setFcFyieldLow',
        'fc_fyield_med' => 'setFcFyieldMed',
        'fc_fyield_med_5y' => 'setFcFyieldMed5y',
        'owner_earnings' => 'setOwnerEarnings',
        'rate_of_return' => 'setRateOfReturn',
        'rate_of_return_high' => 'setRateOfReturnHigh',
        'rate_of_return_low' => 'setRateOfReturnLow',
        'rate_of_return_med' => 'setRateOfReturnMed',
        'shiller_pe' => 'setShillerPe',
        'shiller_pe_high' => 'setShillerPeHigh',
        'shiller_pe_low' => 'setShillerPeLow',
        'shiller_pe_med' => 'setShillerPeMed',
        'cyclically_adjusted_book' => 'setCyclicallyAdjustedBook',
        'cyclically_adjusted_fcf' => 'setCyclicallyAdjustedFcf',
        'cyclically_adjusted_pb' => 'setCyclicallyAdjustedPb',
        'cyclically_adjusted_pb_high' => 'setCyclicallyAdjustedPbHigh',
        'cyclically_adjusted_pb_low' => 'setCyclicallyAdjustedPbLow',
        'cyclically_adjusted_pb_med' => 'setCyclicallyAdjustedPbMed',
        'cyclically_adjusted_pfcf' => 'setCyclicallyAdjustedPfcf',
        'cyclically_adjusted_pfcf_high' => 'setCyclicallyAdjustedPfcfHigh',
        'cyclically_adjusted_pfcf_low' => 'setCyclicallyAdjustedPfcfLow',
        'cyclically_adjusted_pfcf_med' => 'setCyclicallyAdjustedPfcfMed',
        'cyclically_adjusted_ps' => 'setCyclicallyAdjustedPs',
        'cyclically_adjusted_ps_high' => 'setCyclicallyAdjustedPsHigh',
        'cyclically_adjusted_ps_low' => 'setCyclicallyAdjustedPsLow',
        'cyclically_adjusted_ps_med' => 'setCyclicallyAdjustedPsMed',
        'cyclically_adjusted_rvn' => 'setCyclicallyAdjustedRvn',
        'e10' => 'setE10',
        'earning_yield' => 'setEarningYield',
        'earning_yield_greenblatt' => 'setEarningYieldGreenblatt',
        'earning_yield_greenblatt_high' => 'setEarningYieldGreenblattHigh',
        'earning_yield_greenblatt_low' => 'setEarningYieldGreenblattLow',
        'earning_yield_greenblatt_med' => 'setEarningYieldGreenblattMed',
        'earning_yield_high' => 'setEarningYieldHigh',
        'earning_yield_low' => 'setEarningYieldLow',
        'earning_yield_med' => 'setEarningYieldMed',
        'ev2ebit' => 'setEv2ebit',
        'ev2ebitda' => 'setEv2ebitda',
        'ev2ebitdahigh' => 'setEv2ebitdahigh',
        'ev2ebitdalow' => 'setEv2ebitdalow',
        'ev2ebitdamed' => 'setEv2ebitdamed',
        'ev2ebithigh' => 'setEv2ebithigh',
        'ev2ebitlow' => 'setEv2ebitlow',
        'ev2ebitmed' => 'setEv2ebitmed',
        'ev2fcf' => 'setEv2fcf',
        'ev2fcfhigh' => 'setEv2fcfhigh',
        'ev2fcflow' => 'setEv2fcflow',
        'ev2fcfmed' => 'setEv2fcfmed',
        'ev2pretaxincome' => 'setEv2pretaxincome',
        'ev2rev' => 'setEv2rev',
        'ev2revhigh' => 'setEv2revhigh',
        'ev2revlow' => 'setEv2revlow',
        'ev2revmed' => 'setEv2revmed',
        'ev_to_forward_ebit' => 'setEvToForwardEbit',
        'ev_to_forward_ebitda' => 'setEvToForwardEbitda',
        'ev_to_forward_revenue' => 'setEvToForwardRevenue',
        'forward_pe' => 'setForwardPe',
        'forward_fcf_yield' => 'setForwardFcfYield',
        'forward_peg_ratio' => 'setForwardPegRatio',
        'grahamnumber' => 'setGrahamnumber',
        'iv_dc_earning' => 'setIvDcEarning',
        'iv_dcf' => 'setIvDcf',
        'iv_dcf_dividend' => 'setIvDcfDividend',
        'iv_dcf_share' => 'setIvDcfShare',
        'lynchvalue' => 'setLynchvalue',
        'margin_dc_earning' => 'setMarginDcEarning',
        'margin_dcf' => 'setMarginDcf',
        'margin_dcf_dividend' => 'setMarginDcfDividend',
        'medpbvalue' => 'setMedpbvalue',
        'medpsvalue' => 'setMedpsvalue',
        'ncav' => 'setNcav',
        'ncav_real' => 'setNcavReal',
        'net_cash' => 'setNetCash',
        'p2_epv' => 'setP2Epv',
        'p2_owner_earnings' => 'setP2OwnerEarnings',
        'p2_owner_earnings_high' => 'setP2OwnerEarningsHigh',
        'p2_owner_earnings_low' => 'setP2OwnerEarningsLow',
        'p2_owner_earnings_med' => 'setP2OwnerEarningsMed',
        'p2ffo' => 'setP2ffo',
        'p2grahamnumber' => 'setP2grahamnumber',
        'p2grahamnumber_high' => 'setP2grahamnumberHigh',
        'p2grahamnumber_low' => 'setP2grahamnumberLow',
        'p2grahamnumber_med' => 'setP2grahamnumberMed',
        'p2iv_dc_earning' => 'setP2ivDcEarning',
        'p2iv_dc_earning_high' => 'setP2ivDcEarningHigh',
        'p2iv_dc_earning_low' => 'setP2ivDcEarningLow',
        'p2iv_dc_earning_med' => 'setP2ivDcEarningMed',
        'p2iv_dcf' => 'setP2ivDcf',
        'p2iv_dcf_dividend' => 'setP2ivDcfDividend',
        'p2iv_dcf_dividend_high' => 'setP2ivDcfDividendHigh',
        'p2iv_dcf_dividend_low' => 'setP2ivDcfDividendLow',
        'p2iv_dcf_dividend_med' => 'setP2ivDcfDividendMed',
        'p2iv_dcf_high' => 'setP2ivDcfHigh',
        'p2iv_dcf_low' => 'setP2ivDcfLow',
        'p2iv_dcf_med' => 'setP2ivDcfMed',
        'p2iv_dcf_share' => 'setP2ivDcfShare',
        'p2iv_dcf_share_high' => 'setP2ivDcfShareHigh',
        'p2iv_dcf_share_low' => 'setP2ivDcfShareLow',
        'p2iv_dcf_share_med' => 'setP2ivDcfShareMed',
        'p2lynchvalue' => 'setP2lynchvalue',
        'p2lynchvalue_high' => 'setP2lynchvalueHigh',
        'p2lynchvalue_low' => 'setP2lynchvalueLow',
        'p2lynchvalue_med' => 'setP2lynchvalueMed',
        'p2medpbvalue' => 'setP2medpbvalue',
        'p2medpbvalue_high' => 'setP2medpbvalueHigh',
        'p2medpbvalue_low' => 'setP2medpbvalueLow',
        'p2medpbvalue_med' => 'setP2medpbvalueMed',
        'p2medpsvalue' => 'setP2medpsvalue',
        'p2medpsvalue_high' => 'setP2medpsvalueHigh',
        'p2medpsvalue_low' => 'setP2medpsvalueLow',
        'p2medpsvalue_med' => 'setP2medpsvalueMed',
        'p2ncav' => 'setP2ncav',
        'p2ncav_high' => 'setP2ncavHigh',
        'p2ncav_low' => 'setP2ncavLow',
        'p2ncav_med' => 'setP2ncavMed',
        'p2net_cash' => 'setP2netCash',
        'p2net_cash_high' => 'setP2netCashHigh',
        'p2net_cash_low' => 'setP2netCashLow',
        'p2net_cash_med' => 'setP2netCashMed',
        'p2nnwc' => 'setP2nnwc',
        'p2tangible_book' => 'setP2tangibleBook',
        'p2tangible_book_high' => 'setP2tangibleBookHigh',
        'p2tangible_book_low' => 'setP2tangibleBookLow',
        'p2tangible_book_med' => 'setP2tangibleBookMed',
        'pb' => 'setPb',
        'pbhigh' => 'setPbhigh',
        'pblow' => 'setPblow',
        'pbmed' => 'setPbmed',
        'pe' => 'setPe',
        'pebit_med' => 'setPebitMed',
        'pebitda_med' => 'setPebitdaMed',
        'peg' => 'setPeg',
        'peghigh' => 'setPeghigh',
        'peglow' => 'setPeglow',
        'pegmed' => 'setPegmed',
        'penri' => 'setPenri',
        'penrihigh' => 'setPenrihigh',
        'penrilow' => 'setPenrilow',
        'penrimed' => 'setPenrimed',
        'pettmhigh' => 'setPettmhigh',
        'pettmlow' => 'setPettmlow',
        'pettmmed' => 'setPettmmed',
        'pfcf' => 'setPfcf',
        'pfcfhigh' => 'setPfcfhigh',
        'pfcflow' => 'setPfcflow',
        'pfcfmed' => 'setPfcfmed',
        'pocf' => 'setPocf',
        'pocfhigh' => 'setPocfhigh',
        'pocflow' => 'setPocflow',
        'pocfmed' => 'setPocfmed',
        'ps' => 'setPs',
        'pshigh' => 'setPshigh',
        'pslow' => 'setPslow',
        'psmed' => 'setPsmed',
        'tangible_book' => 'setTangibleBook'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'epv' => 'getEpv',
        'fc_fyield' => 'getFcFyield',
        'fc_fyield_high' => 'getFcFyieldHigh',
        'fc_fyield_low' => 'getFcFyieldLow',
        'fc_fyield_med' => 'getFcFyieldMed',
        'fc_fyield_med_5y' => 'getFcFyieldMed5y',
        'owner_earnings' => 'getOwnerEarnings',
        'rate_of_return' => 'getRateOfReturn',
        'rate_of_return_high' => 'getRateOfReturnHigh',
        'rate_of_return_low' => 'getRateOfReturnLow',
        'rate_of_return_med' => 'getRateOfReturnMed',
        'shiller_pe' => 'getShillerPe',
        'shiller_pe_high' => 'getShillerPeHigh',
        'shiller_pe_low' => 'getShillerPeLow',
        'shiller_pe_med' => 'getShillerPeMed',
        'cyclically_adjusted_book' => 'getCyclicallyAdjustedBook',
        'cyclically_adjusted_fcf' => 'getCyclicallyAdjustedFcf',
        'cyclically_adjusted_pb' => 'getCyclicallyAdjustedPb',
        'cyclically_adjusted_pb_high' => 'getCyclicallyAdjustedPbHigh',
        'cyclically_adjusted_pb_low' => 'getCyclicallyAdjustedPbLow',
        'cyclically_adjusted_pb_med' => 'getCyclicallyAdjustedPbMed',
        'cyclically_adjusted_pfcf' => 'getCyclicallyAdjustedPfcf',
        'cyclically_adjusted_pfcf_high' => 'getCyclicallyAdjustedPfcfHigh',
        'cyclically_adjusted_pfcf_low' => 'getCyclicallyAdjustedPfcfLow',
        'cyclically_adjusted_pfcf_med' => 'getCyclicallyAdjustedPfcfMed',
        'cyclically_adjusted_ps' => 'getCyclicallyAdjustedPs',
        'cyclically_adjusted_ps_high' => 'getCyclicallyAdjustedPsHigh',
        'cyclically_adjusted_ps_low' => 'getCyclicallyAdjustedPsLow',
        'cyclically_adjusted_ps_med' => 'getCyclicallyAdjustedPsMed',
        'cyclically_adjusted_rvn' => 'getCyclicallyAdjustedRvn',
        'e10' => 'getE10',
        'earning_yield' => 'getEarningYield',
        'earning_yield_greenblatt' => 'getEarningYieldGreenblatt',
        'earning_yield_greenblatt_high' => 'getEarningYieldGreenblattHigh',
        'earning_yield_greenblatt_low' => 'getEarningYieldGreenblattLow',
        'earning_yield_greenblatt_med' => 'getEarningYieldGreenblattMed',
        'earning_yield_high' => 'getEarningYieldHigh',
        'earning_yield_low' => 'getEarningYieldLow',
        'earning_yield_med' => 'getEarningYieldMed',
        'ev2ebit' => 'getEv2ebit',
        'ev2ebitda' => 'getEv2ebitda',
        'ev2ebitdahigh' => 'getEv2ebitdahigh',
        'ev2ebitdalow' => 'getEv2ebitdalow',
        'ev2ebitdamed' => 'getEv2ebitdamed',
        'ev2ebithigh' => 'getEv2ebithigh',
        'ev2ebitlow' => 'getEv2ebitlow',
        'ev2ebitmed' => 'getEv2ebitmed',
        'ev2fcf' => 'getEv2fcf',
        'ev2fcfhigh' => 'getEv2fcfhigh',
        'ev2fcflow' => 'getEv2fcflow',
        'ev2fcfmed' => 'getEv2fcfmed',
        'ev2pretaxincome' => 'getEv2pretaxincome',
        'ev2rev' => 'getEv2rev',
        'ev2revhigh' => 'getEv2revhigh',
        'ev2revlow' => 'getEv2revlow',
        'ev2revmed' => 'getEv2revmed',
        'ev_to_forward_ebit' => 'getEvToForwardEbit',
        'ev_to_forward_ebitda' => 'getEvToForwardEbitda',
        'ev_to_forward_revenue' => 'getEvToForwardRevenue',
        'forward_pe' => 'getForwardPe',
        'forward_fcf_yield' => 'getForwardFcfYield',
        'forward_peg_ratio' => 'getForwardPegRatio',
        'grahamnumber' => 'getGrahamnumber',
        'iv_dc_earning' => 'getIvDcEarning',
        'iv_dcf' => 'getIvDcf',
        'iv_dcf_dividend' => 'getIvDcfDividend',
        'iv_dcf_share' => 'getIvDcfShare',
        'lynchvalue' => 'getLynchvalue',
        'margin_dc_earning' => 'getMarginDcEarning',
        'margin_dcf' => 'getMarginDcf',
        'margin_dcf_dividend' => 'getMarginDcfDividend',
        'medpbvalue' => 'getMedpbvalue',
        'medpsvalue' => 'getMedpsvalue',
        'ncav' => 'getNcav',
        'ncav_real' => 'getNcavReal',
        'net_cash' => 'getNetCash',
        'p2_epv' => 'getP2Epv',
        'p2_owner_earnings' => 'getP2OwnerEarnings',
        'p2_owner_earnings_high' => 'getP2OwnerEarningsHigh',
        'p2_owner_earnings_low' => 'getP2OwnerEarningsLow',
        'p2_owner_earnings_med' => 'getP2OwnerEarningsMed',
        'p2ffo' => 'getP2ffo',
        'p2grahamnumber' => 'getP2grahamnumber',
        'p2grahamnumber_high' => 'getP2grahamnumberHigh',
        'p2grahamnumber_low' => 'getP2grahamnumberLow',
        'p2grahamnumber_med' => 'getP2grahamnumberMed',
        'p2iv_dc_earning' => 'getP2ivDcEarning',
        'p2iv_dc_earning_high' => 'getP2ivDcEarningHigh',
        'p2iv_dc_earning_low' => 'getP2ivDcEarningLow',
        'p2iv_dc_earning_med' => 'getP2ivDcEarningMed',
        'p2iv_dcf' => 'getP2ivDcf',
        'p2iv_dcf_dividend' => 'getP2ivDcfDividend',
        'p2iv_dcf_dividend_high' => 'getP2ivDcfDividendHigh',
        'p2iv_dcf_dividend_low' => 'getP2ivDcfDividendLow',
        'p2iv_dcf_dividend_med' => 'getP2ivDcfDividendMed',
        'p2iv_dcf_high' => 'getP2ivDcfHigh',
        'p2iv_dcf_low' => 'getP2ivDcfLow',
        'p2iv_dcf_med' => 'getP2ivDcfMed',
        'p2iv_dcf_share' => 'getP2ivDcfShare',
        'p2iv_dcf_share_high' => 'getP2ivDcfShareHigh',
        'p2iv_dcf_share_low' => 'getP2ivDcfShareLow',
        'p2iv_dcf_share_med' => 'getP2ivDcfShareMed',
        'p2lynchvalue' => 'getP2lynchvalue',
        'p2lynchvalue_high' => 'getP2lynchvalueHigh',
        'p2lynchvalue_low' => 'getP2lynchvalueLow',
        'p2lynchvalue_med' => 'getP2lynchvalueMed',
        'p2medpbvalue' => 'getP2medpbvalue',
        'p2medpbvalue_high' => 'getP2medpbvalueHigh',
        'p2medpbvalue_low' => 'getP2medpbvalueLow',
        'p2medpbvalue_med' => 'getP2medpbvalueMed',
        'p2medpsvalue' => 'getP2medpsvalue',
        'p2medpsvalue_high' => 'getP2medpsvalueHigh',
        'p2medpsvalue_low' => 'getP2medpsvalueLow',
        'p2medpsvalue_med' => 'getP2medpsvalueMed',
        'p2ncav' => 'getP2ncav',
        'p2ncav_high' => 'getP2ncavHigh',
        'p2ncav_low' => 'getP2ncavLow',
        'p2ncav_med' => 'getP2ncavMed',
        'p2net_cash' => 'getP2netCash',
        'p2net_cash_high' => 'getP2netCashHigh',
        'p2net_cash_low' => 'getP2netCashLow',
        'p2net_cash_med' => 'getP2netCashMed',
        'p2nnwc' => 'getP2nnwc',
        'p2tangible_book' => 'getP2tangibleBook',
        'p2tangible_book_high' => 'getP2tangibleBookHigh',
        'p2tangible_book_low' => 'getP2tangibleBookLow',
        'p2tangible_book_med' => 'getP2tangibleBookMed',
        'pb' => 'getPb',
        'pbhigh' => 'getPbhigh',
        'pblow' => 'getPblow',
        'pbmed' => 'getPbmed',
        'pe' => 'getPe',
        'pebit_med' => 'getPebitMed',
        'pebitda_med' => 'getPebitdaMed',
        'peg' => 'getPeg',
        'peghigh' => 'getPeghigh',
        'peglow' => 'getPeglow',
        'pegmed' => 'getPegmed',
        'penri' => 'getPenri',
        'penrihigh' => 'getPenrihigh',
        'penrilow' => 'getPenrilow',
        'penrimed' => 'getPenrimed',
        'pettmhigh' => 'getPettmhigh',
        'pettmlow' => 'getPettmlow',
        'pettmmed' => 'getPettmmed',
        'pfcf' => 'getPfcf',
        'pfcfhigh' => 'getPfcfhigh',
        'pfcflow' => 'getPfcflow',
        'pfcfmed' => 'getPfcfmed',
        'pocf' => 'getPocf',
        'pocfhigh' => 'getPocfhigh',
        'pocflow' => 'getPocflow',
        'pocfmed' => 'getPocfmed',
        'ps' => 'getPs',
        'pshigh' => 'getPshigh',
        'pslow' => 'getPslow',
        'psmed' => 'getPsmed',
        'tangible_book' => 'getTangibleBook'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('epv', $data ?? [], null);
        $this->setIfExists('fc_fyield', $data ?? [], null);
        $this->setIfExists('fc_fyield_high', $data ?? [], null);
        $this->setIfExists('fc_fyield_low', $data ?? [], null);
        $this->setIfExists('fc_fyield_med', $data ?? [], null);
        $this->setIfExists('fc_fyield_med_5y', $data ?? [], null);
        $this->setIfExists('owner_earnings', $data ?? [], null);
        $this->setIfExists('rate_of_return', $data ?? [], null);
        $this->setIfExists('rate_of_return_high', $data ?? [], null);
        $this->setIfExists('rate_of_return_low', $data ?? [], null);
        $this->setIfExists('rate_of_return_med', $data ?? [], null);
        $this->setIfExists('shiller_pe', $data ?? [], null);
        $this->setIfExists('shiller_pe_high', $data ?? [], null);
        $this->setIfExists('shiller_pe_low', $data ?? [], null);
        $this->setIfExists('shiller_pe_med', $data ?? [], null);
        $this->setIfExists('cyclically_adjusted_book', $data ?? [], null);
        $this->setIfExists('cyclically_adjusted_fcf', $data ?? [], null);
        $this->setIfExists('cyclically_adjusted_pb', $data ?? [], null);
        $this->setIfExists('cyclically_adjusted_pb_high', $data ?? [], null);
        $this->setIfExists('cyclically_adjusted_pb_low', $data ?? [], null);
        $this->setIfExists('cyclically_adjusted_pb_med', $data ?? [], null);
        $this->setIfExists('cyclically_adjusted_pfcf', $data ?? [], null);
        $this->setIfExists('cyclically_adjusted_pfcf_high', $data ?? [], null);
        $this->setIfExists('cyclically_adjusted_pfcf_low', $data ?? [], null);
        $this->setIfExists('cyclically_adjusted_pfcf_med', $data ?? [], null);
        $this->setIfExists('cyclically_adjusted_ps', $data ?? [], null);
        $this->setIfExists('cyclically_adjusted_ps_high', $data ?? [], null);
        $this->setIfExists('cyclically_adjusted_ps_low', $data ?? [], null);
        $this->setIfExists('cyclically_adjusted_ps_med', $data ?? [], null);
        $this->setIfExists('cyclically_adjusted_rvn', $data ?? [], null);
        $this->setIfExists('e10', $data ?? [], null);
        $this->setIfExists('earning_yield', $data ?? [], null);
        $this->setIfExists('earning_yield_greenblatt', $data ?? [], null);
        $this->setIfExists('earning_yield_greenblatt_high', $data ?? [], null);
        $this->setIfExists('earning_yield_greenblatt_low', $data ?? [], null);
        $this->setIfExists('earning_yield_greenblatt_med', $data ?? [], null);
        $this->setIfExists('earning_yield_high', $data ?? [], null);
        $this->setIfExists('earning_yield_low', $data ?? [], null);
        $this->setIfExists('earning_yield_med', $data ?? [], null);
        $this->setIfExists('ev2ebit', $data ?? [], null);
        $this->setIfExists('ev2ebitda', $data ?? [], null);
        $this->setIfExists('ev2ebitdahigh', $data ?? [], null);
        $this->setIfExists('ev2ebitdalow', $data ?? [], null);
        $this->setIfExists('ev2ebitdamed', $data ?? [], null);
        $this->setIfExists('ev2ebithigh', $data ?? [], null);
        $this->setIfExists('ev2ebitlow', $data ?? [], null);
        $this->setIfExists('ev2ebitmed', $data ?? [], null);
        $this->setIfExists('ev2fcf', $data ?? [], null);
        $this->setIfExists('ev2fcfhigh', $data ?? [], null);
        $this->setIfExists('ev2fcflow', $data ?? [], null);
        $this->setIfExists('ev2fcfmed', $data ?? [], null);
        $this->setIfExists('ev2pretaxincome', $data ?? [], null);
        $this->setIfExists('ev2rev', $data ?? [], null);
        $this->setIfExists('ev2revhigh', $data ?? [], null);
        $this->setIfExists('ev2revlow', $data ?? [], null);
        $this->setIfExists('ev2revmed', $data ?? [], null);
        $this->setIfExists('ev_to_forward_ebit', $data ?? [], null);
        $this->setIfExists('ev_to_forward_ebitda', $data ?? [], null);
        $this->setIfExists('ev_to_forward_revenue', $data ?? [], null);
        $this->setIfExists('forward_pe', $data ?? [], null);
        $this->setIfExists('forward_fcf_yield', $data ?? [], null);
        $this->setIfExists('forward_peg_ratio', $data ?? [], null);
        $this->setIfExists('grahamnumber', $data ?? [], null);
        $this->setIfExists('iv_dc_earning', $data ?? [], null);
        $this->setIfExists('iv_dcf', $data ?? [], null);
        $this->setIfExists('iv_dcf_dividend', $data ?? [], null);
        $this->setIfExists('iv_dcf_share', $data ?? [], null);
        $this->setIfExists('lynchvalue', $data ?? [], null);
        $this->setIfExists('margin_dc_earning', $data ?? [], null);
        $this->setIfExists('margin_dcf', $data ?? [], null);
        $this->setIfExists('margin_dcf_dividend', $data ?? [], null);
        $this->setIfExists('medpbvalue', $data ?? [], null);
        $this->setIfExists('medpsvalue', $data ?? [], null);
        $this->setIfExists('ncav', $data ?? [], null);
        $this->setIfExists('ncav_real', $data ?? [], null);
        $this->setIfExists('net_cash', $data ?? [], null);
        $this->setIfExists('p2_epv', $data ?? [], null);
        $this->setIfExists('p2_owner_earnings', $data ?? [], null);
        $this->setIfExists('p2_owner_earnings_high', $data ?? [], null);
        $this->setIfExists('p2_owner_earnings_low', $data ?? [], null);
        $this->setIfExists('p2_owner_earnings_med', $data ?? [], null);
        $this->setIfExists('p2ffo', $data ?? [], null);
        $this->setIfExists('p2grahamnumber', $data ?? [], null);
        $this->setIfExists('p2grahamnumber_high', $data ?? [], null);
        $this->setIfExists('p2grahamnumber_low', $data ?? [], null);
        $this->setIfExists('p2grahamnumber_med', $data ?? [], null);
        $this->setIfExists('p2iv_dc_earning', $data ?? [], null);
        $this->setIfExists('p2iv_dc_earning_high', $data ?? [], null);
        $this->setIfExists('p2iv_dc_earning_low', $data ?? [], null);
        $this->setIfExists('p2iv_dc_earning_med', $data ?? [], null);
        $this->setIfExists('p2iv_dcf', $data ?? [], null);
        $this->setIfExists('p2iv_dcf_dividend', $data ?? [], null);
        $this->setIfExists('p2iv_dcf_dividend_high', $data ?? [], null);
        $this->setIfExists('p2iv_dcf_dividend_low', $data ?? [], null);
        $this->setIfExists('p2iv_dcf_dividend_med', $data ?? [], null);
        $this->setIfExists('p2iv_dcf_high', $data ?? [], null);
        $this->setIfExists('p2iv_dcf_low', $data ?? [], null);
        $this->setIfExists('p2iv_dcf_med', $data ?? [], null);
        $this->setIfExists('p2iv_dcf_share', $data ?? [], null);
        $this->setIfExists('p2iv_dcf_share_high', $data ?? [], null);
        $this->setIfExists('p2iv_dcf_share_low', $data ?? [], null);
        $this->setIfExists('p2iv_dcf_share_med', $data ?? [], null);
        $this->setIfExists('p2lynchvalue', $data ?? [], null);
        $this->setIfExists('p2lynchvalue_high', $data ?? [], null);
        $this->setIfExists('p2lynchvalue_low', $data ?? [], null);
        $this->setIfExists('p2lynchvalue_med', $data ?? [], null);
        $this->setIfExists('p2medpbvalue', $data ?? [], null);
        $this->setIfExists('p2medpbvalue_high', $data ?? [], null);
        $this->setIfExists('p2medpbvalue_low', $data ?? [], null);
        $this->setIfExists('p2medpbvalue_med', $data ?? [], null);
        $this->setIfExists('p2medpsvalue', $data ?? [], null);
        $this->setIfExists('p2medpsvalue_high', $data ?? [], null);
        $this->setIfExists('p2medpsvalue_low', $data ?? [], null);
        $this->setIfExists('p2medpsvalue_med', $data ?? [], null);
        $this->setIfExists('p2ncav', $data ?? [], null);
        $this->setIfExists('p2ncav_high', $data ?? [], null);
        $this->setIfExists('p2ncav_low', $data ?? [], null);
        $this->setIfExists('p2ncav_med', $data ?? [], null);
        $this->setIfExists('p2net_cash', $data ?? [], null);
        $this->setIfExists('p2net_cash_high', $data ?? [], null);
        $this->setIfExists('p2net_cash_low', $data ?? [], null);
        $this->setIfExists('p2net_cash_med', $data ?? [], null);
        $this->setIfExists('p2nnwc', $data ?? [], null);
        $this->setIfExists('p2tangible_book', $data ?? [], null);
        $this->setIfExists('p2tangible_book_high', $data ?? [], null);
        $this->setIfExists('p2tangible_book_low', $data ?? [], null);
        $this->setIfExists('p2tangible_book_med', $data ?? [], null);
        $this->setIfExists('pb', $data ?? [], null);
        $this->setIfExists('pbhigh', $data ?? [], null);
        $this->setIfExists('pblow', $data ?? [], null);
        $this->setIfExists('pbmed', $data ?? [], null);
        $this->setIfExists('pe', $data ?? [], null);
        $this->setIfExists('pebit_med', $data ?? [], null);
        $this->setIfExists('pebitda_med', $data ?? [], null);
        $this->setIfExists('peg', $data ?? [], null);
        $this->setIfExists('peghigh', $data ?? [], null);
        $this->setIfExists('peglow', $data ?? [], null);
        $this->setIfExists('pegmed', $data ?? [], null);
        $this->setIfExists('penri', $data ?? [], null);
        $this->setIfExists('penrihigh', $data ?? [], null);
        $this->setIfExists('penrilow', $data ?? [], null);
        $this->setIfExists('penrimed', $data ?? [], null);
        $this->setIfExists('pettmhigh', $data ?? [], null);
        $this->setIfExists('pettmlow', $data ?? [], null);
        $this->setIfExists('pettmmed', $data ?? [], null);
        $this->setIfExists('pfcf', $data ?? [], null);
        $this->setIfExists('pfcfhigh', $data ?? [], null);
        $this->setIfExists('pfcflow', $data ?? [], null);
        $this->setIfExists('pfcfmed', $data ?? [], null);
        $this->setIfExists('pocf', $data ?? [], null);
        $this->setIfExists('pocfhigh', $data ?? [], null);
        $this->setIfExists('pocflow', $data ?? [], null);
        $this->setIfExists('pocfmed', $data ?? [], null);
        $this->setIfExists('ps', $data ?? [], null);
        $this->setIfExists('pshigh', $data ?? [], null);
        $this->setIfExists('pslow', $data ?? [], null);
        $this->setIfExists('psmed', $data ?? [], null);
        $this->setIfExists('tangible_book', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets epv
     *
     * @return float|null
     */
    public function getEpv()
    {
        return $this->container['epv'];
    }

    /**
     * Sets epv
     *
     * @param float|null $epv Earnings power value (EPV) is a technique for valuing stocks by making assumptions about the sustainability of current earnings and the cost of capital but not future growth.
     *
     * @return self
     */
    public function setEpv($epv)
    {
        if (is_null($epv)) {
            throw new \InvalidArgumentException('non-nullable epv cannot be null');
        }
        $this->container['epv'] = $epv;

        return $this;
    }

    /**
     * Gets fc_fyield
     *
     * @return float|null
     */
    public function getFcFyield()
    {
        return $this->container['fc_fyield'];
    }

    /**
     * Sets fc_fyield
     *
     * @param float|null $fc_fyield Free cash flow yield: the free cash flow divided by share price
     *
     * @return self
     */
    public function setFcFyield($fc_fyield)
    {
        if (is_null($fc_fyield)) {
            throw new \InvalidArgumentException('non-nullable fc_fyield cannot be null');
        }
        $this->container['fc_fyield'] = $fc_fyield;

        return $this;
    }

    /**
     * Gets fc_fyield_high
     *
     * @return float|null
     */
    public function getFcFyieldHigh()
    {
        return $this->container['fc_fyield_high'];
    }

    /**
     * Sets fc_fyield_high
     *
     * @param float|null $fc_fyield_high fc_fyield_high
     *
     * @return self
     */
    public function setFcFyieldHigh($fc_fyield_high)
    {
        if (is_null($fc_fyield_high)) {
            throw new \InvalidArgumentException('non-nullable fc_fyield_high cannot be null');
        }
        $this->container['fc_fyield_high'] = $fc_fyield_high;

        return $this;
    }

    /**
     * Gets fc_fyield_low
     *
     * @return float|null
     */
    public function getFcFyieldLow()
    {
        return $this->container['fc_fyield_low'];
    }

    /**
     * Sets fc_fyield_low
     *
     * @param float|null $fc_fyield_low fc_fyield_low
     *
     * @return self
     */
    public function setFcFyieldLow($fc_fyield_low)
    {
        if (is_null($fc_fyield_low)) {
            throw new \InvalidArgumentException('non-nullable fc_fyield_low cannot be null');
        }
        $this->container['fc_fyield_low'] = $fc_fyield_low;

        return $this;
    }

    /**
     * Gets fc_fyield_med
     *
     * @return float|null
     */
    public function getFcFyieldMed()
    {
        return $this->container['fc_fyield_med'];
    }

    /**
     * Sets fc_fyield_med
     *
     * @param float|null $fc_fyield_med fc_fyield_med
     *
     * @return self
     */
    public function setFcFyieldMed($fc_fyield_med)
    {
        if (is_null($fc_fyield_med)) {
            throw new \InvalidArgumentException('non-nullable fc_fyield_med cannot be null');
        }
        $this->container['fc_fyield_med'] = $fc_fyield_med;

        return $this;
    }

    /**
     * Gets fc_fyield_med_5y
     *
     * @return float|null
     */
    public function getFcFyieldMed5y()
    {
        return $this->container['fc_fyield_med_5y'];
    }

    /**
     * Sets fc_fyield_med_5y
     *
     * @param float|null $fc_fyield_med_5y The median free cash flow yield over the past five years.
     *
     * @return self
     */
    public function setFcFyieldMed5y($fc_fyield_med_5y)
    {
        if (is_null($fc_fyield_med_5y)) {
            throw new \InvalidArgumentException('non-nullable fc_fyield_med_5y cannot be null');
        }
        $this->container['fc_fyield_med_5y'] = $fc_fyield_med_5y;

        return $this;
    }

    /**
     * Gets owner_earnings
     *
     * @return float|null
     */
    public function getOwnerEarnings()
    {
        return $this->container['owner_earnings'];
    }

    /**
     * Sets owner_earnings
     *
     * @param float|null $owner_earnings If we think through these questions, we can gain some insights about what may be called 'owner earnings.' These represent (A) reported earnings plus (B) depreciation, depletion, amortization, and certain other non-cash charges such as Company N's items (1) and (4) less the average annual amount of capitalized expenditures for plant and equipment, etc. that the business requires to fully maintain its long-term competitive position and its unit volume. (If the business requires additional working capital to maintain its competitive position and unit volume, the increment also should be included in (c). However, businesses following the LIFO inventory method usually do not require additional working capital if unit volume does not change.
     *
     * @return self
     */
    public function setOwnerEarnings($owner_earnings)
    {
        if (is_null($owner_earnings)) {
            throw new \InvalidArgumentException('non-nullable owner_earnings cannot be null');
        }
        $this->container['owner_earnings'] = $owner_earnings;

        return $this;
    }

    /**
     * Gets rate_of_return
     *
     * @return float|null
     */
    public function getRateOfReturn()
    {
        return $this->container['rate_of_return'];
    }

    /**
     * Sets rate_of_return
     *
     * @param float|null $rate_of_return Yacktman defines forward rate of return as the normalized free cash flow yield plus real growth plus inflation.
     *
     * @return self
     */
    public function setRateOfReturn($rate_of_return)
    {
        if (is_null($rate_of_return)) {
            throw new \InvalidArgumentException('non-nullable rate_of_return cannot be null');
        }
        $this->container['rate_of_return'] = $rate_of_return;

        return $this;
    }

    /**
     * Gets rate_of_return_high
     *
     * @return float|null
     */
    public function getRateOfReturnHigh()
    {
        return $this->container['rate_of_return_high'];
    }

    /**
     * Sets rate_of_return_high
     *
     * @param float|null $rate_of_return_high Yacktman defines forward rate of return as the normalized free cash flow yield plus real growth plus inflation.
     *
     * @return self
     */
    public function setRateOfReturnHigh($rate_of_return_high)
    {
        if (is_null($rate_of_return_high)) {
            throw new \InvalidArgumentException('non-nullable rate_of_return_high cannot be null');
        }
        $this->container['rate_of_return_high'] = $rate_of_return_high;

        return $this;
    }

    /**
     * Gets rate_of_return_low
     *
     * @return float|null
     */
    public function getRateOfReturnLow()
    {
        return $this->container['rate_of_return_low'];
    }

    /**
     * Sets rate_of_return_low
     *
     * @param float|null $rate_of_return_low Yacktman defines forward rate of return as the normalized free cash flow yield plus real growth plus inflation.
     *
     * @return self
     */
    public function setRateOfReturnLow($rate_of_return_low)
    {
        if (is_null($rate_of_return_low)) {
            throw new \InvalidArgumentException('non-nullable rate_of_return_low cannot be null');
        }
        $this->container['rate_of_return_low'] = $rate_of_return_low;

        return $this;
    }

    /**
     * Gets rate_of_return_med
     *
     * @return float|null
     */
    public function getRateOfReturnMed()
    {
        return $this->container['rate_of_return_med'];
    }

    /**
     * Sets rate_of_return_med
     *
     * @param float|null $rate_of_return_med Yacktman defines forward rate of return as the normalized free cash flow yield plus real growth plus inflation.
     *
     * @return self
     */
    public function setRateOfReturnMed($rate_of_return_med)
    {
        if (is_null($rate_of_return_med)) {
            throw new \InvalidArgumentException('non-nullable rate_of_return_med cannot be null');
        }
        $this->container['rate_of_return_med'] = $rate_of_return_med;

        return $this;
    }

    /**
     * Gets shiller_pe
     *
     * @return float|null
     */
    public function getShillerPe()
    {
        return $this->container['shiller_pe'];
    }

    /**
     * Sets shiller_pe
     *
     * @param float|null $shiller_pe Price earnings ratio is based on average inflation-adjusted earnings from the previous 10 years, known as the Cyclically Adjusted PE Ratio (CAPE Ratio), Shiller PE Ratio, or PE 10
     *
     * @return self
     */
    public function setShillerPe($shiller_pe)
    {
        if (is_null($shiller_pe)) {
            throw new \InvalidArgumentException('non-nullable shiller_pe cannot be null');
        }
        $this->container['shiller_pe'] = $shiller_pe;

        return $this;
    }

    /**
     * Gets shiller_pe_high
     *
     * @return float|null
     */
    public function getShillerPeHigh()
    {
        return $this->container['shiller_pe_high'];
    }

    /**
     * Sets shiller_pe_high
     *
     * @param float|null $shiller_pe_high Price earnings ratio is based on average inflation-adjusted earnings from the previous 10 years, known as the Cyclically Adjusted PE Ratio (CAPE Ratio), Shiller PE Ratio, or PE 10
     *
     * @return self
     */
    public function setShillerPeHigh($shiller_pe_high)
    {
        if (is_null($shiller_pe_high)) {
            throw new \InvalidArgumentException('non-nullable shiller_pe_high cannot be null');
        }
        $this->container['shiller_pe_high'] = $shiller_pe_high;

        return $this;
    }

    /**
     * Gets shiller_pe_low
     *
     * @return float|null
     */
    public function getShillerPeLow()
    {
        return $this->container['shiller_pe_low'];
    }

    /**
     * Sets shiller_pe_low
     *
     * @param float|null $shiller_pe_low Price earnings ratio is based on average inflation-adjusted earnings from the previous 10 years, known as the Cyclically Adjusted PE Ratio (CAPE Ratio), Shiller PE Ratio, or PE 10
     *
     * @return self
     */
    public function setShillerPeLow($shiller_pe_low)
    {
        if (is_null($shiller_pe_low)) {
            throw new \InvalidArgumentException('non-nullable shiller_pe_low cannot be null');
        }
        $this->container['shiller_pe_low'] = $shiller_pe_low;

        return $this;
    }

    /**
     * Gets shiller_pe_med
     *
     * @return float|null
     */
    public function getShillerPeMed()
    {
        return $this->container['shiller_pe_med'];
    }

    /**
     * Sets shiller_pe_med
     *
     * @param float|null $shiller_pe_med Price earnings ratio is based on average inflation-adjusted earnings from the previous 10 years, known as the Cyclically Adjusted PE Ratio (CAPE Ratio), Shiller PE Ratio, or PE 10
     *
     * @return self
     */
    public function setShillerPeMed($shiller_pe_med)
    {
        if (is_null($shiller_pe_med)) {
            throw new \InvalidArgumentException('non-nullable shiller_pe_med cannot be null');
        }
        $this->container['shiller_pe_med'] = $shiller_pe_med;

        return $this;
    }

    /**
     * Gets cyclically_adjusted_book
     *
     * @return float|null
     */
    public function getCyclicallyAdjustedBook()
    {
        return $this->container['cyclically_adjusted_book'];
    }

    /**
     * Sets cyclically_adjusted_book
     *
     * @param float|null $cyclically_adjusted_book cyclically_adjusted_book
     *
     * @return self
     */
    public function setCyclicallyAdjustedBook($cyclically_adjusted_book)
    {
        if (is_null($cyclically_adjusted_book)) {
            throw new \InvalidArgumentException('non-nullable cyclically_adjusted_book cannot be null');
        }
        $this->container['cyclically_adjusted_book'] = $cyclically_adjusted_book;

        return $this;
    }

    /**
     * Gets cyclically_adjusted_fcf
     *
     * @return float|null
     */
    public function getCyclicallyAdjustedFcf()
    {
        return $this->container['cyclically_adjusted_fcf'];
    }

    /**
     * Sets cyclically_adjusted_fcf
     *
     * @param float|null $cyclically_adjusted_fcf cyclically_adjusted_fcf
     *
     * @return self
     */
    public function setCyclicallyAdjustedFcf($cyclically_adjusted_fcf)
    {
        if (is_null($cyclically_adjusted_fcf)) {
            throw new \InvalidArgumentException('non-nullable cyclically_adjusted_fcf cannot be null');
        }
        $this->container['cyclically_adjusted_fcf'] = $cyclically_adjusted_fcf;

        return $this;
    }

    /**
     * Gets cyclically_adjusted_pb
     *
     * @return float|null
     */
    public function getCyclicallyAdjustedPb()
    {
        return $this->container['cyclically_adjusted_pb'];
    }

    /**
     * Sets cyclically_adjusted_pb
     *
     * @param float|null $cyclically_adjusted_pb The Cyclically Adjusted PB Ratio, also known as the CAPB Ratio, is the stock price divided by the average of the inflation adjusted book value per share of a company over the past 10 years.
     *
     * @return self
     */
    public function setCyclicallyAdjustedPb($cyclically_adjusted_pb)
    {
        if (is_null($cyclically_adjusted_pb)) {
            throw new \InvalidArgumentException('non-nullable cyclically_adjusted_pb cannot be null');
        }
        $this->container['cyclically_adjusted_pb'] = $cyclically_adjusted_pb;

        return $this;
    }

    /**
     * Gets cyclically_adjusted_pb_high
     *
     * @return float|null
     */
    public function getCyclicallyAdjustedPbHigh()
    {
        return $this->container['cyclically_adjusted_pb_high'];
    }

    /**
     * Sets cyclically_adjusted_pb_high
     *
     * @param float|null $cyclically_adjusted_pb_high cyclically_adjusted_pb_high
     *
     * @return self
     */
    public function setCyclicallyAdjustedPbHigh($cyclically_adjusted_pb_high)
    {
        if (is_null($cyclically_adjusted_pb_high)) {
            throw new \InvalidArgumentException('non-nullable cyclically_adjusted_pb_high cannot be null');
        }
        $this->container['cyclically_adjusted_pb_high'] = $cyclically_adjusted_pb_high;

        return $this;
    }

    /**
     * Gets cyclically_adjusted_pb_low
     *
     * @return float|null
     */
    public function getCyclicallyAdjustedPbLow()
    {
        return $this->container['cyclically_adjusted_pb_low'];
    }

    /**
     * Sets cyclically_adjusted_pb_low
     *
     * @param float|null $cyclically_adjusted_pb_low cyclically_adjusted_pb_low
     *
     * @return self
     */
    public function setCyclicallyAdjustedPbLow($cyclically_adjusted_pb_low)
    {
        if (is_null($cyclically_adjusted_pb_low)) {
            throw new \InvalidArgumentException('non-nullable cyclically_adjusted_pb_low cannot be null');
        }
        $this->container['cyclically_adjusted_pb_low'] = $cyclically_adjusted_pb_low;

        return $this;
    }

    /**
     * Gets cyclically_adjusted_pb_med
     *
     * @return float|null
     */
    public function getCyclicallyAdjustedPbMed()
    {
        return $this->container['cyclically_adjusted_pb_med'];
    }

    /**
     * Sets cyclically_adjusted_pb_med
     *
     * @param float|null $cyclically_adjusted_pb_med cyclically_adjusted_pb_med
     *
     * @return self
     */
    public function setCyclicallyAdjustedPbMed($cyclically_adjusted_pb_med)
    {
        if (is_null($cyclically_adjusted_pb_med)) {
            throw new \InvalidArgumentException('non-nullable cyclically_adjusted_pb_med cannot be null');
        }
        $this->container['cyclically_adjusted_pb_med'] = $cyclically_adjusted_pb_med;

        return $this;
    }

    /**
     * Gets cyclically_adjusted_pfcf
     *
     * @return float|null
     */
    public function getCyclicallyAdjustedPfcf()
    {
        return $this->container['cyclically_adjusted_pfcf'];
    }

    /**
     * Sets cyclically_adjusted_pfcf
     *
     * @param float|null $cyclically_adjusted_pfcf cyclically_adjusted_pfcf
     *
     * @return self
     */
    public function setCyclicallyAdjustedPfcf($cyclically_adjusted_pfcf)
    {
        if (is_null($cyclically_adjusted_pfcf)) {
            throw new \InvalidArgumentException('non-nullable cyclically_adjusted_pfcf cannot be null');
        }
        $this->container['cyclically_adjusted_pfcf'] = $cyclically_adjusted_pfcf;

        return $this;
    }

    /**
     * Gets cyclically_adjusted_pfcf_high
     *
     * @return float|null
     */
    public function getCyclicallyAdjustedPfcfHigh()
    {
        return $this->container['cyclically_adjusted_pfcf_high'];
    }

    /**
     * Sets cyclically_adjusted_pfcf_high
     *
     * @param float|null $cyclically_adjusted_pfcf_high cyclically_adjusted_pfcf_high
     *
     * @return self
     */
    public function setCyclicallyAdjustedPfcfHigh($cyclically_adjusted_pfcf_high)
    {
        if (is_null($cyclically_adjusted_pfcf_high)) {
            throw new \InvalidArgumentException('non-nullable cyclically_adjusted_pfcf_high cannot be null');
        }
        $this->container['cyclically_adjusted_pfcf_high'] = $cyclically_adjusted_pfcf_high;

        return $this;
    }

    /**
     * Gets cyclically_adjusted_pfcf_low
     *
     * @return float|null
     */
    public function getCyclicallyAdjustedPfcfLow()
    {
        return $this->container['cyclically_adjusted_pfcf_low'];
    }

    /**
     * Sets cyclically_adjusted_pfcf_low
     *
     * @param float|null $cyclically_adjusted_pfcf_low cyclically_adjusted_pfcf_low
     *
     * @return self
     */
    public function setCyclicallyAdjustedPfcfLow($cyclically_adjusted_pfcf_low)
    {
        if (is_null($cyclically_adjusted_pfcf_low)) {
            throw new \InvalidArgumentException('non-nullable cyclically_adjusted_pfcf_low cannot be null');
        }
        $this->container['cyclically_adjusted_pfcf_low'] = $cyclically_adjusted_pfcf_low;

        return $this;
    }

    /**
     * Gets cyclically_adjusted_pfcf_med
     *
     * @return float|null
     */
    public function getCyclicallyAdjustedPfcfMed()
    {
        return $this->container['cyclically_adjusted_pfcf_med'];
    }

    /**
     * Sets cyclically_adjusted_pfcf_med
     *
     * @param float|null $cyclically_adjusted_pfcf_med cyclically_adjusted_pfcf_med
     *
     * @return self
     */
    public function setCyclicallyAdjustedPfcfMed($cyclically_adjusted_pfcf_med)
    {
        if (is_null($cyclically_adjusted_pfcf_med)) {
            throw new \InvalidArgumentException('non-nullable cyclically_adjusted_pfcf_med cannot be null');
        }
        $this->container['cyclically_adjusted_pfcf_med'] = $cyclically_adjusted_pfcf_med;

        return $this;
    }

    /**
     * Gets cyclically_adjusted_ps
     *
     * @return float|null
     */
    public function getCyclicallyAdjustedPs()
    {
        return $this->container['cyclically_adjusted_ps'];
    }

    /**
     * Sets cyclically_adjusted_ps
     *
     * @param float|null $cyclically_adjusted_ps The Cyclically Adjusted PS Ratio, also referred to as the CAPS Ratio, is the stock price divided by the average of the inflation adjusted revenue per share of a company over the past 10 years.
     *
     * @return self
     */
    public function setCyclicallyAdjustedPs($cyclically_adjusted_ps)
    {
        if (is_null($cyclically_adjusted_ps)) {
            throw new \InvalidArgumentException('non-nullable cyclically_adjusted_ps cannot be null');
        }
        $this->container['cyclically_adjusted_ps'] = $cyclically_adjusted_ps;

        return $this;
    }

    /**
     * Gets cyclically_adjusted_ps_high
     *
     * @return float|null
     */
    public function getCyclicallyAdjustedPsHigh()
    {
        return $this->container['cyclically_adjusted_ps_high'];
    }

    /**
     * Sets cyclically_adjusted_ps_high
     *
     * @param float|null $cyclically_adjusted_ps_high cyclically_adjusted_ps_high
     *
     * @return self
     */
    public function setCyclicallyAdjustedPsHigh($cyclically_adjusted_ps_high)
    {
        if (is_null($cyclically_adjusted_ps_high)) {
            throw new \InvalidArgumentException('non-nullable cyclically_adjusted_ps_high cannot be null');
        }
        $this->container['cyclically_adjusted_ps_high'] = $cyclically_adjusted_ps_high;

        return $this;
    }

    /**
     * Gets cyclically_adjusted_ps_low
     *
     * @return float|null
     */
    public function getCyclicallyAdjustedPsLow()
    {
        return $this->container['cyclically_adjusted_ps_low'];
    }

    /**
     * Sets cyclically_adjusted_ps_low
     *
     * @param float|null $cyclically_adjusted_ps_low cyclically_adjusted_ps_low
     *
     * @return self
     */
    public function setCyclicallyAdjustedPsLow($cyclically_adjusted_ps_low)
    {
        if (is_null($cyclically_adjusted_ps_low)) {
            throw new \InvalidArgumentException('non-nullable cyclically_adjusted_ps_low cannot be null');
        }
        $this->container['cyclically_adjusted_ps_low'] = $cyclically_adjusted_ps_low;

        return $this;
    }

    /**
     * Gets cyclically_adjusted_ps_med
     *
     * @return float|null
     */
    public function getCyclicallyAdjustedPsMed()
    {
        return $this->container['cyclically_adjusted_ps_med'];
    }

    /**
     * Sets cyclically_adjusted_ps_med
     *
     * @param float|null $cyclically_adjusted_ps_med cyclically_adjusted_ps_med
     *
     * @return self
     */
    public function setCyclicallyAdjustedPsMed($cyclically_adjusted_ps_med)
    {
        if (is_null($cyclically_adjusted_ps_med)) {
            throw new \InvalidArgumentException('non-nullable cyclically_adjusted_ps_med cannot be null');
        }
        $this->container['cyclically_adjusted_ps_med'] = $cyclically_adjusted_ps_med;

        return $this;
    }

    /**
     * Gets cyclically_adjusted_rvn
     *
     * @return float|null
     */
    public function getCyclicallyAdjustedRvn()
    {
        return $this->container['cyclically_adjusted_rvn'];
    }

    /**
     * Sets cyclically_adjusted_rvn
     *
     * @param float|null $cyclically_adjusted_rvn cyclically_adjusted_rvn
     *
     * @return self
     */
    public function setCyclicallyAdjustedRvn($cyclically_adjusted_rvn)
    {
        if (is_null($cyclically_adjusted_rvn)) {
            throw new \InvalidArgumentException('non-nullable cyclically_adjusted_rvn cannot be null');
        }
        $this->container['cyclically_adjusted_rvn'] = $cyclically_adjusted_rvn;

        return $this;
    }

    /**
     * Gets e10
     *
     * @return float|null
     */
    public function getE10()
    {
        return $this->container['e10'];
    }

    /**
     * Sets e10
     *
     * @param float|null $e10 E10 is a concept invented by Prof. Robert Shiller, who uses E10 for his Shiller P/E calculation. When we calculate the today™s Shiller P/E ratio of a stock, we use today™s price divided by E10.     What is E10? How do we calculate E10?    E10 is the average of the inflation adjusted earnings of a company over the past 10 years. Let™s use an example to explain.     If we want to calculate the E10 of Wal-Mart (WMT) for Dec. 31, 2010, we need to have the inflation data and the earnings from 2001 through 2010.     We adjusted the earnings of 2001 earnings data with the total inflation from 2001 through 2010 to the equivalent earnings in 2010. If the total inflation from 2001 to 2010 is 40%, and Wal-Mart earned $1 a share in 2001, then the 2001™s equivalent earnings in 2010 is $1.4 a share. If Wal-Mart earns $1 again in 2002, and the total inflation from 2002 through 2010 is 35%, then the equivalent 2002 earnings in 2010 is $1.35. So on and so forth, you get the equivalent earnings of past 10 years. Then you add them together and divided the sum by 10 to get E10.
     *
     * @return self
     */
    public function setE10($e10)
    {
        if (is_null($e10)) {
            throw new \InvalidArgumentException('non-nullable e10 cannot be null');
        }
        $this->container['e10'] = $e10;

        return $this;
    }

    /**
     * Gets earning_yield
     *
     * @return float|null
     */
    public function getEarningYield()
    {
        return $this->container['earning_yield'];
    }

    /**
     * Sets earning_yield
     *
     * @param float|null $earning_yield Earnings-to-price ratio, i.e., the inverse of PE
     *
     * @return self
     */
    public function setEarningYield($earning_yield)
    {
        if (is_null($earning_yield)) {
            throw new \InvalidArgumentException('non-nullable earning_yield cannot be null');
        }
        $this->container['earning_yield'] = $earning_yield;

        return $this;
    }

    /**
     * Gets earning_yield_greenblatt
     *
     * @return float|null
     */
    public function getEarningYieldGreenblatt()
    {
        return $this->container['earning_yield_greenblatt'];
    }

    /**
     * Sets earning_yield_greenblatt
     *
     * @param float|null $earning_yield_greenblatt The standard definition of earnings yield is the earnings per share divided by the price of a share. It's the inverse of P/E and shows the amount of money earned compared to the price you pay for a share.
     *
     * @return self
     */
    public function setEarningYieldGreenblatt($earning_yield_greenblatt)
    {
        if (is_null($earning_yield_greenblatt)) {
            throw new \InvalidArgumentException('non-nullable earning_yield_greenblatt cannot be null');
        }
        $this->container['earning_yield_greenblatt'] = $earning_yield_greenblatt;

        return $this;
    }

    /**
     * Gets earning_yield_greenblatt_high
     *
     * @return float|null
     */
    public function getEarningYieldGreenblattHigh()
    {
        return $this->container['earning_yield_greenblatt_high'];
    }

    /**
     * Sets earning_yield_greenblatt_high
     *
     * @param float|null $earning_yield_greenblatt_high The standard definition of earnings yield is the earnings per share divided by the price of a share. It's the inverse of P/E and shows the amount of money earned compared to the price you pay for a share.
     *
     * @return self
     */
    public function setEarningYieldGreenblattHigh($earning_yield_greenblatt_high)
    {
        if (is_null($earning_yield_greenblatt_high)) {
            throw new \InvalidArgumentException('non-nullable earning_yield_greenblatt_high cannot be null');
        }
        $this->container['earning_yield_greenblatt_high'] = $earning_yield_greenblatt_high;

        return $this;
    }

    /**
     * Gets earning_yield_greenblatt_low
     *
     * @return float|null
     */
    public function getEarningYieldGreenblattLow()
    {
        return $this->container['earning_yield_greenblatt_low'];
    }

    /**
     * Sets earning_yield_greenblatt_low
     *
     * @param float|null $earning_yield_greenblatt_low The standard definition of earnings yield is the earnings per share divided by the price of a share. It's the inverse of P/E and shows the amount of money earned compared to the price you pay for a share.
     *
     * @return self
     */
    public function setEarningYieldGreenblattLow($earning_yield_greenblatt_low)
    {
        if (is_null($earning_yield_greenblatt_low)) {
            throw new \InvalidArgumentException('non-nullable earning_yield_greenblatt_low cannot be null');
        }
        $this->container['earning_yield_greenblatt_low'] = $earning_yield_greenblatt_low;

        return $this;
    }

    /**
     * Gets earning_yield_greenblatt_med
     *
     * @return float|null
     */
    public function getEarningYieldGreenblattMed()
    {
        return $this->container['earning_yield_greenblatt_med'];
    }

    /**
     * Sets earning_yield_greenblatt_med
     *
     * @param float|null $earning_yield_greenblatt_med The standard definition of earnings yield is the earnings per share divided by the price of a share. It's the inverse of P/E and shows the amount of money earned compared to the price you pay for a share.
     *
     * @return self
     */
    public function setEarningYieldGreenblattMed($earning_yield_greenblatt_med)
    {
        if (is_null($earning_yield_greenblatt_med)) {
            throw new \InvalidArgumentException('non-nullable earning_yield_greenblatt_med cannot be null');
        }
        $this->container['earning_yield_greenblatt_med'] = $earning_yield_greenblatt_med;

        return $this;
    }

    /**
     * Gets earning_yield_high
     *
     * @return float|null
     */
    public function getEarningYieldHigh()
    {
        return $this->container['earning_yield_high'];
    }

    /**
     * Sets earning_yield_high
     *
     * @param float|null $earning_yield_high earning_yield_high
     *
     * @return self
     */
    public function setEarningYieldHigh($earning_yield_high)
    {
        if (is_null($earning_yield_high)) {
            throw new \InvalidArgumentException('non-nullable earning_yield_high cannot be null');
        }
        $this->container['earning_yield_high'] = $earning_yield_high;

        return $this;
    }

    /**
     * Gets earning_yield_low
     *
     * @return float|null
     */
    public function getEarningYieldLow()
    {
        return $this->container['earning_yield_low'];
    }

    /**
     * Sets earning_yield_low
     *
     * @param float|null $earning_yield_low earning_yield_low
     *
     * @return self
     */
    public function setEarningYieldLow($earning_yield_low)
    {
        if (is_null($earning_yield_low)) {
            throw new \InvalidArgumentException('non-nullable earning_yield_low cannot be null');
        }
        $this->container['earning_yield_low'] = $earning_yield_low;

        return $this;
    }

    /**
     * Gets earning_yield_med
     *
     * @return float|null
     */
    public function getEarningYieldMed()
    {
        return $this->container['earning_yield_med'];
    }

    /**
     * Sets earning_yield_med
     *
     * @param float|null $earning_yield_med earning_yield_med
     *
     * @return self
     */
    public function setEarningYieldMed($earning_yield_med)
    {
        if (is_null($earning_yield_med)) {
            throw new \InvalidArgumentException('non-nullable earning_yield_med cannot be null');
        }
        $this->container['earning_yield_med'] = $earning_yield_med;

        return $this;
    }

    /**
     * Gets ev2ebit
     *
     * @return float|null
     */
    public function getEv2ebit()
    {
        return $this->container['ev2ebit'];
    }

    /**
     * Sets ev2ebit
     *
     * @param float|null $ev2ebit EV-to-EBIT is calculated as Enterprise Value divided by its EBIT.
     *
     * @return self
     */
    public function setEv2ebit($ev2ebit)
    {
        if (is_null($ev2ebit)) {
            throw new \InvalidArgumentException('non-nullable ev2ebit cannot be null');
        }
        $this->container['ev2ebit'] = $ev2ebit;

        return $this;
    }

    /**
     * Gets ev2ebitda
     *
     * @return float|null
     */
    public function getEv2ebitda()
    {
        return $this->container['ev2ebitda'];
    }

    /**
     * Sets ev2ebitda
     *
     * @param float|null $ev2ebitda EV-to-EBITDA is calculated as enterprise value divided by its EBITDA.
     *
     * @return self
     */
    public function setEv2ebitda($ev2ebitda)
    {
        if (is_null($ev2ebitda)) {
            throw new \InvalidArgumentException('non-nullable ev2ebitda cannot be null');
        }
        $this->container['ev2ebitda'] = $ev2ebitda;

        return $this;
    }

    /**
     * Gets ev2ebitdahigh
     *
     * @return float|null
     */
    public function getEv2ebitdahigh()
    {
        return $this->container['ev2ebitdahigh'];
    }

    /**
     * Sets ev2ebitdahigh
     *
     * @param float|null $ev2ebitdahigh EV-to-EBITDA is calculated as enterprise value divided by its EBITDA.
     *
     * @return self
     */
    public function setEv2ebitdahigh($ev2ebitdahigh)
    {
        if (is_null($ev2ebitdahigh)) {
            throw new \InvalidArgumentException('non-nullable ev2ebitdahigh cannot be null');
        }
        $this->container['ev2ebitdahigh'] = $ev2ebitdahigh;

        return $this;
    }

    /**
     * Gets ev2ebitdalow
     *
     * @return float|null
     */
    public function getEv2ebitdalow()
    {
        return $this->container['ev2ebitdalow'];
    }

    /**
     * Sets ev2ebitdalow
     *
     * @param float|null $ev2ebitdalow EV-to-EBITDA is calculated as enterprise value divided by its EBITDA.
     *
     * @return self
     */
    public function setEv2ebitdalow($ev2ebitdalow)
    {
        if (is_null($ev2ebitdalow)) {
            throw new \InvalidArgumentException('non-nullable ev2ebitdalow cannot be null');
        }
        $this->container['ev2ebitdalow'] = $ev2ebitdalow;

        return $this;
    }

    /**
     * Gets ev2ebitdamed
     *
     * @return float|null
     */
    public function getEv2ebitdamed()
    {
        return $this->container['ev2ebitdamed'];
    }

    /**
     * Sets ev2ebitdamed
     *
     * @param float|null $ev2ebitdamed EV-to-EBITDA is calculated as enterprise value divided by its EBITDA.
     *
     * @return self
     */
    public function setEv2ebitdamed($ev2ebitdamed)
    {
        if (is_null($ev2ebitdamed)) {
            throw new \InvalidArgumentException('non-nullable ev2ebitdamed cannot be null');
        }
        $this->container['ev2ebitdamed'] = $ev2ebitdamed;

        return $this;
    }

    /**
     * Gets ev2ebithigh
     *
     * @return float|null
     */
    public function getEv2ebithigh()
    {
        return $this->container['ev2ebithigh'];
    }

    /**
     * Sets ev2ebithigh
     *
     * @param float|null $ev2ebithigh EV-to-EBIT is calculated as Enterprise Value divided by its EBIT.
     *
     * @return self
     */
    public function setEv2ebithigh($ev2ebithigh)
    {
        if (is_null($ev2ebithigh)) {
            throw new \InvalidArgumentException('non-nullable ev2ebithigh cannot be null');
        }
        $this->container['ev2ebithigh'] = $ev2ebithigh;

        return $this;
    }

    /**
     * Gets ev2ebitlow
     *
     * @return float|null
     */
    public function getEv2ebitlow()
    {
        return $this->container['ev2ebitlow'];
    }

    /**
     * Sets ev2ebitlow
     *
     * @param float|null $ev2ebitlow EV-to-EBIT is calculated as Enterprise Value divided by its EBIT.
     *
     * @return self
     */
    public function setEv2ebitlow($ev2ebitlow)
    {
        if (is_null($ev2ebitlow)) {
            throw new \InvalidArgumentException('non-nullable ev2ebitlow cannot be null');
        }
        $this->container['ev2ebitlow'] = $ev2ebitlow;

        return $this;
    }

    /**
     * Gets ev2ebitmed
     *
     * @return float|null
     */
    public function getEv2ebitmed()
    {
        return $this->container['ev2ebitmed'];
    }

    /**
     * Sets ev2ebitmed
     *
     * @param float|null $ev2ebitmed EV-to-EBIT is calculated as Enterprise Value divided by its EBIT.
     *
     * @return self
     */
    public function setEv2ebitmed($ev2ebitmed)
    {
        if (is_null($ev2ebitmed)) {
            throw new \InvalidArgumentException('non-nullable ev2ebitmed cannot be null');
        }
        $this->container['ev2ebitmed'] = $ev2ebitmed;

        return $this;
    }

    /**
     * Gets ev2fcf
     *
     * @return float|null
     */
    public function getEv2fcf()
    {
        return $this->container['ev2fcf'];
    }

    /**
     * Sets ev2fcf
     *
     * @param float|null $ev2fcf ev2fcf
     *
     * @return self
     */
    public function setEv2fcf($ev2fcf)
    {
        if (is_null($ev2fcf)) {
            throw new \InvalidArgumentException('non-nullable ev2fcf cannot be null');
        }
        $this->container['ev2fcf'] = $ev2fcf;

        return $this;
    }

    /**
     * Gets ev2fcfhigh
     *
     * @return float|null
     */
    public function getEv2fcfhigh()
    {
        return $this->container['ev2fcfhigh'];
    }

    /**
     * Sets ev2fcfhigh
     *
     * @param float|null $ev2fcfhigh ev2fcfhigh
     *
     * @return self
     */
    public function setEv2fcfhigh($ev2fcfhigh)
    {
        if (is_null($ev2fcfhigh)) {
            throw new \InvalidArgumentException('non-nullable ev2fcfhigh cannot be null');
        }
        $this->container['ev2fcfhigh'] = $ev2fcfhigh;

        return $this;
    }

    /**
     * Gets ev2fcflow
     *
     * @return float|null
     */
    public function getEv2fcflow()
    {
        return $this->container['ev2fcflow'];
    }

    /**
     * Sets ev2fcflow
     *
     * @param float|null $ev2fcflow ev2fcflow
     *
     * @return self
     */
    public function setEv2fcflow($ev2fcflow)
    {
        if (is_null($ev2fcflow)) {
            throw new \InvalidArgumentException('non-nullable ev2fcflow cannot be null');
        }
        $this->container['ev2fcflow'] = $ev2fcflow;

        return $this;
    }

    /**
     * Gets ev2fcfmed
     *
     * @return float|null
     */
    public function getEv2fcfmed()
    {
        return $this->container['ev2fcfmed'];
    }

    /**
     * Sets ev2fcfmed
     *
     * @param float|null $ev2fcfmed ev2fcfmed
     *
     * @return self
     */
    public function setEv2fcfmed($ev2fcfmed)
    {
        if (is_null($ev2fcfmed)) {
            throw new \InvalidArgumentException('non-nullable ev2fcfmed cannot be null');
        }
        $this->container['ev2fcfmed'] = $ev2fcfmed;

        return $this;
    }

    /**
     * Gets ev2pretaxincome
     *
     * @return float|null
     */
    public function getEv2pretaxincome()
    {
        return $this->container['ev2pretaxincome'];
    }

    /**
     * Sets ev2pretaxincome
     *
     * @param float|null $ev2pretaxincome The ratio of enterprise value to pretax income
     *
     * @return self
     */
    public function setEv2pretaxincome($ev2pretaxincome)
    {
        if (is_null($ev2pretaxincome)) {
            throw new \InvalidArgumentException('non-nullable ev2pretaxincome cannot be null');
        }
        $this->container['ev2pretaxincome'] = $ev2pretaxincome;

        return $this;
    }

    /**
     * Gets ev2rev
     *
     * @return float|null
     */
    public function getEv2rev()
    {
        return $this->container['ev2rev'];
    }

    /**
     * Sets ev2rev
     *
     * @param float|null $ev2rev EV-to-Revenue is calculated as enterprise value divided by its revenue.
     *
     * @return self
     */
    public function setEv2rev($ev2rev)
    {
        if (is_null($ev2rev)) {
            throw new \InvalidArgumentException('non-nullable ev2rev cannot be null');
        }
        $this->container['ev2rev'] = $ev2rev;

        return $this;
    }

    /**
     * Gets ev2revhigh
     *
     * @return float|null
     */
    public function getEv2revhigh()
    {
        return $this->container['ev2revhigh'];
    }

    /**
     * Sets ev2revhigh
     *
     * @param float|null $ev2revhigh EV-to-Revenue is calculated as enterprise value divided by its revenue.
     *
     * @return self
     */
    public function setEv2revhigh($ev2revhigh)
    {
        if (is_null($ev2revhigh)) {
            throw new \InvalidArgumentException('non-nullable ev2revhigh cannot be null');
        }
        $this->container['ev2revhigh'] = $ev2revhigh;

        return $this;
    }

    /**
     * Gets ev2revlow
     *
     * @return float|null
     */
    public function getEv2revlow()
    {
        return $this->container['ev2revlow'];
    }

    /**
     * Sets ev2revlow
     *
     * @param float|null $ev2revlow EV-to-Revenue is calculated as enterprise value divided by its revenue.
     *
     * @return self
     */
    public function setEv2revlow($ev2revlow)
    {
        if (is_null($ev2revlow)) {
            throw new \InvalidArgumentException('non-nullable ev2revlow cannot be null');
        }
        $this->container['ev2revlow'] = $ev2revlow;

        return $this;
    }

    /**
     * Gets ev2revmed
     *
     * @return float|null
     */
    public function getEv2revmed()
    {
        return $this->container['ev2revmed'];
    }

    /**
     * Sets ev2revmed
     *
     * @param float|null $ev2revmed EV-to-Revenue is calculated as enterprise value divided by its revenue.
     *
     * @return self
     */
    public function setEv2revmed($ev2revmed)
    {
        if (is_null($ev2revmed)) {
            throw new \InvalidArgumentException('non-nullable ev2revmed cannot be null');
        }
        $this->container['ev2revmed'] = $ev2revmed;

        return $this;
    }

    /**
     * Gets ev_to_forward_ebit
     *
     * @return float|null
     */
    public function getEvToForwardEbit()
    {
        return $this->container['ev_to_forward_ebit'];
    }

    /**
     * Sets ev_to_forward_ebit
     *
     * @param float|null $ev_to_forward_ebit ev_to_forward_ebit
     *
     * @return self
     */
    public function setEvToForwardEbit($ev_to_forward_ebit)
    {
        if (is_null($ev_to_forward_ebit)) {
            throw new \InvalidArgumentException('non-nullable ev_to_forward_ebit cannot be null');
        }
        $this->container['ev_to_forward_ebit'] = $ev_to_forward_ebit;

        return $this;
    }

    /**
     * Gets ev_to_forward_ebitda
     *
     * @return float|null
     */
    public function getEvToForwardEbitda()
    {
        return $this->container['ev_to_forward_ebitda'];
    }

    /**
     * Sets ev_to_forward_ebitda
     *
     * @param float|null $ev_to_forward_ebitda ev_to_forward_ebitda
     *
     * @return self
     */
    public function setEvToForwardEbitda($ev_to_forward_ebitda)
    {
        if (is_null($ev_to_forward_ebitda)) {
            throw new \InvalidArgumentException('non-nullable ev_to_forward_ebitda cannot be null');
        }
        $this->container['ev_to_forward_ebitda'] = $ev_to_forward_ebitda;

        return $this;
    }

    /**
     * Gets ev_to_forward_revenue
     *
     * @return float|null
     */
    public function getEvToForwardRevenue()
    {
        return $this->container['ev_to_forward_revenue'];
    }

    /**
     * Sets ev_to_forward_revenue
     *
     * @param float|null $ev_to_forward_revenue ev_to_forward_revenue
     *
     * @return self
     */
    public function setEvToForwardRevenue($ev_to_forward_revenue)
    {
        if (is_null($ev_to_forward_revenue)) {
            throw new \InvalidArgumentException('non-nullable ev_to_forward_revenue cannot be null');
        }
        $this->container['ev_to_forward_revenue'] = $ev_to_forward_revenue;

        return $this;
    }

    /**
     * Gets forward_pe
     *
     * @return float|null
     */
    public function getForwardPe()
    {
        return $this->container['forward_pe'];
    }

    /**
     * Sets forward_pe
     *
     * @param float|null $forward_pe Forward PE is calculated by as current stock price over the predicted next annual earnings period.
     *
     * @return self
     */
    public function setForwardPe($forward_pe)
    {
        if (is_null($forward_pe)) {
            throw new \InvalidArgumentException('non-nullable forward_pe cannot be null');
        }
        $this->container['forward_pe'] = $forward_pe;

        return $this;
    }

    /**
     * Gets forward_fcf_yield
     *
     * @return float|null
     */
    public function getForwardFcfYield()
    {
        return $this->container['forward_fcf_yield'];
    }

    /**
     * Sets forward_fcf_yield
     *
     * @param float|null $forward_fcf_yield Forward FCF Yield % is calculated as estimated free cash flow divided by current market capitalization.
     *
     * @return self
     */
    public function setForwardFcfYield($forward_fcf_yield)
    {
        if (is_null($forward_fcf_yield)) {
            throw new \InvalidArgumentException('non-nullable forward_fcf_yield cannot be null');
        }
        $this->container['forward_fcf_yield'] = $forward_fcf_yield;

        return $this;
    }

    /**
     * Gets forward_peg_ratio
     *
     * @return float|null
     */
    public function getForwardPegRatio()
    {
        return $this->container['forward_peg_ratio'];
    }

    /**
     * Sets forward_peg_ratio
     *
     * @param float|null $forward_peg_ratio Forward PEG Ratio is calculated as current PE Ratio without NRI divided by the Future 3-5Y EPS without NRI Growth Rate.
     *
     * @return self
     */
    public function setForwardPegRatio($forward_peg_ratio)
    {
        if (is_null($forward_peg_ratio)) {
            throw new \InvalidArgumentException('non-nullable forward_peg_ratio cannot be null');
        }
        $this->container['forward_peg_ratio'] = $forward_peg_ratio;

        return $this;
    }

    /**
     * Gets grahamnumber
     *
     * @return float|null
     */
    public function getGrahamnumber()
    {
        return $this->container['grahamnumber'];
    }

    /**
     * Sets grahamnumber
     *
     * @param float|null $grahamnumber Graham Number is a concept based on Ben Graham\\'s conservative valuation of companies. Graham Number is calculated as follows:    Graham Number = SquareRoot of (22.5 * {Tangible Book Value per Share} * {Earnings per Share})    = SquareRoot of (22.5 * {Net Income} * {Total Equity}) / {Total Shares Outstanding}
     *
     * @return self
     */
    public function setGrahamnumber($grahamnumber)
    {
        if (is_null($grahamnumber)) {
            throw new \InvalidArgumentException('non-nullable grahamnumber cannot be null');
        }
        $this->container['grahamnumber'] = $grahamnumber;

        return $this;
    }

    /**
     * Gets iv_dc_earning
     *
     * @return float|null
     */
    public function getIvDcEarning()
    {
        return $this->container['iv_dc_earning'];
    }

    /**
     * Sets iv_dc_earning
     *
     * @param float|null $iv_dc_earning The intrinsic value of a company based on the discounted earnings model.
     *
     * @return self
     */
    public function setIvDcEarning($iv_dc_earning)
    {
        if (is_null($iv_dc_earning)) {
            throw new \InvalidArgumentException('non-nullable iv_dc_earning cannot be null');
        }
        $this->container['iv_dc_earning'] = $iv_dc_earning;

        return $this;
    }

    /**
     * Gets iv_dcf
     *
     * @return float|null
     */
    public function getIvDcf()
    {
        return $this->container['iv_dcf'];
    }

    /**
     * Sets iv_dcf
     *
     * @param float|null $iv_dcf The intrinsic value of a company based on the discounted free cash flow model
     *
     * @return self
     */
    public function setIvDcf($iv_dcf)
    {
        if (is_null($iv_dcf)) {
            throw new \InvalidArgumentException('non-nullable iv_dcf cannot be null');
        }
        $this->container['iv_dcf'] = $iv_dcf;

        return $this;
    }

    /**
     * Gets iv_dcf_dividend
     *
     * @return float|null
     */
    public function getIvDcfDividend()
    {
        return $this->container['iv_dcf_dividend'];
    }

    /**
     * Sets iv_dcf_dividend
     *
     * @param float|null $iv_dcf_dividend iv_dcf_dividend
     *
     * @return self
     */
    public function setIvDcfDividend($iv_dcf_dividend)
    {
        if (is_null($iv_dcf_dividend)) {
            throw new \InvalidArgumentException('non-nullable iv_dcf_dividend cannot be null');
        }
        $this->container['iv_dcf_dividend'] = $iv_dcf_dividend;

        return $this;
    }

    /**
     * Gets iv_dcf_share
     *
     * @return float|null
     */
    public function getIvDcfShare()
    {
        return $this->container['iv_dcf_share'];
    }

    /**
     * Sets iv_dcf_share
     *
     * @param float|null $iv_dcf_share The Discounted Free Cash Flow Screener focuses on Free Cash Flow (FCF) and Total Equity. These measures can be used to determine an intrinsic value estimate for a company.
     *
     * @return self
     */
    public function setIvDcfShare($iv_dcf_share)
    {
        if (is_null($iv_dcf_share)) {
            throw new \InvalidArgumentException('non-nullable iv_dcf_share cannot be null');
        }
        $this->container['iv_dcf_share'] = $iv_dcf_share;

        return $this;
    }

    /**
     * Gets lynchvalue
     *
     * @return float|null
     */
    public function getLynchvalue()
    {
        return $this->container['lynchvalue'];
    }

    /**
     * Sets lynchvalue
     *
     * @param float|null $lynchvalue Peter Lynch Fair Value applies to growing companies. The ideal range for the growth rate is between 10 - 20% a year.
     *
     * @return self
     */
    public function setLynchvalue($lynchvalue)
    {
        if (is_null($lynchvalue)) {
            throw new \InvalidArgumentException('non-nullable lynchvalue cannot be null');
        }
        $this->container['lynchvalue'] = $lynchvalue;

        return $this;
    }

    /**
     * Gets margin_dc_earning
     *
     * @return float|null
     */
    public function getMarginDcEarning()
    {
        return $this->container['margin_dc_earning'];
    }

    /**
     * Sets margin_dc_earning
     *
     * @param float|null $margin_dc_earning The difference between current price and intrinsic value based on discounted cash flow model using the company's TTM earnings.
     *
     * @return self
     */
    public function setMarginDcEarning($margin_dc_earning)
    {
        if (is_null($margin_dc_earning)) {
            throw new \InvalidArgumentException('non-nullable margin_dc_earning cannot be null');
        }
        $this->container['margin_dc_earning'] = $margin_dc_earning;

        return $this;
    }

    /**
     * Gets margin_dcf
     *
     * @return float|null
     */
    public function getMarginDcf()
    {
        return $this->container['margin_dcf'];
    }

    /**
     * Sets margin_dcf
     *
     * @param float|null $margin_dcf The difference between current price and intrinsic value based on discounted cash flow model using the company's TTM Free Cash Flow.
     *
     * @return self
     */
    public function setMarginDcf($margin_dcf)
    {
        if (is_null($margin_dcf)) {
            throw new \InvalidArgumentException('non-nullable margin_dcf cannot be null');
        }
        $this->container['margin_dcf'] = $margin_dcf;

        return $this;
    }

    /**
     * Gets margin_dcf_dividend
     *
     * @return float|null
     */
    public function getMarginDcfDividend()
    {
        return $this->container['margin_dcf_dividend'];
    }

    /**
     * Sets margin_dcf_dividend
     *
     * @param float|null $margin_dcf_dividend The difference between current price and intrinsic value based on discounted dividend model using the company's TTM dividends.
     *
     * @return self
     */
    public function setMarginDcfDividend($margin_dcf_dividend)
    {
        if (is_null($margin_dcf_dividend)) {
            throw new \InvalidArgumentException('non-nullable margin_dcf_dividend cannot be null');
        }
        $this->container['margin_dcf_dividend'] = $margin_dcf_dividend;

        return $this;
    }

    /**
     * Gets medpbvalue
     *
     * @return float|null
     */
    public function getMedpbvalue()
    {
        return $this->container['medpbvalue'];
    }

    /**
     * Sets medpbvalue
     *
     * @param float|null $medpbvalue Median price-book value: the book value per share multiplied by 10-year median price-book ratio
     *
     * @return self
     */
    public function setMedpbvalue($medpbvalue)
    {
        if (is_null($medpbvalue)) {
            throw new \InvalidArgumentException('non-nullable medpbvalue cannot be null');
        }
        $this->container['medpbvalue'] = $medpbvalue;

        return $this;
    }

    /**
     * Gets medpsvalue
     *
     * @return float|null
     */
    public function getMedpsvalue()
    {
        return $this->container['medpsvalue'];
    }

    /**
     * Sets medpsvalue
     *
     * @param float|null $medpsvalue This valuation method assumes that the stock valuation will revert to its historical mean in terms of Price/Sales Ratio.
     *
     * @return self
     */
    public function setMedpsvalue($medpsvalue)
    {
        if (is_null($medpsvalue)) {
            throw new \InvalidArgumentException('non-nullable medpsvalue cannot be null');
        }
        $this->container['medpsvalue'] = $medpsvalue;

        return $this;
    }

    /**
     * Gets ncav
     *
     * @return float|null
     */
    public function getNcav()
    {
        return $this->container['ncav'];
    }

    /**
     * Sets ncav
     *
     * @param float|null $ncav A net-net is a company with a market capitalization that is less than the company's current assets minus total liabilities, or equivalently, the company's working capital minus long-term liabilities. This value is called the net current asset value.
     *
     * @return self
     */
    public function setNcav($ncav)
    {
        if (is_null($ncav)) {
            throw new \InvalidArgumentException('non-nullable ncav cannot be null');
        }
        $this->container['ncav'] = $ncav;

        return $this;
    }

    /**
     * Gets ncav_real
     *
     * @return float|null
     */
    public function getNcavReal()
    {
        return $this->container['ncav_real'];
    }

    /**
     * Sets ncav_real
     *
     * @param float|null $ncav_real In calculating the Net Current Asset Value (NCAV), Benjamin Graham means a company's current assets (such as cash, marketable securities, and inventories) minus its total liabilities (including preferred stock, minority interest, and long-term debt).
     *
     * @return self
     */
    public function setNcavReal($ncav_real)
    {
        if (is_null($ncav_real)) {
            throw new \InvalidArgumentException('non-nullable ncav_real cannot be null');
        }
        $this->container['ncav_real'] = $ncav_real;

        return $this;
    }

    /**
     * Gets net_cash
     *
     * @return float|null
     */
    public function getNetCash()
    {
        return $this->container['net_cash'];
    }

    /**
     * Sets net_cash
     *
     * @param float|null $net_cash Equals cash and cash equivalents less total liabilities less minority interest
     *
     * @return self
     */
    public function setNetCash($net_cash)
    {
        if (is_null($net_cash)) {
            throw new \InvalidArgumentException('non-nullable net_cash cannot be null');
        }
        $this->container['net_cash'] = $net_cash;

        return $this;
    }

    /**
     * Gets p2_epv
     *
     * @return float|null
     */
    public function getP2Epv()
    {
        return $this->container['p2_epv'];
    }

    /**
     * Sets p2_epv
     *
     * @param float|null $p2_epv The ratio of a company's stock price to its earnings power value
     *
     * @return self
     */
    public function setP2Epv($p2_epv)
    {
        if (is_null($p2_epv)) {
            throw new \InvalidArgumentException('non-nullable p2_epv cannot be null');
        }
        $this->container['p2_epv'] = $p2_epv;

        return $this;
    }

    /**
     * Gets p2_owner_earnings
     *
     * @return float|null
     */
    public function getP2OwnerEarnings()
    {
        return $this->container['p2_owner_earnings'];
    }

    /**
     * Sets p2_owner_earnings
     *
     * @param float|null $p2_owner_earnings In 1986 Berkshire Hathaway Shareholder Letter, Warren Buffett defined owner earnings as follows:  \"These represent (a) reported earnings plus (b) depreciation, depletion, amortization, and certain other non-cash charges...less (c) the average annual amount of capitalized expenditures for plant and equipment, etc. that the business requires to fully maintain its long-term competitive position and its unit volume. (If the business requires additional working capital to maintain its competitive position and unit volume, the increment also should be included in (c))...Our owner-earnings equation does not yield the deceptively precise figures provided by GAAP, since (c) must be a guess - and one sometimes very difficult to make. Despite this problem, we consider the owner earnings figure, not the GAAP figure, to be the relevant item for valuation purposes - both for investors in buying stocks and for managers in buying entire businesses...All of this points up the absurdity of the 'cash flow' numbers that are often set forth in Wall Street reports. These numbers routinely include (a) plus (b) - but do not subtract (c).\"
     *
     * @return self
     */
    public function setP2OwnerEarnings($p2_owner_earnings)
    {
        if (is_null($p2_owner_earnings)) {
            throw new \InvalidArgumentException('non-nullable p2_owner_earnings cannot be null');
        }
        $this->container['p2_owner_earnings'] = $p2_owner_earnings;

        return $this;
    }

    /**
     * Gets p2_owner_earnings_high
     *
     * @return float|null
     */
    public function getP2OwnerEarningsHigh()
    {
        return $this->container['p2_owner_earnings_high'];
    }

    /**
     * Sets p2_owner_earnings_high
     *
     * @param float|null $p2_owner_earnings_high The highest price-to-owner-earnings ratio over the past 10 years
     *
     * @return self
     */
    public function setP2OwnerEarningsHigh($p2_owner_earnings_high)
    {
        if (is_null($p2_owner_earnings_high)) {
            throw new \InvalidArgumentException('non-nullable p2_owner_earnings_high cannot be null');
        }
        $this->container['p2_owner_earnings_high'] = $p2_owner_earnings_high;

        return $this;
    }

    /**
     * Gets p2_owner_earnings_low
     *
     * @return float|null
     */
    public function getP2OwnerEarningsLow()
    {
        return $this->container['p2_owner_earnings_low'];
    }

    /**
     * Sets p2_owner_earnings_low
     *
     * @param float|null $p2_owner_earnings_low The lowest price-to-owner-earnings ratio over the past 10 years
     *
     * @return self
     */
    public function setP2OwnerEarningsLow($p2_owner_earnings_low)
    {
        if (is_null($p2_owner_earnings_low)) {
            throw new \InvalidArgumentException('non-nullable p2_owner_earnings_low cannot be null');
        }
        $this->container['p2_owner_earnings_low'] = $p2_owner_earnings_low;

        return $this;
    }

    /**
     * Gets p2_owner_earnings_med
     *
     * @return float|null
     */
    public function getP2OwnerEarningsMed()
    {
        return $this->container['p2_owner_earnings_med'];
    }

    /**
     * Sets p2_owner_earnings_med
     *
     * @param float|null $p2_owner_earnings_med The median price-to-owner-earnings ratio over the past 10 years
     *
     * @return self
     */
    public function setP2OwnerEarningsMed($p2_owner_earnings_med)
    {
        if (is_null($p2_owner_earnings_med)) {
            throw new \InvalidArgumentException('non-nullable p2_owner_earnings_med cannot be null');
        }
        $this->container['p2_owner_earnings_med'] = $p2_owner_earnings_med;

        return $this;
    }

    /**
     * Gets p2ffo
     *
     * @return float|null
     */
    public function getP2ffo()
    {
        return $this->container['p2ffo'];
    }

    /**
     * Sets p2ffo
     *
     * @param float|null $p2ffo Price to Funds From Operations is an equity valuation metric used to compare a company's per-share market price to its per-share amount of Funds From Operations (FFO).
     *
     * @return self
     */
    public function setP2ffo($p2ffo)
    {
        if (is_null($p2ffo)) {
            throw new \InvalidArgumentException('non-nullable p2ffo cannot be null');
        }
        $this->container['p2ffo'] = $p2ffo;

        return $this;
    }

    /**
     * Gets p2grahamnumber
     *
     * @return float|null
     */
    public function getP2grahamnumber()
    {
        return $this->container['p2grahamnumber'];
    }

    /**
     * Sets p2grahamnumber
     *
     * @param float|null $p2grahamnumber The Graham number is the upper bound of the price range that a defensive investor should pay for the stock.
     *
     * @return self
     */
    public function setP2grahamnumber($p2grahamnumber)
    {
        if (is_null($p2grahamnumber)) {
            throw new \InvalidArgumentException('non-nullable p2grahamnumber cannot be null');
        }
        $this->container['p2grahamnumber'] = $p2grahamnumber;

        return $this;
    }

    /**
     * Gets p2grahamnumber_high
     *
     * @return float|null
     */
    public function getP2grahamnumberHigh()
    {
        return $this->container['p2grahamnumber_high'];
    }

    /**
     * Sets p2grahamnumber_high
     *
     * @param float|null $p2grahamnumber_high The Graham number is the upper bound of the price range that a defensive investor should pay for the stock.
     *
     * @return self
     */
    public function setP2grahamnumberHigh($p2grahamnumber_high)
    {
        if (is_null($p2grahamnumber_high)) {
            throw new \InvalidArgumentException('non-nullable p2grahamnumber_high cannot be null');
        }
        $this->container['p2grahamnumber_high'] = $p2grahamnumber_high;

        return $this;
    }

    /**
     * Gets p2grahamnumber_low
     *
     * @return float|null
     */
    public function getP2grahamnumberLow()
    {
        return $this->container['p2grahamnumber_low'];
    }

    /**
     * Sets p2grahamnumber_low
     *
     * @param float|null $p2grahamnumber_low The Graham number is the upper bound of the price range that a defensive investor should pay for the stock.
     *
     * @return self
     */
    public function setP2grahamnumberLow($p2grahamnumber_low)
    {
        if (is_null($p2grahamnumber_low)) {
            throw new \InvalidArgumentException('non-nullable p2grahamnumber_low cannot be null');
        }
        $this->container['p2grahamnumber_low'] = $p2grahamnumber_low;

        return $this;
    }

    /**
     * Gets p2grahamnumber_med
     *
     * @return float|null
     */
    public function getP2grahamnumberMed()
    {
        return $this->container['p2grahamnumber_med'];
    }

    /**
     * Sets p2grahamnumber_med
     *
     * @param float|null $p2grahamnumber_med The Graham number is the upper bound of the price range that a defensive investor should pay for the stock.
     *
     * @return self
     */
    public function setP2grahamnumberMed($p2grahamnumber_med)
    {
        if (is_null($p2grahamnumber_med)) {
            throw new \InvalidArgumentException('non-nullable p2grahamnumber_med cannot be null');
        }
        $this->container['p2grahamnumber_med'] = $p2grahamnumber_med;

        return $this;
    }

    /**
     * Gets p2iv_dc_earning
     *
     * @return float|null
     */
    public function getP2ivDcEarning()
    {
        return $this->container['p2iv_dc_earning'];
    }

    /**
     * Sets p2iv_dc_earning
     *
     * @param float|null $p2iv_dc_earning Discounted cash flow (DCF) is a valuation method used to estimate the value of an investment based on its future cash flows.
     *
     * @return self
     */
    public function setP2ivDcEarning($p2iv_dc_earning)
    {
        if (is_null($p2iv_dc_earning)) {
            throw new \InvalidArgumentException('non-nullable p2iv_dc_earning cannot be null');
        }
        $this->container['p2iv_dc_earning'] = $p2iv_dc_earning;

        return $this;
    }

    /**
     * Gets p2iv_dc_earning_high
     *
     * @return float|null
     */
    public function getP2ivDcEarningHigh()
    {
        return $this->container['p2iv_dc_earning_high'];
    }

    /**
     * Sets p2iv_dc_earning_high
     *
     * @param float|null $p2iv_dc_earning_high Discounted cash flow (DCF) is a valuation method used to estimate the value of an investment based on its future cash flows.
     *
     * @return self
     */
    public function setP2ivDcEarningHigh($p2iv_dc_earning_high)
    {
        if (is_null($p2iv_dc_earning_high)) {
            throw new \InvalidArgumentException('non-nullable p2iv_dc_earning_high cannot be null');
        }
        $this->container['p2iv_dc_earning_high'] = $p2iv_dc_earning_high;

        return $this;
    }

    /**
     * Gets p2iv_dc_earning_low
     *
     * @return float|null
     */
    public function getP2ivDcEarningLow()
    {
        return $this->container['p2iv_dc_earning_low'];
    }

    /**
     * Sets p2iv_dc_earning_low
     *
     * @param float|null $p2iv_dc_earning_low Discounted cash flow (DCF) is a valuation method used to estimate the value of an investment based on its future cash flows.
     *
     * @return self
     */
    public function setP2ivDcEarningLow($p2iv_dc_earning_low)
    {
        if (is_null($p2iv_dc_earning_low)) {
            throw new \InvalidArgumentException('non-nullable p2iv_dc_earning_low cannot be null');
        }
        $this->container['p2iv_dc_earning_low'] = $p2iv_dc_earning_low;

        return $this;
    }

    /**
     * Gets p2iv_dc_earning_med
     *
     * @return float|null
     */
    public function getP2ivDcEarningMed()
    {
        return $this->container['p2iv_dc_earning_med'];
    }

    /**
     * Sets p2iv_dc_earning_med
     *
     * @param float|null $p2iv_dc_earning_med Discounted cash flow (DCF) is a valuation method used to estimate the value of an investment based on its future cash flows.
     *
     * @return self
     */
    public function setP2ivDcEarningMed($p2iv_dc_earning_med)
    {
        if (is_null($p2iv_dc_earning_med)) {
            throw new \InvalidArgumentException('non-nullable p2iv_dc_earning_med cannot be null');
        }
        $this->container['p2iv_dc_earning_med'] = $p2iv_dc_earning_med;

        return $this;
    }

    /**
     * Gets p2iv_dcf
     *
     * @return float|null
     */
    public function getP2ivDcf()
    {
        return $this->container['p2iv_dcf'];
    }

    /**
     * Sets p2iv_dcf
     *
     * @param float|null $p2iv_dcf Discounted cash flow (DCF) is a valuation method used to estimate the value of an investment based on its future cash flows.
     *
     * @return self
     */
    public function setP2ivDcf($p2iv_dcf)
    {
        if (is_null($p2iv_dcf)) {
            throw new \InvalidArgumentException('non-nullable p2iv_dcf cannot be null');
        }
        $this->container['p2iv_dcf'] = $p2iv_dcf;

        return $this;
    }

    /**
     * Gets p2iv_dcf_dividend
     *
     * @return float|null
     */
    public function getP2ivDcfDividend()
    {
        return $this->container['p2iv_dcf_dividend'];
    }

    /**
     * Sets p2iv_dcf_dividend
     *
     * @param float|null $p2iv_dcf_dividend p2iv_dcf_dividend
     *
     * @return self
     */
    public function setP2ivDcfDividend($p2iv_dcf_dividend)
    {
        if (is_null($p2iv_dcf_dividend)) {
            throw new \InvalidArgumentException('non-nullable p2iv_dcf_dividend cannot be null');
        }
        $this->container['p2iv_dcf_dividend'] = $p2iv_dcf_dividend;

        return $this;
    }

    /**
     * Gets p2iv_dcf_dividend_high
     *
     * @return float|null
     */
    public function getP2ivDcfDividendHigh()
    {
        return $this->container['p2iv_dcf_dividend_high'];
    }

    /**
     * Sets p2iv_dcf_dividend_high
     *
     * @param float|null $p2iv_dcf_dividend_high p2iv_dcf_dividend_high
     *
     * @return self
     */
    public function setP2ivDcfDividendHigh($p2iv_dcf_dividend_high)
    {
        if (is_null($p2iv_dcf_dividend_high)) {
            throw new \InvalidArgumentException('non-nullable p2iv_dcf_dividend_high cannot be null');
        }
        $this->container['p2iv_dcf_dividend_high'] = $p2iv_dcf_dividend_high;

        return $this;
    }

    /**
     * Gets p2iv_dcf_dividend_low
     *
     * @return float|null
     */
    public function getP2ivDcfDividendLow()
    {
        return $this->container['p2iv_dcf_dividend_low'];
    }

    /**
     * Sets p2iv_dcf_dividend_low
     *
     * @param float|null $p2iv_dcf_dividend_low p2iv_dcf_dividend_low
     *
     * @return self
     */
    public function setP2ivDcfDividendLow($p2iv_dcf_dividend_low)
    {
        if (is_null($p2iv_dcf_dividend_low)) {
            throw new \InvalidArgumentException('non-nullable p2iv_dcf_dividend_low cannot be null');
        }
        $this->container['p2iv_dcf_dividend_low'] = $p2iv_dcf_dividend_low;

        return $this;
    }

    /**
     * Gets p2iv_dcf_dividend_med
     *
     * @return float|null
     */
    public function getP2ivDcfDividendMed()
    {
        return $this->container['p2iv_dcf_dividend_med'];
    }

    /**
     * Sets p2iv_dcf_dividend_med
     *
     * @param float|null $p2iv_dcf_dividend_med p2iv_dcf_dividend_med
     *
     * @return self
     */
    public function setP2ivDcfDividendMed($p2iv_dcf_dividend_med)
    {
        if (is_null($p2iv_dcf_dividend_med)) {
            throw new \InvalidArgumentException('non-nullable p2iv_dcf_dividend_med cannot be null');
        }
        $this->container['p2iv_dcf_dividend_med'] = $p2iv_dcf_dividend_med;

        return $this;
    }

    /**
     * Gets p2iv_dcf_high
     *
     * @return float|null
     */
    public function getP2ivDcfHigh()
    {
        return $this->container['p2iv_dcf_high'];
    }

    /**
     * Sets p2iv_dcf_high
     *
     * @param float|null $p2iv_dcf_high The highest price-to-discounted-free-cash-flow ratio over the past 10 years
     *
     * @return self
     */
    public function setP2ivDcfHigh($p2iv_dcf_high)
    {
        if (is_null($p2iv_dcf_high)) {
            throw new \InvalidArgumentException('non-nullable p2iv_dcf_high cannot be null');
        }
        $this->container['p2iv_dcf_high'] = $p2iv_dcf_high;

        return $this;
    }

    /**
     * Gets p2iv_dcf_low
     *
     * @return float|null
     */
    public function getP2ivDcfLow()
    {
        return $this->container['p2iv_dcf_low'];
    }

    /**
     * Sets p2iv_dcf_low
     *
     * @param float|null $p2iv_dcf_low The lowest price-to-discounted-free-cash-flow ratio over the past 10 years
     *
     * @return self
     */
    public function setP2ivDcfLow($p2iv_dcf_low)
    {
        if (is_null($p2iv_dcf_low)) {
            throw new \InvalidArgumentException('non-nullable p2iv_dcf_low cannot be null');
        }
        $this->container['p2iv_dcf_low'] = $p2iv_dcf_low;

        return $this;
    }

    /**
     * Gets p2iv_dcf_med
     *
     * @return float|null
     */
    public function getP2ivDcfMed()
    {
        return $this->container['p2iv_dcf_med'];
    }

    /**
     * Sets p2iv_dcf_med
     *
     * @param float|null $p2iv_dcf_med The median price-to-discounted-free-cash-flow ratio over the past 10 years
     *
     * @return self
     */
    public function setP2ivDcfMed($p2iv_dcf_med)
    {
        if (is_null($p2iv_dcf_med)) {
            throw new \InvalidArgumentException('non-nullable p2iv_dcf_med cannot be null');
        }
        $this->container['p2iv_dcf_med'] = $p2iv_dcf_med;

        return $this;
    }

    /**
     * Gets p2iv_dcf_share
     *
     * @return float|null
     */
    public function getP2ivDcfShare()
    {
        return $this->container['p2iv_dcf_share'];
    }

    /**
     * Sets p2iv_dcf_share
     *
     * @param float|null $p2iv_dcf_share p2iv_dcf_share
     *
     * @return self
     */
    public function setP2ivDcfShare($p2iv_dcf_share)
    {
        if (is_null($p2iv_dcf_share)) {
            throw new \InvalidArgumentException('non-nullable p2iv_dcf_share cannot be null');
        }
        $this->container['p2iv_dcf_share'] = $p2iv_dcf_share;

        return $this;
    }

    /**
     * Gets p2iv_dcf_share_high
     *
     * @return float|null
     */
    public function getP2ivDcfShareHigh()
    {
        return $this->container['p2iv_dcf_share_high'];
    }

    /**
     * Sets p2iv_dcf_share_high
     *
     * @param float|null $p2iv_dcf_share_high The highest price to intrinsic value based on projected free cash flow over the past 10 years
     *
     * @return self
     */
    public function setP2ivDcfShareHigh($p2iv_dcf_share_high)
    {
        if (is_null($p2iv_dcf_share_high)) {
            throw new \InvalidArgumentException('non-nullable p2iv_dcf_share_high cannot be null');
        }
        $this->container['p2iv_dcf_share_high'] = $p2iv_dcf_share_high;

        return $this;
    }

    /**
     * Gets p2iv_dcf_share_low
     *
     * @return float|null
     */
    public function getP2ivDcfShareLow()
    {
        return $this->container['p2iv_dcf_share_low'];
    }

    /**
     * Sets p2iv_dcf_share_low
     *
     * @param float|null $p2iv_dcf_share_low The lowest price to intrinsic value based on projected free cash flow over the past 10 years
     *
     * @return self
     */
    public function setP2ivDcfShareLow($p2iv_dcf_share_low)
    {
        if (is_null($p2iv_dcf_share_low)) {
            throw new \InvalidArgumentException('non-nullable p2iv_dcf_share_low cannot be null');
        }
        $this->container['p2iv_dcf_share_low'] = $p2iv_dcf_share_low;

        return $this;
    }

    /**
     * Gets p2iv_dcf_share_med
     *
     * @return float|null
     */
    public function getP2ivDcfShareMed()
    {
        return $this->container['p2iv_dcf_share_med'];
    }

    /**
     * Sets p2iv_dcf_share_med
     *
     * @param float|null $p2iv_dcf_share_med The median price to intrinsic value based on projected free cash flow over the past 10 years
     *
     * @return self
     */
    public function setP2ivDcfShareMed($p2iv_dcf_share_med)
    {
        if (is_null($p2iv_dcf_share_med)) {
            throw new \InvalidArgumentException('non-nullable p2iv_dcf_share_med cannot be null');
        }
        $this->container['p2iv_dcf_share_med'] = $p2iv_dcf_share_med;

        return $this;
    }

    /**
     * Gets p2lynchvalue
     *
     * @return float|null
     */
    public function getP2lynchvalue()
    {
        return $this->container['p2lynchvalue'];
    }

    /**
     * Sets p2lynchvalue
     *
     * @param float|null $p2lynchvalue p2lynchvalue
     *
     * @return self
     */
    public function setP2lynchvalue($p2lynchvalue)
    {
        if (is_null($p2lynchvalue)) {
            throw new \InvalidArgumentException('non-nullable p2lynchvalue cannot be null');
        }
        $this->container['p2lynchvalue'] = $p2lynchvalue;

        return $this;
    }

    /**
     * Gets p2lynchvalue_high
     *
     * @return float|null
     */
    public function getP2lynchvalueHigh()
    {
        return $this->container['p2lynchvalue_high'];
    }

    /**
     * Sets p2lynchvalue_high
     *
     * @param float|null $p2lynchvalue_high The highest price to Peter Lynch fair value over the past 10 years
     *
     * @return self
     */
    public function setP2lynchvalueHigh($p2lynchvalue_high)
    {
        if (is_null($p2lynchvalue_high)) {
            throw new \InvalidArgumentException('non-nullable p2lynchvalue_high cannot be null');
        }
        $this->container['p2lynchvalue_high'] = $p2lynchvalue_high;

        return $this;
    }

    /**
     * Gets p2lynchvalue_low
     *
     * @return float|null
     */
    public function getP2lynchvalueLow()
    {
        return $this->container['p2lynchvalue_low'];
    }

    /**
     * Sets p2lynchvalue_low
     *
     * @param float|null $p2lynchvalue_low The lowest price to Peter Lynch fair value over the past 10 years
     *
     * @return self
     */
    public function setP2lynchvalueLow($p2lynchvalue_low)
    {
        if (is_null($p2lynchvalue_low)) {
            throw new \InvalidArgumentException('non-nullable p2lynchvalue_low cannot be null');
        }
        $this->container['p2lynchvalue_low'] = $p2lynchvalue_low;

        return $this;
    }

    /**
     * Gets p2lynchvalue_med
     *
     * @return float|null
     */
    public function getP2lynchvalueMed()
    {
        return $this->container['p2lynchvalue_med'];
    }

    /**
     * Sets p2lynchvalue_med
     *
     * @param float|null $p2lynchvalue_med The median price to Peter Lynch fair value over the past 10 years
     *
     * @return self
     */
    public function setP2lynchvalueMed($p2lynchvalue_med)
    {
        if (is_null($p2lynchvalue_med)) {
            throw new \InvalidArgumentException('non-nullable p2lynchvalue_med cannot be null');
        }
        $this->container['p2lynchvalue_med'] = $p2lynchvalue_med;

        return $this;
    }

    /**
     * Gets p2medpbvalue
     *
     * @return float|null
     */
    public function getP2medpbvalue()
    {
        return $this->container['p2medpbvalue'];
    }

    /**
     * Sets p2medpbvalue
     *
     * @param float|null $p2medpbvalue The ratio of share price to the median price-book value
     *
     * @return self
     */
    public function setP2medpbvalue($p2medpbvalue)
    {
        if (is_null($p2medpbvalue)) {
            throw new \InvalidArgumentException('non-nullable p2medpbvalue cannot be null');
        }
        $this->container['p2medpbvalue'] = $p2medpbvalue;

        return $this;
    }

    /**
     * Gets p2medpbvalue_high
     *
     * @return float|null
     */
    public function getP2medpbvalueHigh()
    {
        return $this->container['p2medpbvalue_high'];
    }

    /**
     * Sets p2medpbvalue_high
     *
     * @param float|null $p2medpbvalue_high The highest price-to-median-PB-Value over the past 10 years
     *
     * @return self
     */
    public function setP2medpbvalueHigh($p2medpbvalue_high)
    {
        if (is_null($p2medpbvalue_high)) {
            throw new \InvalidArgumentException('non-nullable p2medpbvalue_high cannot be null');
        }
        $this->container['p2medpbvalue_high'] = $p2medpbvalue_high;

        return $this;
    }

    /**
     * Gets p2medpbvalue_low
     *
     * @return float|null
     */
    public function getP2medpbvalueLow()
    {
        return $this->container['p2medpbvalue_low'];
    }

    /**
     * Sets p2medpbvalue_low
     *
     * @param float|null $p2medpbvalue_low The lowest price-to-median-PB-Value over the past 10 years
     *
     * @return self
     */
    public function setP2medpbvalueLow($p2medpbvalue_low)
    {
        if (is_null($p2medpbvalue_low)) {
            throw new \InvalidArgumentException('non-nullable p2medpbvalue_low cannot be null');
        }
        $this->container['p2medpbvalue_low'] = $p2medpbvalue_low;

        return $this;
    }

    /**
     * Gets p2medpbvalue_med
     *
     * @return float|null
     */
    public function getP2medpbvalueMed()
    {
        return $this->container['p2medpbvalue_med'];
    }

    /**
     * Sets p2medpbvalue_med
     *
     * @param float|null $p2medpbvalue_med The median price-to-median-PB-Value over the past 10 years
     *
     * @return self
     */
    public function setP2medpbvalueMed($p2medpbvalue_med)
    {
        if (is_null($p2medpbvalue_med)) {
            throw new \InvalidArgumentException('non-nullable p2medpbvalue_med cannot be null');
        }
        $this->container['p2medpbvalue_med'] = $p2medpbvalue_med;

        return $this;
    }

    /**
     * Gets p2medpsvalue
     *
     * @return float|null
     */
    public function getP2medpsvalue()
    {
        return $this->container['p2medpsvalue'];
    }

    /**
     * Sets p2medpsvalue
     *
     * @param float|null $p2medpsvalue Median P/S Value is calculated as trailing twelve months (TTM) Revenue per Share times 10-Year median P/S ratio.
     *
     * @return self
     */
    public function setP2medpsvalue($p2medpsvalue)
    {
        if (is_null($p2medpsvalue)) {
            throw new \InvalidArgumentException('non-nullable p2medpsvalue cannot be null');
        }
        $this->container['p2medpsvalue'] = $p2medpsvalue;

        return $this;
    }

    /**
     * Gets p2medpsvalue_high
     *
     * @return float|null
     */
    public function getP2medpsvalueHigh()
    {
        return $this->container['p2medpsvalue_high'];
    }

    /**
     * Sets p2medpsvalue_high
     *
     * @param float|null $p2medpsvalue_high Median P/S Value is calculated as trailing twelve months (TTM) Revenue per Share times 10-Year median P/S ratio.
     *
     * @return self
     */
    public function setP2medpsvalueHigh($p2medpsvalue_high)
    {
        if (is_null($p2medpsvalue_high)) {
            throw new \InvalidArgumentException('non-nullable p2medpsvalue_high cannot be null');
        }
        $this->container['p2medpsvalue_high'] = $p2medpsvalue_high;

        return $this;
    }

    /**
     * Gets p2medpsvalue_low
     *
     * @return float|null
     */
    public function getP2medpsvalueLow()
    {
        return $this->container['p2medpsvalue_low'];
    }

    /**
     * Sets p2medpsvalue_low
     *
     * @param float|null $p2medpsvalue_low Median P/S Value is calculated as trailing twelve months (TTM) Revenue per Share times 10-Year median P/S ratio.
     *
     * @return self
     */
    public function setP2medpsvalueLow($p2medpsvalue_low)
    {
        if (is_null($p2medpsvalue_low)) {
            throw new \InvalidArgumentException('non-nullable p2medpsvalue_low cannot be null');
        }
        $this->container['p2medpsvalue_low'] = $p2medpsvalue_low;

        return $this;
    }

    /**
     * Gets p2medpsvalue_med
     *
     * @return float|null
     */
    public function getP2medpsvalueMed()
    {
        return $this->container['p2medpsvalue_med'];
    }

    /**
     * Sets p2medpsvalue_med
     *
     * @param float|null $p2medpsvalue_med Median P/S Value is calculated as trailing twelve months (TTM) Revenue per Share times 10-Year median P/S ratio.
     *
     * @return self
     */
    public function setP2medpsvalueMed($p2medpsvalue_med)
    {
        if (is_null($p2medpsvalue_med)) {
            throw new \InvalidArgumentException('non-nullable p2medpsvalue_med cannot be null');
        }
        $this->container['p2medpsvalue_med'] = $p2medpsvalue_med;

        return $this;
    }

    /**
     * Gets p2ncav
     *
     * @return float|null
     */
    public function getP2ncav()
    {
        return $this->container['p2ncav'];
    }

    /**
     * Sets p2ncav
     *
     * @param float|null $p2ncav In calculating the Net Current Asset Value (NCAV), Benjamin Graham means a company's current assets (such as cash, marketable securities, and inventories) minus its total liabilities (including preferred stock, minority interest, and long-term debt).
     *
     * @return self
     */
    public function setP2ncav($p2ncav)
    {
        if (is_null($p2ncav)) {
            throw new \InvalidArgumentException('non-nullable p2ncav cannot be null');
        }
        $this->container['p2ncav'] = $p2ncav;

        return $this;
    }

    /**
     * Gets p2ncav_high
     *
     * @return float|null
     */
    public function getP2ncavHigh()
    {
        return $this->container['p2ncav_high'];
    }

    /**
     * Sets p2ncav_high
     *
     * @param float|null $p2ncav_high In calculating the Net Current Asset Value (NCAV), Benjamin Graham means a company's current assets (such as cash, marketable securities, and inventories) minus its total liabilities (including preferred stock, minority interest, and long-term debt).
     *
     * @return self
     */
    public function setP2ncavHigh($p2ncav_high)
    {
        if (is_null($p2ncav_high)) {
            throw new \InvalidArgumentException('non-nullable p2ncav_high cannot be null');
        }
        $this->container['p2ncav_high'] = $p2ncav_high;

        return $this;
    }

    /**
     * Gets p2ncav_low
     *
     * @return float|null
     */
    public function getP2ncavLow()
    {
        return $this->container['p2ncav_low'];
    }

    /**
     * Sets p2ncav_low
     *
     * @param float|null $p2ncav_low In calculating the Net Current Asset Value (NCAV), Benjamin Graham means a company's current assets (such as cash, marketable securities, and inventories) minus its total liabilities (including preferred stock, minority interest, and long-term debt).
     *
     * @return self
     */
    public function setP2ncavLow($p2ncav_low)
    {
        if (is_null($p2ncav_low)) {
            throw new \InvalidArgumentException('non-nullable p2ncav_low cannot be null');
        }
        $this->container['p2ncav_low'] = $p2ncav_low;

        return $this;
    }

    /**
     * Gets p2ncav_med
     *
     * @return float|null
     */
    public function getP2ncavMed()
    {
        return $this->container['p2ncav_med'];
    }

    /**
     * Sets p2ncav_med
     *
     * @param float|null $p2ncav_med In calculating the Net Current Asset Value (NCAV), Benjamin Graham means a company's current assets (such as cash, marketable securities, and inventories) minus its total liabilities (including preferred stock, minority interest, and long-term debt).
     *
     * @return self
     */
    public function setP2ncavMed($p2ncav_med)
    {
        if (is_null($p2ncav_med)) {
            throw new \InvalidArgumentException('non-nullable p2ncav_med cannot be null');
        }
        $this->container['p2ncav_med'] = $p2ncav_med;

        return $this;
    }

    /**
     * Gets p2net_cash
     *
     * @return float|null
     */
    public function getP2netCash()
    {
        return $this->container['p2net_cash'];
    }

    /**
     * Sets p2net_cash
     *
     * @param float|null $p2net_cash Net cash per share is calculated as Cash And Cash Equivalents minus Total Liabilities minus Minority Interest and then divided by Shares Outstanding (EOP).
     *
     * @return self
     */
    public function setP2netCash($p2net_cash)
    {
        if (is_null($p2net_cash)) {
            throw new \InvalidArgumentException('non-nullable p2net_cash cannot be null');
        }
        $this->container['p2net_cash'] = $p2net_cash;

        return $this;
    }

    /**
     * Gets p2net_cash_high
     *
     * @return float|null
     */
    public function getP2netCashHigh()
    {
        return $this->container['p2net_cash_high'];
    }

    /**
     * Sets p2net_cash_high
     *
     * @param float|null $p2net_cash_high Net cash per share is calculated as Cash And Cash Equivalents minus Total Liabilities minus Minority Interest and then divided by Shares Outstanding (EOP).
     *
     * @return self
     */
    public function setP2netCashHigh($p2net_cash_high)
    {
        if (is_null($p2net_cash_high)) {
            throw new \InvalidArgumentException('non-nullable p2net_cash_high cannot be null');
        }
        $this->container['p2net_cash_high'] = $p2net_cash_high;

        return $this;
    }

    /**
     * Gets p2net_cash_low
     *
     * @return float|null
     */
    public function getP2netCashLow()
    {
        return $this->container['p2net_cash_low'];
    }

    /**
     * Sets p2net_cash_low
     *
     * @param float|null $p2net_cash_low Net cash per share is calculated as Cash And Cash Equivalents minus Total Liabilities minus Minority Interest and then divided by Shares Outstanding (EOP).
     *
     * @return self
     */
    public function setP2netCashLow($p2net_cash_low)
    {
        if (is_null($p2net_cash_low)) {
            throw new \InvalidArgumentException('non-nullable p2net_cash_low cannot be null');
        }
        $this->container['p2net_cash_low'] = $p2net_cash_low;

        return $this;
    }

    /**
     * Gets p2net_cash_med
     *
     * @return float|null
     */
    public function getP2netCashMed()
    {
        return $this->container['p2net_cash_med'];
    }

    /**
     * Sets p2net_cash_med
     *
     * @param float|null $p2net_cash_med Net cash per share is calculated as Cash And Cash Equivalents minus Total Liabilities minus Minority Interest and then divided by Shares Outstanding (EOP).
     *
     * @return self
     */
    public function setP2netCashMed($p2net_cash_med)
    {
        if (is_null($p2net_cash_med)) {
            throw new \InvalidArgumentException('non-nullable p2net_cash_med cannot be null');
        }
        $this->container['p2net_cash_med'] = $p2net_cash_med;

        return $this;
    }

    /**
     * Gets p2nnwc
     *
     * @return float|null
     */
    public function getP2nnwc()
    {
        return $this->container['p2nnwc'];
    }

    /**
     * Sets p2nnwc
     *
     * @param float|null $p2nnwc In calculating the Net-Net Working Capital (NNWC), Benjamin Graham assumed that a company's accounts receivable is only worth 75% its value, its inventory is only worth 50% of its value, but its liabilities have to be paid in full.
     *
     * @return self
     */
    public function setP2nnwc($p2nnwc)
    {
        if (is_null($p2nnwc)) {
            throw new \InvalidArgumentException('non-nullable p2nnwc cannot be null');
        }
        $this->container['p2nnwc'] = $p2nnwc;

        return $this;
    }

    /**
     * Gets p2tangible_book
     *
     * @return float|null
     */
    public function getP2tangibleBook()
    {
        return $this->container['p2tangible_book'];
    }

    /**
     * Sets p2tangible_book
     *
     * @param float|null $p2tangible_book The Price to Tangible Book Value ratio (PTBV) expresses share price as a proportion of the company's tangible book value reported on the company's balance sheet.
     *
     * @return self
     */
    public function setP2tangibleBook($p2tangible_book)
    {
        if (is_null($p2tangible_book)) {
            throw new \InvalidArgumentException('non-nullable p2tangible_book cannot be null');
        }
        $this->container['p2tangible_book'] = $p2tangible_book;

        return $this;
    }

    /**
     * Gets p2tangible_book_high
     *
     * @return float|null
     */
    public function getP2tangibleBookHigh()
    {
        return $this->container['p2tangible_book_high'];
    }

    /**
     * Sets p2tangible_book_high
     *
     * @param float|null $p2tangible_book_high The Price to Tangible Book Value ratio (PTBV) expresses share price as a proportion of the company's tangible book value reported on the company's balance sheet.
     *
     * @return self
     */
    public function setP2tangibleBookHigh($p2tangible_book_high)
    {
        if (is_null($p2tangible_book_high)) {
            throw new \InvalidArgumentException('non-nullable p2tangible_book_high cannot be null');
        }
        $this->container['p2tangible_book_high'] = $p2tangible_book_high;

        return $this;
    }

    /**
     * Gets p2tangible_book_low
     *
     * @return float|null
     */
    public function getP2tangibleBookLow()
    {
        return $this->container['p2tangible_book_low'];
    }

    /**
     * Sets p2tangible_book_low
     *
     * @param float|null $p2tangible_book_low The Price to Tangible Book Value ratio (PTBV) expresses share price as a proportion of the company's tangible book value reported on the company's balance sheet.
     *
     * @return self
     */
    public function setP2tangibleBookLow($p2tangible_book_low)
    {
        if (is_null($p2tangible_book_low)) {
            throw new \InvalidArgumentException('non-nullable p2tangible_book_low cannot be null');
        }
        $this->container['p2tangible_book_low'] = $p2tangible_book_low;

        return $this;
    }

    /**
     * Gets p2tangible_book_med
     *
     * @return float|null
     */
    public function getP2tangibleBookMed()
    {
        return $this->container['p2tangible_book_med'];
    }

    /**
     * Sets p2tangible_book_med
     *
     * @param float|null $p2tangible_book_med The Price to Tangible Book Value ratio (PTBV) expresses share price as a proportion of the company's tangible book value reported on the company's balance sheet.
     *
     * @return self
     */
    public function setP2tangibleBookMed($p2tangible_book_med)
    {
        if (is_null($p2tangible_book_med)) {
            throw new \InvalidArgumentException('non-nullable p2tangible_book_med cannot be null');
        }
        $this->container['p2tangible_book_med'] = $p2tangible_book_med;

        return $this;
    }

    /**
     * Gets pb
     *
     * @return float|null
     */
    public function getPb()
    {
        return $this->container['pb'];
    }

    /**
     * Sets pb
     *
     * @param float|null $pb Companies use the price-to-book ratio to compare a firm's market to book value by dividing price per share by book value per share. Some people know it as the price-equity ratio.
     *
     * @return self
     */
    public function setPb($pb)
    {
        if (is_null($pb)) {
            throw new \InvalidArgumentException('non-nullable pb cannot be null');
        }
        $this->container['pb'] = $pb;

        return $this;
    }

    /**
     * Gets pbhigh
     *
     * @return float|null
     */
    public function getPbhigh()
    {
        return $this->container['pbhigh'];
    }

    /**
     * Sets pbhigh
     *
     * @param float|null $pbhigh Companies use the price-to-book ratio to compare a firm's market to book value by dividing price per share by book value per share. Some people know it as the price-equity ratio.
     *
     * @return self
     */
    public function setPbhigh($pbhigh)
    {
        if (is_null($pbhigh)) {
            throw new \InvalidArgumentException('non-nullable pbhigh cannot be null');
        }
        $this->container['pbhigh'] = $pbhigh;

        return $this;
    }

    /**
     * Gets pblow
     *
     * @return float|null
     */
    public function getPblow()
    {
        return $this->container['pblow'];
    }

    /**
     * Sets pblow
     *
     * @param float|null $pblow Companies use the price-to-book ratio to compare a firm's market to book value by dividing price per share by book value per share. Some people know it as the price-equity ratio.
     *
     * @return self
     */
    public function setPblow($pblow)
    {
        if (is_null($pblow)) {
            throw new \InvalidArgumentException('non-nullable pblow cannot be null');
        }
        $this->container['pblow'] = $pblow;

        return $this;
    }

    /**
     * Gets pbmed
     *
     * @return float|null
     */
    public function getPbmed()
    {
        return $this->container['pbmed'];
    }

    /**
     * Sets pbmed
     *
     * @param float|null $pbmed Companies use the price-to-book ratio to compare a firm's market to book value by dividing price per share by book value per share. Some people know it as the price-equity ratio.
     *
     * @return self
     */
    public function setPbmed($pbmed)
    {
        if (is_null($pbmed)) {
            throw new \InvalidArgumentException('non-nullable pbmed cannot be null');
        }
        $this->container['pbmed'] = $pbmed;

        return $this;
    }

    /**
     * Gets pe
     *
     * @return float|null
     */
    public function getPe()
    {
        return $this->container['pe'];
    }

    /**
     * Sets pe
     *
     * @param float|null $pe <p>The PE ratio, or Price-to-Earnings ratio, is the most widely used metric in the valuation of stocks. It is calculated as:  <b>PE Ratio = Share Price / {{eps_diluated}}</b>.   It can also be calculated from the numbers for the whole company:  <b>PE Ratio = {{mktcap}} / {{net_income}}</b>.</p>  <p>There are at least three kinds of PE ratios used among different investors. They are Trailing Twelve Month PE Ratio({{pettm}}), {{forwardPE}}, and {{penri}}. A new PE ratio based on inflation-adjusted normalized PE ratio is called {{ShillerPE}}, after Yale professor Robert Shiller.</p>  <p>In the calculation of {{pettm}}, the earnings per share used are the earnings per share over the past 12 months({{ttm_eps}}). For {{forwardPE}}, the earnings are the expected earnings for the next twelve months({{forward_eps}}). In the case of {{penri}}, the reported earnings less the non-recurring items are used({{eps_nri}}).For the {{ShillerPE}}, the earnings of the past 10 years are inflation-adjusted and averaged. Since {{ShillerPE}} looks at the average over the last 10 years, it is also called PE10.</p>
     *
     * @return self
     */
    public function setPe($pe)
    {
        if (is_null($pe)) {
            throw new \InvalidArgumentException('non-nullable pe cannot be null');
        }
        $this->container['pe'] = $pe;

        return $this;
    }

    /**
     * Gets pebit_med
     *
     * @return float|null
     */
    public function getPebitMed()
    {
        return $this->container['pebit_med'];
    }

    /**
     * Sets pebit_med
     *
     * @param float|null $pebit_med The median price-to-EBIT ratio over the past 10 years
     *
     * @return self
     */
    public function setPebitMed($pebit_med)
    {
        if (is_null($pebit_med)) {
            throw new \InvalidArgumentException('non-nullable pebit_med cannot be null');
        }
        $this->container['pebit_med'] = $pebit_med;

        return $this;
    }

    /**
     * Gets pebitda_med
     *
     * @return float|null
     */
    public function getPebitdaMed()
    {
        return $this->container['pebitda_med'];
    }

    /**
     * Sets pebitda_med
     *
     * @param float|null $pebitda_med The median price-to-EBITDA ratio over the past 10 years
     *
     * @return self
     */
    public function setPebitdaMed($pebitda_med)
    {
        if (is_null($pebitda_med)) {
            throw new \InvalidArgumentException('non-nullable pebitda_med cannot be null');
        }
        $this->container['pebitda_med'] = $pebitda_med;

        return $this;
    }

    /**
     * Gets peg
     *
     * @return float|null
     */
    public function getPeg()
    {
        return $this->container['peg'];
    }

    /**
     * Sets peg
     *
     * @param float|null $peg PEG is defined as the PE Ratio without NRI divided by the growth ratio. The growth rate we use is the 5-year average EBITDA growth rate.
     *
     * @return self
     */
    public function setPeg($peg)
    {
        if (is_null($peg)) {
            throw new \InvalidArgumentException('non-nullable peg cannot be null');
        }
        $this->container['peg'] = $peg;

        return $this;
    }

    /**
     * Gets peghigh
     *
     * @return float|null
     */
    public function getPeghigh()
    {
        return $this->container['peghigh'];
    }

    /**
     * Sets peghigh
     *
     * @param float|null $peghigh PEG is defined as the PE Ratio without NRI divided by the growth ratio. The growth rate we use is the 5-year average EBITDA growth rate.
     *
     * @return self
     */
    public function setPeghigh($peghigh)
    {
        if (is_null($peghigh)) {
            throw new \InvalidArgumentException('non-nullable peghigh cannot be null');
        }
        $this->container['peghigh'] = $peghigh;

        return $this;
    }

    /**
     * Gets peglow
     *
     * @return float|null
     */
    public function getPeglow()
    {
        return $this->container['peglow'];
    }

    /**
     * Sets peglow
     *
     * @param float|null $peglow PEG is defined as the PE Ratio without NRI divided by the growth ratio. The growth rate we use is the 5-year average EBITDA growth rate.
     *
     * @return self
     */
    public function setPeglow($peglow)
    {
        if (is_null($peglow)) {
            throw new \InvalidArgumentException('non-nullable peglow cannot be null');
        }
        $this->container['peglow'] = $peglow;

        return $this;
    }

    /**
     * Gets pegmed
     *
     * @return float|null
     */
    public function getPegmed()
    {
        return $this->container['pegmed'];
    }

    /**
     * Sets pegmed
     *
     * @param float|null $pegmed PEG is defined as the PE Ratio without NRI divided by the growth ratio. The growth rate we use is the 5-year average EBITDA growth rate.
     *
     * @return self
     */
    public function setPegmed($pegmed)
    {
        if (is_null($pegmed)) {
            throw new \InvalidArgumentException('non-nullable pegmed cannot be null');
        }
        $this->container['pegmed'] = $pegmed;

        return $this;
    }

    /**
     * Gets penri
     *
     * @return float|null
     */
    public function getPenri()
    {
        return $this->container['penri'];
    }

    /**
     * Sets penri
     *
     * @param float|null $penri penri
     *
     * @return self
     */
    public function setPenri($penri)
    {
        if (is_null($penri)) {
            throw new \InvalidArgumentException('non-nullable penri cannot be null');
        }
        $this->container['penri'] = $penri;

        return $this;
    }

    /**
     * Gets penrihigh
     *
     * @return float|null
     */
    public function getPenrihigh()
    {
        return $this->container['penrihigh'];
    }

    /**
     * Sets penrihigh
     *
     * @param float|null $penrihigh penrihigh
     *
     * @return self
     */
    public function setPenrihigh($penrihigh)
    {
        if (is_null($penrihigh)) {
            throw new \InvalidArgumentException('non-nullable penrihigh cannot be null');
        }
        $this->container['penrihigh'] = $penrihigh;

        return $this;
    }

    /**
     * Gets penrilow
     *
     * @return float|null
     */
    public function getPenrilow()
    {
        return $this->container['penrilow'];
    }

    /**
     * Sets penrilow
     *
     * @param float|null $penrilow penrilow
     *
     * @return self
     */
    public function setPenrilow($penrilow)
    {
        if (is_null($penrilow)) {
            throw new \InvalidArgumentException('non-nullable penrilow cannot be null');
        }
        $this->container['penrilow'] = $penrilow;

        return $this;
    }

    /**
     * Gets penrimed
     *
     * @return float|null
     */
    public function getPenrimed()
    {
        return $this->container['penrimed'];
    }

    /**
     * Sets penrimed
     *
     * @param float|null $penrimed penrimed
     *
     * @return self
     */
    public function setPenrimed($penrimed)
    {
        if (is_null($penrimed)) {
            throw new \InvalidArgumentException('non-nullable penrimed cannot be null');
        }
        $this->container['penrimed'] = $penrimed;

        return $this;
    }

    /**
     * Gets pettmhigh
     *
     * @return float|null
     */
    public function getPettmhigh()
    {
        return $this->container['pettmhigh'];
    }

    /**
     * Sets pettmhigh
     *
     * @param float|null $pettmhigh The highest price-earnings ratio over the past 10 years
     *
     * @return self
     */
    public function setPettmhigh($pettmhigh)
    {
        if (is_null($pettmhigh)) {
            throw new \InvalidArgumentException('non-nullable pettmhigh cannot be null');
        }
        $this->container['pettmhigh'] = $pettmhigh;

        return $this;
    }

    /**
     * Gets pettmlow
     *
     * @return float|null
     */
    public function getPettmlow()
    {
        return $this->container['pettmlow'];
    }

    /**
     * Sets pettmlow
     *
     * @param float|null $pettmlow The lowest price-earnings ratio over the past 10 years
     *
     * @return self
     */
    public function setPettmlow($pettmlow)
    {
        if (is_null($pettmlow)) {
            throw new \InvalidArgumentException('non-nullable pettmlow cannot be null');
        }
        $this->container['pettmlow'] = $pettmlow;

        return $this;
    }

    /**
     * Gets pettmmed
     *
     * @return float|null
     */
    public function getPettmmed()
    {
        return $this->container['pettmmed'];
    }

    /**
     * Sets pettmmed
     *
     * @param float|null $pettmmed The median price-earnings ratio over the past 10 years
     *
     * @return self
     */
    public function setPettmmed($pettmmed)
    {
        if (is_null($pettmmed)) {
            throw new \InvalidArgumentException('non-nullable pettmmed cannot be null');
        }
        $this->container['pettmmed'] = $pettmmed;

        return $this;
    }

    /**
     * Gets pfcf
     *
     * @return float|null
     */
    public function getPfcf()
    {
        return $this->container['pfcf'];
    }

    /**
     * Sets pfcf
     *
     * @param float|null $pfcf Price to free cash flow is an equity valuation metric used to compare a company's per-share market price to its per-share amount of free cash flow (FCF).
     *
     * @return self
     */
    public function setPfcf($pfcf)
    {
        if (is_null($pfcf)) {
            throw new \InvalidArgumentException('non-nullable pfcf cannot be null');
        }
        $this->container['pfcf'] = $pfcf;

        return $this;
    }

    /**
     * Gets pfcfhigh
     *
     * @return float|null
     */
    public function getPfcfhigh()
    {
        return $this->container['pfcfhigh'];
    }

    /**
     * Sets pfcfhigh
     *
     * @param float|null $pfcfhigh Price to free cash flow is an equity valuation metric used to compare a company's per-share market price to its per-share amount of free cash flow (FCF).
     *
     * @return self
     */
    public function setPfcfhigh($pfcfhigh)
    {
        if (is_null($pfcfhigh)) {
            throw new \InvalidArgumentException('non-nullable pfcfhigh cannot be null');
        }
        $this->container['pfcfhigh'] = $pfcfhigh;

        return $this;
    }

    /**
     * Gets pfcflow
     *
     * @return float|null
     */
    public function getPfcflow()
    {
        return $this->container['pfcflow'];
    }

    /**
     * Sets pfcflow
     *
     * @param float|null $pfcflow Price to free cash flow is an equity valuation metric used to compare a company's per-share market price to its per-share amount of free cash flow (FCF).
     *
     * @return self
     */
    public function setPfcflow($pfcflow)
    {
        if (is_null($pfcflow)) {
            throw new \InvalidArgumentException('non-nullable pfcflow cannot be null');
        }
        $this->container['pfcflow'] = $pfcflow;

        return $this;
    }

    /**
     * Gets pfcfmed
     *
     * @return float|null
     */
    public function getPfcfmed()
    {
        return $this->container['pfcfmed'];
    }

    /**
     * Sets pfcfmed
     *
     * @param float|null $pfcfmed Price to free cash flow is an equity valuation metric used to compare a company's per-share market price to its per-share amount of free cash flow (FCF).
     *
     * @return self
     */
    public function setPfcfmed($pfcfmed)
    {
        if (is_null($pfcfmed)) {
            throw new \InvalidArgumentException('non-nullable pfcfmed cannot be null');
        }
        $this->container['pfcfmed'] = $pfcfmed;

        return $this;
    }

    /**
     * Gets pocf
     *
     * @return float|null
     */
    public function getPocf()
    {
        return $this->container['pocf'];
    }

    /**
     * Sets pocf
     *
     * @param float|null $pocf The price/cash flow ratio (also called price-to-cash flow ratio or P/CF), is a ratio used to compare a company's market value to its cash flow.
     *
     * @return self
     */
    public function setPocf($pocf)
    {
        if (is_null($pocf)) {
            throw new \InvalidArgumentException('non-nullable pocf cannot be null');
        }
        $this->container['pocf'] = $pocf;

        return $this;
    }

    /**
     * Gets pocfhigh
     *
     * @return float|null
     */
    public function getPocfhigh()
    {
        return $this->container['pocfhigh'];
    }

    /**
     * Sets pocfhigh
     *
     * @param float|null $pocfhigh The price/cash flow ratio (also called price-to-cash flow ratio or P/CF), is a ratio used to compare a company's market value to its cash flow.
     *
     * @return self
     */
    public function setPocfhigh($pocfhigh)
    {
        if (is_null($pocfhigh)) {
            throw new \InvalidArgumentException('non-nullable pocfhigh cannot be null');
        }
        $this->container['pocfhigh'] = $pocfhigh;

        return $this;
    }

    /**
     * Gets pocflow
     *
     * @return float|null
     */
    public function getPocflow()
    {
        return $this->container['pocflow'];
    }

    /**
     * Sets pocflow
     *
     * @param float|null $pocflow The price/cash flow ratio (also called price-to-cash flow ratio or P/CF), is a ratio used to compare a company's market value to its cash flow.
     *
     * @return self
     */
    public function setPocflow($pocflow)
    {
        if (is_null($pocflow)) {
            throw new \InvalidArgumentException('non-nullable pocflow cannot be null');
        }
        $this->container['pocflow'] = $pocflow;

        return $this;
    }

    /**
     * Gets pocfmed
     *
     * @return float|null
     */
    public function getPocfmed()
    {
        return $this->container['pocfmed'];
    }

    /**
     * Sets pocfmed
     *
     * @param float|null $pocfmed The price/cash flow ratio (also called price-to-cash flow ratio or P/CF), is a ratio used to compare a company's market value to its cash flow.
     *
     * @return self
     */
    public function setPocfmed($pocfmed)
    {
        if (is_null($pocfmed)) {
            throw new \InvalidArgumentException('non-nullable pocfmed cannot be null');
        }
        $this->container['pocfmed'] = $pocfmed;

        return $this;
    }

    /**
     * Gets ps
     *
     * @return float|null
     */
    public function getPs()
    {
        return $this->container['ps'];
    }

    /**
     * Sets ps
     *
     * @param float|null $ps Price–sales ratio, P/S ratio, or PSR, is a valuation metric for stocks.
     *
     * @return self
     */
    public function setPs($ps)
    {
        if (is_null($ps)) {
            throw new \InvalidArgumentException('non-nullable ps cannot be null');
        }
        $this->container['ps'] = $ps;

        return $this;
    }

    /**
     * Gets pshigh
     *
     * @return float|null
     */
    public function getPshigh()
    {
        return $this->container['pshigh'];
    }

    /**
     * Sets pshigh
     *
     * @param float|null $pshigh Price–sales ratio, P/S ratio, or PSR, is a valuation metric for stocks.
     *
     * @return self
     */
    public function setPshigh($pshigh)
    {
        if (is_null($pshigh)) {
            throw new \InvalidArgumentException('non-nullable pshigh cannot be null');
        }
        $this->container['pshigh'] = $pshigh;

        return $this;
    }

    /**
     * Gets pslow
     *
     * @return float|null
     */
    public function getPslow()
    {
        return $this->container['pslow'];
    }

    /**
     * Sets pslow
     *
     * @param float|null $pslow Price–sales ratio, P/S ratio, or PSR, is a valuation metric for stocks.
     *
     * @return self
     */
    public function setPslow($pslow)
    {
        if (is_null($pslow)) {
            throw new \InvalidArgumentException('non-nullable pslow cannot be null');
        }
        $this->container['pslow'] = $pslow;

        return $this;
    }

    /**
     * Gets psmed
     *
     * @return float|null
     */
    public function getPsmed()
    {
        return $this->container['psmed'];
    }

    /**
     * Sets psmed
     *
     * @param float|null $psmed Price–sales ratio, P/S ratio, or PSR, is a valuation metric for stocks.
     *
     * @return self
     */
    public function setPsmed($psmed)
    {
        if (is_null($psmed)) {
            throw new \InvalidArgumentException('non-nullable psmed cannot be null');
        }
        $this->container['psmed'] = $psmed;

        return $this;
    }

    /**
     * Gets tangible_book
     *
     * @return float|null
     */
    public function getTangibleBook()
    {
        return $this->container['tangible_book'];
    }

    /**
     * Sets tangible_book
     *
     * @param float|null $tangible_book The per share value of a company based on common shareholder's equity less intangible assets
     *
     * @return self
     */
    public function setTangibleBook($tangible_book)
    {
        if (is_null($tangible_book)) {
            throw new \InvalidArgumentException('non-nullable tangible_book cannot be null');
        }
        $this->container['tangible_book'] = $tangible_book;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


