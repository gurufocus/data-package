<?php
/**
 * ValuationsNREITNODIRECTRatios
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gurufocus Data Package API
 *
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ValuationsNREITNODIRECTRatios Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ValuationsNREITNODIRECTRatios implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'valuations_N_REIT_NO_DIRECT_ratios';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'capex_to_operating_cash_flow' => 'float',
        'capex_to_operating_income' => 'float',
        'capex_to_revenue' => 'float',
        'cash_conversion_cycle' => 'float',
        'cost_of_goods_sold_to_revenue' => 'float',
        'days_inventory' => 'float',
        'days_payable' => 'float',
        'days_sales_outstanding' => 'float',
        'debt_to_asset' => 'float',
        'debt_to_equity' => 'float',
        'degree_of_financial_leverage' => 'float',
        'degree_of_operating_leverage' => 'float',
        'dividend_to_ffo' => 'float',
        'ebitda_margin' => 'float',
        'effective_interest_rate' => 'float',
        'equity_to_asset' => 'float',
        'fcf_margin' => 'float',
        'gross_margin' => 'float',
        'gross_profit_to_asset' => 'float',
        'inventory_to_revenue' => 'float',
        'inventory_turnover' => 'float',
        'liabilities_to_assets' => 'float',
        'net_margin' => 'float',
        'operating_margin' => 'float',
        'payout' => 'float',
        'rd2rev' => 'float',
        'receivables_turnover' => 'float',
        'return_on_tangible_asset' => 'float',
        'return_on_tangible_equity' => 'float',
        'roa' => 'float',
        'roc_joel' => 'float',
        'roce' => 'float',
        'roe' => 'float',
        'roe_adj' => 'float',
        'roic' => 'float',
        'roiic_1y' => 'float',
        'rore_5y' => 'float',
        'turnover' => 'float',
        'wacc' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'capex_to_operating_cash_flow' => null,
        'capex_to_operating_income' => null,
        'capex_to_revenue' => null,
        'cash_conversion_cycle' => null,
        'cost_of_goods_sold_to_revenue' => null,
        'days_inventory' => null,
        'days_payable' => null,
        'days_sales_outstanding' => null,
        'debt_to_asset' => null,
        'debt_to_equity' => null,
        'degree_of_financial_leverage' => null,
        'degree_of_operating_leverage' => null,
        'dividend_to_ffo' => null,
        'ebitda_margin' => null,
        'effective_interest_rate' => null,
        'equity_to_asset' => null,
        'fcf_margin' => null,
        'gross_margin' => null,
        'gross_profit_to_asset' => null,
        'inventory_to_revenue' => null,
        'inventory_turnover' => null,
        'liabilities_to_assets' => null,
        'net_margin' => null,
        'operating_margin' => null,
        'payout' => null,
        'rd2rev' => null,
        'receivables_turnover' => null,
        'return_on_tangible_asset' => null,
        'return_on_tangible_equity' => null,
        'roa' => null,
        'roc_joel' => null,
        'roce' => null,
        'roe' => null,
        'roe_adj' => null,
        'roic' => null,
        'roiic_1y' => null,
        'rore_5y' => null,
        'turnover' => null,
        'wacc' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'capex_to_operating_cash_flow' => false,
        'capex_to_operating_income' => false,
        'capex_to_revenue' => false,
        'cash_conversion_cycle' => false,
        'cost_of_goods_sold_to_revenue' => false,
        'days_inventory' => false,
        'days_payable' => false,
        'days_sales_outstanding' => false,
        'debt_to_asset' => false,
        'debt_to_equity' => false,
        'degree_of_financial_leverage' => false,
        'degree_of_operating_leverage' => false,
        'dividend_to_ffo' => false,
        'ebitda_margin' => false,
        'effective_interest_rate' => false,
        'equity_to_asset' => false,
        'fcf_margin' => false,
        'gross_margin' => false,
        'gross_profit_to_asset' => false,
        'inventory_to_revenue' => false,
        'inventory_turnover' => false,
        'liabilities_to_assets' => false,
        'net_margin' => false,
        'operating_margin' => false,
        'payout' => false,
        'rd2rev' => false,
        'receivables_turnover' => false,
        'return_on_tangible_asset' => false,
        'return_on_tangible_equity' => false,
        'roa' => false,
        'roc_joel' => false,
        'roce' => false,
        'roe' => false,
        'roe_adj' => false,
        'roic' => false,
        'roiic_1y' => false,
        'rore_5y' => false,
        'turnover' => false,
        'wacc' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'capex_to_operating_cash_flow' => 'capex_to_operating_cash_flow',
        'capex_to_operating_income' => 'capex_to_operating_income',
        'capex_to_revenue' => 'capex_to_revenue',
        'cash_conversion_cycle' => 'cash_conversion_cycle',
        'cost_of_goods_sold_to_revenue' => 'cost_of_goods_sold_to_revenue',
        'days_inventory' => 'days_inventory',
        'days_payable' => 'days_payable',
        'days_sales_outstanding' => 'days_sales_outstanding',
        'debt_to_asset' => 'debt_to_asset',
        'debt_to_equity' => 'debt_to_equity',
        'degree_of_financial_leverage' => 'degree_of_financial_leverage',
        'degree_of_operating_leverage' => 'degree_of_operating_leverage',
        'dividend_to_ffo' => 'dividend_to_ffo',
        'ebitda_margin' => 'ebitda_margin',
        'effective_interest_rate' => 'effective_interest_rate',
        'equity_to_asset' => 'equity_to_asset',
        'fcf_margin' => 'fcf_margin',
        'gross_margin' => 'gross_margin',
        'gross_profit_to_asset' => 'gross_profit_to_asset',
        'inventory_to_revenue' => 'inventory_to_revenue',
        'inventory_turnover' => 'inventory_turnover',
        'liabilities_to_assets' => 'liabilities_to_assets',
        'net_margin' => 'net_margin',
        'operating_margin' => 'operating_margin',
        'payout' => 'payout',
        'rd2rev' => 'rd2rev',
        'receivables_turnover' => 'receivables_turnover',
        'return_on_tangible_asset' => 'return_on_tangible_asset',
        'return_on_tangible_equity' => 'return_on_tangible_equity',
        'roa' => 'roa',
        'roc_joel' => 'roc_joel',
        'roce' => 'roce',
        'roe' => 'roe',
        'roe_adj' => 'roe_adj',
        'roic' => 'roic',
        'roiic_1y' => 'roiic_1y',
        'rore_5y' => 'rore_5y',
        'turnover' => 'turnover',
        'wacc' => 'wacc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'capex_to_operating_cash_flow' => 'setCapexToOperatingCashFlow',
        'capex_to_operating_income' => 'setCapexToOperatingIncome',
        'capex_to_revenue' => 'setCapexToRevenue',
        'cash_conversion_cycle' => 'setCashConversionCycle',
        'cost_of_goods_sold_to_revenue' => 'setCostOfGoodsSoldToRevenue',
        'days_inventory' => 'setDaysInventory',
        'days_payable' => 'setDaysPayable',
        'days_sales_outstanding' => 'setDaysSalesOutstanding',
        'debt_to_asset' => 'setDebtToAsset',
        'debt_to_equity' => 'setDebtToEquity',
        'degree_of_financial_leverage' => 'setDegreeOfFinancialLeverage',
        'degree_of_operating_leverage' => 'setDegreeOfOperatingLeverage',
        'dividend_to_ffo' => 'setDividendToFfo',
        'ebitda_margin' => 'setEbitdaMargin',
        'effective_interest_rate' => 'setEffectiveInterestRate',
        'equity_to_asset' => 'setEquityToAsset',
        'fcf_margin' => 'setFcfMargin',
        'gross_margin' => 'setGrossMargin',
        'gross_profit_to_asset' => 'setGrossProfitToAsset',
        'inventory_to_revenue' => 'setInventoryToRevenue',
        'inventory_turnover' => 'setInventoryTurnover',
        'liabilities_to_assets' => 'setLiabilitiesToAssets',
        'net_margin' => 'setNetMargin',
        'operating_margin' => 'setOperatingMargin',
        'payout' => 'setPayout',
        'rd2rev' => 'setRd2rev',
        'receivables_turnover' => 'setReceivablesTurnover',
        'return_on_tangible_asset' => 'setReturnOnTangibleAsset',
        'return_on_tangible_equity' => 'setReturnOnTangibleEquity',
        'roa' => 'setRoa',
        'roc_joel' => 'setRocJoel',
        'roce' => 'setRoce',
        'roe' => 'setRoe',
        'roe_adj' => 'setRoeAdj',
        'roic' => 'setRoic',
        'roiic_1y' => 'setRoiic1y',
        'rore_5y' => 'setRore5y',
        'turnover' => 'setTurnover',
        'wacc' => 'setWacc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'capex_to_operating_cash_flow' => 'getCapexToOperatingCashFlow',
        'capex_to_operating_income' => 'getCapexToOperatingIncome',
        'capex_to_revenue' => 'getCapexToRevenue',
        'cash_conversion_cycle' => 'getCashConversionCycle',
        'cost_of_goods_sold_to_revenue' => 'getCostOfGoodsSoldToRevenue',
        'days_inventory' => 'getDaysInventory',
        'days_payable' => 'getDaysPayable',
        'days_sales_outstanding' => 'getDaysSalesOutstanding',
        'debt_to_asset' => 'getDebtToAsset',
        'debt_to_equity' => 'getDebtToEquity',
        'degree_of_financial_leverage' => 'getDegreeOfFinancialLeverage',
        'degree_of_operating_leverage' => 'getDegreeOfOperatingLeverage',
        'dividend_to_ffo' => 'getDividendToFfo',
        'ebitda_margin' => 'getEbitdaMargin',
        'effective_interest_rate' => 'getEffectiveInterestRate',
        'equity_to_asset' => 'getEquityToAsset',
        'fcf_margin' => 'getFcfMargin',
        'gross_margin' => 'getGrossMargin',
        'gross_profit_to_asset' => 'getGrossProfitToAsset',
        'inventory_to_revenue' => 'getInventoryToRevenue',
        'inventory_turnover' => 'getInventoryTurnover',
        'liabilities_to_assets' => 'getLiabilitiesToAssets',
        'net_margin' => 'getNetMargin',
        'operating_margin' => 'getOperatingMargin',
        'payout' => 'getPayout',
        'rd2rev' => 'getRd2rev',
        'receivables_turnover' => 'getReceivablesTurnover',
        'return_on_tangible_asset' => 'getReturnOnTangibleAsset',
        'return_on_tangible_equity' => 'getReturnOnTangibleEquity',
        'roa' => 'getRoa',
        'roc_joel' => 'getRocJoel',
        'roce' => 'getRoce',
        'roe' => 'getRoe',
        'roe_adj' => 'getRoeAdj',
        'roic' => 'getRoic',
        'roiic_1y' => 'getRoiic1y',
        'rore_5y' => 'getRore5y',
        'turnover' => 'getTurnover',
        'wacc' => 'getWacc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('capex_to_operating_cash_flow', $data ?? [], null);
        $this->setIfExists('capex_to_operating_income', $data ?? [], null);
        $this->setIfExists('capex_to_revenue', $data ?? [], null);
        $this->setIfExists('cash_conversion_cycle', $data ?? [], null);
        $this->setIfExists('cost_of_goods_sold_to_revenue', $data ?? [], null);
        $this->setIfExists('days_inventory', $data ?? [], null);
        $this->setIfExists('days_payable', $data ?? [], null);
        $this->setIfExists('days_sales_outstanding', $data ?? [], null);
        $this->setIfExists('debt_to_asset', $data ?? [], null);
        $this->setIfExists('debt_to_equity', $data ?? [], null);
        $this->setIfExists('degree_of_financial_leverage', $data ?? [], null);
        $this->setIfExists('degree_of_operating_leverage', $data ?? [], null);
        $this->setIfExists('dividend_to_ffo', $data ?? [], null);
        $this->setIfExists('ebitda_margin', $data ?? [], null);
        $this->setIfExists('effective_interest_rate', $data ?? [], null);
        $this->setIfExists('equity_to_asset', $data ?? [], null);
        $this->setIfExists('fcf_margin', $data ?? [], null);
        $this->setIfExists('gross_margin', $data ?? [], null);
        $this->setIfExists('gross_profit_to_asset', $data ?? [], null);
        $this->setIfExists('inventory_to_revenue', $data ?? [], null);
        $this->setIfExists('inventory_turnover', $data ?? [], null);
        $this->setIfExists('liabilities_to_assets', $data ?? [], null);
        $this->setIfExists('net_margin', $data ?? [], null);
        $this->setIfExists('operating_margin', $data ?? [], null);
        $this->setIfExists('payout', $data ?? [], null);
        $this->setIfExists('rd2rev', $data ?? [], null);
        $this->setIfExists('receivables_turnover', $data ?? [], null);
        $this->setIfExists('return_on_tangible_asset', $data ?? [], null);
        $this->setIfExists('return_on_tangible_equity', $data ?? [], null);
        $this->setIfExists('roa', $data ?? [], null);
        $this->setIfExists('roc_joel', $data ?? [], null);
        $this->setIfExists('roce', $data ?? [], null);
        $this->setIfExists('roe', $data ?? [], null);
        $this->setIfExists('roe_adj', $data ?? [], null);
        $this->setIfExists('roic', $data ?? [], null);
        $this->setIfExists('roiic_1y', $data ?? [], null);
        $this->setIfExists('rore_5y', $data ?? [], null);
        $this->setIfExists('turnover', $data ?? [], null);
        $this->setIfExists('wacc', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets capex_to_operating_cash_flow
     *
     * @return float|null
     */
    public function getCapexToOperatingCashFlow()
    {
        return $this->container['capex_to_operating_cash_flow'];
    }

    /**
     * Sets capex_to_operating_cash_flow
     *
     * @param float|null $capex_to_operating_cash_flow capex_to_operating_cash_flow
     *
     * @return self
     */
    public function setCapexToOperatingCashFlow($capex_to_operating_cash_flow)
    {
        if (is_null($capex_to_operating_cash_flow)) {
            throw new \InvalidArgumentException('non-nullable capex_to_operating_cash_flow cannot be null');
        }
        $this->container['capex_to_operating_cash_flow'] = $capex_to_operating_cash_flow;

        return $this;
    }

    /**
     * Gets capex_to_operating_income
     *
     * @return float|null
     */
    public function getCapexToOperatingIncome()
    {
        return $this->container['capex_to_operating_income'];
    }

    /**
     * Sets capex_to_operating_income
     *
     * @param float|null $capex_to_operating_income capex_to_operating_income
     *
     * @return self
     */
    public function setCapexToOperatingIncome($capex_to_operating_income)
    {
        if (is_null($capex_to_operating_income)) {
            throw new \InvalidArgumentException('non-nullable capex_to_operating_income cannot be null');
        }
        $this->container['capex_to_operating_income'] = $capex_to_operating_income;

        return $this;
    }

    /**
     * Gets capex_to_revenue
     *
     * @return float|null
     */
    public function getCapexToRevenue()
    {
        return $this->container['capex_to_revenue'];
    }

    /**
     * Sets capex_to_revenue
     *
     * @param float|null $capex_to_revenue capex_to_revenue
     *
     * @return self
     */
    public function setCapexToRevenue($capex_to_revenue)
    {
        if (is_null($capex_to_revenue)) {
            throw new \InvalidArgumentException('non-nullable capex_to_revenue cannot be null');
        }
        $this->container['capex_to_revenue'] = $capex_to_revenue;

        return $this;
    }

    /**
     * Gets cash_conversion_cycle
     *
     * @return float|null
     */
    public function getCashConversionCycle()
    {
        return $this->container['cash_conversion_cycle'];
    }

    /**
     * Sets cash_conversion_cycle
     *
     * @param float|null $cash_conversion_cycle Cash Conversion Cycle is one of several measures of management effectiveness. It equals Days Sales Outstanding + Days Inventory - Days Payable.
     *
     * @return self
     */
    public function setCashConversionCycle($cash_conversion_cycle)
    {
        if (is_null($cash_conversion_cycle)) {
            throw new \InvalidArgumentException('non-nullable cash_conversion_cycle cannot be null');
        }
        $this->container['cash_conversion_cycle'] = $cash_conversion_cycle;

        return $this;
    }

    /**
     * Gets cost_of_goods_sold_to_revenue
     *
     * @return float|null
     */
    public function getCostOfGoodsSoldToRevenue()
    {
        return $this->container['cost_of_goods_sold_to_revenue'];
    }

    /**
     * Sets cost_of_goods_sold_to_revenue
     *
     * @param float|null $cost_of_goods_sold_to_revenue The ratio of cost of goods sold to sales
     *
     * @return self
     */
    public function setCostOfGoodsSoldToRevenue($cost_of_goods_sold_to_revenue)
    {
        if (is_null($cost_of_goods_sold_to_revenue)) {
            throw new \InvalidArgumentException('non-nullable cost_of_goods_sold_to_revenue cannot be null');
        }
        $this->container['cost_of_goods_sold_to_revenue'] = $cost_of_goods_sold_to_revenue;

        return $this;
    }

    /**
     * Gets days_inventory
     *
     * @return float|null
     */
    public function getDaysInventory()
    {
        return $this->container['days_inventory'];
    }

    /**
     * Sets days_inventory
     *
     * @param float|null $days_inventory The Days Inventory is an efficiency ratio that measures the average number of days the company holds its inventory before selling it. The ratio measures the number of days funds are tied up in inventory. Inventory levels (measured at cost) are divided by sales per day (also measured at cost rather than selling price.)
     *
     * @return self
     */
    public function setDaysInventory($days_inventory)
    {
        if (is_null($days_inventory)) {
            throw new \InvalidArgumentException('non-nullable days_inventory cannot be null');
        }
        $this->container['days_inventory'] = $days_inventory;

        return $this;
    }

    /**
     * Gets days_payable
     *
     * @return float|null
     */
    public function getDaysPayable()
    {
        return $this->container['days_payable'];
    }

    /**
     * Sets days_payable
     *
     * @param float|null $days_payable Days payable outstanding (DPO) is an efficiency ratio that measures the average number of days a company takes to pay its suppliers.
     *
     * @return self
     */
    public function setDaysPayable($days_payable)
    {
        if (is_null($days_payable)) {
            throw new \InvalidArgumentException('non-nullable days_payable cannot be null');
        }
        $this->container['days_payable'] = $days_payable;

        return $this;
    }

    /**
     * Gets days_sales_outstanding
     *
     * @return float|null
     */
    public function getDaysSalesOutstanding()
    {
        return $this->container['days_sales_outstanding'];
    }

    /**
     * Sets days_sales_outstanding
     *
     * @param float|null $days_sales_outstanding Days sales outstanding (DSO) is a measure of the average number of days that it takes a company to collect payment after a sale has been made.
     *
     * @return self
     */
    public function setDaysSalesOutstanding($days_sales_outstanding)
    {
        if (is_null($days_sales_outstanding)) {
            throw new \InvalidArgumentException('non-nullable days_sales_outstanding cannot be null');
        }
        $this->container['days_sales_outstanding'] = $days_sales_outstanding;

        return $this;
    }

    /**
     * Gets debt_to_asset
     *
     * @return float|null
     */
    public function getDebtToAsset()
    {
        return $this->container['debt_to_asset'];
    }

    /**
     * Sets debt_to_asset
     *
     * @param float|null $debt_to_asset Debt to assets is a leverage ratio that defines the total amount of debt relative to assets
     *
     * @return self
     */
    public function setDebtToAsset($debt_to_asset)
    {
        if (is_null($debt_to_asset)) {
            throw new \InvalidArgumentException('non-nullable debt_to_asset cannot be null');
        }
        $this->container['debt_to_asset'] = $debt_to_asset;

        return $this;
    }

    /**
     * Gets debt_to_equity
     *
     * @return float|null
     */
    public function getDebtToEquity()
    {
        return $this->container['debt_to_equity'];
    }

    /**
     * Sets debt_to_equity
     *
     * @param float|null $debt_to_equity The Debt/Equity (D/E) Ratio is calculated by dividing a company’s total liabilities by its shareholder equity. The ratio is used to evaluate a company's financial leverage.
     *
     * @return self
     */
    public function setDebtToEquity($debt_to_equity)
    {
        if (is_null($debt_to_equity)) {
            throw new \InvalidArgumentException('non-nullable debt_to_equity cannot be null');
        }
        $this->container['debt_to_equity'] = $debt_to_equity;

        return $this;
    }

    /**
     * Gets degree_of_financial_leverage
     *
     * @return float|null
     */
    public function getDegreeOfFinancialLeverage()
    {
        return $this->container['degree_of_financial_leverage'];
    }

    /**
     * Sets degree_of_financial_leverage
     *
     * @param float|null $degree_of_financial_leverage degree_of_financial_leverage
     *
     * @return self
     */
    public function setDegreeOfFinancialLeverage($degree_of_financial_leverage)
    {
        if (is_null($degree_of_financial_leverage)) {
            throw new \InvalidArgumentException('non-nullable degree_of_financial_leverage cannot be null');
        }
        $this->container['degree_of_financial_leverage'] = $degree_of_financial_leverage;

        return $this;
    }

    /**
     * Gets degree_of_operating_leverage
     *
     * @return float|null
     */
    public function getDegreeOfOperatingLeverage()
    {
        return $this->container['degree_of_operating_leverage'];
    }

    /**
     * Sets degree_of_operating_leverage
     *
     * @param float|null $degree_of_operating_leverage degree_of_operating_leverage
     *
     * @return self
     */
    public function setDegreeOfOperatingLeverage($degree_of_operating_leverage)
    {
        if (is_null($degree_of_operating_leverage)) {
            throw new \InvalidArgumentException('non-nullable degree_of_operating_leverage cannot be null');
        }
        $this->container['degree_of_operating_leverage'] = $degree_of_operating_leverage;

        return $this;
    }

    /**
     * Gets dividend_to_ffo
     *
     * @return float|null
     */
    public function getDividendToFfo()
    {
        return $this->container['dividend_to_ffo'];
    }

    /**
     * Sets dividend_to_ffo
     *
     * @param float|null $dividend_to_ffo Cash dividends declared on the company's primary issue of common stock as a percent of funds from operations, on a per-share basis
     *
     * @return self
     */
    public function setDividendToFfo($dividend_to_ffo)
    {
        if (is_null($dividend_to_ffo)) {
            throw new \InvalidArgumentException('non-nullable dividend_to_ffo cannot be null');
        }
        $this->container['dividend_to_ffo'] = $dividend_to_ffo;

        return $this;
    }

    /**
     * Gets ebitda_margin
     *
     * @return float|null
     */
    public function getEbitdaMargin()
    {
        return $this->container['ebitda_margin'];
    }

    /**
     * Sets ebitda_margin
     *
     * @param float|null $ebitda_margin ebitda_margin
     *
     * @return self
     */
    public function setEbitdaMargin($ebitda_margin)
    {
        if (is_null($ebitda_margin)) {
            throw new \InvalidArgumentException('non-nullable ebitda_margin cannot be null');
        }
        $this->container['ebitda_margin'] = $ebitda_margin;

        return $this;
    }

    /**
     * Gets effective_interest_rate
     *
     * @return float|null
     */
    public function getEffectiveInterestRate()
    {
        return $this->container['effective_interest_rate'];
    }

    /**
     * Sets effective_interest_rate
     *
     * @param float|null $effective_interest_rate Effective interest rate on debt is the usage rate that a borrower actually pays on a debt. It is calculated as the positive value of interest expense divided by its average total debt.
     *
     * @return self
     */
    public function setEffectiveInterestRate($effective_interest_rate)
    {
        if (is_null($effective_interest_rate)) {
            throw new \InvalidArgumentException('non-nullable effective_interest_rate cannot be null');
        }
        $this->container['effective_interest_rate'] = $effective_interest_rate;

        return $this;
    }

    /**
     * Gets equity_to_asset
     *
     * @return float|null
     */
    public function getEquityToAsset()
    {
        return $this->container['equity_to_asset'];
    }

    /**
     * Sets equity_to_asset
     *
     * @param float|null $equity_to_asset Equity to Asset ratio is calculated as shareholder's tangible equity divided by its total asset.
     *
     * @return self
     */
    public function setEquityToAsset($equity_to_asset)
    {
        if (is_null($equity_to_asset)) {
            throw new \InvalidArgumentException('non-nullable equity_to_asset cannot be null');
        }
        $this->container['equity_to_asset'] = $equity_to_asset;

        return $this;
    }

    /**
     * Gets fcf_margin
     *
     * @return float|null
     */
    public function getFcfMargin()
    {
        return $this->container['fcf_margin'];
    }

    /**
     * Sets fcf_margin
     *
     * @param float|null $fcf_margin FCF Margin is calculated as Free Cash Flow divided by total Revenue.
     *
     * @return self
     */
    public function setFcfMargin($fcf_margin)
    {
        if (is_null($fcf_margin)) {
            throw new \InvalidArgumentException('non-nullable fcf_margin cannot be null');
        }
        $this->container['fcf_margin'] = $fcf_margin;

        return $this;
    }

    /**
     * Gets gross_margin
     *
     * @return float|null
     */
    public function getGrossMargin()
    {
        return $this->container['gross_margin'];
    }

    /**
     * Sets gross_margin
     *
     * @param float|null $gross_margin Gross Margin % is calculated as gross profit divided by its revenue.
     *
     * @return self
     */
    public function setGrossMargin($gross_margin)
    {
        if (is_null($gross_margin)) {
            throw new \InvalidArgumentException('non-nullable gross_margin cannot be null');
        }
        $this->container['gross_margin'] = $gross_margin;

        return $this;
    }

    /**
     * Gets gross_profit_to_asset
     *
     * @return float|null
     */
    public function getGrossProfitToAsset()
    {
        return $this->container['gross_profit_to_asset'];
    }

    /**
     * Sets gross_profit_to_asset
     *
     * @param float|null $gross_profit_to_asset The ratio of a company's gross profit to total assets
     *
     * @return self
     */
    public function setGrossProfitToAsset($gross_profit_to_asset)
    {
        if (is_null($gross_profit_to_asset)) {
            throw new \InvalidArgumentException('non-nullable gross_profit_to_asset cannot be null');
        }
        $this->container['gross_profit_to_asset'] = $gross_profit_to_asset;

        return $this;
    }

    /**
     * Gets inventory_to_revenue
     *
     * @return float|null
     */
    public function getInventoryToRevenue()
    {
        return $this->container['inventory_to_revenue'];
    }

    /**
     * Sets inventory_to_revenue
     *
     * @param float|null $inventory_to_revenue The ratio of total inventory to total revenues
     *
     * @return self
     */
    public function setInventoryToRevenue($inventory_to_revenue)
    {
        if (is_null($inventory_to_revenue)) {
            throw new \InvalidArgumentException('non-nullable inventory_to_revenue cannot be null');
        }
        $this->container['inventory_to_revenue'] = $inventory_to_revenue;

        return $this;
    }

    /**
     * Gets inventory_turnover
     *
     * @return float|null
     */
    public function getInventoryTurnover()
    {
        return $this->container['inventory_turnover'];
    }

    /**
     * Sets inventory_turnover
     *
     * @param float|null $inventory_turnover The ratio of cost of goods sold to total inventories
     *
     * @return self
     */
    public function setInventoryTurnover($inventory_turnover)
    {
        if (is_null($inventory_turnover)) {
            throw new \InvalidArgumentException('non-nullable inventory_turnover cannot be null');
        }
        $this->container['inventory_turnover'] = $inventory_turnover;

        return $this;
    }

    /**
     * Gets liabilities_to_assets
     *
     * @return float|null
     */
    public function getLiabilitiesToAssets()
    {
        return $this->container['liabilities_to_assets'];
    }

    /**
     * Sets liabilities_to_assets
     *
     * @param float|null $liabilities_to_assets liabilities_to_assets
     *
     * @return self
     */
    public function setLiabilitiesToAssets($liabilities_to_assets)
    {
        if (is_null($liabilities_to_assets)) {
            throw new \InvalidArgumentException('non-nullable liabilities_to_assets cannot be null');
        }
        $this->container['liabilities_to_assets'] = $liabilities_to_assets;

        return $this;
    }

    /**
     * Gets net_margin
     *
     * @return float|null
     */
    public function getNetMargin()
    {
        return $this->container['net_margin'];
    }

    /**
     * Sets net_margin
     *
     * @param float|null $net_margin Net margin is calculated as Net Income divided by its Revenue.
     *
     * @return self
     */
    public function setNetMargin($net_margin)
    {
        if (is_null($net_margin)) {
            throw new \InvalidArgumentException('non-nullable net_margin cannot be null');
        }
        $this->container['net_margin'] = $net_margin;

        return $this;
    }

    /**
     * Gets operating_margin
     *
     * @return float|null
     */
    public function getOperatingMargin()
    {
        return $this->container['operating_margin'];
    }

    /**
     * Sets operating_margin
     *
     * @param float|null $operating_margin Operating Margin % is calculated as Operating Income divided by its Revenue.
     *
     * @return self
     */
    public function setOperatingMargin($operating_margin)
    {
        if (is_null($operating_margin)) {
            throw new \InvalidArgumentException('non-nullable operating_margin cannot be null');
        }
        $this->container['operating_margin'] = $operating_margin;

        return $this;
    }

    /**
     * Gets payout
     *
     * @return float|null
     */
    public function getPayout()
    {
        return $this->container['payout'];
    }

    /**
     * Sets payout
     *
     * @param float|null $payout The dividend payout ratio is the ratio of the total amount of dividends paid out to shareholders relative to the net income of the company.
     *
     * @return self
     */
    public function setPayout($payout)
    {
        if (is_null($payout)) {
            throw new \InvalidArgumentException('non-nullable payout cannot be null');
        }
        $this->container['payout'] = $payout;

        return $this;
    }

    /**
     * Gets rd2rev
     *
     * @return float|null
     */
    public function getRd2rev()
    {
        return $this->container['rd2rev'];
    }

    /**
     * Sets rd2rev
     *
     * @param float|null $rd2rev rd2rev
     *
     * @return self
     */
    public function setRd2rev($rd2rev)
    {
        if (is_null($rd2rev)) {
            throw new \InvalidArgumentException('non-nullable rd2rev cannot be null');
        }
        $this->container['rd2rev'] = $rd2rev;

        return $this;
    }

    /**
     * Gets receivables_turnover
     *
     * @return float|null
     */
    public function getReceivablesTurnover()
    {
        return $this->container['receivables_turnover'];
    }

    /**
     * Sets receivables_turnover
     *
     * @param float|null $receivables_turnover The accounts receivables turnover ratio measures the number of times a company collects its average accounts receivable balance. It is calculated as Revenue divided by Average Accounts Receivable.
     *
     * @return self
     */
    public function setReceivablesTurnover($receivables_turnover)
    {
        if (is_null($receivables_turnover)) {
            throw new \InvalidArgumentException('non-nullable receivables_turnover cannot be null');
        }
        $this->container['receivables_turnover'] = $receivables_turnover;

        return $this;
    }

    /**
     * Gets return_on_tangible_asset
     *
     * @return float|null
     */
    public function getReturnOnTangibleAsset()
    {
        return $this->container['return_on_tangible_asset'];
    }

    /**
     * Sets return_on_tangible_asset
     *
     * @param float|null $return_on_tangible_asset Return on tangible assets is calculated as Net Income divided by its average total tangible assets. Total tangible assets equals to Total Assets minus Intangible Assets.
     *
     * @return self
     */
    public function setReturnOnTangibleAsset($return_on_tangible_asset)
    {
        if (is_null($return_on_tangible_asset)) {
            throw new \InvalidArgumentException('non-nullable return_on_tangible_asset cannot be null');
        }
        $this->container['return_on_tangible_asset'] = $return_on_tangible_asset;

        return $this;
    }

    /**
     * Gets return_on_tangible_equity
     *
     * @return float|null
     */
    public function getReturnOnTangibleEquity()
    {
        return $this->container['return_on_tangible_equity'];
    }

    /**
     * Sets return_on_tangible_equity
     *
     * @param float|null $return_on_tangible_equity Return on tangible equity is calculated as Net Income attributable to Common Stockholders divided by its average total shareholder tangible equity.
     *
     * @return self
     */
    public function setReturnOnTangibleEquity($return_on_tangible_equity)
    {
        if (is_null($return_on_tangible_equity)) {
            throw new \InvalidArgumentException('non-nullable return_on_tangible_equity cannot be null');
        }
        $this->container['return_on_tangible_equity'] = $return_on_tangible_equity;

        return $this;
    }

    /**
     * Gets roa
     *
     * @return float|null
     */
    public function getRoa()
    {
        return $this->container['roa'];
    }

    /**
     * Sets roa
     *
     * @param float|null $roa Return on assets is calculated as Net Income divided by its Total Assets.
     *
     * @return self
     */
    public function setRoa($roa)
    {
        if (is_null($roa)) {
            throw new \InvalidArgumentException('non-nullable roa cannot be null');
        }
        $this->container['roa'] = $roa;

        return $this;
    }

    /**
     * Gets roc_joel
     *
     * @return float|null
     */
    public function getRocJoel()
    {
        return $this->container['roc_joel'];
    }

    /**
     * Sets roc_joel
     *
     * @param float|null $roc_joel Joel Greenblatt defined Return on Capital differently in his book The Little Book That Still Beats the Market (Little Books. Big Profits). He defines Return on Capital as EBIT divided by the total of Property, Plant and Equipment and net working capital.
     *
     * @return self
     */
    public function setRocJoel($roc_joel)
    {
        if (is_null($roc_joel)) {
            throw new \InvalidArgumentException('non-nullable roc_joel cannot be null');
        }
        $this->container['roc_joel'] = $roc_joel;

        return $this;
    }

    /**
     * Gets roce
     *
     * @return float|null
     */
    public function getRoce()
    {
        return $this->container['roce'];
    }

    /**
     * Sets roce
     *
     * @param float|null $roce ROCE % measures how well a company generates profits from its capital.
     *
     * @return self
     */
    public function setRoce($roce)
    {
        if (is_null($roce)) {
            throw new \InvalidArgumentException('non-nullable roce cannot be null');
        }
        $this->container['roce'] = $roce;

        return $this;
    }

    /**
     * Gets roe
     *
     * @return float|null
     */
    public function getRoe()
    {
        return $this->container['roe'];
    }

    /**
     * Sets roe
     *
     * @param float|null $roe roe
     *
     * @return self
     */
    public function setRoe($roe)
    {
        if (is_null($roe)) {
            throw new \InvalidArgumentException('non-nullable roe cannot be null');
        }
        $this->container['roe'] = $roe;

        return $this;
    }

    /**
     * Gets roe_adj
     *
     * @return float|null
     */
    public function getRoeAdj()
    {
        return $this->container['roe_adj'];
    }

    /**
     * Sets roe_adj
     *
     * @param float|null $roe_adj The return on equity adjusted to book values
     *
     * @return self
     */
    public function setRoeAdj($roe_adj)
    {
        if (is_null($roe_adj)) {
            throw new \InvalidArgumentException('non-nullable roe_adj cannot be null');
        }
        $this->container['roe_adj'] = $roe_adj;

        return $this;
    }

    /**
     * Gets roic
     *
     * @return float|null
     */
    public function getRoic()
    {
        return $this->container['roic'];
    }

    /**
     * Sets roic
     *
     * @param float|null $roic Return on Invested Capital (ROIC) is calculated as follows:    Return on Invested Capital (ROIC) = (EBIT - Adjusted Taxes) / (Book Value of Debt + Book Value of Equity - Cash)
     *
     * @return self
     */
    public function setRoic($roic)
    {
        if (is_null($roic)) {
            throw new \InvalidArgumentException('non-nullable roic cannot be null');
        }
        $this->container['roic'] = $roic;

        return $this;
    }

    /**
     * Gets roiic_1y
     *
     * @return float|null
     */
    public function getRoiic1y()
    {
        return $this->container['roiic_1y'];
    }

    /**
     * Sets roiic_1y
     *
     * @param float|null $roiic_1y 1-Year Return on Invested Incremental Capital (1-Year ROIIC %) measures the change in earnings as a percentage of change in investment over 1-year.
     *
     * @return self
     */
    public function setRoiic1y($roiic_1y)
    {
        if (is_null($roiic_1y)) {
            throw new \InvalidArgumentException('non-nullable roiic_1y cannot be null');
        }
        $this->container['roiic_1y'] = $roiic_1y;

        return $this;
    }

    /**
     * Gets rore_5y
     *
     * @return float|null
     */
    public function getRore5y()
    {
        return $this->container['rore_5y'];
    }

    /**
     * Sets rore_5y
     *
     * @param float|null $rore_5y Return on Retained Earnings (RORE) is an indicator of a company's growth potential, it shows how much a company earns by reinvesting its retained earnings.
     *
     * @return self
     */
    public function setRore5y($rore_5y)
    {
        if (is_null($rore_5y)) {
            throw new \InvalidArgumentException('non-nullable rore_5y cannot be null');
        }
        $this->container['rore_5y'] = $rore_5y;

        return $this;
    }

    /**
     * Gets turnover
     *
     * @return float|null
     */
    public function getTurnover()
    {
        return $this->container['turnover'];
    }

    /**
     * Sets turnover
     *
     * @param float|null $turnover Asset Turnover measures how quickly a company turns over its asset through sales. It is defined as     <b>Asset Turnover = Sales / {Total Assets}</b>    Companies with low profit margins tend to have high asset turnover, while those with high profit margins have low asset turnover. Companies in the retail industry tend to have a very high turnover ratio.
     *
     * @return self
     */
    public function setTurnover($turnover)
    {
        if (is_null($turnover)) {
            throw new \InvalidArgumentException('non-nullable turnover cannot be null');
        }
        $this->container['turnover'] = $turnover;

        return $this;
    }

    /**
     * Gets wacc
     *
     * @return float|null
     */
    public function getWacc()
    {
        return $this->container['wacc'];
    }

    /**
     * Sets wacc
     *
     * @param float|null $wacc The weighted average cost of capital (WACC) is the rate that a company is expected to pay on average to all its security holders to finance its assets.
     *
     * @return self
     */
    public function setWacc($wacc)
    {
        if (is_null($wacc)) {
            throw new \InvalidArgumentException('non-nullable wacc cannot be null');
        }
        $this->container['wacc'] = $wacc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


