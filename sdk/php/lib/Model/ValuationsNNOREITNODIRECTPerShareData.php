<?php
/**
 * ValuationsNNOREITNODIRECTPerShareData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gurufocus Data Package API
 *
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ValuationsNNOREITNODIRECTPerShareData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ValuationsNNOREITNODIRECTPerShareData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'valuations_N_NO_REIT_NO_DIRECT_per_share_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'book_value_per_share' => 'float',
        'cash_flow_from_operations_per_share' => 'float',
        'cash_per_share' => 'float',
        'dividends_per_share' => 'float',
        'earning_per_share_diluted' => 'float',
        'ebit_per_share' => 'float',
        'ebitda_per_share' => 'float',
        'eps_without_nri' => 'float',
        'free_cash_flow_per_share' => 'float',
        'month_end_stock_price' => 'float',
        'owner_earnings' => 'float',
        'revenue_per_share' => 'float',
        'tangibles_book_per_share' => 'float',
        'total_debt_per_share' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'book_value_per_share' => null,
        'cash_flow_from_operations_per_share' => null,
        'cash_per_share' => null,
        'dividends_per_share' => null,
        'earning_per_share_diluted' => null,
        'ebit_per_share' => null,
        'ebitda_per_share' => null,
        'eps_without_nri' => null,
        'free_cash_flow_per_share' => null,
        'month_end_stock_price' => null,
        'owner_earnings' => null,
        'revenue_per_share' => null,
        'tangibles_book_per_share' => null,
        'total_debt_per_share' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'book_value_per_share' => false,
        'cash_flow_from_operations_per_share' => false,
        'cash_per_share' => false,
        'dividends_per_share' => false,
        'earning_per_share_diluted' => false,
        'ebit_per_share' => false,
        'ebitda_per_share' => false,
        'eps_without_nri' => false,
        'free_cash_flow_per_share' => false,
        'month_end_stock_price' => false,
        'owner_earnings' => false,
        'revenue_per_share' => false,
        'tangibles_book_per_share' => false,
        'total_debt_per_share' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'book_value_per_share' => 'book_value_per_share',
        'cash_flow_from_operations_per_share' => 'cash_flow_from_operations_per_share',
        'cash_per_share' => 'cash_per_share',
        'dividends_per_share' => 'dividends_per_share',
        'earning_per_share_diluted' => 'earning_per_share_diluted',
        'ebit_per_share' => 'ebit_per_share',
        'ebitda_per_share' => 'ebitda_per_share',
        'eps_without_nri' => 'eps_without_nri',
        'free_cash_flow_per_share' => 'free_cash_flow_per_share',
        'month_end_stock_price' => 'month_end_stock_price',
        'owner_earnings' => 'owner_earnings',
        'revenue_per_share' => 'revenue_per_share',
        'tangibles_book_per_share' => 'tangibles_book_per_share',
        'total_debt_per_share' => 'total_debt_per_share'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'book_value_per_share' => 'setBookValuePerShare',
        'cash_flow_from_operations_per_share' => 'setCashFlowFromOperationsPerShare',
        'cash_per_share' => 'setCashPerShare',
        'dividends_per_share' => 'setDividendsPerShare',
        'earning_per_share_diluted' => 'setEarningPerShareDiluted',
        'ebit_per_share' => 'setEbitPerShare',
        'ebitda_per_share' => 'setEbitdaPerShare',
        'eps_without_nri' => 'setEpsWithoutNri',
        'free_cash_flow_per_share' => 'setFreeCashFlowPerShare',
        'month_end_stock_price' => 'setMonthEndStockPrice',
        'owner_earnings' => 'setOwnerEarnings',
        'revenue_per_share' => 'setRevenuePerShare',
        'tangibles_book_per_share' => 'setTangiblesBookPerShare',
        'total_debt_per_share' => 'setTotalDebtPerShare'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'book_value_per_share' => 'getBookValuePerShare',
        'cash_flow_from_operations_per_share' => 'getCashFlowFromOperationsPerShare',
        'cash_per_share' => 'getCashPerShare',
        'dividends_per_share' => 'getDividendsPerShare',
        'earning_per_share_diluted' => 'getEarningPerShareDiluted',
        'ebit_per_share' => 'getEbitPerShare',
        'ebitda_per_share' => 'getEbitdaPerShare',
        'eps_without_nri' => 'getEpsWithoutNri',
        'free_cash_flow_per_share' => 'getFreeCashFlowPerShare',
        'month_end_stock_price' => 'getMonthEndStockPrice',
        'owner_earnings' => 'getOwnerEarnings',
        'revenue_per_share' => 'getRevenuePerShare',
        'tangibles_book_per_share' => 'getTangiblesBookPerShare',
        'total_debt_per_share' => 'getTotalDebtPerShare'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('book_value_per_share', $data ?? [], null);
        $this->setIfExists('cash_flow_from_operations_per_share', $data ?? [], null);
        $this->setIfExists('cash_per_share', $data ?? [], null);
        $this->setIfExists('dividends_per_share', $data ?? [], null);
        $this->setIfExists('earning_per_share_diluted', $data ?? [], null);
        $this->setIfExists('ebit_per_share', $data ?? [], null);
        $this->setIfExists('ebitda_per_share', $data ?? [], null);
        $this->setIfExists('eps_without_nri', $data ?? [], null);
        $this->setIfExists('free_cash_flow_per_share', $data ?? [], null);
        $this->setIfExists('month_end_stock_price', $data ?? [], null);
        $this->setIfExists('owner_earnings', $data ?? [], null);
        $this->setIfExists('revenue_per_share', $data ?? [], null);
        $this->setIfExists('tangibles_book_per_share', $data ?? [], null);
        $this->setIfExists('total_debt_per_share', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets book_value_per_share
     *
     * @return float|null
     */
    public function getBookValuePerShare()
    {
        return $this->container['book_value_per_share'];
    }

    /**
     * Sets book_value_per_share
     *
     * @param float|null $book_value_per_share Per share value of a company based on common shareholders' equity in the company.
     *
     * @return self
     */
    public function setBookValuePerShare($book_value_per_share)
    {
        if (is_null($book_value_per_share)) {
            throw new \InvalidArgumentException('non-nullable book_value_per_share cannot be null');
        }
        $this->container['book_value_per_share'] = $book_value_per_share;

        return $this;
    }

    /**
     * Gets cash_flow_from_operations_per_share
     *
     * @return float|null
     */
    public function getCashFlowFromOperationsPerShare()
    {
        return $this->container['cash_flow_from_operations_per_share'];
    }

    /**
     * Sets cash_flow_from_operations_per_share
     *
     * @param float|null $cash_flow_from_operations_per_share Operating Cash Flow per Share is the amount of Operating Cash Flow per outstanding share of the company
     *
     * @return self
     */
    public function setCashFlowFromOperationsPerShare($cash_flow_from_operations_per_share)
    {
        if (is_null($cash_flow_from_operations_per_share)) {
            throw new \InvalidArgumentException('non-nullable cash_flow_from_operations_per_share cannot be null');
        }
        $this->container['cash_flow_from_operations_per_share'] = $cash_flow_from_operations_per_share;

        return $this;
    }

    /**
     * Gets cash_per_share
     *
     * @return float|null
     */
    public function getCashPerShare()
    {
        return $this->container['cash_per_share'];
    }

    /**
     * Sets cash_per_share
     *
     * @param float|null $cash_per_share cash_per_share
     *
     * @return self
     */
    public function setCashPerShare($cash_per_share)
    {
        if (is_null($cash_per_share)) {
            throw new \InvalidArgumentException('non-nullable cash_per_share cannot be null');
        }
        $this->container['cash_per_share'] = $cash_per_share;

        return $this;
    }

    /**
     * Gets dividends_per_share
     *
     * @return float|null
     */
    public function getDividendsPerShare()
    {
        return $this->container['dividends_per_share'];
    }

    /**
     * Sets dividends_per_share
     *
     * @param float|null $dividends_per_share Dividends paid to per common share
     *
     * @return self
     */
    public function setDividendsPerShare($dividends_per_share)
    {
        if (is_null($dividends_per_share)) {
            throw new \InvalidArgumentException('non-nullable dividends_per_share cannot be null');
        }
        $this->container['dividends_per_share'] = $dividends_per_share;

        return $this;
    }

    /**
     * Gets earning_per_share_diluted
     *
     * @return float|null
     */
    public function getEarningPerShareDiluted()
    {
        return $this->container['earning_per_share_diluted'];
    }

    /**
     * Sets earning_per_share_diluted
     *
     * @param float|null $earning_per_share_diluted The company's diluted earnings per share
     *
     * @return self
     */
    public function setEarningPerShareDiluted($earning_per_share_diluted)
    {
        if (is_null($earning_per_share_diluted)) {
            throw new \InvalidArgumentException('non-nullable earning_per_share_diluted cannot be null');
        }
        $this->container['earning_per_share_diluted'] = $earning_per_share_diluted;

        return $this;
    }

    /**
     * Gets ebit_per_share
     *
     * @return float|null
     */
    public function getEbitPerShare()
    {
        return $this->container['ebit_per_share'];
    }

    /**
     * Sets ebit_per_share
     *
     * @param float|null $ebit_per_share The earnings before interest and taxes divided by shares outstanding
     *
     * @return self
     */
    public function setEbitPerShare($ebit_per_share)
    {
        if (is_null($ebit_per_share)) {
            throw new \InvalidArgumentException('non-nullable ebit_per_share cannot be null');
        }
        $this->container['ebit_per_share'] = $ebit_per_share;

        return $this;
    }

    /**
     * Gets ebitda_per_share
     *
     * @return float|null
     */
    public function getEbitdaPerShare()
    {
        return $this->container['ebitda_per_share'];
    }

    /**
     * Sets ebitda_per_share
     *
     * @param float|null $ebitda_per_share EBITDA per Share is the amount of Earnings Before Interest, Taxes, Depreciation, and  Amortization (EBITDA) per outstanding share of the company™s stock.     Earnings Before Interest, Taxes, Depreciation, and  Amortization (EBITDA) is what the company earns before  it expenses interest, taxes, depreciation and amortization.  EBITDA is calculated as   EBITDA   = {Revenue} - {Cost of Goods Sold} - {Selling, General, & Admin. Expense} - {Research & Development}  = {Gross Profit} - {Selling, General, & Admin. Expense} - {Research & Development}
     *
     * @return self
     */
    public function setEbitdaPerShare($ebitda_per_share)
    {
        if (is_null($ebitda_per_share)) {
            throw new \InvalidArgumentException('non-nullable ebitda_per_share cannot be null');
        }
        $this->container['ebitda_per_share'] = $ebitda_per_share;

        return $this;
    }

    /**
     * Gets eps_without_nri
     *
     * @return float|null
     */
    public function getEpsWithoutNri()
    {
        return $this->container['eps_without_nri'];
    }

    /**
     * Sets eps_without_nri
     *
     * @param float|null $eps_without_nri Earnings Per Share (EPS) is the single most important variable used by Wall Street in determining the earnings power of a company. But investors need to be aware that Earnings per Share can be easily manipulated by adjusting depreciation and amortization rate or non-recurring items. That's why GuruFocus lists Earnings per share without Non-Recurring Items, which better reflects the company's underlying performance.    Earnings Per Share without Non-Recurring Items is the amount of earnings without non-recurring items per outstanding share of the company&#146;s stock. In calculating earnings per share without non-recurring items, the dividends of preferred stocks and non-recurring items need to subtracted from the total net income first.
     *
     * @return self
     */
    public function setEpsWithoutNri($eps_without_nri)
    {
        if (is_null($eps_without_nri)) {
            throw new \InvalidArgumentException('non-nullable eps_without_nri cannot be null');
        }
        $this->container['eps_without_nri'] = $eps_without_nri;

        return $this;
    }

    /**
     * Gets free_cash_flow_per_share
     *
     * @return float|null
     */
    public function getFreeCashFlowPerShare()
    {
        return $this->container['free_cash_flow_per_share'];
    }

    /**
     * Sets free_cash_flow_per_share
     *
     * @param float|null $free_cash_flow_per_share The company's free cash flow divided by shares outstanding
     *
     * @return self
     */
    public function setFreeCashFlowPerShare($free_cash_flow_per_share)
    {
        if (is_null($free_cash_flow_per_share)) {
            throw new \InvalidArgumentException('non-nullable free_cash_flow_per_share cannot be null');
        }
        $this->container['free_cash_flow_per_share'] = $free_cash_flow_per_share;

        return $this;
    }

    /**
     * Gets month_end_stock_price
     *
     * @return float|null
     */
    public function getMonthEndStockPrice()
    {
        return $this->container['month_end_stock_price'];
    }

    /**
     * Sets month_end_stock_price
     *
     * @param float|null $month_end_stock_price The company's share price at the final day of the month
     *
     * @return self
     */
    public function setMonthEndStockPrice($month_end_stock_price)
    {
        if (is_null($month_end_stock_price)) {
            throw new \InvalidArgumentException('non-nullable month_end_stock_price cannot be null');
        }
        $this->container['month_end_stock_price'] = $month_end_stock_price;

        return $this;
    }

    /**
     * Gets owner_earnings
     *
     * @return float|null
     */
    public function getOwnerEarnings()
    {
        return $this->container['owner_earnings'];
    }

    /**
     * Sets owner_earnings
     *
     * @param float|null $owner_earnings If we think through these questions, we can gain some insights about what may be called 'owner earnings.' These represent (A) reported earnings plus (B) depreciation, depletion, amortization, and certain other non-cash charges such as Company N's items (1) and (4) less the average annual amount of capitalized expenditures for plant and equipment, etc. that the business requires to fully maintain its long-term competitive position and its unit volume. (If the business requires additional working capital to maintain its competitive position and unit volume, the increment also should be included in (c). However, businesses following the LIFO inventory method usually do not require additional working capital if unit volume does not change.
     *
     * @return self
     */
    public function setOwnerEarnings($owner_earnings)
    {
        if (is_null($owner_earnings)) {
            throw new \InvalidArgumentException('non-nullable owner_earnings cannot be null');
        }
        $this->container['owner_earnings'] = $owner_earnings;

        return $this;
    }

    /**
     * Gets revenue_per_share
     *
     * @return float|null
     */
    public function getRevenuePerShare()
    {
        return $this->container['revenue_per_share'];
    }

    /**
     * Sets revenue_per_share
     *
     * @param float|null $revenue_per_share The company's total revenue divided by shares outstanding.
     *
     * @return self
     */
    public function setRevenuePerShare($revenue_per_share)
    {
        if (is_null($revenue_per_share)) {
            throw new \InvalidArgumentException('non-nullable revenue_per_share cannot be null');
        }
        $this->container['revenue_per_share'] = $revenue_per_share;

        return $this;
    }

    /**
     * Gets tangibles_book_per_share
     *
     * @return float|null
     */
    public function getTangiblesBookPerShare()
    {
        return $this->container['tangibles_book_per_share'];
    }

    /**
     * Sets tangibles_book_per_share
     *
     * @param float|null $tangibles_book_per_share The per share value of a company based on common shareholder's equity less intangible assets
     *
     * @return self
     */
    public function setTangiblesBookPerShare($tangibles_book_per_share)
    {
        if (is_null($tangibles_book_per_share)) {
            throw new \InvalidArgumentException('non-nullable tangibles_book_per_share cannot be null');
        }
        $this->container['tangibles_book_per_share'] = $tangibles_book_per_share;

        return $this;
    }

    /**
     * Gets total_debt_per_share
     *
     * @return float|null
     */
    public function getTotalDebtPerShare()
    {
        return $this->container['total_debt_per_share'];
    }

    /**
     * Sets total_debt_per_share
     *
     * @param float|null $total_debt_per_share The amount of long-term debt divided by the shares outstanding
     *
     * @return self
     */
    public function setTotalDebtPerShare($total_debt_per_share)
    {
        if (is_null($total_debt_per_share)) {
            throw new \InvalidArgumentException('non-nullable total_debt_per_share cannot be null');
        }
        $this->container['total_debt_per_share'] = $total_debt_per_share;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


