<?php
/**
 * StockProfileProfitability
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gurufocus Data Package API
 *
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * StockProfileProfitability Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StockProfileProfitability implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'stock_profile_profitability';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fc_fmargin' => 'float',
        'fc_fmargin_high' => 'float',
        'fc_fmargin_low' => 'float',
        'fc_fmargin_med' => 'float',
        'fc_fmargin_med_5y' => 'float',
        'net_interest_margin' => 'float',
        'cash_conversion_ratio' => 'float',
        'cash_conversion_ratio_high' => 'float',
        'cash_conversion_ratio_low' => 'float',
        'cash_conversion_ratio_med' => 'float',
        'cash_conversion_ratio_med_5y' => 'float',
        'ebit_margin' => 'float',
        'ebit_margin_high' => 'float',
        'ebit_margin_low' => 'float',
        'ebit_margin_med' => 'float',
        'ebitda_margin' => 'float',
        'ebitda_margin_high' => 'float',
        'ebitda_margin_low' => 'float',
        'ebitda_margin_med' => 'float',
        'fcf_year_num' => 'float',
        'grossmargin' => 'float',
        'grossmargin_high' => 'float',
        'grossmargin_low' => 'float',
        'grossmargin_med' => 'float',
        'grossmargin_med_5y' => 'float',
        'net_margain' => 'float',
        'net_margain_high' => 'float',
        'net_margain_low' => 'float',
        'net_margain_med' => 'float',
        'net_margain_med_5y' => 'float',
        'oprt_margain' => 'float',
        'oprt_margain_high' => 'float',
        'oprt_margain_low' => 'float',
        'oprt_margain_med' => 'float',
        'oprt_margain_med_5y' => 'float',
        'pretax_margain' => 'float',
        'pretax_margain_high' => 'float',
        'pretax_margain_low' => 'float',
        'pretax_margain_med' => 'float',
        'pretax_margain_med_5y' => 'float',
        'profit_year_num' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'fc_fmargin' => null,
        'fc_fmargin_high' => null,
        'fc_fmargin_low' => null,
        'fc_fmargin_med' => null,
        'fc_fmargin_med_5y' => null,
        'net_interest_margin' => null,
        'cash_conversion_ratio' => null,
        'cash_conversion_ratio_high' => null,
        'cash_conversion_ratio_low' => null,
        'cash_conversion_ratio_med' => null,
        'cash_conversion_ratio_med_5y' => null,
        'ebit_margin' => null,
        'ebit_margin_high' => null,
        'ebit_margin_low' => null,
        'ebit_margin_med' => null,
        'ebitda_margin' => null,
        'ebitda_margin_high' => null,
        'ebitda_margin_low' => null,
        'ebitda_margin_med' => null,
        'fcf_year_num' => null,
        'grossmargin' => null,
        'grossmargin_high' => null,
        'grossmargin_low' => null,
        'grossmargin_med' => null,
        'grossmargin_med_5y' => null,
        'net_margain' => null,
        'net_margain_high' => null,
        'net_margain_low' => null,
        'net_margain_med' => null,
        'net_margain_med_5y' => null,
        'oprt_margain' => null,
        'oprt_margain_high' => null,
        'oprt_margain_low' => null,
        'oprt_margain_med' => null,
        'oprt_margain_med_5y' => null,
        'pretax_margain' => null,
        'pretax_margain_high' => null,
        'pretax_margain_low' => null,
        'pretax_margain_med' => null,
        'pretax_margain_med_5y' => null,
        'profit_year_num' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'fc_fmargin' => false,
        'fc_fmargin_high' => false,
        'fc_fmargin_low' => false,
        'fc_fmargin_med' => false,
        'fc_fmargin_med_5y' => false,
        'net_interest_margin' => false,
        'cash_conversion_ratio' => false,
        'cash_conversion_ratio_high' => false,
        'cash_conversion_ratio_low' => false,
        'cash_conversion_ratio_med' => false,
        'cash_conversion_ratio_med_5y' => false,
        'ebit_margin' => false,
        'ebit_margin_high' => false,
        'ebit_margin_low' => false,
        'ebit_margin_med' => false,
        'ebitda_margin' => false,
        'ebitda_margin_high' => false,
        'ebitda_margin_low' => false,
        'ebitda_margin_med' => false,
        'fcf_year_num' => false,
        'grossmargin' => false,
        'grossmargin_high' => false,
        'grossmargin_low' => false,
        'grossmargin_med' => false,
        'grossmargin_med_5y' => false,
        'net_margain' => false,
        'net_margain_high' => false,
        'net_margain_low' => false,
        'net_margain_med' => false,
        'net_margain_med_5y' => false,
        'oprt_margain' => false,
        'oprt_margain_high' => false,
        'oprt_margain_low' => false,
        'oprt_margain_med' => false,
        'oprt_margain_med_5y' => false,
        'pretax_margain' => false,
        'pretax_margain_high' => false,
        'pretax_margain_low' => false,
        'pretax_margain_med' => false,
        'pretax_margain_med_5y' => false,
        'profit_year_num' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fc_fmargin' => 'FCFmargin',
        'fc_fmargin_high' => 'FCFmargin_high',
        'fc_fmargin_low' => 'FCFmargin_low',
        'fc_fmargin_med' => 'FCFmargin_med',
        'fc_fmargin_med_5y' => 'FCFmargin_med_5y',
        'net_interest_margin' => 'NetInterestMargin',
        'cash_conversion_ratio' => 'cash_conversion_ratio',
        'cash_conversion_ratio_high' => 'cash_conversion_ratio_high',
        'cash_conversion_ratio_low' => 'cash_conversion_ratio_low',
        'cash_conversion_ratio_med' => 'cash_conversion_ratio_med',
        'cash_conversion_ratio_med_5y' => 'cash_conversion_ratio_med_5y',
        'ebit_margin' => 'ebit_margin',
        'ebit_margin_high' => 'ebit_margin_high',
        'ebit_margin_low' => 'ebit_margin_low',
        'ebit_margin_med' => 'ebit_margin_med',
        'ebitda_margin' => 'ebitda_margin',
        'ebitda_margin_high' => 'ebitda_margin_high',
        'ebitda_margin_low' => 'ebitda_margin_low',
        'ebitda_margin_med' => 'ebitda_margin_med',
        'fcf_year_num' => 'fcf_year_num',
        'grossmargin' => 'grossmargin',
        'grossmargin_high' => 'grossmargin_high',
        'grossmargin_low' => 'grossmargin_low',
        'grossmargin_med' => 'grossmargin_med',
        'grossmargin_med_5y' => 'grossmargin_med_5y',
        'net_margain' => 'net_margain',
        'net_margain_high' => 'net_margain_high',
        'net_margain_low' => 'net_margain_low',
        'net_margain_med' => 'net_margain_med',
        'net_margain_med_5y' => 'net_margain_med_5y',
        'oprt_margain' => 'oprt_margain',
        'oprt_margain_high' => 'oprt_margain_high',
        'oprt_margain_low' => 'oprt_margain_low',
        'oprt_margain_med' => 'oprt_margain_med',
        'oprt_margain_med_5y' => 'oprt_margain_med_5y',
        'pretax_margain' => 'pretax_margain',
        'pretax_margain_high' => 'pretax_margain_high',
        'pretax_margain_low' => 'pretax_margain_low',
        'pretax_margain_med' => 'pretax_margain_med',
        'pretax_margain_med_5y' => 'pretax_margain_med_5y',
        'profit_year_num' => 'profit_year_num'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fc_fmargin' => 'setFcFmargin',
        'fc_fmargin_high' => 'setFcFmarginHigh',
        'fc_fmargin_low' => 'setFcFmarginLow',
        'fc_fmargin_med' => 'setFcFmarginMed',
        'fc_fmargin_med_5y' => 'setFcFmarginMed5y',
        'net_interest_margin' => 'setNetInterestMargin',
        'cash_conversion_ratio' => 'setCashConversionRatio',
        'cash_conversion_ratio_high' => 'setCashConversionRatioHigh',
        'cash_conversion_ratio_low' => 'setCashConversionRatioLow',
        'cash_conversion_ratio_med' => 'setCashConversionRatioMed',
        'cash_conversion_ratio_med_5y' => 'setCashConversionRatioMed5y',
        'ebit_margin' => 'setEbitMargin',
        'ebit_margin_high' => 'setEbitMarginHigh',
        'ebit_margin_low' => 'setEbitMarginLow',
        'ebit_margin_med' => 'setEbitMarginMed',
        'ebitda_margin' => 'setEbitdaMargin',
        'ebitda_margin_high' => 'setEbitdaMarginHigh',
        'ebitda_margin_low' => 'setEbitdaMarginLow',
        'ebitda_margin_med' => 'setEbitdaMarginMed',
        'fcf_year_num' => 'setFcfYearNum',
        'grossmargin' => 'setGrossmargin',
        'grossmargin_high' => 'setGrossmarginHigh',
        'grossmargin_low' => 'setGrossmarginLow',
        'grossmargin_med' => 'setGrossmarginMed',
        'grossmargin_med_5y' => 'setGrossmarginMed5y',
        'net_margain' => 'setNetMargain',
        'net_margain_high' => 'setNetMargainHigh',
        'net_margain_low' => 'setNetMargainLow',
        'net_margain_med' => 'setNetMargainMed',
        'net_margain_med_5y' => 'setNetMargainMed5y',
        'oprt_margain' => 'setOprtMargain',
        'oprt_margain_high' => 'setOprtMargainHigh',
        'oprt_margain_low' => 'setOprtMargainLow',
        'oprt_margain_med' => 'setOprtMargainMed',
        'oprt_margain_med_5y' => 'setOprtMargainMed5y',
        'pretax_margain' => 'setPretaxMargain',
        'pretax_margain_high' => 'setPretaxMargainHigh',
        'pretax_margain_low' => 'setPretaxMargainLow',
        'pretax_margain_med' => 'setPretaxMargainMed',
        'pretax_margain_med_5y' => 'setPretaxMargainMed5y',
        'profit_year_num' => 'setProfitYearNum'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fc_fmargin' => 'getFcFmargin',
        'fc_fmargin_high' => 'getFcFmarginHigh',
        'fc_fmargin_low' => 'getFcFmarginLow',
        'fc_fmargin_med' => 'getFcFmarginMed',
        'fc_fmargin_med_5y' => 'getFcFmarginMed5y',
        'net_interest_margin' => 'getNetInterestMargin',
        'cash_conversion_ratio' => 'getCashConversionRatio',
        'cash_conversion_ratio_high' => 'getCashConversionRatioHigh',
        'cash_conversion_ratio_low' => 'getCashConversionRatioLow',
        'cash_conversion_ratio_med' => 'getCashConversionRatioMed',
        'cash_conversion_ratio_med_5y' => 'getCashConversionRatioMed5y',
        'ebit_margin' => 'getEbitMargin',
        'ebit_margin_high' => 'getEbitMarginHigh',
        'ebit_margin_low' => 'getEbitMarginLow',
        'ebit_margin_med' => 'getEbitMarginMed',
        'ebitda_margin' => 'getEbitdaMargin',
        'ebitda_margin_high' => 'getEbitdaMarginHigh',
        'ebitda_margin_low' => 'getEbitdaMarginLow',
        'ebitda_margin_med' => 'getEbitdaMarginMed',
        'fcf_year_num' => 'getFcfYearNum',
        'grossmargin' => 'getGrossmargin',
        'grossmargin_high' => 'getGrossmarginHigh',
        'grossmargin_low' => 'getGrossmarginLow',
        'grossmargin_med' => 'getGrossmarginMed',
        'grossmargin_med_5y' => 'getGrossmarginMed5y',
        'net_margain' => 'getNetMargain',
        'net_margain_high' => 'getNetMargainHigh',
        'net_margain_low' => 'getNetMargainLow',
        'net_margain_med' => 'getNetMargainMed',
        'net_margain_med_5y' => 'getNetMargainMed5y',
        'oprt_margain' => 'getOprtMargain',
        'oprt_margain_high' => 'getOprtMargainHigh',
        'oprt_margain_low' => 'getOprtMargainLow',
        'oprt_margain_med' => 'getOprtMargainMed',
        'oprt_margain_med_5y' => 'getOprtMargainMed5y',
        'pretax_margain' => 'getPretaxMargain',
        'pretax_margain_high' => 'getPretaxMargainHigh',
        'pretax_margain_low' => 'getPretaxMargainLow',
        'pretax_margain_med' => 'getPretaxMargainMed',
        'pretax_margain_med_5y' => 'getPretaxMargainMed5y',
        'profit_year_num' => 'getProfitYearNum'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('fc_fmargin', $data ?? [], null);
        $this->setIfExists('fc_fmargin_high', $data ?? [], null);
        $this->setIfExists('fc_fmargin_low', $data ?? [], null);
        $this->setIfExists('fc_fmargin_med', $data ?? [], null);
        $this->setIfExists('fc_fmargin_med_5y', $data ?? [], null);
        $this->setIfExists('net_interest_margin', $data ?? [], null);
        $this->setIfExists('cash_conversion_ratio', $data ?? [], null);
        $this->setIfExists('cash_conversion_ratio_high', $data ?? [], null);
        $this->setIfExists('cash_conversion_ratio_low', $data ?? [], null);
        $this->setIfExists('cash_conversion_ratio_med', $data ?? [], null);
        $this->setIfExists('cash_conversion_ratio_med_5y', $data ?? [], null);
        $this->setIfExists('ebit_margin', $data ?? [], null);
        $this->setIfExists('ebit_margin_high', $data ?? [], null);
        $this->setIfExists('ebit_margin_low', $data ?? [], null);
        $this->setIfExists('ebit_margin_med', $data ?? [], null);
        $this->setIfExists('ebitda_margin', $data ?? [], null);
        $this->setIfExists('ebitda_margin_high', $data ?? [], null);
        $this->setIfExists('ebitda_margin_low', $data ?? [], null);
        $this->setIfExists('ebitda_margin_med', $data ?? [], null);
        $this->setIfExists('fcf_year_num', $data ?? [], null);
        $this->setIfExists('grossmargin', $data ?? [], null);
        $this->setIfExists('grossmargin_high', $data ?? [], null);
        $this->setIfExists('grossmargin_low', $data ?? [], null);
        $this->setIfExists('grossmargin_med', $data ?? [], null);
        $this->setIfExists('grossmargin_med_5y', $data ?? [], null);
        $this->setIfExists('net_margain', $data ?? [], null);
        $this->setIfExists('net_margain_high', $data ?? [], null);
        $this->setIfExists('net_margain_low', $data ?? [], null);
        $this->setIfExists('net_margain_med', $data ?? [], null);
        $this->setIfExists('net_margain_med_5y', $data ?? [], null);
        $this->setIfExists('oprt_margain', $data ?? [], null);
        $this->setIfExists('oprt_margain_high', $data ?? [], null);
        $this->setIfExists('oprt_margain_low', $data ?? [], null);
        $this->setIfExists('oprt_margain_med', $data ?? [], null);
        $this->setIfExists('oprt_margain_med_5y', $data ?? [], null);
        $this->setIfExists('pretax_margain', $data ?? [], null);
        $this->setIfExists('pretax_margain_high', $data ?? [], null);
        $this->setIfExists('pretax_margain_low', $data ?? [], null);
        $this->setIfExists('pretax_margain_med', $data ?? [], null);
        $this->setIfExists('pretax_margain_med_5y', $data ?? [], null);
        $this->setIfExists('profit_year_num', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fc_fmargin
     *
     * @return float|null
     */
    public function getFcFmargin()
    {
        return $this->container['fc_fmargin'];
    }

    /**
     * Sets fc_fmargin
     *
     * @param float|null $fc_fmargin FCF Margin is calculated as Free Cash Flow divided by total Revenue.
     *
     * @return self
     */
    public function setFcFmargin($fc_fmargin)
    {
        if (is_null($fc_fmargin)) {
            throw new \InvalidArgumentException('non-nullable fc_fmargin cannot be null');
        }
        $this->container['fc_fmargin'] = $fc_fmargin;

        return $this;
    }

    /**
     * Gets fc_fmargin_high
     *
     * @return float|null
     */
    public function getFcFmarginHigh()
    {
        return $this->container['fc_fmargin_high'];
    }

    /**
     * Sets fc_fmargin_high
     *
     * @param float|null $fc_fmargin_high The FCF Margin % (10y High) refers to the highest value of the FCF Margin over a 10-year period, where FCF Margin is calculated as Free Cash Flow divided by total Revenue.
     *
     * @return self
     */
    public function setFcFmarginHigh($fc_fmargin_high)
    {
        if (is_null($fc_fmargin_high)) {
            throw new \InvalidArgumentException('non-nullable fc_fmargin_high cannot be null');
        }
        $this->container['fc_fmargin_high'] = $fc_fmargin_high;

        return $this;
    }

    /**
     * Gets fc_fmargin_low
     *
     * @return float|null
     */
    public function getFcFmarginLow()
    {
        return $this->container['fc_fmargin_low'];
    }

    /**
     * Sets fc_fmargin_low
     *
     * @param float|null $fc_fmargin_low The FCF Margin % (10y Low) refers to the lowest value of FCF Margin over a 10-year period, where FCF Margin is calculated as Free Cash Flow divided by total Revenue.
     *
     * @return self
     */
    public function setFcFmarginLow($fc_fmargin_low)
    {
        if (is_null($fc_fmargin_low)) {
            throw new \InvalidArgumentException('non-nullable fc_fmargin_low cannot be null');
        }
        $this->container['fc_fmargin_low'] = $fc_fmargin_low;

        return $this;
    }

    /**
     * Gets fc_fmargin_med
     *
     * @return float|null
     */
    public function getFcFmarginMed()
    {
        return $this->container['fc_fmargin_med'];
    }

    /**
     * Sets fc_fmargin_med
     *
     * @param float|null $fc_fmargin_med The FCF Margin % (10y Median) refers to the median value of FCF Margin over a 10-year period, where FCF Margin is calculated as Free Cash Flow divided by total Revenue.
     *
     * @return self
     */
    public function setFcFmarginMed($fc_fmargin_med)
    {
        if (is_null($fc_fmargin_med)) {
            throw new \InvalidArgumentException('non-nullable fc_fmargin_med cannot be null');
        }
        $this->container['fc_fmargin_med'] = $fc_fmargin_med;

        return $this;
    }

    /**
     * Gets fc_fmargin_med_5y
     *
     * @return float|null
     */
    public function getFcFmarginMed5y()
    {
        return $this->container['fc_fmargin_med_5y'];
    }

    /**
     * Sets fc_fmargin_med_5y
     *
     * @param float|null $fc_fmargin_med_5y The median free cash flow margin over the past five years
     *
     * @return self
     */
    public function setFcFmarginMed5y($fc_fmargin_med_5y)
    {
        if (is_null($fc_fmargin_med_5y)) {
            throw new \InvalidArgumentException('non-nullable fc_fmargin_med_5y cannot be null');
        }
        $this->container['fc_fmargin_med_5y'] = $fc_fmargin_med_5y;

        return $this;
    }

    /**
     * Gets net_interest_margin
     *
     * @return float|null
     */
    public function getNetInterestMargin()
    {
        return $this->container['net_interest_margin'];
    }

    /**
     * Sets net_interest_margin
     *
     * @param float|null $net_interest_margin Net interest margin is a performance metric that examines how successful a firm's investment decisions are compared to its debt situations.
     *
     * @return self
     */
    public function setNetInterestMargin($net_interest_margin)
    {
        if (is_null($net_interest_margin)) {
            throw new \InvalidArgumentException('non-nullable net_interest_margin cannot be null');
        }
        $this->container['net_interest_margin'] = $net_interest_margin;

        return $this;
    }

    /**
     * Gets cash_conversion_ratio
     *
     * @return float|null
     */
    public function getCashConversionRatio()
    {
        return $this->container['cash_conversion_ratio'];
    }

    /**
     * Sets cash_conversion_ratio
     *
     * @param float|null $cash_conversion_ratio Cash Conversion Ratio is calculated as Free Cash Flow divided by Net Income.
     *
     * @return self
     */
    public function setCashConversionRatio($cash_conversion_ratio)
    {
        if (is_null($cash_conversion_ratio)) {
            throw new \InvalidArgumentException('non-nullable cash_conversion_ratio cannot be null');
        }
        $this->container['cash_conversion_ratio'] = $cash_conversion_ratio;

        return $this;
    }

    /**
     * Gets cash_conversion_ratio_high
     *
     * @return float|null
     */
    public function getCashConversionRatioHigh()
    {
        return $this->container['cash_conversion_ratio_high'];
    }

    /**
     * Sets cash_conversion_ratio_high
     *
     * @param float|null $cash_conversion_ratio_high The Cash Conversion Ratio (10y High) refers to the highest value of the Cash Conversion Ratio over a 10-year period, where Cash Conversion Ratio is calculated as Free Cash Flow divided by Net Income.
     *
     * @return self
     */
    public function setCashConversionRatioHigh($cash_conversion_ratio_high)
    {
        if (is_null($cash_conversion_ratio_high)) {
            throw new \InvalidArgumentException('non-nullable cash_conversion_ratio_high cannot be null');
        }
        $this->container['cash_conversion_ratio_high'] = $cash_conversion_ratio_high;

        return $this;
    }

    /**
     * Gets cash_conversion_ratio_low
     *
     * @return float|null
     */
    public function getCashConversionRatioLow()
    {
        return $this->container['cash_conversion_ratio_low'];
    }

    /**
     * Sets cash_conversion_ratio_low
     *
     * @param float|null $cash_conversion_ratio_low The Cash Conversion Ratio (10y Low) refers to the lowest value of Cash Conversion Ratio over a 10-year period, where Cash Conversion Ratio is calculated as Free Cash Flow divided by Net Income.
     *
     * @return self
     */
    public function setCashConversionRatioLow($cash_conversion_ratio_low)
    {
        if (is_null($cash_conversion_ratio_low)) {
            throw new \InvalidArgumentException('non-nullable cash_conversion_ratio_low cannot be null');
        }
        $this->container['cash_conversion_ratio_low'] = $cash_conversion_ratio_low;

        return $this;
    }

    /**
     * Gets cash_conversion_ratio_med
     *
     * @return float|null
     */
    public function getCashConversionRatioMed()
    {
        return $this->container['cash_conversion_ratio_med'];
    }

    /**
     * Sets cash_conversion_ratio_med
     *
     * @param float|null $cash_conversion_ratio_med The Cash Conversion Ratio (10y Median) refers to the median value of Cash Conversion Ratio over a 10-year period, where Cash Conversion Ratio is calculated as Free Cash Flow divided by Net Income.
     *
     * @return self
     */
    public function setCashConversionRatioMed($cash_conversion_ratio_med)
    {
        if (is_null($cash_conversion_ratio_med)) {
            throw new \InvalidArgumentException('non-nullable cash_conversion_ratio_med cannot be null');
        }
        $this->container['cash_conversion_ratio_med'] = $cash_conversion_ratio_med;

        return $this;
    }

    /**
     * Gets cash_conversion_ratio_med_5y
     *
     * @return float|null
     */
    public function getCashConversionRatioMed5y()
    {
        return $this->container['cash_conversion_ratio_med_5y'];
    }

    /**
     * Sets cash_conversion_ratio_med_5y
     *
     * @param float|null $cash_conversion_ratio_med_5y The Cash Conversion Ratio (5y Median) refers to the median value of Cash Conversion Ratio over a 5-year period, where Cash Conversion Ratio is calculated as Free Cash Flow divided by Net Income.
     *
     * @return self
     */
    public function setCashConversionRatioMed5y($cash_conversion_ratio_med_5y)
    {
        if (is_null($cash_conversion_ratio_med_5y)) {
            throw new \InvalidArgumentException('non-nullable cash_conversion_ratio_med_5y cannot be null');
        }
        $this->container['cash_conversion_ratio_med_5y'] = $cash_conversion_ratio_med_5y;

        return $this;
    }

    /**
     * Gets ebit_margin
     *
     * @return float|null
     */
    public function getEbitMargin()
    {
        return $this->container['ebit_margin'];
    }

    /**
     * Sets ebit_margin
     *
     * @param float|null $ebit_margin ebit_margin
     *
     * @return self
     */
    public function setEbitMargin($ebit_margin)
    {
        if (is_null($ebit_margin)) {
            throw new \InvalidArgumentException('non-nullable ebit_margin cannot be null');
        }
        $this->container['ebit_margin'] = $ebit_margin;

        return $this;
    }

    /**
     * Gets ebit_margin_high
     *
     * @return float|null
     */
    public function getEbitMarginHigh()
    {
        return $this->container['ebit_margin_high'];
    }

    /**
     * Sets ebit_margin_high
     *
     * @param float|null $ebit_margin_high ebit_margin_high
     *
     * @return self
     */
    public function setEbitMarginHigh($ebit_margin_high)
    {
        if (is_null($ebit_margin_high)) {
            throw new \InvalidArgumentException('non-nullable ebit_margin_high cannot be null');
        }
        $this->container['ebit_margin_high'] = $ebit_margin_high;

        return $this;
    }

    /**
     * Gets ebit_margin_low
     *
     * @return float|null
     */
    public function getEbitMarginLow()
    {
        return $this->container['ebit_margin_low'];
    }

    /**
     * Sets ebit_margin_low
     *
     * @param float|null $ebit_margin_low ebit_margin_low
     *
     * @return self
     */
    public function setEbitMarginLow($ebit_margin_low)
    {
        if (is_null($ebit_margin_low)) {
            throw new \InvalidArgumentException('non-nullable ebit_margin_low cannot be null');
        }
        $this->container['ebit_margin_low'] = $ebit_margin_low;

        return $this;
    }

    /**
     * Gets ebit_margin_med
     *
     * @return float|null
     */
    public function getEbitMarginMed()
    {
        return $this->container['ebit_margin_med'];
    }

    /**
     * Sets ebit_margin_med
     *
     * @param float|null $ebit_margin_med ebit_margin_med
     *
     * @return self
     */
    public function setEbitMarginMed($ebit_margin_med)
    {
        if (is_null($ebit_margin_med)) {
            throw new \InvalidArgumentException('non-nullable ebit_margin_med cannot be null');
        }
        $this->container['ebit_margin_med'] = $ebit_margin_med;

        return $this;
    }

    /**
     * Gets ebitda_margin
     *
     * @return float|null
     */
    public function getEbitdaMargin()
    {
        return $this->container['ebitda_margin'];
    }

    /**
     * Sets ebitda_margin
     *
     * @param float|null $ebitda_margin ebitda_margin
     *
     * @return self
     */
    public function setEbitdaMargin($ebitda_margin)
    {
        if (is_null($ebitda_margin)) {
            throw new \InvalidArgumentException('non-nullable ebitda_margin cannot be null');
        }
        $this->container['ebitda_margin'] = $ebitda_margin;

        return $this;
    }

    /**
     * Gets ebitda_margin_high
     *
     * @return float|null
     */
    public function getEbitdaMarginHigh()
    {
        return $this->container['ebitda_margin_high'];
    }

    /**
     * Sets ebitda_margin_high
     *
     * @param float|null $ebitda_margin_high ebitda_margin_high
     *
     * @return self
     */
    public function setEbitdaMarginHigh($ebitda_margin_high)
    {
        if (is_null($ebitda_margin_high)) {
            throw new \InvalidArgumentException('non-nullable ebitda_margin_high cannot be null');
        }
        $this->container['ebitda_margin_high'] = $ebitda_margin_high;

        return $this;
    }

    /**
     * Gets ebitda_margin_low
     *
     * @return float|null
     */
    public function getEbitdaMarginLow()
    {
        return $this->container['ebitda_margin_low'];
    }

    /**
     * Sets ebitda_margin_low
     *
     * @param float|null $ebitda_margin_low ebitda_margin_low
     *
     * @return self
     */
    public function setEbitdaMarginLow($ebitda_margin_low)
    {
        if (is_null($ebitda_margin_low)) {
            throw new \InvalidArgumentException('non-nullable ebitda_margin_low cannot be null');
        }
        $this->container['ebitda_margin_low'] = $ebitda_margin_low;

        return $this;
    }

    /**
     * Gets ebitda_margin_med
     *
     * @return float|null
     */
    public function getEbitdaMarginMed()
    {
        return $this->container['ebitda_margin_med'];
    }

    /**
     * Sets ebitda_margin_med
     *
     * @param float|null $ebitda_margin_med ebitda_margin_med
     *
     * @return self
     */
    public function setEbitdaMarginMed($ebitda_margin_med)
    {
        if (is_null($ebitda_margin_med)) {
            throw new \InvalidArgumentException('non-nullable ebitda_margin_med cannot be null');
        }
        $this->container['ebitda_margin_med'] = $ebitda_margin_med;

        return $this;
    }

    /**
     * Gets fcf_year_num
     *
     * @return float|null
     */
    public function getFcfYearNum()
    {
        return $this->container['fcf_year_num'];
    }

    /**
     * Sets fcf_year_num
     *
     * @param float|null $fcf_year_num fcf_year_num
     *
     * @return self
     */
    public function setFcfYearNum($fcf_year_num)
    {
        if (is_null($fcf_year_num)) {
            throw new \InvalidArgumentException('non-nullable fcf_year_num cannot be null');
        }
        $this->container['fcf_year_num'] = $fcf_year_num;

        return $this;
    }

    /**
     * Gets grossmargin
     *
     * @return float|null
     */
    public function getGrossmargin()
    {
        return $this->container['grossmargin'];
    }

    /**
     * Sets grossmargin
     *
     * @param float|null $grossmargin Gross Margin % is calculated as gross profit divided by its revenue.
     *
     * @return self
     */
    public function setGrossmargin($grossmargin)
    {
        if (is_null($grossmargin)) {
            throw new \InvalidArgumentException('non-nullable grossmargin cannot be null');
        }
        $this->container['grossmargin'] = $grossmargin;

        return $this;
    }

    /**
     * Gets grossmargin_high
     *
     * @return float|null
     */
    public function getGrossmarginHigh()
    {
        return $this->container['grossmargin_high'];
    }

    /**
     * Sets grossmargin_high
     *
     * @param float|null $grossmargin_high Gross Margin % is calculated as gross profit divided by its revenue.
     *
     * @return self
     */
    public function setGrossmarginHigh($grossmargin_high)
    {
        if (is_null($grossmargin_high)) {
            throw new \InvalidArgumentException('non-nullable grossmargin_high cannot be null');
        }
        $this->container['grossmargin_high'] = $grossmargin_high;

        return $this;
    }

    /**
     * Gets grossmargin_low
     *
     * @return float|null
     */
    public function getGrossmarginLow()
    {
        return $this->container['grossmargin_low'];
    }

    /**
     * Sets grossmargin_low
     *
     * @param float|null $grossmargin_low Gross Margin % is calculated as gross profit divided by its revenue.
     *
     * @return self
     */
    public function setGrossmarginLow($grossmargin_low)
    {
        if (is_null($grossmargin_low)) {
            throw new \InvalidArgumentException('non-nullable grossmargin_low cannot be null');
        }
        $this->container['grossmargin_low'] = $grossmargin_low;

        return $this;
    }

    /**
     * Gets grossmargin_med
     *
     * @return float|null
     */
    public function getGrossmarginMed()
    {
        return $this->container['grossmargin_med'];
    }

    /**
     * Sets grossmargin_med
     *
     * @param float|null $grossmargin_med Gross Margin % is calculated as gross profit divided by its revenue.
     *
     * @return self
     */
    public function setGrossmarginMed($grossmargin_med)
    {
        if (is_null($grossmargin_med)) {
            throw new \InvalidArgumentException('non-nullable grossmargin_med cannot be null');
        }
        $this->container['grossmargin_med'] = $grossmargin_med;

        return $this;
    }

    /**
     * Gets grossmargin_med_5y
     *
     * @return float|null
     */
    public function getGrossmarginMed5y()
    {
        return $this->container['grossmargin_med_5y'];
    }

    /**
     * Sets grossmargin_med_5y
     *
     * @param float|null $grossmargin_med_5y The Gross Margin % (5y Median) refers to the median value of the gross margin over a period of five years, where gross margin is calculated as gross profit divided by its revenue.
     *
     * @return self
     */
    public function setGrossmarginMed5y($grossmargin_med_5y)
    {
        if (is_null($grossmargin_med_5y)) {
            throw new \InvalidArgumentException('non-nullable grossmargin_med_5y cannot be null');
        }
        $this->container['grossmargin_med_5y'] = $grossmargin_med_5y;

        return $this;
    }

    /**
     * Gets net_margain
     *
     * @return float|null
     */
    public function getNetMargain()
    {
        return $this->container['net_margain'];
    }

    /**
     * Sets net_margain
     *
     * @param float|null $net_margain Net margin is calculated as Net Income divided by its Revenue.
     *
     * @return self
     */
    public function setNetMargain($net_margain)
    {
        if (is_null($net_margain)) {
            throw new \InvalidArgumentException('non-nullable net_margain cannot be null');
        }
        $this->container['net_margain'] = $net_margain;

        return $this;
    }

    /**
     * Gets net_margain_high
     *
     * @return float|null
     */
    public function getNetMargainHigh()
    {
        return $this->container['net_margain_high'];
    }

    /**
     * Sets net_margain_high
     *
     * @param float|null $net_margain_high Net margin is calculated as Net Income divided by its Revenue.
     *
     * @return self
     */
    public function setNetMargainHigh($net_margain_high)
    {
        if (is_null($net_margain_high)) {
            throw new \InvalidArgumentException('non-nullable net_margain_high cannot be null');
        }
        $this->container['net_margain_high'] = $net_margain_high;

        return $this;
    }

    /**
     * Gets net_margain_low
     *
     * @return float|null
     */
    public function getNetMargainLow()
    {
        return $this->container['net_margain_low'];
    }

    /**
     * Sets net_margain_low
     *
     * @param float|null $net_margain_low Net margin is calculated as Net Income divided by its Revenue.
     *
     * @return self
     */
    public function setNetMargainLow($net_margain_low)
    {
        if (is_null($net_margain_low)) {
            throw new \InvalidArgumentException('non-nullable net_margain_low cannot be null');
        }
        $this->container['net_margain_low'] = $net_margain_low;

        return $this;
    }

    /**
     * Gets net_margain_med
     *
     * @return float|null
     */
    public function getNetMargainMed()
    {
        return $this->container['net_margain_med'];
    }

    /**
     * Sets net_margain_med
     *
     * @param float|null $net_margain_med Net margin is calculated as Net Income divided by its Revenue.
     *
     * @return self
     */
    public function setNetMargainMed($net_margain_med)
    {
        if (is_null($net_margain_med)) {
            throw new \InvalidArgumentException('non-nullable net_margain_med cannot be null');
        }
        $this->container['net_margain_med'] = $net_margain_med;

        return $this;
    }

    /**
     * Gets net_margain_med_5y
     *
     * @return float|null
     */
    public function getNetMargainMed5y()
    {
        return $this->container['net_margain_med_5y'];
    }

    /**
     * Sets net_margain_med_5y
     *
     * @param float|null $net_margain_med_5y The Net Margin % (5y Median) refers to the median value of the net margin over a period of five years, where net margin is calculated as net Income divided by its revenue.
     *
     * @return self
     */
    public function setNetMargainMed5y($net_margain_med_5y)
    {
        if (is_null($net_margain_med_5y)) {
            throw new \InvalidArgumentException('non-nullable net_margain_med_5y cannot be null');
        }
        $this->container['net_margain_med_5y'] = $net_margain_med_5y;

        return $this;
    }

    /**
     * Gets oprt_margain
     *
     * @return float|null
     */
    public function getOprtMargain()
    {
        return $this->container['oprt_margain'];
    }

    /**
     * Sets oprt_margain
     *
     * @param float|null $oprt_margain Operating Margin % is calculated as Operating Income divided by its Revenue.
     *
     * @return self
     */
    public function setOprtMargain($oprt_margain)
    {
        if (is_null($oprt_margain)) {
            throw new \InvalidArgumentException('non-nullable oprt_margain cannot be null');
        }
        $this->container['oprt_margain'] = $oprt_margain;

        return $this;
    }

    /**
     * Gets oprt_margain_high
     *
     * @return float|null
     */
    public function getOprtMargainHigh()
    {
        return $this->container['oprt_margain_high'];
    }

    /**
     * Sets oprt_margain_high
     *
     * @param float|null $oprt_margain_high Operating Margin % is calculated as Operating Income divided by its Revenue.
     *
     * @return self
     */
    public function setOprtMargainHigh($oprt_margain_high)
    {
        if (is_null($oprt_margain_high)) {
            throw new \InvalidArgumentException('non-nullable oprt_margain_high cannot be null');
        }
        $this->container['oprt_margain_high'] = $oprt_margain_high;

        return $this;
    }

    /**
     * Gets oprt_margain_low
     *
     * @return float|null
     */
    public function getOprtMargainLow()
    {
        return $this->container['oprt_margain_low'];
    }

    /**
     * Sets oprt_margain_low
     *
     * @param float|null $oprt_margain_low Operating Margin % is calculated as Operating Income divided by its Revenue.
     *
     * @return self
     */
    public function setOprtMargainLow($oprt_margain_low)
    {
        if (is_null($oprt_margain_low)) {
            throw new \InvalidArgumentException('non-nullable oprt_margain_low cannot be null');
        }
        $this->container['oprt_margain_low'] = $oprt_margain_low;

        return $this;
    }

    /**
     * Gets oprt_margain_med
     *
     * @return float|null
     */
    public function getOprtMargainMed()
    {
        return $this->container['oprt_margain_med'];
    }

    /**
     * Sets oprt_margain_med
     *
     * @param float|null $oprt_margain_med Operating Margin % is calculated as Operating Income divided by its Revenue.
     *
     * @return self
     */
    public function setOprtMargainMed($oprt_margain_med)
    {
        if (is_null($oprt_margain_med)) {
            throw new \InvalidArgumentException('non-nullable oprt_margain_med cannot be null');
        }
        $this->container['oprt_margain_med'] = $oprt_margain_med;

        return $this;
    }

    /**
     * Gets oprt_margain_med_5y
     *
     * @return float|null
     */
    public function getOprtMargainMed5y()
    {
        return $this->container['oprt_margain_med_5y'];
    }

    /**
     * Sets oprt_margain_med_5y
     *
     * @param float|null $oprt_margain_med_5y Operating Margin % is calculated as Operating Income divided by its Revenue.
     *
     * @return self
     */
    public function setOprtMargainMed5y($oprt_margain_med_5y)
    {
        if (is_null($oprt_margain_med_5y)) {
            throw new \InvalidArgumentException('non-nullable oprt_margain_med_5y cannot be null');
        }
        $this->container['oprt_margain_med_5y'] = $oprt_margain_med_5y;

        return $this;
    }

    /**
     * Gets pretax_margain
     *
     * @return float|null
     */
    public function getPretaxMargain()
    {
        return $this->container['pretax_margain'];
    }

    /**
     * Sets pretax_margain
     *
     * @param float|null $pretax_margain The company's pretax earnings divided by total revenue
     *
     * @return self
     */
    public function setPretaxMargain($pretax_margain)
    {
        if (is_null($pretax_margain)) {
            throw new \InvalidArgumentException('non-nullable pretax_margain cannot be null');
        }
        $this->container['pretax_margain'] = $pretax_margain;

        return $this;
    }

    /**
     * Gets pretax_margain_high
     *
     * @return float|null
     */
    public function getPretaxMargainHigh()
    {
        return $this->container['pretax_margain_high'];
    }

    /**
     * Sets pretax_margain_high
     *
     * @param float|null $pretax_margain_high The highest pretax margin over the past 10 years
     *
     * @return self
     */
    public function setPretaxMargainHigh($pretax_margain_high)
    {
        if (is_null($pretax_margain_high)) {
            throw new \InvalidArgumentException('non-nullable pretax_margain_high cannot be null');
        }
        $this->container['pretax_margain_high'] = $pretax_margain_high;

        return $this;
    }

    /**
     * Gets pretax_margain_low
     *
     * @return float|null
     */
    public function getPretaxMargainLow()
    {
        return $this->container['pretax_margain_low'];
    }

    /**
     * Sets pretax_margain_low
     *
     * @param float|null $pretax_margain_low The lowest pretax margin over the past 10 years
     *
     * @return self
     */
    public function setPretaxMargainLow($pretax_margain_low)
    {
        if (is_null($pretax_margain_low)) {
            throw new \InvalidArgumentException('non-nullable pretax_margain_low cannot be null');
        }
        $this->container['pretax_margain_low'] = $pretax_margain_low;

        return $this;
    }

    /**
     * Gets pretax_margain_med
     *
     * @return float|null
     */
    public function getPretaxMargainMed()
    {
        return $this->container['pretax_margain_med'];
    }

    /**
     * Sets pretax_margain_med
     *
     * @param float|null $pretax_margain_med The median pretax margin over the past 10 years
     *
     * @return self
     */
    public function setPretaxMargainMed($pretax_margain_med)
    {
        if (is_null($pretax_margain_med)) {
            throw new \InvalidArgumentException('non-nullable pretax_margain_med cannot be null');
        }
        $this->container['pretax_margain_med'] = $pretax_margain_med;

        return $this;
    }

    /**
     * Gets pretax_margain_med_5y
     *
     * @return float|null
     */
    public function getPretaxMargainMed5y()
    {
        return $this->container['pretax_margain_med_5y'];
    }

    /**
     * Sets pretax_margain_med_5y
     *
     * @param float|null $pretax_margain_med_5y The Pretax Margin % (5y Median) refers to the median value of the pretax margin over a period of five years, where pretax margin is calculated as pretax Income divided by its revenue.
     *
     * @return self
     */
    public function setPretaxMargainMed5y($pretax_margain_med_5y)
    {
        if (is_null($pretax_margain_med_5y)) {
            throw new \InvalidArgumentException('non-nullable pretax_margain_med_5y cannot be null');
        }
        $this->container['pretax_margain_med_5y'] = $pretax_margain_med_5y;

        return $this;
    }

    /**
     * Gets profit_year_num
     *
     * @return float|null
     */
    public function getProfitYearNum()
    {
        return $this->container['profit_year_num'];
    }

    /**
     * Sets profit_year_num
     *
     * @param float|null $profit_year_num The number of years a company had positive earnings over the past 10 years
     *
     * @return self
     */
    public function setProfitYearNum($profit_year_num)
    {
        if (is_null($profit_year_num)) {
            throw new \InvalidArgumentException('non-nullable profit_year_num cannot be null');
        }
        $this->container['profit_year_num'] = $profit_year_num;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


