<?php
/**
 * StocksSymbolProfileGet200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Gurufocus Data Package API
 *
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * StocksSymbolProfileGet200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StocksSymbolProfileGet200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_stocks__symbol__profile_get_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'basic_information' => '\OpenAPI\Client\Model\StockProfileBasicInformation',
        'dividends' => '\OpenAPI\Client\Model\StockProfileDividends',
        'fundamental' => '\OpenAPI\Client\Model\StockProfileFundamental',
        'general' => '\OpenAPI\Client\Model\StockProfileGeneral',
        'growth' => '\OpenAPI\Client\Model\StockProfileGrowth',
        'price' => '\OpenAPI\Client\Model\StockProfilePrice',
        'profitability' => '\OpenAPI\Client\Model\StockProfileProfitability',
        'valuation_ratio' => '\OpenAPI\Client\Model\StockProfileValuationRatio'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'basic_information' => null,
        'dividends' => null,
        'fundamental' => null,
        'general' => null,
        'growth' => null,
        'price' => null,
        'profitability' => null,
        'valuation_ratio' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'basic_information' => false,
        'dividends' => false,
        'fundamental' => false,
        'general' => false,
        'growth' => false,
        'price' => false,
        'profitability' => false,
        'valuation_ratio' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'basic_information' => 'basic_information',
        'dividends' => 'dividends',
        'fundamental' => 'fundamental',
        'general' => 'general',
        'growth' => 'growth',
        'price' => 'price',
        'profitability' => 'profitability',
        'valuation_ratio' => 'valuation_ratio'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'basic_information' => 'setBasicInformation',
        'dividends' => 'setDividends',
        'fundamental' => 'setFundamental',
        'general' => 'setGeneral',
        'growth' => 'setGrowth',
        'price' => 'setPrice',
        'profitability' => 'setProfitability',
        'valuation_ratio' => 'setValuationRatio'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'basic_information' => 'getBasicInformation',
        'dividends' => 'getDividends',
        'fundamental' => 'getFundamental',
        'general' => 'getGeneral',
        'growth' => 'getGrowth',
        'price' => 'getPrice',
        'profitability' => 'getProfitability',
        'valuation_ratio' => 'getValuationRatio'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('basic_information', $data ?? [], null);
        $this->setIfExists('dividends', $data ?? [], null);
        $this->setIfExists('fundamental', $data ?? [], null);
        $this->setIfExists('general', $data ?? [], null);
        $this->setIfExists('growth', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('profitability', $data ?? [], null);
        $this->setIfExists('valuation_ratio', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets basic_information
     *
     * @return \OpenAPI\Client\Model\StockProfileBasicInformation|null
     */
    public function getBasicInformation()
    {
        return $this->container['basic_information'];
    }

    /**
     * Sets basic_information
     *
     * @param \OpenAPI\Client\Model\StockProfileBasicInformation|null $basic_information basic_information
     *
     * @return self
     */
    public function setBasicInformation($basic_information)
    {
        if (is_null($basic_information)) {
            throw new \InvalidArgumentException('non-nullable basic_information cannot be null');
        }
        $this->container['basic_information'] = $basic_information;

        return $this;
    }

    /**
     * Gets dividends
     *
     * @return \OpenAPI\Client\Model\StockProfileDividends|null
     */
    public function getDividends()
    {
        return $this->container['dividends'];
    }

    /**
     * Sets dividends
     *
     * @param \OpenAPI\Client\Model\StockProfileDividends|null $dividends dividends
     *
     * @return self
     */
    public function setDividends($dividends)
    {
        if (is_null($dividends)) {
            throw new \InvalidArgumentException('non-nullable dividends cannot be null');
        }
        $this->container['dividends'] = $dividends;

        return $this;
    }

    /**
     * Gets fundamental
     *
     * @return \OpenAPI\Client\Model\StockProfileFundamental|null
     */
    public function getFundamental()
    {
        return $this->container['fundamental'];
    }

    /**
     * Sets fundamental
     *
     * @param \OpenAPI\Client\Model\StockProfileFundamental|null $fundamental fundamental
     *
     * @return self
     */
    public function setFundamental($fundamental)
    {
        if (is_null($fundamental)) {
            throw new \InvalidArgumentException('non-nullable fundamental cannot be null');
        }
        $this->container['fundamental'] = $fundamental;

        return $this;
    }

    /**
     * Gets general
     *
     * @return \OpenAPI\Client\Model\StockProfileGeneral|null
     */
    public function getGeneral()
    {
        return $this->container['general'];
    }

    /**
     * Sets general
     *
     * @param \OpenAPI\Client\Model\StockProfileGeneral|null $general general
     *
     * @return self
     */
    public function setGeneral($general)
    {
        if (is_null($general)) {
            throw new \InvalidArgumentException('non-nullable general cannot be null');
        }
        $this->container['general'] = $general;

        return $this;
    }

    /**
     * Gets growth
     *
     * @return \OpenAPI\Client\Model\StockProfileGrowth|null
     */
    public function getGrowth()
    {
        return $this->container['growth'];
    }

    /**
     * Sets growth
     *
     * @param \OpenAPI\Client\Model\StockProfileGrowth|null $growth growth
     *
     * @return self
     */
    public function setGrowth($growth)
    {
        if (is_null($growth)) {
            throw new \InvalidArgumentException('non-nullable growth cannot be null');
        }
        $this->container['growth'] = $growth;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \OpenAPI\Client\Model\StockProfilePrice|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \OpenAPI\Client\Model\StockProfilePrice|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets profitability
     *
     * @return \OpenAPI\Client\Model\StockProfileProfitability|null
     */
    public function getProfitability()
    {
        return $this->container['profitability'];
    }

    /**
     * Sets profitability
     *
     * @param \OpenAPI\Client\Model\StockProfileProfitability|null $profitability profitability
     *
     * @return self
     */
    public function setProfitability($profitability)
    {
        if (is_null($profitability)) {
            throw new \InvalidArgumentException('non-nullable profitability cannot be null');
        }
        $this->container['profitability'] = $profitability;

        return $this;
    }

    /**
     * Gets valuation_ratio
     *
     * @return \OpenAPI\Client\Model\StockProfileValuationRatio|null
     */
    public function getValuationRatio()
    {
        return $this->container['valuation_ratio'];
    }

    /**
     * Sets valuation_ratio
     *
     * @param \OpenAPI\Client\Model\StockProfileValuationRatio|null $valuation_ratio valuation_ratio
     *
     * @return self
     */
    public function setValuationRatio($valuation_ratio)
    {
        if (is_null($valuation_ratio)) {
            throw new \InvalidArgumentException('non-nullable valuation_ratio cannot be null');
        }
        $this->container['valuation_ratio'] = $valuation_ratio;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


