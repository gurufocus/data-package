# coding: utf-8

"""
    Gurufocus Data Package API

    API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class StockRankingsGuruFocusRankings(BaseModel):
    """
    StockRankingsGuruFocusRankings
    """ # noqa: E501
    gf_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="GF Score is a stock performance ranking system developed by GuruFocus using five aspects of valuation.")
    gf_score_high: Optional[Union[StrictFloat, StrictInt]] = None
    gf_score_low: Optional[Union[StrictFloat, StrictInt]] = None
    gf_score_med: Optional[Union[StrictFloat, StrictInt]] = None
    gf_score_med_5y: Optional[Union[StrictFloat, StrictInt]] = None
    gf_value: Optional[Union[StrictFloat, StrictInt]] = None
    gf_value_est: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The estimated GF value at the end of the fiscal year immediately following the current fiscal year. FY1 represents the fiscal year immediately following the current fiscal year.")
    gf_value_est_2nd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The estimated GF value at the end of the second fiscal year after the current fiscal year. FY2 represents the second fiscal year after the current fiscal year.")
    gf_value_est_3rd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The estimated GF value at the end of the third fiscal year after the current fiscal year. FY3 represents the third fiscal year after the current fiscal year.")
    gf_value_pct_change: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The percentage change in a company's GF value from the previous month.")
    margin_gf_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The difference between current price and intrinsic value based on GF Value model.")
    p2gf_value: Optional[Union[StrictFloat, StrictInt]] = None
    p2gf_value_est: Optional[Union[StrictFloat, StrictInt]] = None
    p2gf_value_high: Optional[Union[StrictFloat, StrictInt]] = None
    p2gf_value_low: Optional[Union[StrictFloat, StrictInt]] = None
    p2gf_value_med: Optional[Union[StrictFloat, StrictInt]] = None
    predictability: Optional[StrictStr] = Field(default=None, description="<table class=\"normal-table\">         <thead>           <tr>             <th>Rank</th>             <th>Average Gain</th>             <th>% of Stocks that are in still loss if held for 10yrs</th>           </tr>         </thead>         <tbody>           <tr>             <td>               2 Star             </td>             <td>6% per year</td>             <td>16%</td>           </tr>            <tr>             <td>               2.5 Star             </td>             <td>7.3% per year</td>             <td>18%</td>           </tr>            <tr>             <td>               3 Star             </td>             <td>8.2% per year</td>             <td>11%</td>           </tr>            <tr>             <td>               3.5 Star             </td>             <td>9.3% per year</td>             <td>9%</td>           </tr>            <tr>             <td>               4 Star             </td>             <td>9.8% per year</td>             <td>8%</td>           </tr>            <tr>             <td>               4.5 Star             </td>             <td>10.6% per year</td>             <td>10%</td>           </tr>            <tr>             <td>               5 Star             </td>             <td>12.1% per year</td>             <td>3%</td>           </tr>         </tbody>       </table>")
    rank_balancesheet: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Financial Strength is a measure of a company's overall financial health, rated on a scale of 1 to 10. It evaluates key factors such as interest coverage, debt-to-revenue ratio, and the Altman Z-Score, among others. <br>A higher score indicates a stronger financial position, with companies rated 7 or above considered financially stable and unlikely to face distress. Conversely, a score of 3 or below suggests potential financial difficulties, indicating a higher risk of distress.")
    rank_balancesheet_high: Optional[Union[StrictFloat, StrictInt]] = None
    rank_balancesheet_low: Optional[Union[StrictFloat, StrictInt]] = None
    rank_balancesheet_med: Optional[Union[StrictFloat, StrictInt]] = None
    rank_gf_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="GF Value Rank evaluates the exclusive GuruFocus valuation and performance of a stock, rated on a scale from 1 to 10. It is primarily determined by the price-to-GF value ratio and backtesting results. Stocks in the third lowest percentile of valuation receive the highest rank of 10. <br> A higher score indicates a stock with a relatively low valuation and substantial potential for outperformance. Conversely, a lower score often reflects stocks that are either highly overvalued or deeply undervalued, both of which tend to underperform.")
    rank_gf_value_high: Optional[Union[StrictFloat, StrictInt]] = None
    rank_gf_value_low: Optional[Union[StrictFloat, StrictInt]] = None
    rank_growth: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Growth Rank measures the growth of a company in terms of its revenue and profitability, rated on a scale from 1 to 10. It considers key factors such as revenue and EBITDA growth rates, as well as the consistency and predictability of revenue. <br> A higher score reflects a greater ability to drive business growth, with companies considered to have strong and sustainable expansion potential. Conversely, a lower score indicates challenges in achieving consistent growth and scalability.")
    rank_growth_high: Optional[Union[StrictFloat, StrictInt]] = None
    rank_growth_low: Optional[Union[StrictFloat, StrictInt]] = None
    rank_growth_med: Optional[Union[StrictFloat, StrictInt]] = None
    rank_momentum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Momentum Rank measures the strength and persistence of a stock's price movement over time, rated on a scale of 1 to 10. It incorporates the standardized momentum ratio and several other performance metrics. Stocks in the 70th percentile of the momentum ratio receive the highest rank of 10, based on the backtesting result of the stock price performance and the momentum ratio. <br> A higher score reflects strong price momentum and indicates greater potential for superior performance. Conversely, a lower score indicates that momentum is either too high or too low, and stocks tend to underperform.")
    rank_momentum_high: Optional[Union[StrictFloat, StrictInt]] = None
    rank_momentum_low: Optional[Union[StrictFloat, StrictInt]] = None
    rank_momentum_med: Optional[Union[StrictFloat, StrictInt]] = None
    rank_profitability: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Profitability Rank measures a company's profitability and financial stability, rated on a scale of 1 to 10. It takes into account critical factors such as operating margin and its growth, Piotroski F-Score, predictability, and revenue growth, among others. <br> A higher score indicates superior profitability, with companies rated 7 or above considered to have more robust and sustainable profit generation. Conversely, a score of 3 or lower suggests challenges in generating consistent profits.")
    rank_profitability_high: Optional[Union[StrictFloat, StrictInt]] = None
    rank_profitability_low: Optional[Union[StrictFloat, StrictInt]] = None
    rank_profitability_med: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["gf_score", "gf_score_high", "gf_score_low", "gf_score_med", "gf_score_med_5y", "gf_value", "gf_value_est", "gf_value_est_2nd", "gf_value_est_3rd", "gf_value_pct_change", "margin_gf_value", "p2gf_value", "p2gf_value_est", "p2gf_value_high", "p2gf_value_low", "p2gf_value_med", "predictability", "rank_balancesheet", "rank_balancesheet_high", "rank_balancesheet_low", "rank_balancesheet_med", "rank_gf_value", "rank_gf_value_high", "rank_gf_value_low", "rank_growth", "rank_growth_high", "rank_growth_low", "rank_growth_med", "rank_momentum", "rank_momentum_high", "rank_momentum_low", "rank_momentum_med", "rank_profitability", "rank_profitability_high", "rank_profitability_low", "rank_profitability_med"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StockRankingsGuruFocusRankings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StockRankingsGuruFocusRankings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gf_score": obj.get("gf_score"),
            "gf_score_high": obj.get("gf_score_high"),
            "gf_score_low": obj.get("gf_score_low"),
            "gf_score_med": obj.get("gf_score_med"),
            "gf_score_med_5y": obj.get("gf_score_med_5y"),
            "gf_value": obj.get("gf_value"),
            "gf_value_est": obj.get("gf_value_est"),
            "gf_value_est_2nd": obj.get("gf_value_est_2nd"),
            "gf_value_est_3rd": obj.get("gf_value_est_3rd"),
            "gf_value_pct_change": obj.get("gf_value_pct_change"),
            "margin_gf_value": obj.get("margin_gf_value"),
            "p2gf_value": obj.get("p2gf_value"),
            "p2gf_value_est": obj.get("p2gf_value_est"),
            "p2gf_value_high": obj.get("p2gf_value_high"),
            "p2gf_value_low": obj.get("p2gf_value_low"),
            "p2gf_value_med": obj.get("p2gf_value_med"),
            "predictability": obj.get("predictability"),
            "rank_balancesheet": obj.get("rank_balancesheet"),
            "rank_balancesheet_high": obj.get("rank_balancesheet_high"),
            "rank_balancesheet_low": obj.get("rank_balancesheet_low"),
            "rank_balancesheet_med": obj.get("rank_balancesheet_med"),
            "rank_gf_value": obj.get("rank_gf_value"),
            "rank_gf_value_high": obj.get("rank_gf_value_high"),
            "rank_gf_value_low": obj.get("rank_gf_value_low"),
            "rank_growth": obj.get("rank_growth"),
            "rank_growth_high": obj.get("rank_growth_high"),
            "rank_growth_low": obj.get("rank_growth_low"),
            "rank_growth_med": obj.get("rank_growth_med"),
            "rank_momentum": obj.get("rank_momentum"),
            "rank_momentum_high": obj.get("rank_momentum_high"),
            "rank_momentum_low": obj.get("rank_momentum_low"),
            "rank_momentum_med": obj.get("rank_momentum_med"),
            "rank_profitability": obj.get("rank_profitability"),
            "rank_profitability_high": obj.get("rank_profitability_high"),
            "rank_profitability_low": obj.get("rank_profitability_low"),
            "rank_profitability_med": obj.get("rank_profitability_med")
        })
        return _obj


