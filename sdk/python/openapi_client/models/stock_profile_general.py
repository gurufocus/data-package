# coding: utf-8

"""
    Gurufocus Data Package API

    API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class StockProfileGeneral(BaseModel):
    """
    StockProfileGeneral
    """ # noqa: E501
    ipo_date: Optional[StrictStr] = Field(default=None, description="The date of the company's initial public offering.", alias="IPO_date")
    is_direct: Optional[StrictStr] = Field(default=None, description="Does the company report its cash flow statement using the direct method (cash collections, cash payments) or the indirect method (net income -> free cash flow)?", alias="IsDirect")
    naics: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A six-digit code that identifies the company's main business operation", alias="NAICS")
    cik: Optional[StrictStr] = Field(default=None, description="A unique 10-digit number the SEC assigns to companies, mutual funds and hedge funds")
    class_descpt: Optional[StrictStr] = Field(default=None, description="A unique identifier that describes the stock ticker's share class. Examples: Class A, Class C, ADR")
    company: Optional[StrictStr] = Field(default=None, description="The name of the company as identified on its SEC filings.")
    company_id: Optional[StrictStr] = None
    country_iso: Optional[StrictStr] = Field(default=None, description="The country containing the company's headquarters.")
    currency: Optional[StrictStr] = Field(default=None, description="The currency symbol used to report a company's financial data. For example, NYSE stocks have currency USD")
    currency_comp: Optional[StrictStr] = Field(default=None, description="The currency symbol used to report a company's financial data. For example, NYSE stocks have currency USD")
    depositary_receipt_ratio: Optional[Union[StrictFloat, StrictInt]] = None
    exchange: Optional[StrictStr] = Field(default=None, description="The company's stock exchange. Example: NAS for Apple.")
    fiscal_year_end: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The month representing the company's fiscal year end.")
    group: Optional[StrictStr] = None
    ind_template: Optional[StrictStr] = Field(default=None, description="The company's financial statement type: either bank, insurance or nonfinancial")
    industry: Optional[StrictStr] = Field(default=None, description="The company's industry. Example: Discount Stores for WMT.")
    latest_quarter: Optional[StrictStr] = Field(default=None, description="The company's latest quarter-end date")
    optionable_stock: Optional[StrictBool] = Field(default=None, description="Does the stock offer options? If yes, the stock is \"optionable.\"")
    primary_exch: Optional[StrictStr] = Field(default=None, description="The stock ticker's primary exchange, which most likely connects to the company's headquarter country")
    primary_stockid: Optional[StrictStr] = None
    primary_symbol: Optional[StrictStr] = Field(default=None, description="The ticker symbol the company trades under its primary exchange")
    report_frequency: Optional[StrictStr] = Field(default=None, description="How frequently does a company report its earnings?")
    sector: Optional[StrictStr] = Field(default=None, description="A three-digit code indicating a company's market sector")
    sic: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A four-digit code that classifies a company by its business type")
    stockid: Optional[StrictStr] = Field(default=None, description="A unique identifier for the stock")
    symbol: Optional[StrictStr] = Field(default=None, description="The company's stock ticker symbol")
    type: Optional[StrictStr] = Field(default=None, description="A code that determines if a security represents common stock or preferred stock")
    __properties: ClassVar[List[str]] = ["IPO_date", "IsDirect", "NAICS", "cik", "class_descpt", "company", "company_id", "country_iso", "currency", "currency_comp", "depositary_receipt_ratio", "exchange", "fiscal_year_end", "group", "ind_template", "industry", "latest_quarter", "optionable_stock", "primary_exch", "primary_stockid", "primary_symbol", "report_frequency", "sector", "sic", "stockid", "symbol", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StockProfileGeneral from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StockProfileGeneral from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "IPO_date": obj.get("IPO_date"),
            "IsDirect": obj.get("IsDirect"),
            "NAICS": obj.get("NAICS"),
            "cik": obj.get("cik"),
            "class_descpt": obj.get("class_descpt"),
            "company": obj.get("company"),
            "company_id": obj.get("company_id"),
            "country_iso": obj.get("country_iso"),
            "currency": obj.get("currency"),
            "currency_comp": obj.get("currency_comp"),
            "depositary_receipt_ratio": obj.get("depositary_receipt_ratio"),
            "exchange": obj.get("exchange"),
            "fiscal_year_end": obj.get("fiscal_year_end"),
            "group": obj.get("group"),
            "ind_template": obj.get("ind_template"),
            "industry": obj.get("industry"),
            "latest_quarter": obj.get("latest_quarter"),
            "optionable_stock": obj.get("optionable_stock"),
            "primary_exch": obj.get("primary_exch"),
            "primary_stockid": obj.get("primary_stockid"),
            "primary_symbol": obj.get("primary_symbol"),
            "report_frequency": obj.get("report_frequency"),
            "sector": obj.get("sector"),
            "sic": obj.get("sic"),
            "stockid": obj.get("stockid"),
            "symbol": obj.get("symbol"),
            "type": obj.get("type")
        })
        return _obj


