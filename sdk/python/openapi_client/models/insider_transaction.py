# coding: utf-8

"""
    Gurufocus Data Package API

    API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class InsiderTransaction(BaseModel):
    """
    Insider transaction
    """ # noqa: E501
    cik_reporting: Optional[StrictStr] = Field(default=None, description="Reported CIK of insider")
    company: Optional[StrictStr] = Field(default=None, description="The name of the company as identified on its SEC filings.")
    cost: Optional[Union[StrictFloat, StrictInt]] = None
    var_date: Optional[StrictStr] = Field(default=None, description="Insiders tab: the date of the insider transaction", alias="date")
    exchange: Optional[StrictStr] = Field(default=None, description="The company's stock exchange. Example: NAS for Apple.")
    final_share: Optional[Union[StrictFloat, StrictInt]] = None
    name: Optional[StrictStr] = None
    position: Optional[StrictStr] = None
    price: Optional[Union[StrictFloat, StrictInt]] = None
    split_factor: Optional[Union[StrictFloat, StrictInt]] = None
    stockid: Optional[StrictStr] = Field(default=None, description="A unique identifier for the stock")
    symbol: Optional[StrictStr] = Field(default=None, description="The company's stock ticker symbol")
    trans_share: Optional[Union[StrictFloat, StrictInt]] = None
    type: Optional[StrictStr] = Field(default=None, description="Type of transaction, S for sale, P for purchase")
    __properties: ClassVar[List[str]] = ["cik_reporting", "company", "cost", "date", "exchange", "final_share", "name", "position", "price", "split_factor", "stockid", "symbol", "trans_share", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InsiderTransaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InsiderTransaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cik_reporting": obj.get("cik_reporting"),
            "company": obj.get("company"),
            "cost": obj.get("cost"),
            "date": obj.get("date"),
            "exchange": obj.get("exchange"),
            "final_share": obj.get("final_share"),
            "name": obj.get("name"),
            "position": obj.get("position"),
            "price": obj.get("price"),
            "split_factor": obj.get("split_factor"),
            "stockid": obj.get("stockid"),
            "symbol": obj.get("symbol"),
            "trans_share": obj.get("trans_share"),
            "type": obj.get("type")
        })
        return _obj


