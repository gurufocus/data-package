# coding: utf-8

"""
    Gurufocus Data Package API

    API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class EtfEtfDividends(BaseModel):
    """
    EtfEtfDividends
    """ # noqa: E501
    dividend_freq: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of times a company pays a dividend per year. Example: 4 means quarterly.")
    next_dividend_payment_date: Optional[StrictStr] = None
    ttm_dividend: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The aggregate amount of dividends over the trailing 12 months")
    var_yield: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The dividend yield is the ratio of a company's annual dividend compared to its share price.", alias="yield")
    yield_high: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The dividend yield is the ratio of a company's annual dividend compared to its share price.")
    yield_low: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The dividend yield is the ratio of a company's annual dividend compared to its share price.")
    yield_med: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The dividend yield is the ratio of a company's annual dividend compared to its share price.")
    __properties: ClassVar[List[str]] = ["dividend_freq", "next_dividend_payment_date", "ttm_dividend", "yield", "yield_high", "yield_low", "yield_med"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EtfEtfDividends from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EtfEtfDividends from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dividend_freq": obj.get("dividend_freq"),
            "next_dividend_payment_date": obj.get("next_dividend_payment_date"),
            "ttm_dividend": obj.get("ttm_dividend"),
            "yield": obj.get("yield"),
            "yield_high": obj.get("yield_high"),
            "yield_low": obj.get("yield_low"),
            "yield_med": obj.get("yield_med")
        })
        return _obj


