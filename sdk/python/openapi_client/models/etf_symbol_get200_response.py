# coding: utf-8

"""
    Gurufocus Data Package API

    API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.etf_etf_basic_information import EtfEtfBasicInformation
from openapi_client.models.etf_etf_dividends import EtfEtfDividends
from openapi_client.models.etf_etf_fundamental import EtfEtfFundamental
from openapi_client.models.etf_etf_key_statistics import EtfEtfKeyStatistics
from openapi_client.models.etf_etf_portfolio_holdings import EtfEtfPortfolioHoldings
from openapi_client.models.etf_etf_sector_breakdowns import EtfEtfSectorBreakdowns
from typing import Optional, Set
from typing_extensions import Self

class EtfSymbolGet200Response(BaseModel):
    """
    EtfSymbolGet200Response
    """ # noqa: E501
    basic_information: Optional[EtfEtfBasicInformation] = None
    dividends: Optional[EtfEtfDividends] = None
    fundamental: Optional[EtfEtfFundamental] = None
    key_statistics: Optional[EtfEtfKeyStatistics] = None
    portfolio_holdings: Optional[EtfEtfPortfolioHoldings] = None
    sector_breakdowns: Optional[EtfEtfSectorBreakdowns] = None
    __properties: ClassVar[List[str]] = ["basic_information", "dividends", "fundamental", "key_statistics", "portfolio_holdings", "sector_breakdowns"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EtfSymbolGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of basic_information
        if self.basic_information:
            _dict['basic_information'] = self.basic_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dividends
        if self.dividends:
            _dict['dividends'] = self.dividends.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fundamental
        if self.fundamental:
            _dict['fundamental'] = self.fundamental.to_dict()
        # override the default output from pydantic by calling `to_dict()` of key_statistics
        if self.key_statistics:
            _dict['key_statistics'] = self.key_statistics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of portfolio_holdings
        if self.portfolio_holdings:
            _dict['portfolio_holdings'] = self.portfolio_holdings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sector_breakdowns
        if self.sector_breakdowns:
            _dict['sector_breakdowns'] = self.sector_breakdowns.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EtfSymbolGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "basic_information": EtfEtfBasicInformation.from_dict(obj["basic_information"]) if obj.get("basic_information") is not None else None,
            "dividends": EtfEtfDividends.from_dict(obj["dividends"]) if obj.get("dividends") is not None else None,
            "fundamental": EtfEtfFundamental.from_dict(obj["fundamental"]) if obj.get("fundamental") is not None else None,
            "key_statistics": EtfEtfKeyStatistics.from_dict(obj["key_statistics"]) if obj.get("key_statistics") is not None else None,
            "portfolio_holdings": EtfEtfPortfolioHoldings.from_dict(obj["portfolio_holdings"]) if obj.get("portfolio_holdings") is not None else None,
            "sector_breakdowns": EtfEtfSectorBreakdowns.from_dict(obj["sector_breakdowns"]) if obj.get("sector_breakdowns") is not None else None
        })
        return _obj


