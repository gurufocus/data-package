# coding: utf-8

"""
    Gurufocus Data Package API

    API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class EtfEtfKeyStatistics(BaseModel):
    """
    EtfEtfKeyStatistics
    """ # noqa: E501
    beta: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Beta measures the volatility or systematic risk of a security in comparison to the market. It is calculated using the latest three years of monthly returns of the stock and the benchmark.<br>- A beta of 1 indicates that the stock's price will move with the market. <br>- A beta of less than 1 indicates that the stock will be less volatile than the market. <br>- A beta greater than 1 indicates that the stock's price will be more volatile than the market.")
    display_timestamp: Optional[StrictStr] = None
    high: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The company's intraday high share price")
    low: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The company's intraday low share price")
    open: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The company's share price at market open")
    p_pct_change: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The percent change of a company's share price based on the previous close.")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The current share price of the stock")
    price52whigh: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The highest share price over the past 52 weeks")
    price52wlow: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The lowest share price over the past 52 weeks")
    rsi_14: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The relative strength index, i.e., a value that closely captures the average gain on up days divided by the average loss non down days, over the past 14 days")
    sharpe_ratio_3y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The 3-Year Sharpe Ratio measures the risk-adjusted return of an investment over the past three years. It is calculated as the annualized result of the average monthly excess return divided by its standard deviation over the past three years. The monthly excess return is the monthly investment return minus the monthly risk-free rate (typically the 10-year Treasury Constant Maturity Rate). If the risk-free rate for a specific region is not available, U.S. data is used by default.")
    sma_20: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The simple moving average, i.e., the arithmetic average share price, over the past 20 days.")
    sortino_ratio_3y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The 3-Year Sortino Ratio measures the risk-adjusted return of an investment over the past three years, focusing specifically on downside risk rather than total risk. It is calculated as the annualized result of the average monthly excess return divided by its downside deviation (accounts for negative excess return) over the past three years. The monthly excess return is the monthly investment return minus the monthly risk-free rate (typically the 10-year Treasury Constant Maturity Rate). If the risk-free rate for a specific region is not available, U.S. data is used by default.")
    volatility: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The annualized volatility of the stock over the past year")
    volumn_day: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The daily trading volume of a security.")
    __properties: ClassVar[List[str]] = ["beta", "display_timestamp", "high", "low", "open", "p_pct_change", "price", "price52whigh", "price52wlow", "rsi_14", "sharpe_ratio_3y", "sma_20", "sortino_ratio_3y", "volatility", "volumn_day"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EtfEtfKeyStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EtfEtfKeyStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "beta": obj.get("beta"),
            "display_timestamp": obj.get("display_timestamp"),
            "high": obj.get("high"),
            "low": obj.get("low"),
            "open": obj.get("open"),
            "p_pct_change": obj.get("p_pct_change"),
            "price": obj.get("price"),
            "price52whigh": obj.get("price52whigh"),
            "price52wlow": obj.get("price52wlow"),
            "rsi_14": obj.get("rsi_14"),
            "sharpe_ratio_3y": obj.get("sharpe_ratio_3y"),
            "sma_20": obj.get("sma_20"),
            "sortino_ratio_3y": obj.get("sortino_ratio_3y"),
            "volatility": obj.get("volatility"),
            "volumn_day": obj.get("volumn_day")
        })
        return _obj


