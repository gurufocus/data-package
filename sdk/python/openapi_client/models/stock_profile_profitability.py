# coding: utf-8

"""
    Gurufocus Data Package API

    API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class StockProfileProfitability(BaseModel):
    """
    StockProfileProfitability
    """ # noqa: E501
    fc_fmargin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="FCF Margin is calculated as Free Cash Flow divided by total Revenue.", alias="FCFmargin")
    fc_fmargin_high: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The FCF Margin % (10y High) refers to the highest value of the FCF Margin over a 10-year period, where FCF Margin is calculated as Free Cash Flow divided by total Revenue.", alias="FCFmargin_high")
    fc_fmargin_low: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The FCF Margin % (10y Low) refers to the lowest value of FCF Margin over a 10-year period, where FCF Margin is calculated as Free Cash Flow divided by total Revenue.", alias="FCFmargin_low")
    fc_fmargin_med: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The FCF Margin % (10y Median) refers to the median value of FCF Margin over a 10-year period, where FCF Margin is calculated as Free Cash Flow divided by total Revenue.", alias="FCFmargin_med")
    fc_fmargin_med_5y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The median free cash flow margin over the past five years", alias="FCFmargin_med_5y")
    net_interest_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Net interest margin is a performance metric that examines how successful a firm's investment decisions are compared to its debt situations.", alias="NetInterestMargin")
    cash_conversion_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Cash Conversion Ratio is calculated as Free Cash Flow divided by Net Income.")
    cash_conversion_ratio_high: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Cash Conversion Ratio (10y High) refers to the highest value of the Cash Conversion Ratio over a 10-year period, where Cash Conversion Ratio is calculated as Free Cash Flow divided by Net Income.")
    cash_conversion_ratio_low: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Cash Conversion Ratio (10y Low) refers to the lowest value of Cash Conversion Ratio over a 10-year period, where Cash Conversion Ratio is calculated as Free Cash Flow divided by Net Income.")
    cash_conversion_ratio_med: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Cash Conversion Ratio (10y Median) refers to the median value of Cash Conversion Ratio over a 10-year period, where Cash Conversion Ratio is calculated as Free Cash Flow divided by Net Income.")
    cash_conversion_ratio_med_5y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Cash Conversion Ratio (5y Median) refers to the median value of Cash Conversion Ratio over a 5-year period, where Cash Conversion Ratio is calculated as Free Cash Flow divided by Net Income.")
    ebit_margin: Optional[Union[StrictFloat, StrictInt]] = None
    ebit_margin_high: Optional[Union[StrictFloat, StrictInt]] = None
    ebit_margin_low: Optional[Union[StrictFloat, StrictInt]] = None
    ebit_margin_med: Optional[Union[StrictFloat, StrictInt]] = None
    ebitda_margin: Optional[Union[StrictFloat, StrictInt]] = None
    ebitda_margin_high: Optional[Union[StrictFloat, StrictInt]] = None
    ebitda_margin_low: Optional[Union[StrictFloat, StrictInt]] = None
    ebitda_margin_med: Optional[Union[StrictFloat, StrictInt]] = None
    fcf_year_num: Optional[Union[StrictFloat, StrictInt]] = None
    grossmargin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gross Margin % is calculated as gross profit divided by its revenue.")
    grossmargin_high: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gross Margin % is calculated as gross profit divided by its revenue.")
    grossmargin_low: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gross Margin % is calculated as gross profit divided by its revenue.")
    grossmargin_med: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gross Margin % is calculated as gross profit divided by its revenue.")
    grossmargin_med_5y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Gross Margin % (5y Median) refers to the median value of the gross margin over a period of five years, where gross margin is calculated as gross profit divided by its revenue.")
    net_margain: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Net margin is calculated as Net Income divided by its Revenue.")
    net_margain_high: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Net margin is calculated as Net Income divided by its Revenue.")
    net_margain_low: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Net margin is calculated as Net Income divided by its Revenue.")
    net_margain_med: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Net margin is calculated as Net Income divided by its Revenue.")
    net_margain_med_5y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Net Margin % (5y Median) refers to the median value of the net margin over a period of five years, where net margin is calculated as net Income divided by its revenue.")
    oprt_margain: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Operating Margin % is calculated as Operating Income divided by its Revenue.")
    oprt_margain_high: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Operating Margin % is calculated as Operating Income divided by its Revenue.")
    oprt_margain_low: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Operating Margin % is calculated as Operating Income divided by its Revenue.")
    oprt_margain_med: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Operating Margin % is calculated as Operating Income divided by its Revenue.")
    oprt_margain_med_5y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Operating Margin % is calculated as Operating Income divided by its Revenue.")
    pretax_margain: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The company's pretax earnings divided by total revenue")
    pretax_margain_high: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The highest pretax margin over the past 10 years")
    pretax_margain_low: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The lowest pretax margin over the past 10 years")
    pretax_margain_med: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The median pretax margin over the past 10 years")
    pretax_margain_med_5y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Pretax Margin % (5y Median) refers to the median value of the pretax margin over a period of five years, where pretax margin is calculated as pretax Income divided by its revenue.")
    profit_year_num: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of years a company had positive earnings over the past 10 years")
    __properties: ClassVar[List[str]] = ["FCFmargin", "FCFmargin_high", "FCFmargin_low", "FCFmargin_med", "FCFmargin_med_5y", "NetInterestMargin", "cash_conversion_ratio", "cash_conversion_ratio_high", "cash_conversion_ratio_low", "cash_conversion_ratio_med", "cash_conversion_ratio_med_5y", "ebit_margin", "ebit_margin_high", "ebit_margin_low", "ebit_margin_med", "ebitda_margin", "ebitda_margin_high", "ebitda_margin_low", "ebitda_margin_med", "fcf_year_num", "grossmargin", "grossmargin_high", "grossmargin_low", "grossmargin_med", "grossmargin_med_5y", "net_margain", "net_margain_high", "net_margain_low", "net_margain_med", "net_margain_med_5y", "oprt_margain", "oprt_margain_high", "oprt_margain_low", "oprt_margain_med", "oprt_margain_med_5y", "pretax_margain", "pretax_margain_high", "pretax_margain_low", "pretax_margain_med", "pretax_margain_med_5y", "profit_year_num"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StockProfileProfitability from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StockProfileProfitability from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "FCFmargin": obj.get("FCFmargin"),
            "FCFmargin_high": obj.get("FCFmargin_high"),
            "FCFmargin_low": obj.get("FCFmargin_low"),
            "FCFmargin_med": obj.get("FCFmargin_med"),
            "FCFmargin_med_5y": obj.get("FCFmargin_med_5y"),
            "NetInterestMargin": obj.get("NetInterestMargin"),
            "cash_conversion_ratio": obj.get("cash_conversion_ratio"),
            "cash_conversion_ratio_high": obj.get("cash_conversion_ratio_high"),
            "cash_conversion_ratio_low": obj.get("cash_conversion_ratio_low"),
            "cash_conversion_ratio_med": obj.get("cash_conversion_ratio_med"),
            "cash_conversion_ratio_med_5y": obj.get("cash_conversion_ratio_med_5y"),
            "ebit_margin": obj.get("ebit_margin"),
            "ebit_margin_high": obj.get("ebit_margin_high"),
            "ebit_margin_low": obj.get("ebit_margin_low"),
            "ebit_margin_med": obj.get("ebit_margin_med"),
            "ebitda_margin": obj.get("ebitda_margin"),
            "ebitda_margin_high": obj.get("ebitda_margin_high"),
            "ebitda_margin_low": obj.get("ebitda_margin_low"),
            "ebitda_margin_med": obj.get("ebitda_margin_med"),
            "fcf_year_num": obj.get("fcf_year_num"),
            "grossmargin": obj.get("grossmargin"),
            "grossmargin_high": obj.get("grossmargin_high"),
            "grossmargin_low": obj.get("grossmargin_low"),
            "grossmargin_med": obj.get("grossmargin_med"),
            "grossmargin_med_5y": obj.get("grossmargin_med_5y"),
            "net_margain": obj.get("net_margain"),
            "net_margain_high": obj.get("net_margain_high"),
            "net_margain_low": obj.get("net_margain_low"),
            "net_margain_med": obj.get("net_margain_med"),
            "net_margain_med_5y": obj.get("net_margain_med_5y"),
            "oprt_margain": obj.get("oprt_margain"),
            "oprt_margain_high": obj.get("oprt_margain_high"),
            "oprt_margain_low": obj.get("oprt_margain_low"),
            "oprt_margain_med": obj.get("oprt_margain_med"),
            "oprt_margain_med_5y": obj.get("oprt_margain_med_5y"),
            "pretax_margain": obj.get("pretax_margain"),
            "pretax_margain_high": obj.get("pretax_margain_high"),
            "pretax_margain_low": obj.get("pretax_margain_low"),
            "pretax_margain_med": obj.get("pretax_margain_med"),
            "pretax_margain_med_5y": obj.get("pretax_margain_med_5y"),
            "profit_year_num": obj.get("profit_year_num")
        })
        return _obj


