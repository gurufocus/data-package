# coding: utf-8

"""
    Gurufocus Data Package API

    API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class StockProfileDividends(BaseModel):
    """
    StockProfileDividends
    """ # noqa: E501
    dividend2_ffo: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Cash dividends declared on the company's primary issue of common stock as a percent of funds from operations, on a per-share basis", alias="Dividend2FFO")
    forward_dividend: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The aggregate amount of expected dividends for the next 12 months", alias="ForwardDividend")
    forward_dividend_yield: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A forward dividend yield is an estimation of a year's dividend expressed as a percentage of the current stock price.", alias="ForwardDividendYield")
    dividend_freq: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of times a company pays a dividend per year. Example: 4 means quarterly.")
    dividend_months: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The months where the company pays its dividend.")
    dividend_startyear: Optional[StrictStr] = Field(default=None, description="The starting year for dividends that either remain consistent or increase in the subsequent years.")
    dividend_startyear_real: Optional[StrictStr] = Field(default=None, description="The starting year for the first dividend payments available on GuruFocus.")
    increase_dividend_startyear: Optional[StrictStr] = Field(default=None, description="The starting year from which dividends have consistently increased in subsequent years.")
    next_dividend_amount: Optional[StrictStr] = Field(default=None, description="The amount of the company's next dividend")
    next_dividend_date: Optional[StrictStr] = Field(default=None, description="The next date the company goes ex-dividend.")
    payout: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The dividend payout ratio is the ratio of the total amount of dividends paid out to shareholders relative to the net income of the company.")
    payout_high: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The dividend payout ratio is the ratio of the total amount of dividends paid out to shareholders relative to the net income of the company.")
    payout_low: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The dividend payout ratio is the ratio of the total amount of dividends paid out to shareholders relative to the net income of the company.")
    payout_med: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The dividend payout ratio is the ratio of the total amount of dividends paid out to shareholders relative to the net income of the company.")
    ttm_dividend: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The aggregate amount of dividends over the trailing 12 months")
    var_yield: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The dividend yield is the ratio of a company's annual dividend compared to its share price.", alias="yield")
    yield_high: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The dividend yield is the ratio of a company's annual dividend compared to its share price.")
    yield_low: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The dividend yield is the ratio of a company's annual dividend compared to its share price.")
    yield_med: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The dividend yield is the ratio of a company's annual dividend compared to its share price.")
    yield_on_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Yield on Cost (YOC) is the annual dividend rate of a security, divided by its average cost basis.")
    yield_on_cost_high: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The highest yield-on-cost over the past 10 years")
    yield_on_cost_low: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The lowest yield-on-cost over the past 10 years")
    yield_on_cost_med: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The median yield-on-cost over the past 10 years")
    __properties: ClassVar[List[str]] = ["Dividend2FFO", "ForwardDividend", "ForwardDividendYield", "dividend_freq", "dividend_months", "dividend_startyear", "dividend_startyear_real", "increase_dividend_startyear", "next_dividend_amount", "next_dividend_date", "payout", "payout_high", "payout_low", "payout_med", "ttm_dividend", "yield", "yield_high", "yield_low", "yield_med", "yield_on_cost", "yield_on_cost_high", "yield_on_cost_low", "yield_on_cost_med"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StockProfileDividends from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StockProfileDividends from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Dividend2FFO": obj.get("Dividend2FFO"),
            "ForwardDividend": obj.get("ForwardDividend"),
            "ForwardDividendYield": obj.get("ForwardDividendYield"),
            "dividend_freq": obj.get("dividend_freq"),
            "dividend_months": obj.get("dividend_months"),
            "dividend_startyear": obj.get("dividend_startyear"),
            "dividend_startyear_real": obj.get("dividend_startyear_real"),
            "increase_dividend_startyear": obj.get("increase_dividend_startyear"),
            "next_dividend_amount": obj.get("next_dividend_amount"),
            "next_dividend_date": obj.get("next_dividend_date"),
            "payout": obj.get("payout"),
            "payout_high": obj.get("payout_high"),
            "payout_low": obj.get("payout_low"),
            "payout_med": obj.get("payout_med"),
            "ttm_dividend": obj.get("ttm_dividend"),
            "yield": obj.get("yield"),
            "yield_high": obj.get("yield_high"),
            "yield_low": obj.get("yield_low"),
            "yield_med": obj.get("yield_med"),
            "yield_on_cost": obj.get("yield_on_cost"),
            "yield_on_cost_high": obj.get("yield_on_cost_high"),
            "yield_on_cost_low": obj.get("yield_on_cost_low"),
            "yield_on_cost_med": obj.get("yield_on_cost_med")
        })
        return _obj


