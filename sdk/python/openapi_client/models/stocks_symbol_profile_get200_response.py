# coding: utf-8

"""
    Gurufocus Data Package API

    API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.stock_profile_basic_information import StockProfileBasicInformation
from openapi_client.models.stock_profile_dividends import StockProfileDividends
from openapi_client.models.stock_profile_fundamental import StockProfileFundamental
from openapi_client.models.stock_profile_general import StockProfileGeneral
from openapi_client.models.stock_profile_growth import StockProfileGrowth
from openapi_client.models.stock_profile_price import StockProfilePrice
from openapi_client.models.stock_profile_profitability import StockProfileProfitability
from openapi_client.models.stock_profile_valuation_ratio import StockProfileValuationRatio
from typing import Optional, Set
from typing_extensions import Self

class StocksSymbolProfileGet200Response(BaseModel):
    """
    StocksSymbolProfileGet200Response
    """ # noqa: E501
    basic_information: Optional[StockProfileBasicInformation] = None
    dividends: Optional[StockProfileDividends] = None
    fundamental: Optional[StockProfileFundamental] = None
    general: Optional[StockProfileGeneral] = None
    growth: Optional[StockProfileGrowth] = None
    price: Optional[StockProfilePrice] = None
    profitability: Optional[StockProfileProfitability] = None
    valuation_ratio: Optional[StockProfileValuationRatio] = None
    __properties: ClassVar[List[str]] = ["basic_information", "dividends", "fundamental", "general", "growth", "price", "profitability", "valuation_ratio"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StocksSymbolProfileGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of basic_information
        if self.basic_information:
            _dict['basic_information'] = self.basic_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dividends
        if self.dividends:
            _dict['dividends'] = self.dividends.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fundamental
        if self.fundamental:
            _dict['fundamental'] = self.fundamental.to_dict()
        # override the default output from pydantic by calling `to_dict()` of general
        if self.general:
            _dict['general'] = self.general.to_dict()
        # override the default output from pydantic by calling `to_dict()` of growth
        if self.growth:
            _dict['growth'] = self.growth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of profitability
        if self.profitability:
            _dict['profitability'] = self.profitability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of valuation_ratio
        if self.valuation_ratio:
            _dict['valuation_ratio'] = self.valuation_ratio.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StocksSymbolProfileGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "basic_information": StockProfileBasicInformation.from_dict(obj["basic_information"]) if obj.get("basic_information") is not None else None,
            "dividends": StockProfileDividends.from_dict(obj["dividends"]) if obj.get("dividends") is not None else None,
            "fundamental": StockProfileFundamental.from_dict(obj["fundamental"]) if obj.get("fundamental") is not None else None,
            "general": StockProfileGeneral.from_dict(obj["general"]) if obj.get("general") is not None else None,
            "growth": StockProfileGrowth.from_dict(obj["growth"]) if obj.get("growth") is not None else None,
            "price": StockProfilePrice.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "profitability": StockProfileProfitability.from_dict(obj["profitability"]) if obj.get("profitability") is not None else None,
            "valuation_ratio": StockProfileValuationRatio.from_dict(obj["valuation_ratio"]) if obj.get("valuation_ratio") is not None else None
        })
        return _obj


