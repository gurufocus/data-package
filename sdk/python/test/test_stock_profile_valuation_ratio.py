# coding: utf-8

"""
    Gurufocus Data Package API

    API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.stock_profile_valuation_ratio import StockProfileValuationRatio

class TestStockProfileValuationRatio(unittest.TestCase):
    """StockProfileValuationRatio unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> StockProfileValuationRatio:
        """Test StockProfileValuationRatio
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `StockProfileValuationRatio`
        """
        model = StockProfileValuationRatio()
        if include_optional:
            return StockProfileValuationRatio(
                epv = 1.337,
                fc_fyield = 1.337,
                fc_fyield_high = 1.337,
                fc_fyield_low = 1.337,
                fc_fyield_med = 1.337,
                fc_fyield_med_5y = 1.337,
                owner_earnings = 1.337,
                rate_of_return = 1.337,
                rate_of_return_high = 1.337,
                rate_of_return_low = 1.337,
                rate_of_return_med = 1.337,
                shiller_pe = 1.337,
                shiller_pe_high = 1.337,
                shiller_pe_low = 1.337,
                shiller_pe_med = 1.337,
                cyclically_adjusted_book = 1.337,
                cyclically_adjusted_fcf = 1.337,
                cyclically_adjusted_pb = 1.337,
                cyclically_adjusted_pb_high = 1.337,
                cyclically_adjusted_pb_low = 1.337,
                cyclically_adjusted_pb_med = 1.337,
                cyclically_adjusted_pfcf = 1.337,
                cyclically_adjusted_pfcf_high = 1.337,
                cyclically_adjusted_pfcf_low = 1.337,
                cyclically_adjusted_pfcf_med = 1.337,
                cyclically_adjusted_ps = 1.337,
                cyclically_adjusted_ps_high = 1.337,
                cyclically_adjusted_ps_low = 1.337,
                cyclically_adjusted_ps_med = 1.337,
                cyclically_adjusted_rvn = 1.337,
                e10 = 1.337,
                earning_yield = 1.337,
                earning_yield_greenblatt = 1.337,
                earning_yield_greenblatt_high = 1.337,
                earning_yield_greenblatt_low = 1.337,
                earning_yield_greenblatt_med = 1.337,
                earning_yield_high = 1.337,
                earning_yield_low = 1.337,
                earning_yield_med = 1.337,
                ev2ebit = 1.337,
                ev2ebitda = 1.337,
                ev2ebitdahigh = 1.337,
                ev2ebitdalow = 1.337,
                ev2ebitdamed = 1.337,
                ev2ebithigh = 1.337,
                ev2ebitlow = 1.337,
                ev2ebitmed = 1.337,
                ev2fcf = 1.337,
                ev2fcfhigh = 1.337,
                ev2fcflow = 1.337,
                ev2fcfmed = 1.337,
                ev2pretaxincome = 1.337,
                ev2rev = 1.337,
                ev2revhigh = 1.337,
                ev2revlow = 1.337,
                ev2revmed = 1.337,
                ev_to_forward_ebit = 1.337,
                ev_to_forward_ebitda = 1.337,
                ev_to_forward_revenue = 1.337,
                forward_pe = 1.337,
                forward_fcf_yield = 1.337,
                forward_peg_ratio = 1.337,
                grahamnumber = 1.337,
                iv_dc_earning = 1.337,
                iv_dcf = 1.337,
                iv_dcf_dividend = 1.337,
                iv_dcf_share = 1.337,
                lynchvalue = 1.337,
                margin_dc_earning = 1.337,
                margin_dcf = 1.337,
                margin_dcf_dividend = 1.337,
                medpbvalue = 1.337,
                medpsvalue = 1.337,
                ncav = 1.337,
                ncav_real = 1.337,
                net_cash = 1.337,
                p2_epv = 1.337,
                p2_owner_earnings = 1.337,
                p2_owner_earnings_high = 1.337,
                p2_owner_earnings_low = 1.337,
                p2_owner_earnings_med = 1.337,
                p2ffo = 1.337,
                p2grahamnumber = 1.337,
                p2grahamnumber_high = 1.337,
                p2grahamnumber_low = 1.337,
                p2grahamnumber_med = 1.337,
                p2iv_dc_earning = 1.337,
                p2iv_dc_earning_high = 1.337,
                p2iv_dc_earning_low = 1.337,
                p2iv_dc_earning_med = 1.337,
                p2iv_dcf = 1.337,
                p2iv_dcf_dividend = 1.337,
                p2iv_dcf_dividend_high = 1.337,
                p2iv_dcf_dividend_low = 1.337,
                p2iv_dcf_dividend_med = 1.337,
                p2iv_dcf_high = 1.337,
                p2iv_dcf_low = 1.337,
                p2iv_dcf_med = 1.337,
                p2iv_dcf_share = 1.337,
                p2iv_dcf_share_high = 1.337,
                p2iv_dcf_share_low = 1.337,
                p2iv_dcf_share_med = 1.337,
                p2lynchvalue = 1.337,
                p2lynchvalue_high = 1.337,
                p2lynchvalue_low = 1.337,
                p2lynchvalue_med = 1.337,
                p2medpbvalue = 1.337,
                p2medpbvalue_high = 1.337,
                p2medpbvalue_low = 1.337,
                p2medpbvalue_med = 1.337,
                p2medpsvalue = 1.337,
                p2medpsvalue_high = 1.337,
                p2medpsvalue_low = 1.337,
                p2medpsvalue_med = 1.337,
                p2ncav = 1.337,
                p2ncav_high = 1.337,
                p2ncav_low = 1.337,
                p2ncav_med = 1.337,
                p2net_cash = 1.337,
                p2net_cash_high = 1.337,
                p2net_cash_low = 1.337,
                p2net_cash_med = 1.337,
                p2nnwc = 1.337,
                p2tangible_book = 1.337,
                p2tangible_book_high = 1.337,
                p2tangible_book_low = 1.337,
                p2tangible_book_med = 1.337,
                pb = 1.337,
                pbhigh = 1.337,
                pblow = 1.337,
                pbmed = 1.337,
                pe = 1.337,
                pebit_med = 1.337,
                pebitda_med = 1.337,
                peg = 1.337,
                peghigh = 1.337,
                peglow = 1.337,
                pegmed = 1.337,
                penri = 1.337,
                penrihigh = 1.337,
                penrilow = 1.337,
                penrimed = 1.337,
                pettmhigh = 1.337,
                pettmlow = 1.337,
                pettmmed = 1.337,
                pfcf = 1.337,
                pfcfhigh = 1.337,
                pfcflow = 1.337,
                pfcfmed = 1.337,
                pocf = 1.337,
                pocfhigh = 1.337,
                pocflow = 1.337,
                pocfmed = 1.337,
                ps = 1.337,
                pshigh = 1.337,
                pslow = 1.337,
                psmed = 1.337,
                tangible_book = 1.337
            )
        else:
            return StockProfileValuationRatio(
        )
        """

    def testStockProfileValuationRatio(self):
        """Test StockProfileValuationRatio"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
