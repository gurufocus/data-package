# coding: utf-8

"""
    Gurufocus Data Package API

    API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.stock_profile_profitability import StockProfileProfitability

class TestStockProfileProfitability(unittest.TestCase):
    """StockProfileProfitability unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> StockProfileProfitability:
        """Test StockProfileProfitability
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `StockProfileProfitability`
        """
        model = StockProfileProfitability()
        if include_optional:
            return StockProfileProfitability(
                fc_fmargin = 1.337,
                fc_fmargin_high = 1.337,
                fc_fmargin_low = 1.337,
                fc_fmargin_med = 1.337,
                fc_fmargin_med_5y = 1.337,
                net_interest_margin = 1.337,
                cash_conversion_ratio = 1.337,
                cash_conversion_ratio_high = 1.337,
                cash_conversion_ratio_low = 1.337,
                cash_conversion_ratio_med = 1.337,
                cash_conversion_ratio_med_5y = 1.337,
                ebit_margin = 1.337,
                ebit_margin_high = 1.337,
                ebit_margin_low = 1.337,
                ebit_margin_med = 1.337,
                ebitda_margin = 1.337,
                ebitda_margin_high = 1.337,
                ebitda_margin_low = 1.337,
                ebitda_margin_med = 1.337,
                fcf_year_num = 1.337,
                grossmargin = 1.337,
                grossmargin_high = 1.337,
                grossmargin_low = 1.337,
                grossmargin_med = 1.337,
                grossmargin_med_5y = 1.337,
                net_margain = 1.337,
                net_margain_high = 1.337,
                net_margain_low = 1.337,
                net_margain_med = 1.337,
                net_margain_med_5y = 1.337,
                oprt_margain = 1.337,
                oprt_margain_high = 1.337,
                oprt_margain_low = 1.337,
                oprt_margain_med = 1.337,
                oprt_margain_med_5y = 1.337,
                pretax_margain = 1.337,
                pretax_margain_high = 1.337,
                pretax_margain_low = 1.337,
                pretax_margain_med = 1.337,
                pretax_margain_med_5y = 1.337,
                profit_year_num = 1.337
            )
        else:
            return StockProfileProfitability(
        )
        """

    def testStockProfileProfitability(self):
        """Test StockProfileProfitability"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
