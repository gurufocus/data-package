# coding: utf-8

"""
    Gurufocus Data Package API

    API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.etf_symbol_get200_response import EtfSymbolGet200Response

class TestEtfSymbolGet200Response(unittest.TestCase):
    """EtfSymbolGet200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EtfSymbolGet200Response:
        """Test EtfSymbolGet200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EtfSymbolGet200Response`
        """
        model = EtfSymbolGet200Response()
        if include_optional:
            return EtfSymbolGet200Response(
                basic_information = openapi_client.models.etf_etf_basic_information.etf_etf_basic_information(
                    company = '', 
                    company_id = '', 
                    exchange = '', 
                    stockid = '', 
                    symbol = '', ),
                dividends = openapi_client.models.etf_etf_dividends.etf_etf_dividends(
                    dividend_freq = 1.337, 
                    next_dividend_payment_date = '', 
                    ttm_dividend = 1.337, 
                    yield = 1.337, 
                    yield_high = 1.337, 
                    yield_low = 1.337, 
                    yield_med = 1.337, ),
                fundamental = openapi_client.models.etf_etf_fundamental.etf_etf_fundamental(
                    mktcap = 1.337, 
                    pb = 1.337, 
                    pbhigh = 1.337, 
                    pblow = 1.337, 
                    pbmed = 1.337, 
                    pe = 1.337, 
                    pettmhigh = 1.337, 
                    pettmlow = 1.337, 
                    pettmmed = 1.337, 
                    shares = 1.337, ),
                key_statistics = openapi_client.models.etf_etf_key_statistics.etf_etf_key_statistics(
                    beta = 1.337, 
                    display_timestamp = '', 
                    high = 1.337, 
                    low = 1.337, 
                    open = 1.337, 
                    p_pct_change = 1.337, 
                    price = 1.337, 
                    price52whigh = 1.337, 
                    price52wlow = 1.337, 
                    rsi_14 = 1.337, 
                    sharpe_ratio_3y = 1.337, 
                    sma_20 = 1.337, 
                    sortino_ratio_3y = 1.337, 
                    volatility = 1.337, 
                    volumn_day = 1.337, ),
                portfolio_holdings = openapi_client.models.etf_etf_portfolio_holdings.etf_etf_portfolio_holdings(
                    holdings = [
                        openapi_client.models.guru_transaction.guru_transaction(
                            action = '', 
                            change = 1.337, 
                            class = '', 
                            comment = '', 
                            company_name = '', 
                            exchange = '', 
                            impact = 1.337, 
                            industry_code = 1.337, 
                            portdate = '', 
                            position = 1.337, 
                            price_avg = 1.337, 
                            price_max = 1.337, 
                            price_min = 1.337, 
                            share_change = 1.337, 
                            shares = 1.337, 
                            shares_outstanding = 1.337, 
                            split_factor = 1.337, 
                            stockid = '', 
                            symbol = '', 
                            value = 1.337, )
                        ], 
                    portdate = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ),
                sector_breakdowns = openapi_client.models.etf_etf_sector_breakdowns.etf_etf_sector_breakdowns(
                    details = { }, 
                    portdate = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
            )
        else:
            return EtfSymbolGet200Response(
        )
        """

    def testEtfSymbolGet200Response(self):
        """Test EtfSymbolGet200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
