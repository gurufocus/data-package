# coding: utf-8

"""
    Gurufocus Data Package API

    API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.stock_valuations_ttm import StockValuationsTtm

class TestStockValuationsTtm(unittest.TestCase):
    """StockValuationsTtm unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> StockValuationsTtm:
        """Test StockValuationsTtm
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `StockValuationsTtm`
        """
        model = StockValuationsTtm()
        if include_optional:
            return StockValuationsTtm(
                basic_information = openapi_client.models.valuations_n_no_reit_no_direct_basic_information.valuations_N_NO_REIT_NO_DIRECT_basic_information(
                    company = '', 
                    company_id = '', 
                    exchange = '', 
                    stockid = '', 
                    symbol = '', ),
                per_share_data = openapi_client.models.valuations_n_no_reit_no_direct_per_share_data.valuations_N_NO_REIT_NO_DIRECT_per_share_data(
                    book_value_per_share = 1.337, 
                    cash_flow_from_operations_per_share = 1.337, 
                    cash_per_share = 1.337, 
                    dividends_per_share = 1.337, 
                    earning_per_share_diluted = 1.337, 
                    ebit_per_share = 1.337, 
                    ebitda_per_share = 1.337, 
                    eps_without_nri = 1.337, 
                    free_cash_flow_per_share = 1.337, 
                    month_end_stock_price = 1.337, 
                    owner_earnings = 1.337, 
                    revenue_per_share = 1.337, 
                    tangibles_book_per_share = 1.337, 
                    total_debt_per_share = 1.337, ),
                ratios = openapi_client.models.valuations_n_no_reit_no_direct_ratios.valuations_N_NO_REIT_NO_DIRECT_ratios(
                    capex_to_operating_cash_flow = 1.337, 
                    capex_to_operating_income = 1.337, 
                    capex_to_revenue = 1.337, 
                    cash_conversion_cycle = 1.337, 
                    cost_of_goods_sold_to_revenue = 1.337, 
                    days_inventory = 1.337, 
                    days_payable = 1.337, 
                    days_sales_outstanding = 1.337, 
                    debt_to_asset = 1.337, 
                    debt_to_equity = 1.337, 
                    degree_of_financial_leverage = 1.337, 
                    degree_of_operating_leverage = 1.337, 
                    ebitda_margin = 1.337, 
                    effective_interest_rate = 1.337, 
                    equity_to_asset = 1.337, 
                    fcf_margin = 1.337, 
                    gross_margin = 1.337, 
                    gross_profit_to_asset = 1.337, 
                    inventory_to_revenue = 1.337, 
                    inventory_turnover = 1.337, 
                    liabilities_to_assets = 1.337, 
                    net_margin = 1.337, 
                    operating_margin = 1.337, 
                    payout = 1.337, 
                    rd2rev = 1.337, 
                    receivables_turnover = 1.337, 
                    return_on_tangible_asset = 1.337, 
                    return_on_tangible_equity = 1.337, 
                    roa = 1.337, 
                    roc_joel = 1.337, 
                    roce = 1.337, 
                    roe = 1.337, 
                    roe_adj = 1.337, 
                    roic = 1.337, 
                    roiic_1y = 1.337, 
                    rore_5y = 1.337, 
                    turnover = 1.337, 
                    wacc = 1.337, ),
                valuation_ratios = openapi_client.models.valuations_n_no_reit_no_direct_valuation_ratios.valuations_N_NO_REIT_NO_DIRECT_valuation_ratios(
                    cyclically_adjusted_pb_ratio = 1.337, 
                    cyclically_adjusted_price_to_fcf = 1.337, 
                    cyclically_adjusted_ps_ratio = 1.337, 
                    earning_yield_greenblatt = 1.337, 
                    enterprise_value_to_ebit = 1.337, 
                    enterprise_value_to_ebitda = 1.337, 
                    enterprise_value_to_fcf = 1.337, 
                    enterprise_value_to_revenue = 1.337, 
                    fcf_yield = 1.337, 
                    pb_ratio = 1.337, 
                    pe_ratio = 1.337, 
                    peg_ratio = 1.337, 
                    penri = 1.337, 
                    price_to_free_cash_flow = 1.337, 
                    price_to_operating_cash_flow = 1.337, 
                    price_to_owner_earnings = 1.337, 
                    price_to_tangible_book = 1.337, 
                    ps_ratio = 1.337, 
                    rate_of_return_value = 1.337, 
                    shiller_pe_ratio = 1.337, 
                    yield = 1.337, ),
                valuationand_quality = openapi_client.models.valuations_n_no_reit_no_direct_valuationand_quality.valuations_N_NO_REIT_NO_DIRECT_valuationand_quality(
                    beta = 1.337, 
                    bs_share = 1.337, 
                    buyback_yield = 1.337, 
                    cash_ratio = 1.337, 
                    current_ratio = 1.337, 
                    earnings_release_date = '', 
                    ebitda_5y_growth = 1.337, 
                    enterprise_value = 1.337, 
                    epv = 1.337, 
                    filing_date = '', 
                    filing_date_aor = '', 
                    forex_rate = 1.337, 
                    fscore = 1.337, 
                    graham_number = 1.337, 
                    growth_per_share_ebitda = 1.337, 
                    growth_per_share_eps = 1.337, 
                    growth_revenue_per_share = 1.337, 
                    interest_coverage = 1.337, 
                    intrinsic_value_projected_fcf = 1.337, 
                    medpsvalue = 1.337, 
                    mktcap = 1.337, 
                    month_end_stock_price = 1.337, 
                    mscore = 1.337, 
                    net_cash_per_share = 1.337, 
                    net_current_asset_value = 1.337, 
                    net_net_working_capital = 1.337, 
                    number_of_share_holders = 1.337, 
                    peter_lynch_fair_value = 1.337, 
                    price_high = 1.337, 
                    price_low = 1.337, 
                    quick_ratio = 1.337, 
                    share_buyback_ratio = 1.337, 
                    shareholder_yield = 1.337, 
                    shares_basic = 1.337, 
                    sloan_ratio = 1.337, 
                    snoa = 1.337, 
                    total_employee_number = 1.337, 
                    zscore = 1.337, )
            )
        else:
            return StockValuationsTtm(
        )
        """

    def testStockValuationsTtm(self):
        """Test StockValuationsTtm"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
