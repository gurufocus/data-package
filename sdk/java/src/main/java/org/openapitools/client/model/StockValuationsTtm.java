/*
 * Gurufocus Data Package API
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ValuationsINOREITNODIRECT;
import org.openapitools.client.model.ValuationsIREITNODIRECT;
import org.openapitools.client.model.ValuationsNNOREITDIRECT;
import org.openapitools.client.model.ValuationsNNOREITNODIRECT;
import org.openapitools.client.model.ValuationsNNOREITNODIRECTBasicInformation;
import org.openapitools.client.model.ValuationsNNOREITNODIRECTPerShareData;
import org.openapitools.client.model.ValuationsNNOREITNODIRECTRatios;
import org.openapitools.client.model.ValuationsNNOREITNODIRECTValuationRatios;
import org.openapitools.client.model.ValuationsNNOREITNODIRECTValuationandQuality;
import org.openapitools.client.model.ValuationsNREITDIRECT;
import org.openapitools.client.model.ValuationsNREITNODIRECT;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-11T01:10:00.357398434Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class StockValuationsTtm extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(StockValuationsTtm.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!StockValuationsTtm.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'StockValuationsTtm' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ValuationsIREITNODIRECT> adapterValuationsIREITNODIRECT = gson.getDelegateAdapter(this, TypeToken.get(ValuationsIREITNODIRECT.class));
            final TypeAdapter<ValuationsINOREITNODIRECT> adapterValuationsINOREITNODIRECT = gson.getDelegateAdapter(this, TypeToken.get(ValuationsINOREITNODIRECT.class));
            final TypeAdapter<ValuationsNREITDIRECT> adapterValuationsNREITDIRECT = gson.getDelegateAdapter(this, TypeToken.get(ValuationsNREITDIRECT.class));
            final TypeAdapter<ValuationsNNOREITDIRECT> adapterValuationsNNOREITDIRECT = gson.getDelegateAdapter(this, TypeToken.get(ValuationsNNOREITDIRECT.class));
            final TypeAdapter<ValuationsNREITNODIRECT> adapterValuationsNREITNODIRECT = gson.getDelegateAdapter(this, TypeToken.get(ValuationsNREITNODIRECT.class));
            final TypeAdapter<ValuationsNNOREITNODIRECT> adapterValuationsNNOREITNODIRECT = gson.getDelegateAdapter(this, TypeToken.get(ValuationsNNOREITNODIRECT.class));

            return (TypeAdapter<T>) new TypeAdapter<StockValuationsTtm>() {
                @Override
                public void write(JsonWriter out, StockValuationsTtm value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ValuationsIREITNODIRECT`
                    if (value.getActualInstance() instanceof ValuationsIREITNODIRECT) {
                        JsonElement element = adapterValuationsIREITNODIRECT.toJsonTree((ValuationsIREITNODIRECT)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ValuationsINOREITNODIRECT`
                    if (value.getActualInstance() instanceof ValuationsINOREITNODIRECT) {
                        JsonElement element = adapterValuationsINOREITNODIRECT.toJsonTree((ValuationsINOREITNODIRECT)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ValuationsNREITDIRECT`
                    if (value.getActualInstance() instanceof ValuationsNREITDIRECT) {
                        JsonElement element = adapterValuationsNREITDIRECT.toJsonTree((ValuationsNREITDIRECT)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ValuationsNNOREITDIRECT`
                    if (value.getActualInstance() instanceof ValuationsNNOREITDIRECT) {
                        JsonElement element = adapterValuationsNNOREITDIRECT.toJsonTree((ValuationsNNOREITDIRECT)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ValuationsNREITNODIRECT`
                    if (value.getActualInstance() instanceof ValuationsNREITNODIRECT) {
                        JsonElement element = adapterValuationsNREITNODIRECT.toJsonTree((ValuationsNREITNODIRECT)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ValuationsNNOREITNODIRECT`
                    if (value.getActualInstance() instanceof ValuationsNNOREITNODIRECT) {
                        JsonElement element = adapterValuationsNNOREITNODIRECT.toJsonTree((ValuationsNNOREITNODIRECT)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ValuationsINOREITNODIRECT, ValuationsIREITNODIRECT, ValuationsNNOREITDIRECT, ValuationsNNOREITNODIRECT, ValuationsNREITDIRECT, ValuationsNREITNODIRECT");
                }

                @Override
                public StockValuationsTtm read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ValuationsIREITNODIRECT
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ValuationsIREITNODIRECT.validateJsonElement(jsonElement);
                        actualAdapter = adapterValuationsIREITNODIRECT;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ValuationsIREITNODIRECT'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ValuationsIREITNODIRECT failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ValuationsIREITNODIRECT'", e);
                    }
                    // deserialize ValuationsINOREITNODIRECT
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ValuationsINOREITNODIRECT.validateJsonElement(jsonElement);
                        actualAdapter = adapterValuationsINOREITNODIRECT;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ValuationsINOREITNODIRECT'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ValuationsINOREITNODIRECT failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ValuationsINOREITNODIRECT'", e);
                    }
                    // deserialize ValuationsNREITDIRECT
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ValuationsNREITDIRECT.validateJsonElement(jsonElement);
                        actualAdapter = adapterValuationsNREITDIRECT;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ValuationsNREITDIRECT'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ValuationsNREITDIRECT failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ValuationsNREITDIRECT'", e);
                    }
                    // deserialize ValuationsNNOREITDIRECT
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ValuationsNNOREITDIRECT.validateJsonElement(jsonElement);
                        actualAdapter = adapterValuationsNNOREITDIRECT;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ValuationsNNOREITDIRECT'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ValuationsNNOREITDIRECT failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ValuationsNNOREITDIRECT'", e);
                    }
                    // deserialize ValuationsNREITNODIRECT
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ValuationsNREITNODIRECT.validateJsonElement(jsonElement);
                        actualAdapter = adapterValuationsNREITNODIRECT;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ValuationsNREITNODIRECT'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ValuationsNREITNODIRECT failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ValuationsNREITNODIRECT'", e);
                    }
                    // deserialize ValuationsNNOREITNODIRECT
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ValuationsNNOREITNODIRECT.validateJsonElement(jsonElement);
                        actualAdapter = adapterValuationsNNOREITNODIRECT;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ValuationsNNOREITNODIRECT'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ValuationsNNOREITNODIRECT failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ValuationsNNOREITNODIRECT'", e);
                    }

                    if (match == 1) {
                        StockValuationsTtm ret = new StockValuationsTtm();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for StockValuationsTtm: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public StockValuationsTtm() {
        super("oneOf", Boolean.FALSE);
    }

    public StockValuationsTtm(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ValuationsIREITNODIRECT", ValuationsIREITNODIRECT.class);
        schemas.put("ValuationsINOREITNODIRECT", ValuationsINOREITNODIRECT.class);
        schemas.put("ValuationsNREITDIRECT", ValuationsNREITDIRECT.class);
        schemas.put("ValuationsNNOREITDIRECT", ValuationsNNOREITDIRECT.class);
        schemas.put("ValuationsNREITNODIRECT", ValuationsNREITNODIRECT.class);
        schemas.put("ValuationsNNOREITNODIRECT", ValuationsNNOREITNODIRECT.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return StockValuationsTtm.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ValuationsINOREITNODIRECT, ValuationsIREITNODIRECT, ValuationsNNOREITDIRECT, ValuationsNNOREITNODIRECT, ValuationsNREITDIRECT, ValuationsNREITNODIRECT
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ValuationsIREITNODIRECT) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ValuationsINOREITNODIRECT) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ValuationsNREITDIRECT) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ValuationsNNOREITDIRECT) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ValuationsNREITNODIRECT) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ValuationsNNOREITNODIRECT) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ValuationsINOREITNODIRECT, ValuationsIREITNODIRECT, ValuationsNNOREITDIRECT, ValuationsNNOREITNODIRECT, ValuationsNREITDIRECT, ValuationsNREITNODIRECT");
    }

    /**
     * Get the actual instance, which can be the following:
     * ValuationsINOREITNODIRECT, ValuationsIREITNODIRECT, ValuationsNNOREITDIRECT, ValuationsNNOREITNODIRECT, ValuationsNREITDIRECT, ValuationsNREITNODIRECT
     *
     * @return The actual instance (ValuationsINOREITNODIRECT, ValuationsIREITNODIRECT, ValuationsNNOREITDIRECT, ValuationsNNOREITNODIRECT, ValuationsNREITDIRECT, ValuationsNREITNODIRECT)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ValuationsIREITNODIRECT`. If the actual instance is not `ValuationsIREITNODIRECT`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ValuationsIREITNODIRECT`
     * @throws ClassCastException if the instance is not `ValuationsIREITNODIRECT`
     */
    public ValuationsIREITNODIRECT getValuationsIREITNODIRECT() throws ClassCastException {
        return (ValuationsIREITNODIRECT)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ValuationsINOREITNODIRECT`. If the actual instance is not `ValuationsINOREITNODIRECT`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ValuationsINOREITNODIRECT`
     * @throws ClassCastException if the instance is not `ValuationsINOREITNODIRECT`
     */
    public ValuationsINOREITNODIRECT getValuationsINOREITNODIRECT() throws ClassCastException {
        return (ValuationsINOREITNODIRECT)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ValuationsNREITDIRECT`. If the actual instance is not `ValuationsNREITDIRECT`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ValuationsNREITDIRECT`
     * @throws ClassCastException if the instance is not `ValuationsNREITDIRECT`
     */
    public ValuationsNREITDIRECT getValuationsNREITDIRECT() throws ClassCastException {
        return (ValuationsNREITDIRECT)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ValuationsNNOREITDIRECT`. If the actual instance is not `ValuationsNNOREITDIRECT`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ValuationsNNOREITDIRECT`
     * @throws ClassCastException if the instance is not `ValuationsNNOREITDIRECT`
     */
    public ValuationsNNOREITDIRECT getValuationsNNOREITDIRECT() throws ClassCastException {
        return (ValuationsNNOREITDIRECT)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ValuationsNREITNODIRECT`. If the actual instance is not `ValuationsNREITNODIRECT`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ValuationsNREITNODIRECT`
     * @throws ClassCastException if the instance is not `ValuationsNREITNODIRECT`
     */
    public ValuationsNREITNODIRECT getValuationsNREITNODIRECT() throws ClassCastException {
        return (ValuationsNREITNODIRECT)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ValuationsNNOREITNODIRECT`. If the actual instance is not `ValuationsNNOREITNODIRECT`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ValuationsNNOREITNODIRECT`
     * @throws ClassCastException if the instance is not `ValuationsNNOREITNODIRECT`
     */
    public ValuationsNNOREITNODIRECT getValuationsNNOREITNODIRECT() throws ClassCastException {
        return (ValuationsNNOREITNODIRECT)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to StockValuationsTtm
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with ValuationsIREITNODIRECT
        try {
            ValuationsIREITNODIRECT.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ValuationsIREITNODIRECT failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ValuationsINOREITNODIRECT
        try {
            ValuationsINOREITNODIRECT.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ValuationsINOREITNODIRECT failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ValuationsNREITDIRECT
        try {
            ValuationsNREITDIRECT.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ValuationsNREITDIRECT failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ValuationsNNOREITDIRECT
        try {
            ValuationsNNOREITDIRECT.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ValuationsNNOREITDIRECT failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ValuationsNREITNODIRECT
        try {
            ValuationsNREITNODIRECT.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ValuationsNREITNODIRECT failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ValuationsNNOREITNODIRECT
        try {
            ValuationsNNOREITNODIRECT.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ValuationsNNOREITNODIRECT failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for StockValuationsTtm with oneOf schemas: ValuationsINOREITNODIRECT, ValuationsIREITNODIRECT, ValuationsNNOREITDIRECT, ValuationsNNOREITNODIRECT, ValuationsNREITDIRECT, ValuationsNREITNODIRECT. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of StockValuationsTtm given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of StockValuationsTtm
     * @throws IOException if the JSON string is invalid with respect to StockValuationsTtm
     */
    public static StockValuationsTtm fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, StockValuationsTtm.class);
    }

    /**
     * Convert an instance of StockValuationsTtm to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

