/*
 * Gurufocus Data Package API
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GuruTransaction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GurusIdGet200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-11T01:10:00.357398434Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class GurusIdGet200Response {
  public static final String SERIALIZED_NAME_13_D_G = "13DG";
  @SerializedName(SERIALIZED_NAME_13_D_G)
  @javax.annotation.Nullable
  private List<GuruTransaction> _13DG = new ArrayList<>();

  public static final String SERIALIZED_NAME_13_F = "13F";
  @SerializedName(SERIALIZED_NAME_13_F)
  @javax.annotation.Nullable
  private List<GuruTransaction> _13F = new ArrayList<>();

  public GurusIdGet200Response() {
  }

  public GurusIdGet200Response _13DG(@javax.annotation.Nullable List<GuruTransaction> _13DG) {
    this._13DG = _13DG;
    return this;
  }

  public GurusIdGet200Response add13DGItem(GuruTransaction _13DGItem) {
    if (this._13DG == null) {
      this._13DG = new ArrayList<>();
    }
    this._13DG.add(_13DGItem);
    return this;
  }

  /**
   * Array of guru transactions
   * @return _13DG
   */
  @javax.annotation.Nullable
  public List<GuruTransaction> get13DG() {
    return _13DG;
  }

  public void set13DG(@javax.annotation.Nullable List<GuruTransaction> _13DG) {
    this._13DG = _13DG;
  }


  public GurusIdGet200Response _13F(@javax.annotation.Nullable List<GuruTransaction> _13F) {
    this._13F = _13F;
    return this;
  }

  public GurusIdGet200Response add13FItem(GuruTransaction _13FItem) {
    if (this._13F == null) {
      this._13F = new ArrayList<>();
    }
    this._13F.add(_13FItem);
    return this;
  }

  /**
   * Array of guru transactions
   * @return _13F
   */
  @javax.annotation.Nullable
  public List<GuruTransaction> get13F() {
    return _13F;
  }

  public void set13F(@javax.annotation.Nullable List<GuruTransaction> _13F) {
    this._13F = _13F;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GurusIdGet200Response gurusIdGet200Response = (GurusIdGet200Response) o;
    return Objects.equals(this._13DG, gurusIdGet200Response._13DG) &&
        Objects.equals(this._13F, gurusIdGet200Response._13F);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_13DG, _13F);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GurusIdGet200Response {\n");
    sb.append("    _13DG: ").append(toIndentedString(_13DG)).append("\n");
    sb.append("    _13F: ").append(toIndentedString(_13F)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("13DG");
    openapiFields.add("13F");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GurusIdGet200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GurusIdGet200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GurusIdGet200Response is not found in the empty JSON string", GurusIdGet200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GurusIdGet200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GurusIdGet200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("13DG") != null && !jsonObj.get("13DG").isJsonNull()) {
        JsonArray jsonArray_13DG = jsonObj.getAsJsonArray("13DG");
        if (jsonArray_13DG != null) {
          // ensure the json data is an array
          if (!jsonObj.get("13DG").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `13DG` to be an array in the JSON string but got `%s`", jsonObj.get("13DG").toString()));
          }

          // validate the optional field `13DG` (array)
          for (int i = 0; i < jsonArray_13DG.size(); i++) {
            GuruTransaction.validateJsonElement(jsonArray_13DG.get(i));
          };
        }
      }
      if (jsonObj.get("13F") != null && !jsonObj.get("13F").isJsonNull()) {
        JsonArray jsonArray_13F = jsonObj.getAsJsonArray("13F");
        if (jsonArray_13F != null) {
          // ensure the json data is an array
          if (!jsonObj.get("13F").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `13F` to be an array in the JSON string but got `%s`", jsonObj.get("13F").toString()));
          }

          // validate the optional field `13F` (array)
          for (int i = 0; i < jsonArray_13F.size(); i++) {
            GuruTransaction.validateJsonElement(jsonArray_13F.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GurusIdGet200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GurusIdGet200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GurusIdGet200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GurusIdGet200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GurusIdGet200Response>() {
           @Override
           public void write(JsonWriter out, GurusIdGet200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GurusIdGet200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GurusIdGet200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GurusIdGet200Response
   * @throws IOException if the JSON string is invalid with respect to GurusIdGet200Response
   */
  public static GurusIdGet200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GurusIdGet200Response.class);
  }

  /**
   * Convert an instance of GurusIdGet200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

