/*
 * Gurufocus Data Package API
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StockProfileGeneral
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-11T01:10:00.357398434Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class StockProfileGeneral {
  public static final String SERIALIZED_NAME_IP_O_DATE = "IPO_date";
  @SerializedName(SERIALIZED_NAME_IP_O_DATE)
  @javax.annotation.Nullable
  private String ipODate;

  public static final String SERIALIZED_NAME_IS_DIRECT = "IsDirect";
  @SerializedName(SERIALIZED_NAME_IS_DIRECT)
  @javax.annotation.Nullable
  private String isDirect;

  public static final String SERIALIZED_NAME_N_A_I_C_S = "NAICS";
  @SerializedName(SERIALIZED_NAME_N_A_I_C_S)
  @javax.annotation.Nullable
  private BigDecimal NAICS;

  public static final String SERIALIZED_NAME_CIK = "cik";
  @SerializedName(SERIALIZED_NAME_CIK)
  @javax.annotation.Nullable
  private String cik;

  public static final String SERIALIZED_NAME_CLASS_DESCPT = "class_descpt";
  @SerializedName(SERIALIZED_NAME_CLASS_DESCPT)
  @javax.annotation.Nullable
  private String classDescpt;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  @javax.annotation.Nullable
  private String company;

  public static final String SERIALIZED_NAME_COMPANY_ID = "company_id";
  @SerializedName(SERIALIZED_NAME_COMPANY_ID)
  @javax.annotation.Nullable
  private String companyId;

  public static final String SERIALIZED_NAME_COUNTRY_ISO = "country_iso";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ISO)
  @javax.annotation.Nullable
  private String countryIso;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nullable
  private String currency;

  public static final String SERIALIZED_NAME_CURRENCY_COMP = "currency_comp";
  @SerializedName(SERIALIZED_NAME_CURRENCY_COMP)
  @javax.annotation.Nullable
  private String currencyComp;

  public static final String SERIALIZED_NAME_DEPOSITARY_RECEIPT_RATIO = "depositary_receipt_ratio";
  @SerializedName(SERIALIZED_NAME_DEPOSITARY_RECEIPT_RATIO)
  @javax.annotation.Nullable
  private BigDecimal depositaryReceiptRatio;

  public static final String SERIALIZED_NAME_EXCHANGE = "exchange";
  @SerializedName(SERIALIZED_NAME_EXCHANGE)
  @javax.annotation.Nullable
  private String exchange;

  public static final String SERIALIZED_NAME_FISCAL_YEAR_END = "fiscal_year_end";
  @SerializedName(SERIALIZED_NAME_FISCAL_YEAR_END)
  @javax.annotation.Nullable
  private BigDecimal fiscalYearEnd;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  @javax.annotation.Nullable
  private String group;

  public static final String SERIALIZED_NAME_IND_TEMPLATE = "ind_template";
  @SerializedName(SERIALIZED_NAME_IND_TEMPLATE)
  @javax.annotation.Nullable
  private String indTemplate;

  public static final String SERIALIZED_NAME_INDUSTRY = "industry";
  @SerializedName(SERIALIZED_NAME_INDUSTRY)
  @javax.annotation.Nullable
  private String industry;

  public static final String SERIALIZED_NAME_LATEST_QUARTER = "latest_quarter";
  @SerializedName(SERIALIZED_NAME_LATEST_QUARTER)
  @javax.annotation.Nullable
  private String latestQuarter;

  public static final String SERIALIZED_NAME_OPTIONABLE_STOCK = "optionable_stock";
  @SerializedName(SERIALIZED_NAME_OPTIONABLE_STOCK)
  @javax.annotation.Nullable
  private Boolean optionableStock;

  public static final String SERIALIZED_NAME_PRIMARY_EXCH = "primary_exch";
  @SerializedName(SERIALIZED_NAME_PRIMARY_EXCH)
  @javax.annotation.Nullable
  private String primaryExch;

  public static final String SERIALIZED_NAME_PRIMARY_STOCKID = "primary_stockid";
  @SerializedName(SERIALIZED_NAME_PRIMARY_STOCKID)
  @javax.annotation.Nullable
  private String primaryStockid;

  public static final String SERIALIZED_NAME_PRIMARY_SYMBOL = "primary_symbol";
  @SerializedName(SERIALIZED_NAME_PRIMARY_SYMBOL)
  @javax.annotation.Nullable
  private String primarySymbol;

  public static final String SERIALIZED_NAME_REPORT_FREQUENCY = "report_frequency";
  @SerializedName(SERIALIZED_NAME_REPORT_FREQUENCY)
  @javax.annotation.Nullable
  private String reportFrequency;

  public static final String SERIALIZED_NAME_SECTOR = "sector";
  @SerializedName(SERIALIZED_NAME_SECTOR)
  @javax.annotation.Nullable
  private String sector;

  public static final String SERIALIZED_NAME_SIC = "sic";
  @SerializedName(SERIALIZED_NAME_SIC)
  @javax.annotation.Nullable
  private BigDecimal sic;

  public static final String SERIALIZED_NAME_STOCKID = "stockid";
  @SerializedName(SERIALIZED_NAME_STOCKID)
  @javax.annotation.Nullable
  private String stockid;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  @javax.annotation.Nullable
  private String symbol;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public StockProfileGeneral() {
  }

  public StockProfileGeneral ipODate(@javax.annotation.Nullable String ipODate) {
    this.ipODate = ipODate;
    return this;
  }

  /**
   * The date of the company&#39;s initial public offering.
   * @return ipODate
   */
  @javax.annotation.Nullable
  public String getIpODate() {
    return ipODate;
  }

  public void setIpODate(@javax.annotation.Nullable String ipODate) {
    this.ipODate = ipODate;
  }


  public StockProfileGeneral isDirect(@javax.annotation.Nullable String isDirect) {
    this.isDirect = isDirect;
    return this;
  }

  /**
   * Does the company report its cash flow statement using the direct method (cash collections, cash payments) or the indirect method (net income -&gt; free cash flow)?
   * @return isDirect
   */
  @javax.annotation.Nullable
  public String getIsDirect() {
    return isDirect;
  }

  public void setIsDirect(@javax.annotation.Nullable String isDirect) {
    this.isDirect = isDirect;
  }


  public StockProfileGeneral NAICS(@javax.annotation.Nullable BigDecimal NAICS) {
    this.NAICS = NAICS;
    return this;
  }

  /**
   * A six-digit code that identifies the company&#39;s main business operation
   * @return NAICS
   */
  @javax.annotation.Nullable
  public BigDecimal getNAICS() {
    return NAICS;
  }

  public void setNAICS(@javax.annotation.Nullable BigDecimal NAICS) {
    this.NAICS = NAICS;
  }


  public StockProfileGeneral cik(@javax.annotation.Nullable String cik) {
    this.cik = cik;
    return this;
  }

  /**
   * A unique 10-digit number the SEC assigns to companies, mutual funds and hedge funds
   * @return cik
   */
  @javax.annotation.Nullable
  public String getCik() {
    return cik;
  }

  public void setCik(@javax.annotation.Nullable String cik) {
    this.cik = cik;
  }


  public StockProfileGeneral classDescpt(@javax.annotation.Nullable String classDescpt) {
    this.classDescpt = classDescpt;
    return this;
  }

  /**
   * A unique identifier that describes the stock ticker&#39;s share class. Examples: Class A, Class C, ADR
   * @return classDescpt
   */
  @javax.annotation.Nullable
  public String getClassDescpt() {
    return classDescpt;
  }

  public void setClassDescpt(@javax.annotation.Nullable String classDescpt) {
    this.classDescpt = classDescpt;
  }


  public StockProfileGeneral company(@javax.annotation.Nullable String company) {
    this.company = company;
    return this;
  }

  /**
   * The name of the company as identified on its SEC filings.
   * @return company
   */
  @javax.annotation.Nullable
  public String getCompany() {
    return company;
  }

  public void setCompany(@javax.annotation.Nullable String company) {
    this.company = company;
  }


  public StockProfileGeneral companyId(@javax.annotation.Nullable String companyId) {
    this.companyId = companyId;
    return this;
  }

  /**
   * Get companyId
   * @return companyId
   */
  @javax.annotation.Nullable
  public String getCompanyId() {
    return companyId;
  }

  public void setCompanyId(@javax.annotation.Nullable String companyId) {
    this.companyId = companyId;
  }


  public StockProfileGeneral countryIso(@javax.annotation.Nullable String countryIso) {
    this.countryIso = countryIso;
    return this;
  }

  /**
   * The country containing the company&#39;s headquarters.
   * @return countryIso
   */
  @javax.annotation.Nullable
  public String getCountryIso() {
    return countryIso;
  }

  public void setCountryIso(@javax.annotation.Nullable String countryIso) {
    this.countryIso = countryIso;
  }


  public StockProfileGeneral currency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The currency symbol used to report a company&#39;s financial data. For example, NYSE stocks have currency USD
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
  }


  public StockProfileGeneral currencyComp(@javax.annotation.Nullable String currencyComp) {
    this.currencyComp = currencyComp;
    return this;
  }

  /**
   * The currency symbol used to report a company&#39;s financial data. For example, NYSE stocks have currency USD
   * @return currencyComp
   */
  @javax.annotation.Nullable
  public String getCurrencyComp() {
    return currencyComp;
  }

  public void setCurrencyComp(@javax.annotation.Nullable String currencyComp) {
    this.currencyComp = currencyComp;
  }


  public StockProfileGeneral depositaryReceiptRatio(@javax.annotation.Nullable BigDecimal depositaryReceiptRatio) {
    this.depositaryReceiptRatio = depositaryReceiptRatio;
    return this;
  }

  /**
   * Get depositaryReceiptRatio
   * @return depositaryReceiptRatio
   */
  @javax.annotation.Nullable
  public BigDecimal getDepositaryReceiptRatio() {
    return depositaryReceiptRatio;
  }

  public void setDepositaryReceiptRatio(@javax.annotation.Nullable BigDecimal depositaryReceiptRatio) {
    this.depositaryReceiptRatio = depositaryReceiptRatio;
  }


  public StockProfileGeneral exchange(@javax.annotation.Nullable String exchange) {
    this.exchange = exchange;
    return this;
  }

  /**
   * The company&#39;s stock exchange. Example: NAS for Apple.
   * @return exchange
   */
  @javax.annotation.Nullable
  public String getExchange() {
    return exchange;
  }

  public void setExchange(@javax.annotation.Nullable String exchange) {
    this.exchange = exchange;
  }


  public StockProfileGeneral fiscalYearEnd(@javax.annotation.Nullable BigDecimal fiscalYearEnd) {
    this.fiscalYearEnd = fiscalYearEnd;
    return this;
  }

  /**
   * The month representing the company&#39;s fiscal year end.
   * @return fiscalYearEnd
   */
  @javax.annotation.Nullable
  public BigDecimal getFiscalYearEnd() {
    return fiscalYearEnd;
  }

  public void setFiscalYearEnd(@javax.annotation.Nullable BigDecimal fiscalYearEnd) {
    this.fiscalYearEnd = fiscalYearEnd;
  }


  public StockProfileGeneral group(@javax.annotation.Nullable String group) {
    this.group = group;
    return this;
  }

  /**
   * Get group
   * @return group
   */
  @javax.annotation.Nullable
  public String getGroup() {
    return group;
  }

  public void setGroup(@javax.annotation.Nullable String group) {
    this.group = group;
  }


  public StockProfileGeneral indTemplate(@javax.annotation.Nullable String indTemplate) {
    this.indTemplate = indTemplate;
    return this;
  }

  /**
   * The company&#39;s financial statement type: either bank, insurance or nonfinancial
   * @return indTemplate
   */
  @javax.annotation.Nullable
  public String getIndTemplate() {
    return indTemplate;
  }

  public void setIndTemplate(@javax.annotation.Nullable String indTemplate) {
    this.indTemplate = indTemplate;
  }


  public StockProfileGeneral industry(@javax.annotation.Nullable String industry) {
    this.industry = industry;
    return this;
  }

  /**
   * The company&#39;s industry. Example: Discount Stores for WMT.
   * @return industry
   */
  @javax.annotation.Nullable
  public String getIndustry() {
    return industry;
  }

  public void setIndustry(@javax.annotation.Nullable String industry) {
    this.industry = industry;
  }


  public StockProfileGeneral latestQuarter(@javax.annotation.Nullable String latestQuarter) {
    this.latestQuarter = latestQuarter;
    return this;
  }

  /**
   * The company&#39;s latest quarter-end date
   * @return latestQuarter
   */
  @javax.annotation.Nullable
  public String getLatestQuarter() {
    return latestQuarter;
  }

  public void setLatestQuarter(@javax.annotation.Nullable String latestQuarter) {
    this.latestQuarter = latestQuarter;
  }


  public StockProfileGeneral optionableStock(@javax.annotation.Nullable Boolean optionableStock) {
    this.optionableStock = optionableStock;
    return this;
  }

  /**
   * Does the stock offer options? If yes, the stock is \&quot;optionable.\&quot;
   * @return optionableStock
   */
  @javax.annotation.Nullable
  public Boolean getOptionableStock() {
    return optionableStock;
  }

  public void setOptionableStock(@javax.annotation.Nullable Boolean optionableStock) {
    this.optionableStock = optionableStock;
  }


  public StockProfileGeneral primaryExch(@javax.annotation.Nullable String primaryExch) {
    this.primaryExch = primaryExch;
    return this;
  }

  /**
   * The stock ticker&#39;s primary exchange, which most likely connects to the company&#39;s headquarter country
   * @return primaryExch
   */
  @javax.annotation.Nullable
  public String getPrimaryExch() {
    return primaryExch;
  }

  public void setPrimaryExch(@javax.annotation.Nullable String primaryExch) {
    this.primaryExch = primaryExch;
  }


  public StockProfileGeneral primaryStockid(@javax.annotation.Nullable String primaryStockid) {
    this.primaryStockid = primaryStockid;
    return this;
  }

  /**
   * Get primaryStockid
   * @return primaryStockid
   */
  @javax.annotation.Nullable
  public String getPrimaryStockid() {
    return primaryStockid;
  }

  public void setPrimaryStockid(@javax.annotation.Nullable String primaryStockid) {
    this.primaryStockid = primaryStockid;
  }


  public StockProfileGeneral primarySymbol(@javax.annotation.Nullable String primarySymbol) {
    this.primarySymbol = primarySymbol;
    return this;
  }

  /**
   * The ticker symbol the company trades under its primary exchange
   * @return primarySymbol
   */
  @javax.annotation.Nullable
  public String getPrimarySymbol() {
    return primarySymbol;
  }

  public void setPrimarySymbol(@javax.annotation.Nullable String primarySymbol) {
    this.primarySymbol = primarySymbol;
  }


  public StockProfileGeneral reportFrequency(@javax.annotation.Nullable String reportFrequency) {
    this.reportFrequency = reportFrequency;
    return this;
  }

  /**
   * How frequently does a company report its earnings?
   * @return reportFrequency
   */
  @javax.annotation.Nullable
  public String getReportFrequency() {
    return reportFrequency;
  }

  public void setReportFrequency(@javax.annotation.Nullable String reportFrequency) {
    this.reportFrequency = reportFrequency;
  }


  public StockProfileGeneral sector(@javax.annotation.Nullable String sector) {
    this.sector = sector;
    return this;
  }

  /**
   * A three-digit code indicating a company&#39;s market sector
   * @return sector
   */
  @javax.annotation.Nullable
  public String getSector() {
    return sector;
  }

  public void setSector(@javax.annotation.Nullable String sector) {
    this.sector = sector;
  }


  public StockProfileGeneral sic(@javax.annotation.Nullable BigDecimal sic) {
    this.sic = sic;
    return this;
  }

  /**
   * A four-digit code that classifies a company by its business type
   * @return sic
   */
  @javax.annotation.Nullable
  public BigDecimal getSic() {
    return sic;
  }

  public void setSic(@javax.annotation.Nullable BigDecimal sic) {
    this.sic = sic;
  }


  public StockProfileGeneral stockid(@javax.annotation.Nullable String stockid) {
    this.stockid = stockid;
    return this;
  }

  /**
   * A unique identifier for the stock
   * @return stockid
   */
  @javax.annotation.Nullable
  public String getStockid() {
    return stockid;
  }

  public void setStockid(@javax.annotation.Nullable String stockid) {
    this.stockid = stockid;
  }


  public StockProfileGeneral symbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * The company&#39;s stock ticker symbol
   * @return symbol
   */
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
  }


  public StockProfileGeneral type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * A code that determines if a security represents common stock or preferred stock
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StockProfileGeneral stockProfileGeneral = (StockProfileGeneral) o;
    return Objects.equals(this.ipODate, stockProfileGeneral.ipODate) &&
        Objects.equals(this.isDirect, stockProfileGeneral.isDirect) &&
        Objects.equals(this.NAICS, stockProfileGeneral.NAICS) &&
        Objects.equals(this.cik, stockProfileGeneral.cik) &&
        Objects.equals(this.classDescpt, stockProfileGeneral.classDescpt) &&
        Objects.equals(this.company, stockProfileGeneral.company) &&
        Objects.equals(this.companyId, stockProfileGeneral.companyId) &&
        Objects.equals(this.countryIso, stockProfileGeneral.countryIso) &&
        Objects.equals(this.currency, stockProfileGeneral.currency) &&
        Objects.equals(this.currencyComp, stockProfileGeneral.currencyComp) &&
        Objects.equals(this.depositaryReceiptRatio, stockProfileGeneral.depositaryReceiptRatio) &&
        Objects.equals(this.exchange, stockProfileGeneral.exchange) &&
        Objects.equals(this.fiscalYearEnd, stockProfileGeneral.fiscalYearEnd) &&
        Objects.equals(this.group, stockProfileGeneral.group) &&
        Objects.equals(this.indTemplate, stockProfileGeneral.indTemplate) &&
        Objects.equals(this.industry, stockProfileGeneral.industry) &&
        Objects.equals(this.latestQuarter, stockProfileGeneral.latestQuarter) &&
        Objects.equals(this.optionableStock, stockProfileGeneral.optionableStock) &&
        Objects.equals(this.primaryExch, stockProfileGeneral.primaryExch) &&
        Objects.equals(this.primaryStockid, stockProfileGeneral.primaryStockid) &&
        Objects.equals(this.primarySymbol, stockProfileGeneral.primarySymbol) &&
        Objects.equals(this.reportFrequency, stockProfileGeneral.reportFrequency) &&
        Objects.equals(this.sector, stockProfileGeneral.sector) &&
        Objects.equals(this.sic, stockProfileGeneral.sic) &&
        Objects.equals(this.stockid, stockProfileGeneral.stockid) &&
        Objects.equals(this.symbol, stockProfileGeneral.symbol) &&
        Objects.equals(this.type, stockProfileGeneral.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ipODate, isDirect, NAICS, cik, classDescpt, company, companyId, countryIso, currency, currencyComp, depositaryReceiptRatio, exchange, fiscalYearEnd, group, indTemplate, industry, latestQuarter, optionableStock, primaryExch, primaryStockid, primarySymbol, reportFrequency, sector, sic, stockid, symbol, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StockProfileGeneral {\n");
    sb.append("    ipODate: ").append(toIndentedString(ipODate)).append("\n");
    sb.append("    isDirect: ").append(toIndentedString(isDirect)).append("\n");
    sb.append("    NAICS: ").append(toIndentedString(NAICS)).append("\n");
    sb.append("    cik: ").append(toIndentedString(cik)).append("\n");
    sb.append("    classDescpt: ").append(toIndentedString(classDescpt)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    companyId: ").append(toIndentedString(companyId)).append("\n");
    sb.append("    countryIso: ").append(toIndentedString(countryIso)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    currencyComp: ").append(toIndentedString(currencyComp)).append("\n");
    sb.append("    depositaryReceiptRatio: ").append(toIndentedString(depositaryReceiptRatio)).append("\n");
    sb.append("    exchange: ").append(toIndentedString(exchange)).append("\n");
    sb.append("    fiscalYearEnd: ").append(toIndentedString(fiscalYearEnd)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    indTemplate: ").append(toIndentedString(indTemplate)).append("\n");
    sb.append("    industry: ").append(toIndentedString(industry)).append("\n");
    sb.append("    latestQuarter: ").append(toIndentedString(latestQuarter)).append("\n");
    sb.append("    optionableStock: ").append(toIndentedString(optionableStock)).append("\n");
    sb.append("    primaryExch: ").append(toIndentedString(primaryExch)).append("\n");
    sb.append("    primaryStockid: ").append(toIndentedString(primaryStockid)).append("\n");
    sb.append("    primarySymbol: ").append(toIndentedString(primarySymbol)).append("\n");
    sb.append("    reportFrequency: ").append(toIndentedString(reportFrequency)).append("\n");
    sb.append("    sector: ").append(toIndentedString(sector)).append("\n");
    sb.append("    sic: ").append(toIndentedString(sic)).append("\n");
    sb.append("    stockid: ").append(toIndentedString(stockid)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IPO_date");
    openapiFields.add("IsDirect");
    openapiFields.add("NAICS");
    openapiFields.add("cik");
    openapiFields.add("class_descpt");
    openapiFields.add("company");
    openapiFields.add("company_id");
    openapiFields.add("country_iso");
    openapiFields.add("currency");
    openapiFields.add("currency_comp");
    openapiFields.add("depositary_receipt_ratio");
    openapiFields.add("exchange");
    openapiFields.add("fiscal_year_end");
    openapiFields.add("group");
    openapiFields.add("ind_template");
    openapiFields.add("industry");
    openapiFields.add("latest_quarter");
    openapiFields.add("optionable_stock");
    openapiFields.add("primary_exch");
    openapiFields.add("primary_stockid");
    openapiFields.add("primary_symbol");
    openapiFields.add("report_frequency");
    openapiFields.add("sector");
    openapiFields.add("sic");
    openapiFields.add("stockid");
    openapiFields.add("symbol");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StockProfileGeneral
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StockProfileGeneral.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StockProfileGeneral is not found in the empty JSON string", StockProfileGeneral.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StockProfileGeneral.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StockProfileGeneral` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("IPO_date") != null && !jsonObj.get("IPO_date").isJsonNull()) && !jsonObj.get("IPO_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IPO_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IPO_date").toString()));
      }
      if ((jsonObj.get("IsDirect") != null && !jsonObj.get("IsDirect").isJsonNull()) && !jsonObj.get("IsDirect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IsDirect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IsDirect").toString()));
      }
      if ((jsonObj.get("cik") != null && !jsonObj.get("cik").isJsonNull()) && !jsonObj.get("cik").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cik` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cik").toString()));
      }
      if ((jsonObj.get("class_descpt") != null && !jsonObj.get("class_descpt").isJsonNull()) && !jsonObj.get("class_descpt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `class_descpt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("class_descpt").toString()));
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if ((jsonObj.get("company_id") != null && !jsonObj.get("company_id").isJsonNull()) && !jsonObj.get("company_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_id").toString()));
      }
      if ((jsonObj.get("country_iso") != null && !jsonObj.get("country_iso").isJsonNull()) && !jsonObj.get("country_iso").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_iso` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_iso").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("currency_comp") != null && !jsonObj.get("currency_comp").isJsonNull()) && !jsonObj.get("currency_comp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_comp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_comp").toString()));
      }
      if ((jsonObj.get("exchange") != null && !jsonObj.get("exchange").isJsonNull()) && !jsonObj.get("exchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchange").toString()));
      }
      if ((jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) && !jsonObj.get("group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group").toString()));
      }
      if ((jsonObj.get("ind_template") != null && !jsonObj.get("ind_template").isJsonNull()) && !jsonObj.get("ind_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ind_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ind_template").toString()));
      }
      if ((jsonObj.get("industry") != null && !jsonObj.get("industry").isJsonNull()) && !jsonObj.get("industry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `industry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("industry").toString()));
      }
      if ((jsonObj.get("latest_quarter") != null && !jsonObj.get("latest_quarter").isJsonNull()) && !jsonObj.get("latest_quarter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latest_quarter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latest_quarter").toString()));
      }
      if ((jsonObj.get("primary_exch") != null && !jsonObj.get("primary_exch").isJsonNull()) && !jsonObj.get("primary_exch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_exch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_exch").toString()));
      }
      if ((jsonObj.get("primary_stockid") != null && !jsonObj.get("primary_stockid").isJsonNull()) && !jsonObj.get("primary_stockid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_stockid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_stockid").toString()));
      }
      if ((jsonObj.get("primary_symbol") != null && !jsonObj.get("primary_symbol").isJsonNull()) && !jsonObj.get("primary_symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_symbol").toString()));
      }
      if ((jsonObj.get("report_frequency") != null && !jsonObj.get("report_frequency").isJsonNull()) && !jsonObj.get("report_frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_frequency").toString()));
      }
      if ((jsonObj.get("sector") != null && !jsonObj.get("sector").isJsonNull()) && !jsonObj.get("sector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sector").toString()));
      }
      if ((jsonObj.get("stockid") != null && !jsonObj.get("stockid").isJsonNull()) && !jsonObj.get("stockid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stockid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stockid").toString()));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StockProfileGeneral.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StockProfileGeneral' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StockProfileGeneral> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StockProfileGeneral.class));

       return (TypeAdapter<T>) new TypeAdapter<StockProfileGeneral>() {
           @Override
           public void write(JsonWriter out, StockProfileGeneral value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StockProfileGeneral read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StockProfileGeneral given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StockProfileGeneral
   * @throws IOException if the JSON string is invalid with respect to StockProfileGeneral
   */
  public static StockProfileGeneral fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StockProfileGeneral.class);
  }

  /**
   * Convert an instance of StockProfileGeneral to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

