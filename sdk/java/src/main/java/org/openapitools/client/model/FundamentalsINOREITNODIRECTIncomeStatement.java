/*
 * Gurufocus Data Package API
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FundamentalsINOREITNODIRECTIncomeStatement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-11T01:10:00.357398434Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class FundamentalsINOREITNODIRECTIncomeStatement {
  public static final String SERIALIZED_NAME_DEPRECIATION_DEPLETION_AMORTIZATION = "depreciation_depletion_amortization";
  @SerializedName(SERIALIZED_NAME_DEPRECIATION_DEPLETION_AMORTIZATION)
  @javax.annotation.Nullable
  private BigDecimal depreciationDepletionAmortization;

  public static final String SERIALIZED_NAME_EBIT = "ebit";
  @SerializedName(SERIALIZED_NAME_EBIT)
  @javax.annotation.Nullable
  private BigDecimal ebit;

  public static final String SERIALIZED_NAME_EBITDA = "ebitda";
  @SerializedName(SERIALIZED_NAME_EBITDA)
  @javax.annotation.Nullable
  private BigDecimal ebitda;

  public static final String SERIALIZED_NAME_EBITDA_MARGIN = "ebitda_margin";
  @SerializedName(SERIALIZED_NAME_EBITDA_MARGIN)
  @javax.annotation.Nullable
  private BigDecimal ebitdaMargin;

  public static final String SERIALIZED_NAME_EPS_BASIC = "eps_basic";
  @SerializedName(SERIALIZED_NAME_EPS_BASIC)
  @javax.annotation.Nullable
  private BigDecimal epsBasic;

  public static final String SERIALIZED_NAME_EPS_DILUATED = "eps_diluated";
  @SerializedName(SERIALIZED_NAME_EPS_DILUATED)
  @javax.annotation.Nullable
  private BigDecimal epsDiluated;

  public static final String SERIALIZED_NAME_INTEREST_INCOME = "interest_income";
  @SerializedName(SERIALIZED_NAME_INTEREST_INCOME)
  @javax.annotation.Nullable
  private BigDecimal interestIncome;

  public static final String SERIALIZED_NAME_IS_FEE_REVENUE_AND_OTHER_INCOME = "is_fee_revenue_and_other_income";
  @SerializedName(SERIALIZED_NAME_IS_FEE_REVENUE_AND_OTHER_INCOME)
  @javax.annotation.Nullable
  private BigDecimal isFeeRevenueAndOtherIncome;

  public static final String SERIALIZED_NAME_IS_INTEREST_EXPENSE = "is_interest_expense";
  @SerializedName(SERIALIZED_NAME_IS_INTEREST_EXPENSE)
  @javax.annotation.Nullable
  private BigDecimal isInterestExpense;

  public static final String SERIALIZED_NAME_IS_NET_INVESTMENT_INCOME = "is_net_investment_income";
  @SerializedName(SERIALIZED_NAME_IS_NET_INVESTMENT_INCOME)
  @javax.annotation.Nullable
  private BigDecimal isNetInvestmentIncome;

  public static final String SERIALIZED_NAME_IS_NET_POLICYHOLDER_BENEFITS_AND_CLAIMS = "is_net_policyholder_benefits_and_claims";
  @SerializedName(SERIALIZED_NAME_IS_NET_POLICYHOLDER_BENEFITS_AND_CLAIMS)
  @javax.annotation.Nullable
  private BigDecimal isNetPolicyholderBenefitsAndClaims;

  public static final String SERIALIZED_NAME_IS_OTHER_EXPENSE_INSURANCE = "is_other_expense_insurance";
  @SerializedName(SERIALIZED_NAME_IS_OTHER_EXPENSE_INSURANCE)
  @javax.annotation.Nullable
  private BigDecimal isOtherExpenseInsurance;

  public static final String SERIALIZED_NAME_IS_POLICY_ACQUISITION_EXPENSE = "is_policy_acquisition_expense";
  @SerializedName(SERIALIZED_NAME_IS_POLICY_ACQUISITION_EXPENSE)
  @javax.annotation.Nullable
  private BigDecimal isPolicyAcquisitionExpense;

  public static final String SERIALIZED_NAME_IS_PREFERRED_DIVIDENDS = "is_preferred_dividends";
  @SerializedName(SERIALIZED_NAME_IS_PREFERRED_DIVIDENDS)
  @javax.annotation.Nullable
  private BigDecimal isPreferredDividends;

  public static final String SERIALIZED_NAME_IS_TOTAL_PREMIUMS_EARNED = "is_total_premiums_earned";
  @SerializedName(SERIALIZED_NAME_IS_TOTAL_PREMIUMS_EARNED)
  @javax.annotation.Nullable
  private BigDecimal isTotalPremiumsEarned;

  public static final String SERIALIZED_NAME_NET_INCOME = "net_income";
  @SerializedName(SERIALIZED_NAME_NET_INCOME)
  @javax.annotation.Nullable
  private BigDecimal netIncome;

  public static final String SERIALIZED_NAME_NET_INCOME_CONTINUING_OPERATIONS = "net_income_continuing_operations";
  @SerializedName(SERIALIZED_NAME_NET_INCOME_CONTINUING_OPERATIONS)
  @javax.annotation.Nullable
  private BigDecimal netIncomeContinuingOperations;

  public static final String SERIALIZED_NAME_NET_INCOME_DISCONTINUED_OPERATIONS = "net_income_discontinued_operations";
  @SerializedName(SERIALIZED_NAME_NET_INCOME_DISCONTINUED_OPERATIONS)
  @javax.annotation.Nullable
  private BigDecimal netIncomeDiscontinuedOperations;

  public static final String SERIALIZED_NAME_NET_INCOME_INCLUDING_NONCONTROLLING_INTERESTS = "net_income_including_noncontrolling_interests";
  @SerializedName(SERIALIZED_NAME_NET_INCOME_INCLUDING_NONCONTROLLING_INTERESTS)
  @javax.annotation.Nullable
  private BigDecimal netIncomeIncludingNoncontrollingInterests;

  public static final String SERIALIZED_NAME_NET_MARGIN = "net_margin";
  @SerializedName(SERIALIZED_NAME_NET_MARGIN)
  @javax.annotation.Nullable
  private BigDecimal netMargin;

  public static final String SERIALIZED_NAME_OTHER_INCOME_MINORITY_INTEREST = "other_income_minority_interest";
  @SerializedName(SERIALIZED_NAME_OTHER_INCOME_MINORITY_INTEREST)
  @javax.annotation.Nullable
  private BigDecimal otherIncomeMinorityInterest;

  public static final String SERIALIZED_NAME_OTHER_NET_INCOME_LOSS = "other_net_income_loss";
  @SerializedName(SERIALIZED_NAME_OTHER_NET_INCOME_LOSS)
  @javax.annotation.Nullable
  private BigDecimal otherNetIncomeLoss;

  public static final String SERIALIZED_NAME_PRETAX_INCOME = "pretax_income";
  @SerializedName(SERIALIZED_NAME_PRETAX_INCOME)
  @javax.annotation.Nullable
  private BigDecimal pretaxIncome;

  public static final String SERIALIZED_NAME_REVENUE = "revenue";
  @SerializedName(SERIALIZED_NAME_REVENUE)
  @javax.annotation.Nullable
  private BigDecimal revenue;

  public static final String SERIALIZED_NAME_SELLING_GENERAL_ADMIN_EXPENSE = "selling_general_admin_expense";
  @SerializedName(SERIALIZED_NAME_SELLING_GENERAL_ADMIN_EXPENSE)
  @javax.annotation.Nullable
  private BigDecimal sellingGeneralAdminExpense;

  public static final String SERIALIZED_NAME_SHARES_OUTSTANDING = "shares_outstanding";
  @SerializedName(SERIALIZED_NAME_SHARES_OUTSTANDING)
  @javax.annotation.Nullable
  private BigDecimal sharesOutstanding;

  public static final String SERIALIZED_NAME_TAX_PROVISION = "tax_provision";
  @SerializedName(SERIALIZED_NAME_TAX_PROVISION)
  @javax.annotation.Nullable
  private BigDecimal taxProvision;

  public static final String SERIALIZED_NAME_TAX_RATE = "tax_rate";
  @SerializedName(SERIALIZED_NAME_TAX_RATE)
  @javax.annotation.Nullable
  private BigDecimal taxRate;

  public static final String SERIALIZED_NAME_TOTAL_EXPENSES_INSURANCE = "total_expenses_insurance";
  @SerializedName(SERIALIZED_NAME_TOTAL_EXPENSES_INSURANCE)
  @javax.annotation.Nullable
  private BigDecimal totalExpensesInsurance;

  public FundamentalsINOREITNODIRECTIncomeStatement() {
  }

  public FundamentalsINOREITNODIRECTIncomeStatement depreciationDepletionAmortization(@javax.annotation.Nullable BigDecimal depreciationDepletionAmortization) {
    this.depreciationDepletionAmortization = depreciationDepletionAmortization;
    return this;
  }

  /**
   * &lt;p&gt;{{DDA}} is a present expense that accounts for the past cost of an asset that is now providing benefits. Depletion and amortization are synonyms for depreciation. Generally: The term depreciation is used when discussing man made tangible assets. The term depletion is used when discussing natural tangible assets. The term amortization is used when discussing intangible assets&lt;/p&gt;
   * @return depreciationDepletionAmortization
   */
  @javax.annotation.Nullable
  public BigDecimal getDepreciationDepletionAmortization() {
    return depreciationDepletionAmortization;
  }

  public void setDepreciationDepletionAmortization(@javax.annotation.Nullable BigDecimal depreciationDepletionAmortization) {
    this.depreciationDepletionAmortization = depreciationDepletionAmortization;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement ebit(@javax.annotation.Nullable BigDecimal ebit) {
    this.ebit = ebit;
    return this;
  }

  /**
   * In accounting and finance, earnings before interest and taxes (EBIT), is a measure of a firm&#39;s profit that includes all expenses except interest and income tax expenses. It is the difference between operating revenues and operating expenses.
   * @return ebit
   */
  @javax.annotation.Nullable
  public BigDecimal getEbit() {
    return ebit;
  }

  public void setEbit(@javax.annotation.Nullable BigDecimal ebit) {
    this.ebit = ebit;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement ebitda(@javax.annotation.Nullable BigDecimal ebitda) {
    this.ebitda = ebitda;
    return this;
  }

  /**
   * &lt;p&gt;Earnings Before Interest, Taxes, Depreciation, and Amortization ({{EBITDA}}) is what the company earns before it expenses interest, taxes, depreciation and amortization. &lt;br&gt;{{EBITDA}} is calculated as {{EBITDA}} &#x3D; {{Revenue}} - {{COGS}} - {{SGA}} - {{RD}} &#x3D; {{Gross_Profit}} - {{SGA}} - {{RD}} &lt;br&gt; The use of {{EBITDA}} is an attempt to make the results of different companies more comparable and uniform.&lt;/p&gt;
   * @return ebitda
   */
  @javax.annotation.Nullable
  public BigDecimal getEbitda() {
    return ebitda;
  }

  public void setEbitda(@javax.annotation.Nullable BigDecimal ebitda) {
    this.ebitda = ebitda;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement ebitdaMargin(@javax.annotation.Nullable BigDecimal ebitdaMargin) {
    this.ebitdaMargin = ebitdaMargin;
    return this;
  }

  /**
   * Get ebitdaMargin
   * @return ebitdaMargin
   */
  @javax.annotation.Nullable
  public BigDecimal getEbitdaMargin() {
    return ebitdaMargin;
  }

  public void setEbitdaMargin(@javax.annotation.Nullable BigDecimal ebitdaMargin) {
    this.ebitdaMargin = ebitdaMargin;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement epsBasic(@javax.annotation.Nullable BigDecimal epsBasic) {
    this.epsBasic = epsBasic;
    return this;
  }

  /**
   * &lt;p&gt;{{eps_basic}} is a rough measurement of the amount of a company&#39;s profit that can be allocated to one share of its stock. {{eps_basic}} do not factor in the dilutive effects on convertible securities. &lt;br&gt;{{eps_basic}} is calculated as: {{eps_basic}} &#x3D; ({{Net_Income}} - {{IS_preferred_dividends}}) / {{shares_basic}}&lt;/p&gt;
   * @return epsBasic
   */
  @javax.annotation.Nullable
  public BigDecimal getEpsBasic() {
    return epsBasic;
  }

  public void setEpsBasic(@javax.annotation.Nullable BigDecimal epsBasic) {
    this.epsBasic = epsBasic;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement epsDiluated(@javax.annotation.Nullable BigDecimal epsDiluated) {
    this.epsDiluated = epsDiluated;
    return this;
  }

  /**
   * &lt;p&gt;{{eps_diluated}} is a rough measurement of the amount of a company&#39;s profit that can be allocated to one share of its stock. {{eps_diluated}} takes into account all of the outstanding dilutive securities that could potentially be exercised (such as stock options and convertible {{Preferred_Stock}}) and shows how such an action would impact {{per_share_eps}}. &lt;br&gt;{{eps_diluated}} is calculated as: {{eps_diluated}} &#x3D; ({{Net_Income}} - {{IS_preferred_dividends}}) / {{Shares_Outstanding}}&lt;/p&gt;
   * @return epsDiluated
   */
  @javax.annotation.Nullable
  public BigDecimal getEpsDiluated() {
    return epsDiluated;
  }

  public void setEpsDiluated(@javax.annotation.Nullable BigDecimal epsDiluated) {
    this.epsDiluated = epsDiluated;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement interestIncome(@javax.annotation.Nullable BigDecimal interestIncome) {
    this.interestIncome = interestIncome;
    return this;
  }

  /**
   * &lt;p&gt;{{InterestIncome}} is the interest earned on cash temporarily held in savings accounts, certificates of deposits, or other investments.&lt;/p&gt;
   * @return interestIncome
   */
  @javax.annotation.Nullable
  public BigDecimal getInterestIncome() {
    return interestIncome;
  }

  public void setInterestIncome(@javax.annotation.Nullable BigDecimal interestIncome) {
    this.interestIncome = interestIncome;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement isFeeRevenueAndOtherIncome(@javax.annotation.Nullable BigDecimal isFeeRevenueAndOtherIncome) {
    this.isFeeRevenueAndOtherIncome = isFeeRevenueAndOtherIncome;
    return this;
  }

  /**
   * &lt;p&gt;{{IS_FeeRevenueAndOtherIncome}} is the income earned by insurance companies other than providing insurances. It includes investing income, fees and interest income.&lt;/p&gt;
   * @return isFeeRevenueAndOtherIncome
   */
  @javax.annotation.Nullable
  public BigDecimal getIsFeeRevenueAndOtherIncome() {
    return isFeeRevenueAndOtherIncome;
  }

  public void setIsFeeRevenueAndOtherIncome(@javax.annotation.Nullable BigDecimal isFeeRevenueAndOtherIncome) {
    this.isFeeRevenueAndOtherIncome = isFeeRevenueAndOtherIncome;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement isInterestExpense(@javax.annotation.Nullable BigDecimal isInterestExpense) {
    this.isInterestExpense = isInterestExpense;
    return this;
  }

  /**
   * Get isInterestExpense
   * @return isInterestExpense
   */
  @javax.annotation.Nullable
  public BigDecimal getIsInterestExpense() {
    return isInterestExpense;
  }

  public void setIsInterestExpense(@javax.annotation.Nullable BigDecimal isInterestExpense) {
    this.isInterestExpense = isInterestExpense;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement isNetInvestmentIncome(@javax.annotation.Nullable BigDecimal isNetInvestmentIncome) {
    this.isNetInvestmentIncome = isNetInvestmentIncome;
    return this;
  }

  /**
   * &lt;p&gt;{{IS_NetInvestmentIncome}} is the income earned by insurance companies through investments. Insurance companies usually invest the float they received in stocks or bonds to generate additional income before the premium is paid to cover insurance losses.&lt;/p&gt;
   * @return isNetInvestmentIncome
   */
  @javax.annotation.Nullable
  public BigDecimal getIsNetInvestmentIncome() {
    return isNetInvestmentIncome;
  }

  public void setIsNetInvestmentIncome(@javax.annotation.Nullable BigDecimal isNetInvestmentIncome) {
    this.isNetInvestmentIncome = isNetInvestmentIncome;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement isNetPolicyholderBenefitsAndClaims(@javax.annotation.Nullable BigDecimal isNetPolicyholderBenefitsAndClaims) {
    this.isNetPolicyholderBenefitsAndClaims = isNetPolicyholderBenefitsAndClaims;
    return this;
  }

  /**
   * &lt;p&gt;{{IS_NetPolicyholderBenefitsAndClaims}} is the fund paid out by insurances companies to cover the insurance losses, liabilities and expenses&lt;/p&gt;
   * @return isNetPolicyholderBenefitsAndClaims
   */
  @javax.annotation.Nullable
  public BigDecimal getIsNetPolicyholderBenefitsAndClaims() {
    return isNetPolicyholderBenefitsAndClaims;
  }

  public void setIsNetPolicyholderBenefitsAndClaims(@javax.annotation.Nullable BigDecimal isNetPolicyholderBenefitsAndClaims) {
    this.isNetPolicyholderBenefitsAndClaims = isNetPolicyholderBenefitsAndClaims;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement isOtherExpenseInsurance(@javax.annotation.Nullable BigDecimal isOtherExpenseInsurance) {
    this.isOtherExpenseInsurance = isOtherExpenseInsurance;
    return this;
  }

  /**
   * Get isOtherExpenseInsurance
   * @return isOtherExpenseInsurance
   */
  @javax.annotation.Nullable
  public BigDecimal getIsOtherExpenseInsurance() {
    return isOtherExpenseInsurance;
  }

  public void setIsOtherExpenseInsurance(@javax.annotation.Nullable BigDecimal isOtherExpenseInsurance) {
    this.isOtherExpenseInsurance = isOtherExpenseInsurance;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement isPolicyAcquisitionExpense(@javax.annotation.Nullable BigDecimal isPolicyAcquisitionExpense) {
    this.isPolicyAcquisitionExpense = isPolicyAcquisitionExpense;
    return this;
  }

  /**
   * &lt;p&gt;{{IS_PolicyAcquisitionExpense}} is the expenses incurred by insurance companies in activities such as marketing, advertising, commissions etc.&lt;/p&gt;
   * @return isPolicyAcquisitionExpense
   */
  @javax.annotation.Nullable
  public BigDecimal getIsPolicyAcquisitionExpense() {
    return isPolicyAcquisitionExpense;
  }

  public void setIsPolicyAcquisitionExpense(@javax.annotation.Nullable BigDecimal isPolicyAcquisitionExpense) {
    this.isPolicyAcquisitionExpense = isPolicyAcquisitionExpense;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement isPreferredDividends(@javax.annotation.Nullable BigDecimal isPreferredDividends) {
    this.isPreferredDividends = isPreferredDividends;
    return this;
  }

  /**
   * &lt;p&gt;{{IS_preferred_dividends}} is a dividend that is accrued and paid on a company&#39;s preferred shares. In the event that a company is unable to pay all dividends, claims to {{IS_preferred_dividends}} take precedence over claims to dividends that are paid on common shares.&lt;/p&gt;
   * @return isPreferredDividends
   */
  @javax.annotation.Nullable
  public BigDecimal getIsPreferredDividends() {
    return isPreferredDividends;
  }

  public void setIsPreferredDividends(@javax.annotation.Nullable BigDecimal isPreferredDividends) {
    this.isPreferredDividends = isPreferredDividends;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement isTotalPremiumsEarned(@javax.annotation.Nullable BigDecimal isTotalPremiumsEarned) {
    this.isTotalPremiumsEarned = isTotalPremiumsEarned;
    return this;
  }

  /**
   * &lt;p&gt;{{IS_TotalPremiumsEarned}} is the portion of the premium that insurance companies earned by providing insurances for the time period that has already passed.&lt;/p&gt;
   * @return isTotalPremiumsEarned
   */
  @javax.annotation.Nullable
  public BigDecimal getIsTotalPremiumsEarned() {
    return isTotalPremiumsEarned;
  }

  public void setIsTotalPremiumsEarned(@javax.annotation.Nullable BigDecimal isTotalPremiumsEarned) {
    this.isTotalPremiumsEarned = isTotalPremiumsEarned;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement netIncome(@javax.annotation.Nullable BigDecimal netIncome) {
    this.netIncome = netIncome;
    return this;
  }

  /**
   * &lt;p&gt;{{Net_Income}} is the net profit that a company earns after deducting all costs and losses including {{COGS}}, {{SGA}}, {{DDA}}, {{InterestExpense}}, non-recurring items and {{tax}}.  &lt;br&gt;{{Net_Income}}  &#x3D; {{Revenue}} - {{COGS}}, - {{SGA}} - {{RD}}  - {{DDA}} - {{InterestExpense}} + Non-Recurring Items  - {{tax}} &#x3D; Earnings Before Depreciation and Amortization - {{DDA}} - {{InterestExpense}} - Non-Recurring Items (NRI) - {{tax}} &#x3D; {{Operating_Income}} - {{InterestExpense}} - Non-Recurring Items (NRI) - {{tax}} &#x3D; {{Pretax_Income}} - {{tax}}&lt;/p&gt;
   * @return netIncome
   */
  @javax.annotation.Nullable
  public BigDecimal getNetIncome() {
    return netIncome;
  }

  public void setNetIncome(@javax.annotation.Nullable BigDecimal netIncome) {
    this.netIncome = netIncome;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement netIncomeContinuingOperations(@javax.annotation.Nullable BigDecimal netIncomeContinuingOperations) {
    this.netIncomeContinuingOperations = netIncomeContinuingOperations;
    return this;
  }

  /**
   * &lt;p&gt;{{Net_Income_(Continuing_Operations)}} indicates the net income that a firm brings in from ongoing business activities. These activities are expected to continue into the next reporting period.&lt;/p&gt;
   * @return netIncomeContinuingOperations
   */
  @javax.annotation.Nullable
  public BigDecimal getNetIncomeContinuingOperations() {
    return netIncomeContinuingOperations;
  }

  public void setNetIncomeContinuingOperations(@javax.annotation.Nullable BigDecimal netIncomeContinuingOperations) {
    this.netIncomeContinuingOperations = netIncomeContinuingOperations;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement netIncomeDiscontinuedOperations(@javax.annotation.Nullable BigDecimal netIncomeDiscontinuedOperations) {
    this.netIncomeDiscontinuedOperations = netIncomeDiscontinuedOperations;
    return this;
  }

  /**
   * &lt;p&gt;{{Net_Income_(Discontinued_Operations)}} indicates the net income that a firm brought in from operations that will not be used in future reporting periods.&lt;/p&gt;
   * @return netIncomeDiscontinuedOperations
   */
  @javax.annotation.Nullable
  public BigDecimal getNetIncomeDiscontinuedOperations() {
    return netIncomeDiscontinuedOperations;
  }

  public void setNetIncomeDiscontinuedOperations(@javax.annotation.Nullable BigDecimal netIncomeDiscontinuedOperations) {
    this.netIncomeDiscontinuedOperations = netIncomeDiscontinuedOperations;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement netIncomeIncludingNoncontrollingInterests(@javax.annotation.Nullable BigDecimal netIncomeIncludingNoncontrollingInterests) {
    this.netIncomeIncludingNoncontrollingInterests = netIncomeIncludingNoncontrollingInterests;
    return this;
  }

  /**
   * Get netIncomeIncludingNoncontrollingInterests
   * @return netIncomeIncludingNoncontrollingInterests
   */
  @javax.annotation.Nullable
  public BigDecimal getNetIncomeIncludingNoncontrollingInterests() {
    return netIncomeIncludingNoncontrollingInterests;
  }

  public void setNetIncomeIncludingNoncontrollingInterests(@javax.annotation.Nullable BigDecimal netIncomeIncludingNoncontrollingInterests) {
    this.netIncomeIncludingNoncontrollingInterests = netIncomeIncludingNoncontrollingInterests;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement netMargin(@javax.annotation.Nullable BigDecimal netMargin) {
    this.netMargin = netMargin;
    return this;
  }

  /**
   * Net margin is calculated as Net Income divided by its Revenue.
   * @return netMargin
   */
  @javax.annotation.Nullable
  public BigDecimal getNetMargin() {
    return netMargin;
  }

  public void setNetMargin(@javax.annotation.Nullable BigDecimal netMargin) {
    this.netMargin = netMargin;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement otherIncomeMinorityInterest(@javax.annotation.Nullable BigDecimal otherIncomeMinorityInterest) {
    this.otherIncomeMinorityInterest = otherIncomeMinorityInterest;
    return this;
  }

  /**
   * &lt;p&gt;{{OtherIncomeExpense}} includes {{Minority_interest}}. {{Minority_interest}} is a significant but non-controlling ownership of less than 50% of a company&#39;s voting shares by either an investor or another company.&lt;/p&gt;
   * @return otherIncomeMinorityInterest
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherIncomeMinorityInterest() {
    return otherIncomeMinorityInterest;
  }

  public void setOtherIncomeMinorityInterest(@javax.annotation.Nullable BigDecimal otherIncomeMinorityInterest) {
    this.otherIncomeMinorityInterest = otherIncomeMinorityInterest;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement otherNetIncomeLoss(@javax.annotation.Nullable BigDecimal otherNetIncomeLoss) {
    this.otherNetIncomeLoss = otherNetIncomeLoss;
    return this;
  }

  /**
   * Get otherNetIncomeLoss
   * @return otherNetIncomeLoss
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherNetIncomeLoss() {
    return otherNetIncomeLoss;
  }

  public void setOtherNetIncomeLoss(@javax.annotation.Nullable BigDecimal otherNetIncomeLoss) {
    this.otherNetIncomeLoss = otherNetIncomeLoss;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement pretaxIncome(@javax.annotation.Nullable BigDecimal pretaxIncome) {
    this.pretaxIncome = pretaxIncome;
    return this;
  }

  /**
   * &lt;p&gt;{{Pretax_Income}} is the income that a company earns before paying income taxes. &lt;br&gt;{{Pretax_Income}} is calculated as {{Operating_Income}} + {{Non_Operating_Income}} + {{InterestExpense}} + {{InterestIncome}} + other&lt;/p&gt;
   * @return pretaxIncome
   */
  @javax.annotation.Nullable
  public BigDecimal getPretaxIncome() {
    return pretaxIncome;
  }

  public void setPretaxIncome(@javax.annotation.Nullable BigDecimal pretaxIncome) {
    this.pretaxIncome = pretaxIncome;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement revenue(@javax.annotation.Nullable BigDecimal revenue) {
    this.revenue = revenue;
    return this;
  }

  /**
   * Get revenue
   * @return revenue
   */
  @javax.annotation.Nullable
  public BigDecimal getRevenue() {
    return revenue;
  }

  public void setRevenue(@javax.annotation.Nullable BigDecimal revenue) {
    this.revenue = revenue;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement sellingGeneralAdminExpense(@javax.annotation.Nullable BigDecimal sellingGeneralAdminExpense) {
    this.sellingGeneralAdminExpense = sellingGeneralAdminExpense;
    return this;
  }

  /**
   * Selling, General, &amp; Admin. Expense (SGA) includes the direct and indirect costs and all general and administrative expenses of a company. For instance, personnel cost, advertising, rent, communication costs are all part of SGA.
   * @return sellingGeneralAdminExpense
   */
  @javax.annotation.Nullable
  public BigDecimal getSellingGeneralAdminExpense() {
    return sellingGeneralAdminExpense;
  }

  public void setSellingGeneralAdminExpense(@javax.annotation.Nullable BigDecimal sellingGeneralAdminExpense) {
    this.sellingGeneralAdminExpense = sellingGeneralAdminExpense;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement sharesOutstanding(@javax.annotation.Nullable BigDecimal sharesOutstanding) {
    this.sharesOutstanding = sharesOutstanding;
    return this;
  }

  /**
   * &lt;p&gt;{{Cash_Flow_from_Others}} may include {{ChangeInWorkingCapital}}. These are cash differences caused by the {{ChangeInInventory}}, {{AccountsPayable}}, {{Accts_Rec}} etc. For instance, if a company pays its suppliers slower, its cash position will build up faster. If a company receives payments from its customers slower, its {{Accts_Rec}} will rise, and its cash position will grow more slowly (or even shrink).&lt;/p&gt;
   * @return sharesOutstanding
   */
  @javax.annotation.Nullable
  public BigDecimal getSharesOutstanding() {
    return sharesOutstanding;
  }

  public void setSharesOutstanding(@javax.annotation.Nullable BigDecimal sharesOutstanding) {
    this.sharesOutstanding = sharesOutstanding;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement taxProvision(@javax.annotation.Nullable BigDecimal taxProvision) {
    this.taxProvision = taxProvision;
    return this;
  }

  /**
   * &lt;p&gt;{{TaxProvision}} is the tax to be paid.&lt;/p&gt;
   * @return taxProvision
   */
  @javax.annotation.Nullable
  public BigDecimal getTaxProvision() {
    return taxProvision;
  }

  public void setTaxProvision(@javax.annotation.Nullable BigDecimal taxProvision) {
    this.taxProvision = taxProvision;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement taxRate(@javax.annotation.Nullable BigDecimal taxRate) {
    this.taxRate = taxRate;
    return this;
  }

  /**
   * &lt;p&gt;{{TaxRate}} is the ratio of {{tax}} divided by {{Pretax_Income}}, usually presented in percent. &lt;br&gt; {{{TaxRate}} &#x3D; {{tax}} / {{Pretax_Income}}&lt;/p&gt;
   * @return taxRate
   */
  @javax.annotation.Nullable
  public BigDecimal getTaxRate() {
    return taxRate;
  }

  public void setTaxRate(@javax.annotation.Nullable BigDecimal taxRate) {
    this.taxRate = taxRate;
  }


  public FundamentalsINOREITNODIRECTIncomeStatement totalExpensesInsurance(@javax.annotation.Nullable BigDecimal totalExpensesInsurance) {
    this.totalExpensesInsurance = totalExpensesInsurance;
    return this;
  }

  /**
   * Get totalExpensesInsurance
   * @return totalExpensesInsurance
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalExpensesInsurance() {
    return totalExpensesInsurance;
  }

  public void setTotalExpensesInsurance(@javax.annotation.Nullable BigDecimal totalExpensesInsurance) {
    this.totalExpensesInsurance = totalExpensesInsurance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FundamentalsINOREITNODIRECTIncomeStatement fundamentalsINOREITNODIRECTIncomeStatement = (FundamentalsINOREITNODIRECTIncomeStatement) o;
    return Objects.equals(this.depreciationDepletionAmortization, fundamentalsINOREITNODIRECTIncomeStatement.depreciationDepletionAmortization) &&
        Objects.equals(this.ebit, fundamentalsINOREITNODIRECTIncomeStatement.ebit) &&
        Objects.equals(this.ebitda, fundamentalsINOREITNODIRECTIncomeStatement.ebitda) &&
        Objects.equals(this.ebitdaMargin, fundamentalsINOREITNODIRECTIncomeStatement.ebitdaMargin) &&
        Objects.equals(this.epsBasic, fundamentalsINOREITNODIRECTIncomeStatement.epsBasic) &&
        Objects.equals(this.epsDiluated, fundamentalsINOREITNODIRECTIncomeStatement.epsDiluated) &&
        Objects.equals(this.interestIncome, fundamentalsINOREITNODIRECTIncomeStatement.interestIncome) &&
        Objects.equals(this.isFeeRevenueAndOtherIncome, fundamentalsINOREITNODIRECTIncomeStatement.isFeeRevenueAndOtherIncome) &&
        Objects.equals(this.isInterestExpense, fundamentalsINOREITNODIRECTIncomeStatement.isInterestExpense) &&
        Objects.equals(this.isNetInvestmentIncome, fundamentalsINOREITNODIRECTIncomeStatement.isNetInvestmentIncome) &&
        Objects.equals(this.isNetPolicyholderBenefitsAndClaims, fundamentalsINOREITNODIRECTIncomeStatement.isNetPolicyholderBenefitsAndClaims) &&
        Objects.equals(this.isOtherExpenseInsurance, fundamentalsINOREITNODIRECTIncomeStatement.isOtherExpenseInsurance) &&
        Objects.equals(this.isPolicyAcquisitionExpense, fundamentalsINOREITNODIRECTIncomeStatement.isPolicyAcquisitionExpense) &&
        Objects.equals(this.isPreferredDividends, fundamentalsINOREITNODIRECTIncomeStatement.isPreferredDividends) &&
        Objects.equals(this.isTotalPremiumsEarned, fundamentalsINOREITNODIRECTIncomeStatement.isTotalPremiumsEarned) &&
        Objects.equals(this.netIncome, fundamentalsINOREITNODIRECTIncomeStatement.netIncome) &&
        Objects.equals(this.netIncomeContinuingOperations, fundamentalsINOREITNODIRECTIncomeStatement.netIncomeContinuingOperations) &&
        Objects.equals(this.netIncomeDiscontinuedOperations, fundamentalsINOREITNODIRECTIncomeStatement.netIncomeDiscontinuedOperations) &&
        Objects.equals(this.netIncomeIncludingNoncontrollingInterests, fundamentalsINOREITNODIRECTIncomeStatement.netIncomeIncludingNoncontrollingInterests) &&
        Objects.equals(this.netMargin, fundamentalsINOREITNODIRECTIncomeStatement.netMargin) &&
        Objects.equals(this.otherIncomeMinorityInterest, fundamentalsINOREITNODIRECTIncomeStatement.otherIncomeMinorityInterest) &&
        Objects.equals(this.otherNetIncomeLoss, fundamentalsINOREITNODIRECTIncomeStatement.otherNetIncomeLoss) &&
        Objects.equals(this.pretaxIncome, fundamentalsINOREITNODIRECTIncomeStatement.pretaxIncome) &&
        Objects.equals(this.revenue, fundamentalsINOREITNODIRECTIncomeStatement.revenue) &&
        Objects.equals(this.sellingGeneralAdminExpense, fundamentalsINOREITNODIRECTIncomeStatement.sellingGeneralAdminExpense) &&
        Objects.equals(this.sharesOutstanding, fundamentalsINOREITNODIRECTIncomeStatement.sharesOutstanding) &&
        Objects.equals(this.taxProvision, fundamentalsINOREITNODIRECTIncomeStatement.taxProvision) &&
        Objects.equals(this.taxRate, fundamentalsINOREITNODIRECTIncomeStatement.taxRate) &&
        Objects.equals(this.totalExpensesInsurance, fundamentalsINOREITNODIRECTIncomeStatement.totalExpensesInsurance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(depreciationDepletionAmortization, ebit, ebitda, ebitdaMargin, epsBasic, epsDiluated, interestIncome, isFeeRevenueAndOtherIncome, isInterestExpense, isNetInvestmentIncome, isNetPolicyholderBenefitsAndClaims, isOtherExpenseInsurance, isPolicyAcquisitionExpense, isPreferredDividends, isTotalPremiumsEarned, netIncome, netIncomeContinuingOperations, netIncomeDiscontinuedOperations, netIncomeIncludingNoncontrollingInterests, netMargin, otherIncomeMinorityInterest, otherNetIncomeLoss, pretaxIncome, revenue, sellingGeneralAdminExpense, sharesOutstanding, taxProvision, taxRate, totalExpensesInsurance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FundamentalsINOREITNODIRECTIncomeStatement {\n");
    sb.append("    depreciationDepletionAmortization: ").append(toIndentedString(depreciationDepletionAmortization)).append("\n");
    sb.append("    ebit: ").append(toIndentedString(ebit)).append("\n");
    sb.append("    ebitda: ").append(toIndentedString(ebitda)).append("\n");
    sb.append("    ebitdaMargin: ").append(toIndentedString(ebitdaMargin)).append("\n");
    sb.append("    epsBasic: ").append(toIndentedString(epsBasic)).append("\n");
    sb.append("    epsDiluated: ").append(toIndentedString(epsDiluated)).append("\n");
    sb.append("    interestIncome: ").append(toIndentedString(interestIncome)).append("\n");
    sb.append("    isFeeRevenueAndOtherIncome: ").append(toIndentedString(isFeeRevenueAndOtherIncome)).append("\n");
    sb.append("    isInterestExpense: ").append(toIndentedString(isInterestExpense)).append("\n");
    sb.append("    isNetInvestmentIncome: ").append(toIndentedString(isNetInvestmentIncome)).append("\n");
    sb.append("    isNetPolicyholderBenefitsAndClaims: ").append(toIndentedString(isNetPolicyholderBenefitsAndClaims)).append("\n");
    sb.append("    isOtherExpenseInsurance: ").append(toIndentedString(isOtherExpenseInsurance)).append("\n");
    sb.append("    isPolicyAcquisitionExpense: ").append(toIndentedString(isPolicyAcquisitionExpense)).append("\n");
    sb.append("    isPreferredDividends: ").append(toIndentedString(isPreferredDividends)).append("\n");
    sb.append("    isTotalPremiumsEarned: ").append(toIndentedString(isTotalPremiumsEarned)).append("\n");
    sb.append("    netIncome: ").append(toIndentedString(netIncome)).append("\n");
    sb.append("    netIncomeContinuingOperations: ").append(toIndentedString(netIncomeContinuingOperations)).append("\n");
    sb.append("    netIncomeDiscontinuedOperations: ").append(toIndentedString(netIncomeDiscontinuedOperations)).append("\n");
    sb.append("    netIncomeIncludingNoncontrollingInterests: ").append(toIndentedString(netIncomeIncludingNoncontrollingInterests)).append("\n");
    sb.append("    netMargin: ").append(toIndentedString(netMargin)).append("\n");
    sb.append("    otherIncomeMinorityInterest: ").append(toIndentedString(otherIncomeMinorityInterest)).append("\n");
    sb.append("    otherNetIncomeLoss: ").append(toIndentedString(otherNetIncomeLoss)).append("\n");
    sb.append("    pretaxIncome: ").append(toIndentedString(pretaxIncome)).append("\n");
    sb.append("    revenue: ").append(toIndentedString(revenue)).append("\n");
    sb.append("    sellingGeneralAdminExpense: ").append(toIndentedString(sellingGeneralAdminExpense)).append("\n");
    sb.append("    sharesOutstanding: ").append(toIndentedString(sharesOutstanding)).append("\n");
    sb.append("    taxProvision: ").append(toIndentedString(taxProvision)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    totalExpensesInsurance: ").append(toIndentedString(totalExpensesInsurance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("depreciation_depletion_amortization");
    openapiFields.add("ebit");
    openapiFields.add("ebitda");
    openapiFields.add("ebitda_margin");
    openapiFields.add("eps_basic");
    openapiFields.add("eps_diluated");
    openapiFields.add("interest_income");
    openapiFields.add("is_fee_revenue_and_other_income");
    openapiFields.add("is_interest_expense");
    openapiFields.add("is_net_investment_income");
    openapiFields.add("is_net_policyholder_benefits_and_claims");
    openapiFields.add("is_other_expense_insurance");
    openapiFields.add("is_policy_acquisition_expense");
    openapiFields.add("is_preferred_dividends");
    openapiFields.add("is_total_premiums_earned");
    openapiFields.add("net_income");
    openapiFields.add("net_income_continuing_operations");
    openapiFields.add("net_income_discontinued_operations");
    openapiFields.add("net_income_including_noncontrolling_interests");
    openapiFields.add("net_margin");
    openapiFields.add("other_income_minority_interest");
    openapiFields.add("other_net_income_loss");
    openapiFields.add("pretax_income");
    openapiFields.add("revenue");
    openapiFields.add("selling_general_admin_expense");
    openapiFields.add("shares_outstanding");
    openapiFields.add("tax_provision");
    openapiFields.add("tax_rate");
    openapiFields.add("total_expenses_insurance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FundamentalsINOREITNODIRECTIncomeStatement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FundamentalsINOREITNODIRECTIncomeStatement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FundamentalsINOREITNODIRECTIncomeStatement is not found in the empty JSON string", FundamentalsINOREITNODIRECTIncomeStatement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FundamentalsINOREITNODIRECTIncomeStatement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FundamentalsINOREITNODIRECTIncomeStatement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FundamentalsINOREITNODIRECTIncomeStatement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FundamentalsINOREITNODIRECTIncomeStatement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FundamentalsINOREITNODIRECTIncomeStatement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FundamentalsINOREITNODIRECTIncomeStatement.class));

       return (TypeAdapter<T>) new TypeAdapter<FundamentalsINOREITNODIRECTIncomeStatement>() {
           @Override
           public void write(JsonWriter out, FundamentalsINOREITNODIRECTIncomeStatement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FundamentalsINOREITNODIRECTIncomeStatement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FundamentalsINOREITNODIRECTIncomeStatement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FundamentalsINOREITNODIRECTIncomeStatement
   * @throws IOException if the JSON string is invalid with respect to FundamentalsINOREITNODIRECTIncomeStatement
   */
  public static FundamentalsINOREITNODIRECTIncomeStatement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FundamentalsINOREITNODIRECTIncomeStatement.class);
  }

  /**
   * Convert an instance of FundamentalsINOREITNODIRECTIncomeStatement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

