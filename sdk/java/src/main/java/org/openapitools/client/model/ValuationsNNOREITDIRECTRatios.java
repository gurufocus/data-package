/*
 * Gurufocus Data Package API
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ValuationsNNOREITDIRECTRatios
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-11T01:10:00.357398434Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class ValuationsNNOREITDIRECTRatios {
  public static final String SERIALIZED_NAME_CAPEX_TO_OPERATING_CASH_FLOW = "capex_to_operating_cash_flow";
  @SerializedName(SERIALIZED_NAME_CAPEX_TO_OPERATING_CASH_FLOW)
  @javax.annotation.Nullable
  private BigDecimal capexToOperatingCashFlow;

  public static final String SERIALIZED_NAME_CAPEX_TO_OPERATING_INCOME = "capex_to_operating_income";
  @SerializedName(SERIALIZED_NAME_CAPEX_TO_OPERATING_INCOME)
  @javax.annotation.Nullable
  private BigDecimal capexToOperatingIncome;

  public static final String SERIALIZED_NAME_CAPEX_TO_REVENUE = "capex_to_revenue";
  @SerializedName(SERIALIZED_NAME_CAPEX_TO_REVENUE)
  @javax.annotation.Nullable
  private BigDecimal capexToRevenue;

  public static final String SERIALIZED_NAME_CASH_CONVERSION_CYCLE = "cash_conversion_cycle";
  @SerializedName(SERIALIZED_NAME_CASH_CONVERSION_CYCLE)
  @javax.annotation.Nullable
  private BigDecimal cashConversionCycle;

  public static final String SERIALIZED_NAME_COST_OF_GOODS_SOLD_TO_REVENUE = "cost_of_goods_sold_to_revenue";
  @SerializedName(SERIALIZED_NAME_COST_OF_GOODS_SOLD_TO_REVENUE)
  @javax.annotation.Nullable
  private BigDecimal costOfGoodsSoldToRevenue;

  public static final String SERIALIZED_NAME_DAYS_INVENTORY = "days_inventory";
  @SerializedName(SERIALIZED_NAME_DAYS_INVENTORY)
  @javax.annotation.Nullable
  private BigDecimal daysInventory;

  public static final String SERIALIZED_NAME_DAYS_PAYABLE = "days_payable";
  @SerializedName(SERIALIZED_NAME_DAYS_PAYABLE)
  @javax.annotation.Nullable
  private BigDecimal daysPayable;

  public static final String SERIALIZED_NAME_DAYS_SALES_OUTSTANDING = "days_sales_outstanding";
  @SerializedName(SERIALIZED_NAME_DAYS_SALES_OUTSTANDING)
  @javax.annotation.Nullable
  private BigDecimal daysSalesOutstanding;

  public static final String SERIALIZED_NAME_DEBT_TO_ASSET = "debt_to_asset";
  @SerializedName(SERIALIZED_NAME_DEBT_TO_ASSET)
  @javax.annotation.Nullable
  private BigDecimal debtToAsset;

  public static final String SERIALIZED_NAME_DEBT_TO_EQUITY = "debt_to_equity";
  @SerializedName(SERIALIZED_NAME_DEBT_TO_EQUITY)
  @javax.annotation.Nullable
  private BigDecimal debtToEquity;

  public static final String SERIALIZED_NAME_DEGREE_OF_FINANCIAL_LEVERAGE = "degree_of_financial_leverage";
  @SerializedName(SERIALIZED_NAME_DEGREE_OF_FINANCIAL_LEVERAGE)
  @javax.annotation.Nullable
  private BigDecimal degreeOfFinancialLeverage;

  public static final String SERIALIZED_NAME_DEGREE_OF_OPERATING_LEVERAGE = "degree_of_operating_leverage";
  @SerializedName(SERIALIZED_NAME_DEGREE_OF_OPERATING_LEVERAGE)
  @javax.annotation.Nullable
  private BigDecimal degreeOfOperatingLeverage;

  public static final String SERIALIZED_NAME_EBITDA_MARGIN = "ebitda_margin";
  @SerializedName(SERIALIZED_NAME_EBITDA_MARGIN)
  @javax.annotation.Nullable
  private BigDecimal ebitdaMargin;

  public static final String SERIALIZED_NAME_EFFECTIVE_INTEREST_RATE = "effective_interest_rate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_INTEREST_RATE)
  @javax.annotation.Nullable
  private BigDecimal effectiveInterestRate;

  public static final String SERIALIZED_NAME_EQUITY_TO_ASSET = "equity_to_asset";
  @SerializedName(SERIALIZED_NAME_EQUITY_TO_ASSET)
  @javax.annotation.Nullable
  private BigDecimal equityToAsset;

  public static final String SERIALIZED_NAME_FCF_MARGIN = "fcf_margin";
  @SerializedName(SERIALIZED_NAME_FCF_MARGIN)
  @javax.annotation.Nullable
  private BigDecimal fcfMargin;

  public static final String SERIALIZED_NAME_GROSS_MARGIN = "gross_margin";
  @SerializedName(SERIALIZED_NAME_GROSS_MARGIN)
  @javax.annotation.Nullable
  private BigDecimal grossMargin;

  public static final String SERIALIZED_NAME_GROSS_PROFIT_TO_ASSET = "gross_profit_to_asset";
  @SerializedName(SERIALIZED_NAME_GROSS_PROFIT_TO_ASSET)
  @javax.annotation.Nullable
  private BigDecimal grossProfitToAsset;

  public static final String SERIALIZED_NAME_INVENTORY_TO_REVENUE = "inventory_to_revenue";
  @SerializedName(SERIALIZED_NAME_INVENTORY_TO_REVENUE)
  @javax.annotation.Nullable
  private BigDecimal inventoryToRevenue;

  public static final String SERIALIZED_NAME_INVENTORY_TURNOVER = "inventory_turnover";
  @SerializedName(SERIALIZED_NAME_INVENTORY_TURNOVER)
  @javax.annotation.Nullable
  private BigDecimal inventoryTurnover;

  public static final String SERIALIZED_NAME_LIABILITIES_TO_ASSETS = "liabilities_to_assets";
  @SerializedName(SERIALIZED_NAME_LIABILITIES_TO_ASSETS)
  @javax.annotation.Nullable
  private BigDecimal liabilitiesToAssets;

  public static final String SERIALIZED_NAME_NET_MARGIN = "net_margin";
  @SerializedName(SERIALIZED_NAME_NET_MARGIN)
  @javax.annotation.Nullable
  private BigDecimal netMargin;

  public static final String SERIALIZED_NAME_OPERATING_MARGIN = "operating_margin";
  @SerializedName(SERIALIZED_NAME_OPERATING_MARGIN)
  @javax.annotation.Nullable
  private BigDecimal operatingMargin;

  public static final String SERIALIZED_NAME_PAYOUT = "payout";
  @SerializedName(SERIALIZED_NAME_PAYOUT)
  @javax.annotation.Nullable
  private BigDecimal payout;

  public static final String SERIALIZED_NAME_RD2REV = "rd2rev";
  @SerializedName(SERIALIZED_NAME_RD2REV)
  @javax.annotation.Nullable
  private BigDecimal rd2rev;

  public static final String SERIALIZED_NAME_RECEIVABLES_TURNOVER = "receivables_turnover";
  @SerializedName(SERIALIZED_NAME_RECEIVABLES_TURNOVER)
  @javax.annotation.Nullable
  private BigDecimal receivablesTurnover;

  public static final String SERIALIZED_NAME_RETURN_ON_TANGIBLE_ASSET = "return_on_tangible_asset";
  @SerializedName(SERIALIZED_NAME_RETURN_ON_TANGIBLE_ASSET)
  @javax.annotation.Nullable
  private BigDecimal returnOnTangibleAsset;

  public static final String SERIALIZED_NAME_RETURN_ON_TANGIBLE_EQUITY = "return_on_tangible_equity";
  @SerializedName(SERIALIZED_NAME_RETURN_ON_TANGIBLE_EQUITY)
  @javax.annotation.Nullable
  private BigDecimal returnOnTangibleEquity;

  public static final String SERIALIZED_NAME_ROA = "roa";
  @SerializedName(SERIALIZED_NAME_ROA)
  @javax.annotation.Nullable
  private BigDecimal roa;

  public static final String SERIALIZED_NAME_ROC_JOEL = "roc_joel";
  @SerializedName(SERIALIZED_NAME_ROC_JOEL)
  @javax.annotation.Nullable
  private BigDecimal rocJoel;

  public static final String SERIALIZED_NAME_ROCE = "roce";
  @SerializedName(SERIALIZED_NAME_ROCE)
  @javax.annotation.Nullable
  private BigDecimal roce;

  public static final String SERIALIZED_NAME_ROE = "roe";
  @SerializedName(SERIALIZED_NAME_ROE)
  @javax.annotation.Nullable
  private BigDecimal roe;

  public static final String SERIALIZED_NAME_ROE_ADJ = "roe_adj";
  @SerializedName(SERIALIZED_NAME_ROE_ADJ)
  @javax.annotation.Nullable
  private BigDecimal roeAdj;

  public static final String SERIALIZED_NAME_ROIC = "roic";
  @SerializedName(SERIALIZED_NAME_ROIC)
  @javax.annotation.Nullable
  private BigDecimal roic;

  public static final String SERIALIZED_NAME_ROIIC1Y = "roiic_1y";
  @SerializedName(SERIALIZED_NAME_ROIIC1Y)
  @javax.annotation.Nullable
  private BigDecimal roiic1y;

  public static final String SERIALIZED_NAME_RORE5Y = "rore_5y";
  @SerializedName(SERIALIZED_NAME_RORE5Y)
  @javax.annotation.Nullable
  private BigDecimal rore5y;

  public static final String SERIALIZED_NAME_TURNOVER = "turnover";
  @SerializedName(SERIALIZED_NAME_TURNOVER)
  @javax.annotation.Nullable
  private BigDecimal turnover;

  public static final String SERIALIZED_NAME_WACC = "wacc";
  @SerializedName(SERIALIZED_NAME_WACC)
  @javax.annotation.Nullable
  private BigDecimal wacc;

  public ValuationsNNOREITDIRECTRatios() {
  }

  public ValuationsNNOREITDIRECTRatios capexToOperatingCashFlow(@javax.annotation.Nullable BigDecimal capexToOperatingCashFlow) {
    this.capexToOperatingCashFlow = capexToOperatingCashFlow;
    return this;
  }

  /**
   * Get capexToOperatingCashFlow
   * @return capexToOperatingCashFlow
   */
  @javax.annotation.Nullable
  public BigDecimal getCapexToOperatingCashFlow() {
    return capexToOperatingCashFlow;
  }

  public void setCapexToOperatingCashFlow(@javax.annotation.Nullable BigDecimal capexToOperatingCashFlow) {
    this.capexToOperatingCashFlow = capexToOperatingCashFlow;
  }


  public ValuationsNNOREITDIRECTRatios capexToOperatingIncome(@javax.annotation.Nullable BigDecimal capexToOperatingIncome) {
    this.capexToOperatingIncome = capexToOperatingIncome;
    return this;
  }

  /**
   * Get capexToOperatingIncome
   * @return capexToOperatingIncome
   */
  @javax.annotation.Nullable
  public BigDecimal getCapexToOperatingIncome() {
    return capexToOperatingIncome;
  }

  public void setCapexToOperatingIncome(@javax.annotation.Nullable BigDecimal capexToOperatingIncome) {
    this.capexToOperatingIncome = capexToOperatingIncome;
  }


  public ValuationsNNOREITDIRECTRatios capexToRevenue(@javax.annotation.Nullable BigDecimal capexToRevenue) {
    this.capexToRevenue = capexToRevenue;
    return this;
  }

  /**
   * Get capexToRevenue
   * @return capexToRevenue
   */
  @javax.annotation.Nullable
  public BigDecimal getCapexToRevenue() {
    return capexToRevenue;
  }

  public void setCapexToRevenue(@javax.annotation.Nullable BigDecimal capexToRevenue) {
    this.capexToRevenue = capexToRevenue;
  }


  public ValuationsNNOREITDIRECTRatios cashConversionCycle(@javax.annotation.Nullable BigDecimal cashConversionCycle) {
    this.cashConversionCycle = cashConversionCycle;
    return this;
  }

  /**
   * Cash Conversion Cycle is one of several measures of management effectiveness. It equals Days Sales Outstanding + Days Inventory - Days Payable.
   * @return cashConversionCycle
   */
  @javax.annotation.Nullable
  public BigDecimal getCashConversionCycle() {
    return cashConversionCycle;
  }

  public void setCashConversionCycle(@javax.annotation.Nullable BigDecimal cashConversionCycle) {
    this.cashConversionCycle = cashConversionCycle;
  }


  public ValuationsNNOREITDIRECTRatios costOfGoodsSoldToRevenue(@javax.annotation.Nullable BigDecimal costOfGoodsSoldToRevenue) {
    this.costOfGoodsSoldToRevenue = costOfGoodsSoldToRevenue;
    return this;
  }

  /**
   * The ratio of cost of goods sold to sales
   * @return costOfGoodsSoldToRevenue
   */
  @javax.annotation.Nullable
  public BigDecimal getCostOfGoodsSoldToRevenue() {
    return costOfGoodsSoldToRevenue;
  }

  public void setCostOfGoodsSoldToRevenue(@javax.annotation.Nullable BigDecimal costOfGoodsSoldToRevenue) {
    this.costOfGoodsSoldToRevenue = costOfGoodsSoldToRevenue;
  }


  public ValuationsNNOREITDIRECTRatios daysInventory(@javax.annotation.Nullable BigDecimal daysInventory) {
    this.daysInventory = daysInventory;
    return this;
  }

  /**
   * The Days Inventory is an efficiency ratio that measures the average number of days the company holds its inventory before selling it. The ratio measures the number of days funds are tied up in inventory. Inventory levels (measured at cost) are divided by sales per day (also measured at cost rather than selling price.)
   * @return daysInventory
   */
  @javax.annotation.Nullable
  public BigDecimal getDaysInventory() {
    return daysInventory;
  }

  public void setDaysInventory(@javax.annotation.Nullable BigDecimal daysInventory) {
    this.daysInventory = daysInventory;
  }


  public ValuationsNNOREITDIRECTRatios daysPayable(@javax.annotation.Nullable BigDecimal daysPayable) {
    this.daysPayable = daysPayable;
    return this;
  }

  /**
   * Days payable outstanding (DPO) is an efficiency ratio that measures the average number of days a company takes to pay its suppliers.
   * @return daysPayable
   */
  @javax.annotation.Nullable
  public BigDecimal getDaysPayable() {
    return daysPayable;
  }

  public void setDaysPayable(@javax.annotation.Nullable BigDecimal daysPayable) {
    this.daysPayable = daysPayable;
  }


  public ValuationsNNOREITDIRECTRatios daysSalesOutstanding(@javax.annotation.Nullable BigDecimal daysSalesOutstanding) {
    this.daysSalesOutstanding = daysSalesOutstanding;
    return this;
  }

  /**
   * Days sales outstanding (DSO) is a measure of the average number of days that it takes a company to collect payment after a sale has been made.
   * @return daysSalesOutstanding
   */
  @javax.annotation.Nullable
  public BigDecimal getDaysSalesOutstanding() {
    return daysSalesOutstanding;
  }

  public void setDaysSalesOutstanding(@javax.annotation.Nullable BigDecimal daysSalesOutstanding) {
    this.daysSalesOutstanding = daysSalesOutstanding;
  }


  public ValuationsNNOREITDIRECTRatios debtToAsset(@javax.annotation.Nullable BigDecimal debtToAsset) {
    this.debtToAsset = debtToAsset;
    return this;
  }

  /**
   * Debt to assets is a leverage ratio that defines the total amount of debt relative to assets
   * @return debtToAsset
   */
  @javax.annotation.Nullable
  public BigDecimal getDebtToAsset() {
    return debtToAsset;
  }

  public void setDebtToAsset(@javax.annotation.Nullable BigDecimal debtToAsset) {
    this.debtToAsset = debtToAsset;
  }


  public ValuationsNNOREITDIRECTRatios debtToEquity(@javax.annotation.Nullable BigDecimal debtToEquity) {
    this.debtToEquity = debtToEquity;
    return this;
  }

  /**
   * The Debt/Equity (D/E) Ratio is calculated by dividing a company’s total liabilities by its shareholder equity. The ratio is used to evaluate a company&#39;s financial leverage.
   * @return debtToEquity
   */
  @javax.annotation.Nullable
  public BigDecimal getDebtToEquity() {
    return debtToEquity;
  }

  public void setDebtToEquity(@javax.annotation.Nullable BigDecimal debtToEquity) {
    this.debtToEquity = debtToEquity;
  }


  public ValuationsNNOREITDIRECTRatios degreeOfFinancialLeverage(@javax.annotation.Nullable BigDecimal degreeOfFinancialLeverage) {
    this.degreeOfFinancialLeverage = degreeOfFinancialLeverage;
    return this;
  }

  /**
   * Get degreeOfFinancialLeverage
   * @return degreeOfFinancialLeverage
   */
  @javax.annotation.Nullable
  public BigDecimal getDegreeOfFinancialLeverage() {
    return degreeOfFinancialLeverage;
  }

  public void setDegreeOfFinancialLeverage(@javax.annotation.Nullable BigDecimal degreeOfFinancialLeverage) {
    this.degreeOfFinancialLeverage = degreeOfFinancialLeverage;
  }


  public ValuationsNNOREITDIRECTRatios degreeOfOperatingLeverage(@javax.annotation.Nullable BigDecimal degreeOfOperatingLeverage) {
    this.degreeOfOperatingLeverage = degreeOfOperatingLeverage;
    return this;
  }

  /**
   * Get degreeOfOperatingLeverage
   * @return degreeOfOperatingLeverage
   */
  @javax.annotation.Nullable
  public BigDecimal getDegreeOfOperatingLeverage() {
    return degreeOfOperatingLeverage;
  }

  public void setDegreeOfOperatingLeverage(@javax.annotation.Nullable BigDecimal degreeOfOperatingLeverage) {
    this.degreeOfOperatingLeverage = degreeOfOperatingLeverage;
  }


  public ValuationsNNOREITDIRECTRatios ebitdaMargin(@javax.annotation.Nullable BigDecimal ebitdaMargin) {
    this.ebitdaMargin = ebitdaMargin;
    return this;
  }

  /**
   * Get ebitdaMargin
   * @return ebitdaMargin
   */
  @javax.annotation.Nullable
  public BigDecimal getEbitdaMargin() {
    return ebitdaMargin;
  }

  public void setEbitdaMargin(@javax.annotation.Nullable BigDecimal ebitdaMargin) {
    this.ebitdaMargin = ebitdaMargin;
  }


  public ValuationsNNOREITDIRECTRatios effectiveInterestRate(@javax.annotation.Nullable BigDecimal effectiveInterestRate) {
    this.effectiveInterestRate = effectiveInterestRate;
    return this;
  }

  /**
   * Effective interest rate on debt is the usage rate that a borrower actually pays on a debt. It is calculated as the positive value of interest expense divided by its average total debt.
   * @return effectiveInterestRate
   */
  @javax.annotation.Nullable
  public BigDecimal getEffectiveInterestRate() {
    return effectiveInterestRate;
  }

  public void setEffectiveInterestRate(@javax.annotation.Nullable BigDecimal effectiveInterestRate) {
    this.effectiveInterestRate = effectiveInterestRate;
  }


  public ValuationsNNOREITDIRECTRatios equityToAsset(@javax.annotation.Nullable BigDecimal equityToAsset) {
    this.equityToAsset = equityToAsset;
    return this;
  }

  /**
   * Equity to Asset ratio is calculated as shareholder&#39;s tangible equity divided by its total asset.
   * @return equityToAsset
   */
  @javax.annotation.Nullable
  public BigDecimal getEquityToAsset() {
    return equityToAsset;
  }

  public void setEquityToAsset(@javax.annotation.Nullable BigDecimal equityToAsset) {
    this.equityToAsset = equityToAsset;
  }


  public ValuationsNNOREITDIRECTRatios fcfMargin(@javax.annotation.Nullable BigDecimal fcfMargin) {
    this.fcfMargin = fcfMargin;
    return this;
  }

  /**
   * FCF Margin is calculated as Free Cash Flow divided by total Revenue.
   * @return fcfMargin
   */
  @javax.annotation.Nullable
  public BigDecimal getFcfMargin() {
    return fcfMargin;
  }

  public void setFcfMargin(@javax.annotation.Nullable BigDecimal fcfMargin) {
    this.fcfMargin = fcfMargin;
  }


  public ValuationsNNOREITDIRECTRatios grossMargin(@javax.annotation.Nullable BigDecimal grossMargin) {
    this.grossMargin = grossMargin;
    return this;
  }

  /**
   * Gross Margin % is calculated as gross profit divided by its revenue.
   * @return grossMargin
   */
  @javax.annotation.Nullable
  public BigDecimal getGrossMargin() {
    return grossMargin;
  }

  public void setGrossMargin(@javax.annotation.Nullable BigDecimal grossMargin) {
    this.grossMargin = grossMargin;
  }


  public ValuationsNNOREITDIRECTRatios grossProfitToAsset(@javax.annotation.Nullable BigDecimal grossProfitToAsset) {
    this.grossProfitToAsset = grossProfitToAsset;
    return this;
  }

  /**
   * The ratio of a company&#39;s gross profit to total assets
   * @return grossProfitToAsset
   */
  @javax.annotation.Nullable
  public BigDecimal getGrossProfitToAsset() {
    return grossProfitToAsset;
  }

  public void setGrossProfitToAsset(@javax.annotation.Nullable BigDecimal grossProfitToAsset) {
    this.grossProfitToAsset = grossProfitToAsset;
  }


  public ValuationsNNOREITDIRECTRatios inventoryToRevenue(@javax.annotation.Nullable BigDecimal inventoryToRevenue) {
    this.inventoryToRevenue = inventoryToRevenue;
    return this;
  }

  /**
   * The ratio of total inventory to total revenues
   * @return inventoryToRevenue
   */
  @javax.annotation.Nullable
  public BigDecimal getInventoryToRevenue() {
    return inventoryToRevenue;
  }

  public void setInventoryToRevenue(@javax.annotation.Nullable BigDecimal inventoryToRevenue) {
    this.inventoryToRevenue = inventoryToRevenue;
  }


  public ValuationsNNOREITDIRECTRatios inventoryTurnover(@javax.annotation.Nullable BigDecimal inventoryTurnover) {
    this.inventoryTurnover = inventoryTurnover;
    return this;
  }

  /**
   * The ratio of cost of goods sold to total inventories
   * @return inventoryTurnover
   */
  @javax.annotation.Nullable
  public BigDecimal getInventoryTurnover() {
    return inventoryTurnover;
  }

  public void setInventoryTurnover(@javax.annotation.Nullable BigDecimal inventoryTurnover) {
    this.inventoryTurnover = inventoryTurnover;
  }


  public ValuationsNNOREITDIRECTRatios liabilitiesToAssets(@javax.annotation.Nullable BigDecimal liabilitiesToAssets) {
    this.liabilitiesToAssets = liabilitiesToAssets;
    return this;
  }

  /**
   * Get liabilitiesToAssets
   * @return liabilitiesToAssets
   */
  @javax.annotation.Nullable
  public BigDecimal getLiabilitiesToAssets() {
    return liabilitiesToAssets;
  }

  public void setLiabilitiesToAssets(@javax.annotation.Nullable BigDecimal liabilitiesToAssets) {
    this.liabilitiesToAssets = liabilitiesToAssets;
  }


  public ValuationsNNOREITDIRECTRatios netMargin(@javax.annotation.Nullable BigDecimal netMargin) {
    this.netMargin = netMargin;
    return this;
  }

  /**
   * Net margin is calculated as Net Income divided by its Revenue.
   * @return netMargin
   */
  @javax.annotation.Nullable
  public BigDecimal getNetMargin() {
    return netMargin;
  }

  public void setNetMargin(@javax.annotation.Nullable BigDecimal netMargin) {
    this.netMargin = netMargin;
  }


  public ValuationsNNOREITDIRECTRatios operatingMargin(@javax.annotation.Nullable BigDecimal operatingMargin) {
    this.operatingMargin = operatingMargin;
    return this;
  }

  /**
   * Operating Margin % is calculated as Operating Income divided by its Revenue.
   * @return operatingMargin
   */
  @javax.annotation.Nullable
  public BigDecimal getOperatingMargin() {
    return operatingMargin;
  }

  public void setOperatingMargin(@javax.annotation.Nullable BigDecimal operatingMargin) {
    this.operatingMargin = operatingMargin;
  }


  public ValuationsNNOREITDIRECTRatios payout(@javax.annotation.Nullable BigDecimal payout) {
    this.payout = payout;
    return this;
  }

  /**
   * The dividend payout ratio is the ratio of the total amount of dividends paid out to shareholders relative to the net income of the company.
   * @return payout
   */
  @javax.annotation.Nullable
  public BigDecimal getPayout() {
    return payout;
  }

  public void setPayout(@javax.annotation.Nullable BigDecimal payout) {
    this.payout = payout;
  }


  public ValuationsNNOREITDIRECTRatios rd2rev(@javax.annotation.Nullable BigDecimal rd2rev) {
    this.rd2rev = rd2rev;
    return this;
  }

  /**
   * Get rd2rev
   * @return rd2rev
   */
  @javax.annotation.Nullable
  public BigDecimal getRd2rev() {
    return rd2rev;
  }

  public void setRd2rev(@javax.annotation.Nullable BigDecimal rd2rev) {
    this.rd2rev = rd2rev;
  }


  public ValuationsNNOREITDIRECTRatios receivablesTurnover(@javax.annotation.Nullable BigDecimal receivablesTurnover) {
    this.receivablesTurnover = receivablesTurnover;
    return this;
  }

  /**
   * The accounts receivables turnover ratio measures the number of times a company collects its average accounts receivable balance. It is calculated as Revenue divided by Average Accounts Receivable.
   * @return receivablesTurnover
   */
  @javax.annotation.Nullable
  public BigDecimal getReceivablesTurnover() {
    return receivablesTurnover;
  }

  public void setReceivablesTurnover(@javax.annotation.Nullable BigDecimal receivablesTurnover) {
    this.receivablesTurnover = receivablesTurnover;
  }


  public ValuationsNNOREITDIRECTRatios returnOnTangibleAsset(@javax.annotation.Nullable BigDecimal returnOnTangibleAsset) {
    this.returnOnTangibleAsset = returnOnTangibleAsset;
    return this;
  }

  /**
   * Return on tangible assets is calculated as Net Income divided by its average total tangible assets. Total tangible assets equals to Total Assets minus Intangible Assets.
   * @return returnOnTangibleAsset
   */
  @javax.annotation.Nullable
  public BigDecimal getReturnOnTangibleAsset() {
    return returnOnTangibleAsset;
  }

  public void setReturnOnTangibleAsset(@javax.annotation.Nullable BigDecimal returnOnTangibleAsset) {
    this.returnOnTangibleAsset = returnOnTangibleAsset;
  }


  public ValuationsNNOREITDIRECTRatios returnOnTangibleEquity(@javax.annotation.Nullable BigDecimal returnOnTangibleEquity) {
    this.returnOnTangibleEquity = returnOnTangibleEquity;
    return this;
  }

  /**
   * Return on tangible equity is calculated as Net Income attributable to Common Stockholders divided by its average total shareholder tangible equity.
   * @return returnOnTangibleEquity
   */
  @javax.annotation.Nullable
  public BigDecimal getReturnOnTangibleEquity() {
    return returnOnTangibleEquity;
  }

  public void setReturnOnTangibleEquity(@javax.annotation.Nullable BigDecimal returnOnTangibleEquity) {
    this.returnOnTangibleEquity = returnOnTangibleEquity;
  }


  public ValuationsNNOREITDIRECTRatios roa(@javax.annotation.Nullable BigDecimal roa) {
    this.roa = roa;
    return this;
  }

  /**
   * Return on assets is calculated as Net Income divided by its Total Assets.
   * @return roa
   */
  @javax.annotation.Nullable
  public BigDecimal getRoa() {
    return roa;
  }

  public void setRoa(@javax.annotation.Nullable BigDecimal roa) {
    this.roa = roa;
  }


  public ValuationsNNOREITDIRECTRatios rocJoel(@javax.annotation.Nullable BigDecimal rocJoel) {
    this.rocJoel = rocJoel;
    return this;
  }

  /**
   * Joel Greenblatt defined Return on Capital differently in his book The Little Book That Still Beats the Market (Little Books. Big Profits). He defines Return on Capital as EBIT divided by the total of Property, Plant and Equipment and net working capital.
   * @return rocJoel
   */
  @javax.annotation.Nullable
  public BigDecimal getRocJoel() {
    return rocJoel;
  }

  public void setRocJoel(@javax.annotation.Nullable BigDecimal rocJoel) {
    this.rocJoel = rocJoel;
  }


  public ValuationsNNOREITDIRECTRatios roce(@javax.annotation.Nullable BigDecimal roce) {
    this.roce = roce;
    return this;
  }

  /**
   * ROCE % measures how well a company generates profits from its capital.
   * @return roce
   */
  @javax.annotation.Nullable
  public BigDecimal getRoce() {
    return roce;
  }

  public void setRoce(@javax.annotation.Nullable BigDecimal roce) {
    this.roce = roce;
  }


  public ValuationsNNOREITDIRECTRatios roe(@javax.annotation.Nullable BigDecimal roe) {
    this.roe = roe;
    return this;
  }

  /**
   * Get roe
   * @return roe
   */
  @javax.annotation.Nullable
  public BigDecimal getRoe() {
    return roe;
  }

  public void setRoe(@javax.annotation.Nullable BigDecimal roe) {
    this.roe = roe;
  }


  public ValuationsNNOREITDIRECTRatios roeAdj(@javax.annotation.Nullable BigDecimal roeAdj) {
    this.roeAdj = roeAdj;
    return this;
  }

  /**
   * The return on equity adjusted to book values
   * @return roeAdj
   */
  @javax.annotation.Nullable
  public BigDecimal getRoeAdj() {
    return roeAdj;
  }

  public void setRoeAdj(@javax.annotation.Nullable BigDecimal roeAdj) {
    this.roeAdj = roeAdj;
  }


  public ValuationsNNOREITDIRECTRatios roic(@javax.annotation.Nullable BigDecimal roic) {
    this.roic = roic;
    return this;
  }

  /**
   * Return on Invested Capital (ROIC) is calculated as follows:    Return on Invested Capital (ROIC) &#x3D; (EBIT - Adjusted Taxes) / (Book Value of Debt + Book Value of Equity - Cash)
   * @return roic
   */
  @javax.annotation.Nullable
  public BigDecimal getRoic() {
    return roic;
  }

  public void setRoic(@javax.annotation.Nullable BigDecimal roic) {
    this.roic = roic;
  }


  public ValuationsNNOREITDIRECTRatios roiic1y(@javax.annotation.Nullable BigDecimal roiic1y) {
    this.roiic1y = roiic1y;
    return this;
  }

  /**
   * 1-Year Return on Invested Incremental Capital (1-Year ROIIC %) measures the change in earnings as a percentage of change in investment over 1-year.
   * @return roiic1y
   */
  @javax.annotation.Nullable
  public BigDecimal getRoiic1y() {
    return roiic1y;
  }

  public void setRoiic1y(@javax.annotation.Nullable BigDecimal roiic1y) {
    this.roiic1y = roiic1y;
  }


  public ValuationsNNOREITDIRECTRatios rore5y(@javax.annotation.Nullable BigDecimal rore5y) {
    this.rore5y = rore5y;
    return this;
  }

  /**
   * Return on Retained Earnings (RORE) is an indicator of a company&#39;s growth potential, it shows how much a company earns by reinvesting its retained earnings.
   * @return rore5y
   */
  @javax.annotation.Nullable
  public BigDecimal getRore5y() {
    return rore5y;
  }

  public void setRore5y(@javax.annotation.Nullable BigDecimal rore5y) {
    this.rore5y = rore5y;
  }


  public ValuationsNNOREITDIRECTRatios turnover(@javax.annotation.Nullable BigDecimal turnover) {
    this.turnover = turnover;
    return this;
  }

  /**
   * Asset Turnover measures how quickly a company turns over its asset through sales. It is defined as     &lt;b&gt;Asset Turnover &#x3D; Sales / {Total Assets}&lt;/b&gt;    Companies with low profit margins tend to have high asset turnover, while those with high profit margins have low asset turnover. Companies in the retail industry tend to have a very high turnover ratio.
   * @return turnover
   */
  @javax.annotation.Nullable
  public BigDecimal getTurnover() {
    return turnover;
  }

  public void setTurnover(@javax.annotation.Nullable BigDecimal turnover) {
    this.turnover = turnover;
  }


  public ValuationsNNOREITDIRECTRatios wacc(@javax.annotation.Nullable BigDecimal wacc) {
    this.wacc = wacc;
    return this;
  }

  /**
   * The weighted average cost of capital (WACC) is the rate that a company is expected to pay on average to all its security holders to finance its assets.
   * @return wacc
   */
  @javax.annotation.Nullable
  public BigDecimal getWacc() {
    return wacc;
  }

  public void setWacc(@javax.annotation.Nullable BigDecimal wacc) {
    this.wacc = wacc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValuationsNNOREITDIRECTRatios valuationsNNOREITDIRECTRatios = (ValuationsNNOREITDIRECTRatios) o;
    return Objects.equals(this.capexToOperatingCashFlow, valuationsNNOREITDIRECTRatios.capexToOperatingCashFlow) &&
        Objects.equals(this.capexToOperatingIncome, valuationsNNOREITDIRECTRatios.capexToOperatingIncome) &&
        Objects.equals(this.capexToRevenue, valuationsNNOREITDIRECTRatios.capexToRevenue) &&
        Objects.equals(this.cashConversionCycle, valuationsNNOREITDIRECTRatios.cashConversionCycle) &&
        Objects.equals(this.costOfGoodsSoldToRevenue, valuationsNNOREITDIRECTRatios.costOfGoodsSoldToRevenue) &&
        Objects.equals(this.daysInventory, valuationsNNOREITDIRECTRatios.daysInventory) &&
        Objects.equals(this.daysPayable, valuationsNNOREITDIRECTRatios.daysPayable) &&
        Objects.equals(this.daysSalesOutstanding, valuationsNNOREITDIRECTRatios.daysSalesOutstanding) &&
        Objects.equals(this.debtToAsset, valuationsNNOREITDIRECTRatios.debtToAsset) &&
        Objects.equals(this.debtToEquity, valuationsNNOREITDIRECTRatios.debtToEquity) &&
        Objects.equals(this.degreeOfFinancialLeverage, valuationsNNOREITDIRECTRatios.degreeOfFinancialLeverage) &&
        Objects.equals(this.degreeOfOperatingLeverage, valuationsNNOREITDIRECTRatios.degreeOfOperatingLeverage) &&
        Objects.equals(this.ebitdaMargin, valuationsNNOREITDIRECTRatios.ebitdaMargin) &&
        Objects.equals(this.effectiveInterestRate, valuationsNNOREITDIRECTRatios.effectiveInterestRate) &&
        Objects.equals(this.equityToAsset, valuationsNNOREITDIRECTRatios.equityToAsset) &&
        Objects.equals(this.fcfMargin, valuationsNNOREITDIRECTRatios.fcfMargin) &&
        Objects.equals(this.grossMargin, valuationsNNOREITDIRECTRatios.grossMargin) &&
        Objects.equals(this.grossProfitToAsset, valuationsNNOREITDIRECTRatios.grossProfitToAsset) &&
        Objects.equals(this.inventoryToRevenue, valuationsNNOREITDIRECTRatios.inventoryToRevenue) &&
        Objects.equals(this.inventoryTurnover, valuationsNNOREITDIRECTRatios.inventoryTurnover) &&
        Objects.equals(this.liabilitiesToAssets, valuationsNNOREITDIRECTRatios.liabilitiesToAssets) &&
        Objects.equals(this.netMargin, valuationsNNOREITDIRECTRatios.netMargin) &&
        Objects.equals(this.operatingMargin, valuationsNNOREITDIRECTRatios.operatingMargin) &&
        Objects.equals(this.payout, valuationsNNOREITDIRECTRatios.payout) &&
        Objects.equals(this.rd2rev, valuationsNNOREITDIRECTRatios.rd2rev) &&
        Objects.equals(this.receivablesTurnover, valuationsNNOREITDIRECTRatios.receivablesTurnover) &&
        Objects.equals(this.returnOnTangibleAsset, valuationsNNOREITDIRECTRatios.returnOnTangibleAsset) &&
        Objects.equals(this.returnOnTangibleEquity, valuationsNNOREITDIRECTRatios.returnOnTangibleEquity) &&
        Objects.equals(this.roa, valuationsNNOREITDIRECTRatios.roa) &&
        Objects.equals(this.rocJoel, valuationsNNOREITDIRECTRatios.rocJoel) &&
        Objects.equals(this.roce, valuationsNNOREITDIRECTRatios.roce) &&
        Objects.equals(this.roe, valuationsNNOREITDIRECTRatios.roe) &&
        Objects.equals(this.roeAdj, valuationsNNOREITDIRECTRatios.roeAdj) &&
        Objects.equals(this.roic, valuationsNNOREITDIRECTRatios.roic) &&
        Objects.equals(this.roiic1y, valuationsNNOREITDIRECTRatios.roiic1y) &&
        Objects.equals(this.rore5y, valuationsNNOREITDIRECTRatios.rore5y) &&
        Objects.equals(this.turnover, valuationsNNOREITDIRECTRatios.turnover) &&
        Objects.equals(this.wacc, valuationsNNOREITDIRECTRatios.wacc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capexToOperatingCashFlow, capexToOperatingIncome, capexToRevenue, cashConversionCycle, costOfGoodsSoldToRevenue, daysInventory, daysPayable, daysSalesOutstanding, debtToAsset, debtToEquity, degreeOfFinancialLeverage, degreeOfOperatingLeverage, ebitdaMargin, effectiveInterestRate, equityToAsset, fcfMargin, grossMargin, grossProfitToAsset, inventoryToRevenue, inventoryTurnover, liabilitiesToAssets, netMargin, operatingMargin, payout, rd2rev, receivablesTurnover, returnOnTangibleAsset, returnOnTangibleEquity, roa, rocJoel, roce, roe, roeAdj, roic, roiic1y, rore5y, turnover, wacc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValuationsNNOREITDIRECTRatios {\n");
    sb.append("    capexToOperatingCashFlow: ").append(toIndentedString(capexToOperatingCashFlow)).append("\n");
    sb.append("    capexToOperatingIncome: ").append(toIndentedString(capexToOperatingIncome)).append("\n");
    sb.append("    capexToRevenue: ").append(toIndentedString(capexToRevenue)).append("\n");
    sb.append("    cashConversionCycle: ").append(toIndentedString(cashConversionCycle)).append("\n");
    sb.append("    costOfGoodsSoldToRevenue: ").append(toIndentedString(costOfGoodsSoldToRevenue)).append("\n");
    sb.append("    daysInventory: ").append(toIndentedString(daysInventory)).append("\n");
    sb.append("    daysPayable: ").append(toIndentedString(daysPayable)).append("\n");
    sb.append("    daysSalesOutstanding: ").append(toIndentedString(daysSalesOutstanding)).append("\n");
    sb.append("    debtToAsset: ").append(toIndentedString(debtToAsset)).append("\n");
    sb.append("    debtToEquity: ").append(toIndentedString(debtToEquity)).append("\n");
    sb.append("    degreeOfFinancialLeverage: ").append(toIndentedString(degreeOfFinancialLeverage)).append("\n");
    sb.append("    degreeOfOperatingLeverage: ").append(toIndentedString(degreeOfOperatingLeverage)).append("\n");
    sb.append("    ebitdaMargin: ").append(toIndentedString(ebitdaMargin)).append("\n");
    sb.append("    effectiveInterestRate: ").append(toIndentedString(effectiveInterestRate)).append("\n");
    sb.append("    equityToAsset: ").append(toIndentedString(equityToAsset)).append("\n");
    sb.append("    fcfMargin: ").append(toIndentedString(fcfMargin)).append("\n");
    sb.append("    grossMargin: ").append(toIndentedString(grossMargin)).append("\n");
    sb.append("    grossProfitToAsset: ").append(toIndentedString(grossProfitToAsset)).append("\n");
    sb.append("    inventoryToRevenue: ").append(toIndentedString(inventoryToRevenue)).append("\n");
    sb.append("    inventoryTurnover: ").append(toIndentedString(inventoryTurnover)).append("\n");
    sb.append("    liabilitiesToAssets: ").append(toIndentedString(liabilitiesToAssets)).append("\n");
    sb.append("    netMargin: ").append(toIndentedString(netMargin)).append("\n");
    sb.append("    operatingMargin: ").append(toIndentedString(operatingMargin)).append("\n");
    sb.append("    payout: ").append(toIndentedString(payout)).append("\n");
    sb.append("    rd2rev: ").append(toIndentedString(rd2rev)).append("\n");
    sb.append("    receivablesTurnover: ").append(toIndentedString(receivablesTurnover)).append("\n");
    sb.append("    returnOnTangibleAsset: ").append(toIndentedString(returnOnTangibleAsset)).append("\n");
    sb.append("    returnOnTangibleEquity: ").append(toIndentedString(returnOnTangibleEquity)).append("\n");
    sb.append("    roa: ").append(toIndentedString(roa)).append("\n");
    sb.append("    rocJoel: ").append(toIndentedString(rocJoel)).append("\n");
    sb.append("    roce: ").append(toIndentedString(roce)).append("\n");
    sb.append("    roe: ").append(toIndentedString(roe)).append("\n");
    sb.append("    roeAdj: ").append(toIndentedString(roeAdj)).append("\n");
    sb.append("    roic: ").append(toIndentedString(roic)).append("\n");
    sb.append("    roiic1y: ").append(toIndentedString(roiic1y)).append("\n");
    sb.append("    rore5y: ").append(toIndentedString(rore5y)).append("\n");
    sb.append("    turnover: ").append(toIndentedString(turnover)).append("\n");
    sb.append("    wacc: ").append(toIndentedString(wacc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capex_to_operating_cash_flow");
    openapiFields.add("capex_to_operating_income");
    openapiFields.add("capex_to_revenue");
    openapiFields.add("cash_conversion_cycle");
    openapiFields.add("cost_of_goods_sold_to_revenue");
    openapiFields.add("days_inventory");
    openapiFields.add("days_payable");
    openapiFields.add("days_sales_outstanding");
    openapiFields.add("debt_to_asset");
    openapiFields.add("debt_to_equity");
    openapiFields.add("degree_of_financial_leverage");
    openapiFields.add("degree_of_operating_leverage");
    openapiFields.add("ebitda_margin");
    openapiFields.add("effective_interest_rate");
    openapiFields.add("equity_to_asset");
    openapiFields.add("fcf_margin");
    openapiFields.add("gross_margin");
    openapiFields.add("gross_profit_to_asset");
    openapiFields.add("inventory_to_revenue");
    openapiFields.add("inventory_turnover");
    openapiFields.add("liabilities_to_assets");
    openapiFields.add("net_margin");
    openapiFields.add("operating_margin");
    openapiFields.add("payout");
    openapiFields.add("rd2rev");
    openapiFields.add("receivables_turnover");
    openapiFields.add("return_on_tangible_asset");
    openapiFields.add("return_on_tangible_equity");
    openapiFields.add("roa");
    openapiFields.add("roc_joel");
    openapiFields.add("roce");
    openapiFields.add("roe");
    openapiFields.add("roe_adj");
    openapiFields.add("roic");
    openapiFields.add("roiic_1y");
    openapiFields.add("rore_5y");
    openapiFields.add("turnover");
    openapiFields.add("wacc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ValuationsNNOREITDIRECTRatios
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ValuationsNNOREITDIRECTRatios.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValuationsNNOREITDIRECTRatios is not found in the empty JSON string", ValuationsNNOREITDIRECTRatios.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ValuationsNNOREITDIRECTRatios.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ValuationsNNOREITDIRECTRatios` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValuationsNNOREITDIRECTRatios.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValuationsNNOREITDIRECTRatios' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValuationsNNOREITDIRECTRatios> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValuationsNNOREITDIRECTRatios.class));

       return (TypeAdapter<T>) new TypeAdapter<ValuationsNNOREITDIRECTRatios>() {
           @Override
           public void write(JsonWriter out, ValuationsNNOREITDIRECTRatios value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValuationsNNOREITDIRECTRatios read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ValuationsNNOREITDIRECTRatios given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ValuationsNNOREITDIRECTRatios
   * @throws IOException if the JSON string is invalid with respect to ValuationsNNOREITDIRECTRatios
   */
  public static ValuationsNNOREITDIRECTRatios fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValuationsNNOREITDIRECTRatios.class);
  }

  /**
   * Convert an instance of ValuationsNNOREITDIRECTRatios to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

