/*
 * Gurufocus Data Package API
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ValuationsNREITNODIRECTBasicInformation;
import org.openapitools.client.model.ValuationsNREITNODIRECTPerShareData;
import org.openapitools.client.model.ValuationsNREITNODIRECTRatios;
import org.openapitools.client.model.ValuationsNREITNODIRECTValuationRatios;
import org.openapitools.client.model.ValuationsNREITNODIRECTValuationandQuality;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ValuationsNREITNODIRECT
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-11T01:10:00.357398434Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class ValuationsNREITNODIRECT {
  public static final String SERIALIZED_NAME_BASIC_INFORMATION = "basic_information";
  @SerializedName(SERIALIZED_NAME_BASIC_INFORMATION)
  @javax.annotation.Nullable
  private ValuationsNREITNODIRECTBasicInformation basicInformation;

  public static final String SERIALIZED_NAME_PER_SHARE_DATA = "per_share_data";
  @SerializedName(SERIALIZED_NAME_PER_SHARE_DATA)
  @javax.annotation.Nullable
  private ValuationsNREITNODIRECTPerShareData perShareData;

  public static final String SERIALIZED_NAME_RATIOS = "ratios";
  @SerializedName(SERIALIZED_NAME_RATIOS)
  @javax.annotation.Nullable
  private ValuationsNREITNODIRECTRatios ratios;

  public static final String SERIALIZED_NAME_VALUATION_RATIOS = "valuation_ratios";
  @SerializedName(SERIALIZED_NAME_VALUATION_RATIOS)
  @javax.annotation.Nullable
  private ValuationsNREITNODIRECTValuationRatios valuationRatios;

  public static final String SERIALIZED_NAME_VALUATIONAND_QUALITY = "valuationand_quality";
  @SerializedName(SERIALIZED_NAME_VALUATIONAND_QUALITY)
  @javax.annotation.Nullable
  private ValuationsNREITNODIRECTValuationandQuality valuationandQuality;

  public ValuationsNREITNODIRECT() {
  }

  public ValuationsNREITNODIRECT basicInformation(@javax.annotation.Nullable ValuationsNREITNODIRECTBasicInformation basicInformation) {
    this.basicInformation = basicInformation;
    return this;
  }

  /**
   * Get basicInformation
   * @return basicInformation
   */
  @javax.annotation.Nullable
  public ValuationsNREITNODIRECTBasicInformation getBasicInformation() {
    return basicInformation;
  }

  public void setBasicInformation(@javax.annotation.Nullable ValuationsNREITNODIRECTBasicInformation basicInformation) {
    this.basicInformation = basicInformation;
  }


  public ValuationsNREITNODIRECT perShareData(@javax.annotation.Nullable ValuationsNREITNODIRECTPerShareData perShareData) {
    this.perShareData = perShareData;
    return this;
  }

  /**
   * Get perShareData
   * @return perShareData
   */
  @javax.annotation.Nullable
  public ValuationsNREITNODIRECTPerShareData getPerShareData() {
    return perShareData;
  }

  public void setPerShareData(@javax.annotation.Nullable ValuationsNREITNODIRECTPerShareData perShareData) {
    this.perShareData = perShareData;
  }


  public ValuationsNREITNODIRECT ratios(@javax.annotation.Nullable ValuationsNREITNODIRECTRatios ratios) {
    this.ratios = ratios;
    return this;
  }

  /**
   * Get ratios
   * @return ratios
   */
  @javax.annotation.Nullable
  public ValuationsNREITNODIRECTRatios getRatios() {
    return ratios;
  }

  public void setRatios(@javax.annotation.Nullable ValuationsNREITNODIRECTRatios ratios) {
    this.ratios = ratios;
  }


  public ValuationsNREITNODIRECT valuationRatios(@javax.annotation.Nullable ValuationsNREITNODIRECTValuationRatios valuationRatios) {
    this.valuationRatios = valuationRatios;
    return this;
  }

  /**
   * Get valuationRatios
   * @return valuationRatios
   */
  @javax.annotation.Nullable
  public ValuationsNREITNODIRECTValuationRatios getValuationRatios() {
    return valuationRatios;
  }

  public void setValuationRatios(@javax.annotation.Nullable ValuationsNREITNODIRECTValuationRatios valuationRatios) {
    this.valuationRatios = valuationRatios;
  }


  public ValuationsNREITNODIRECT valuationandQuality(@javax.annotation.Nullable ValuationsNREITNODIRECTValuationandQuality valuationandQuality) {
    this.valuationandQuality = valuationandQuality;
    return this;
  }

  /**
   * Get valuationandQuality
   * @return valuationandQuality
   */
  @javax.annotation.Nullable
  public ValuationsNREITNODIRECTValuationandQuality getValuationandQuality() {
    return valuationandQuality;
  }

  public void setValuationandQuality(@javax.annotation.Nullable ValuationsNREITNODIRECTValuationandQuality valuationandQuality) {
    this.valuationandQuality = valuationandQuality;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValuationsNREITNODIRECT valuationsNREITNODIRECT = (ValuationsNREITNODIRECT) o;
    return Objects.equals(this.basicInformation, valuationsNREITNODIRECT.basicInformation) &&
        Objects.equals(this.perShareData, valuationsNREITNODIRECT.perShareData) &&
        Objects.equals(this.ratios, valuationsNREITNODIRECT.ratios) &&
        Objects.equals(this.valuationRatios, valuationsNREITNODIRECT.valuationRatios) &&
        Objects.equals(this.valuationandQuality, valuationsNREITNODIRECT.valuationandQuality);
  }

  @Override
  public int hashCode() {
    return Objects.hash(basicInformation, perShareData, ratios, valuationRatios, valuationandQuality);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValuationsNREITNODIRECT {\n");
    sb.append("    basicInformation: ").append(toIndentedString(basicInformation)).append("\n");
    sb.append("    perShareData: ").append(toIndentedString(perShareData)).append("\n");
    sb.append("    ratios: ").append(toIndentedString(ratios)).append("\n");
    sb.append("    valuationRatios: ").append(toIndentedString(valuationRatios)).append("\n");
    sb.append("    valuationandQuality: ").append(toIndentedString(valuationandQuality)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("basic_information");
    openapiFields.add("per_share_data");
    openapiFields.add("ratios");
    openapiFields.add("valuation_ratios");
    openapiFields.add("valuationand_quality");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ValuationsNREITNODIRECT
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ValuationsNREITNODIRECT.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValuationsNREITNODIRECT is not found in the empty JSON string", ValuationsNREITNODIRECT.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ValuationsNREITNODIRECT.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ValuationsNREITNODIRECT` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `basic_information`
      if (jsonObj.get("basic_information") != null && !jsonObj.get("basic_information").isJsonNull()) {
        ValuationsNREITNODIRECTBasicInformation.validateJsonElement(jsonObj.get("basic_information"));
      }
      // validate the optional field `per_share_data`
      if (jsonObj.get("per_share_data") != null && !jsonObj.get("per_share_data").isJsonNull()) {
        ValuationsNREITNODIRECTPerShareData.validateJsonElement(jsonObj.get("per_share_data"));
      }
      // validate the optional field `ratios`
      if (jsonObj.get("ratios") != null && !jsonObj.get("ratios").isJsonNull()) {
        ValuationsNREITNODIRECTRatios.validateJsonElement(jsonObj.get("ratios"));
      }
      // validate the optional field `valuation_ratios`
      if (jsonObj.get("valuation_ratios") != null && !jsonObj.get("valuation_ratios").isJsonNull()) {
        ValuationsNREITNODIRECTValuationRatios.validateJsonElement(jsonObj.get("valuation_ratios"));
      }
      // validate the optional field `valuationand_quality`
      if (jsonObj.get("valuationand_quality") != null && !jsonObj.get("valuationand_quality").isJsonNull()) {
        ValuationsNREITNODIRECTValuationandQuality.validateJsonElement(jsonObj.get("valuationand_quality"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValuationsNREITNODIRECT.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValuationsNREITNODIRECT' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValuationsNREITNODIRECT> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValuationsNREITNODIRECT.class));

       return (TypeAdapter<T>) new TypeAdapter<ValuationsNREITNODIRECT>() {
           @Override
           public void write(JsonWriter out, ValuationsNREITNODIRECT value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValuationsNREITNODIRECT read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ValuationsNREITNODIRECT given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ValuationsNREITNODIRECT
   * @throws IOException if the JSON string is invalid with respect to ValuationsNREITNODIRECT
   */
  public static ValuationsNREITNODIRECT fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValuationsNREITNODIRECT.class);
  }

  /**
   * Convert an instance of ValuationsNREITNODIRECT to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

