/*
 * Gurufocus Data Package API
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EtfEtfDividends
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-11T01:10:00.357398434Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class EtfEtfDividends {
  public static final String SERIALIZED_NAME_DIVIDEND_FREQ = "dividend_freq";
  @SerializedName(SERIALIZED_NAME_DIVIDEND_FREQ)
  @javax.annotation.Nullable
  private BigDecimal dividendFreq;

  public static final String SERIALIZED_NAME_NEXT_DIVIDEND_PAYMENT_DATE = "next_dividend_payment_date";
  @SerializedName(SERIALIZED_NAME_NEXT_DIVIDEND_PAYMENT_DATE)
  @javax.annotation.Nullable
  private String nextDividendPaymentDate;

  public static final String SERIALIZED_NAME_TTM_DIVIDEND = "ttm_dividend";
  @SerializedName(SERIALIZED_NAME_TTM_DIVIDEND)
  @javax.annotation.Nullable
  private BigDecimal ttmDividend;

  public static final String SERIALIZED_NAME_YIELD = "yield";
  @SerializedName(SERIALIZED_NAME_YIELD)
  @javax.annotation.Nullable
  private BigDecimal yield;

  public static final String SERIALIZED_NAME_YIELD_HIGH = "yield_high";
  @SerializedName(SERIALIZED_NAME_YIELD_HIGH)
  @javax.annotation.Nullable
  private BigDecimal yieldHigh;

  public static final String SERIALIZED_NAME_YIELD_LOW = "yield_low";
  @SerializedName(SERIALIZED_NAME_YIELD_LOW)
  @javax.annotation.Nullable
  private BigDecimal yieldLow;

  public static final String SERIALIZED_NAME_YIELD_MED = "yield_med";
  @SerializedName(SERIALIZED_NAME_YIELD_MED)
  @javax.annotation.Nullable
  private BigDecimal yieldMed;

  public EtfEtfDividends() {
  }

  public EtfEtfDividends dividendFreq(@javax.annotation.Nullable BigDecimal dividendFreq) {
    this.dividendFreq = dividendFreq;
    return this;
  }

  /**
   * The number of times a company pays a dividend per year. Example: 4 means quarterly.
   * @return dividendFreq
   */
  @javax.annotation.Nullable
  public BigDecimal getDividendFreq() {
    return dividendFreq;
  }

  public void setDividendFreq(@javax.annotation.Nullable BigDecimal dividendFreq) {
    this.dividendFreq = dividendFreq;
  }


  public EtfEtfDividends nextDividendPaymentDate(@javax.annotation.Nullable String nextDividendPaymentDate) {
    this.nextDividendPaymentDate = nextDividendPaymentDate;
    return this;
  }

  /**
   * Get nextDividendPaymentDate
   * @return nextDividendPaymentDate
   */
  @javax.annotation.Nullable
  public String getNextDividendPaymentDate() {
    return nextDividendPaymentDate;
  }

  public void setNextDividendPaymentDate(@javax.annotation.Nullable String nextDividendPaymentDate) {
    this.nextDividendPaymentDate = nextDividendPaymentDate;
  }


  public EtfEtfDividends ttmDividend(@javax.annotation.Nullable BigDecimal ttmDividend) {
    this.ttmDividend = ttmDividend;
    return this;
  }

  /**
   * The aggregate amount of dividends over the trailing 12 months
   * @return ttmDividend
   */
  @javax.annotation.Nullable
  public BigDecimal getTtmDividend() {
    return ttmDividend;
  }

  public void setTtmDividend(@javax.annotation.Nullable BigDecimal ttmDividend) {
    this.ttmDividend = ttmDividend;
  }


  public EtfEtfDividends yield(@javax.annotation.Nullable BigDecimal yield) {
    this.yield = yield;
    return this;
  }

  /**
   * The dividend yield is the ratio of a company&#39;s annual dividend compared to its share price.
   * @return yield
   */
  @javax.annotation.Nullable
  public BigDecimal getYield() {
    return yield;
  }

  public void setYield(@javax.annotation.Nullable BigDecimal yield) {
    this.yield = yield;
  }


  public EtfEtfDividends yieldHigh(@javax.annotation.Nullable BigDecimal yieldHigh) {
    this.yieldHigh = yieldHigh;
    return this;
  }

  /**
   * The dividend yield is the ratio of a company&#39;s annual dividend compared to its share price.
   * @return yieldHigh
   */
  @javax.annotation.Nullable
  public BigDecimal getYieldHigh() {
    return yieldHigh;
  }

  public void setYieldHigh(@javax.annotation.Nullable BigDecimal yieldHigh) {
    this.yieldHigh = yieldHigh;
  }


  public EtfEtfDividends yieldLow(@javax.annotation.Nullable BigDecimal yieldLow) {
    this.yieldLow = yieldLow;
    return this;
  }

  /**
   * The dividend yield is the ratio of a company&#39;s annual dividend compared to its share price.
   * @return yieldLow
   */
  @javax.annotation.Nullable
  public BigDecimal getYieldLow() {
    return yieldLow;
  }

  public void setYieldLow(@javax.annotation.Nullable BigDecimal yieldLow) {
    this.yieldLow = yieldLow;
  }


  public EtfEtfDividends yieldMed(@javax.annotation.Nullable BigDecimal yieldMed) {
    this.yieldMed = yieldMed;
    return this;
  }

  /**
   * The dividend yield is the ratio of a company&#39;s annual dividend compared to its share price.
   * @return yieldMed
   */
  @javax.annotation.Nullable
  public BigDecimal getYieldMed() {
    return yieldMed;
  }

  public void setYieldMed(@javax.annotation.Nullable BigDecimal yieldMed) {
    this.yieldMed = yieldMed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EtfEtfDividends etfEtfDividends = (EtfEtfDividends) o;
    return Objects.equals(this.dividendFreq, etfEtfDividends.dividendFreq) &&
        Objects.equals(this.nextDividendPaymentDate, etfEtfDividends.nextDividendPaymentDate) &&
        Objects.equals(this.ttmDividend, etfEtfDividends.ttmDividend) &&
        Objects.equals(this.yield, etfEtfDividends.yield) &&
        Objects.equals(this.yieldHigh, etfEtfDividends.yieldHigh) &&
        Objects.equals(this.yieldLow, etfEtfDividends.yieldLow) &&
        Objects.equals(this.yieldMed, etfEtfDividends.yieldMed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dividendFreq, nextDividendPaymentDate, ttmDividend, yield, yieldHigh, yieldLow, yieldMed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EtfEtfDividends {\n");
    sb.append("    dividendFreq: ").append(toIndentedString(dividendFreq)).append("\n");
    sb.append("    nextDividendPaymentDate: ").append(toIndentedString(nextDividendPaymentDate)).append("\n");
    sb.append("    ttmDividend: ").append(toIndentedString(ttmDividend)).append("\n");
    sb.append("    yield: ").append(toIndentedString(yield)).append("\n");
    sb.append("    yieldHigh: ").append(toIndentedString(yieldHigh)).append("\n");
    sb.append("    yieldLow: ").append(toIndentedString(yieldLow)).append("\n");
    sb.append("    yieldMed: ").append(toIndentedString(yieldMed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dividend_freq");
    openapiFields.add("next_dividend_payment_date");
    openapiFields.add("ttm_dividend");
    openapiFields.add("yield");
    openapiFields.add("yield_high");
    openapiFields.add("yield_low");
    openapiFields.add("yield_med");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EtfEtfDividends
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EtfEtfDividends.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EtfEtfDividends is not found in the empty JSON string", EtfEtfDividends.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EtfEtfDividends.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EtfEtfDividends` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("next_dividend_payment_date") != null && !jsonObj.get("next_dividend_payment_date").isJsonNull()) && !jsonObj.get("next_dividend_payment_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next_dividend_payment_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next_dividend_payment_date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EtfEtfDividends.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EtfEtfDividends' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EtfEtfDividends> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EtfEtfDividends.class));

       return (TypeAdapter<T>) new TypeAdapter<EtfEtfDividends>() {
           @Override
           public void write(JsonWriter out, EtfEtfDividends value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EtfEtfDividends read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EtfEtfDividends given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EtfEtfDividends
   * @throws IOException if the JSON string is invalid with respect to EtfEtfDividends
   */
  public static EtfEtfDividends fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EtfEtfDividends.class);
  }

  /**
   * Convert an instance of EtfEtfDividends to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

