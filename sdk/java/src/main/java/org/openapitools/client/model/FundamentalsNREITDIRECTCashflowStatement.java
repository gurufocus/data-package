/*
 * Gurufocus Data Package API
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FundamentalsNREITDIRECTCashflowStatement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-11T01:10:00.357398434Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class FundamentalsNREITDIRECTCashflowStatement {
  public static final String SERIALIZED_NAME_BEGINNING_CASH_POSITION = "beginning_cash_position";
  @SerializedName(SERIALIZED_NAME_BEGINNING_CASH_POSITION)
  @javax.annotation.Nullable
  private BigDecimal beginningCashPosition;

  public static final String SERIALIZED_NAME_CASH_FLOW_CAPITAL_EXPENDITURE = "cash_flow_capital_expenditure";
  @SerializedName(SERIALIZED_NAME_CASH_FLOW_CAPITAL_EXPENDITURE)
  @javax.annotation.Nullable
  private BigDecimal cashFlowCapitalExpenditure;

  public static final String SERIALIZED_NAME_CASH_FLOW_FOR_LEASE_FINANCING = "cash_flow_for_lease_financing";
  @SerializedName(SERIALIZED_NAME_CASH_FLOW_FOR_LEASE_FINANCING)
  @javax.annotation.Nullable
  private BigDecimal cashFlowForLeaseFinancing;

  public static final String SERIALIZED_NAME_CASH_FLOW_FROM_INVESTING = "cash_flow_from_investing";
  @SerializedName(SERIALIZED_NAME_CASH_FLOW_FROM_INVESTING)
  @javax.annotation.Nullable
  private BigDecimal cashFlowFromInvesting;

  public static final String SERIALIZED_NAME_CASH_FLOW_FROM_OPERATIONS = "cash_flow_from_operations";
  @SerializedName(SERIALIZED_NAME_CASH_FLOW_FROM_OPERATIONS)
  @javax.annotation.Nullable
  private BigDecimal cashFlowFromOperations;

  public static final String SERIALIZED_NAME_CASH_FLOW_FROM_OTHERS = "cash_flow_from_others";
  @SerializedName(SERIALIZED_NAME_CASH_FLOW_FROM_OTHERS)
  @javax.annotation.Nullable
  private BigDecimal cashFlowFromOthers;

  public static final String SERIALIZED_NAME_CASH_FROM_DISCONTINUED_INVESTING_ACTIVITIES = "cash_from_discontinued_investing_activities";
  @SerializedName(SERIALIZED_NAME_CASH_FROM_DISCONTINUED_INVESTING_ACTIVITIES)
  @javax.annotation.Nullable
  private BigDecimal cashFromDiscontinuedInvestingActivities;

  public static final String SERIALIZED_NAME_CASH_FROM_FINANCING = "cash_from_financing";
  @SerializedName(SERIALIZED_NAME_CASH_FROM_FINANCING)
  @javax.annotation.Nullable
  private BigDecimal cashFromFinancing;

  public static final String SERIALIZED_NAME_CASH_FROM_OTHER_INVESTING_ACTIVITIES = "cash_from_other_investing_activities";
  @SerializedName(SERIALIZED_NAME_CASH_FROM_OTHER_INVESTING_ACTIVITIES)
  @javax.annotation.Nullable
  private BigDecimal cashFromOtherInvestingActivities;

  public static final String SERIALIZED_NAME_CASH_PAYMENTS = "cash_payments";
  @SerializedName(SERIALIZED_NAME_CASH_PAYMENTS)
  @javax.annotation.Nullable
  private BigDecimal cashPayments;

  public static final String SERIALIZED_NAME_CASH_RECEIPTS_FROM_OPERATING_ACTIVITIES = "cash_receipts_from_operating_activities";
  @SerializedName(SERIALIZED_NAME_CASH_RECEIPTS_FROM_OPERATING_ACTIVITIES)
  @javax.annotation.Nullable
  private BigDecimal cashReceiptsFromOperatingActivities;

  public static final String SERIALIZED_NAME_DEBT_ISSUANCE = "debt_issuance";
  @SerializedName(SERIALIZED_NAME_DEBT_ISSUANCE)
  @javax.annotation.Nullable
  private BigDecimal debtIssuance;

  public static final String SERIALIZED_NAME_DEBT_PAYMENTS = "debt_payments";
  @SerializedName(SERIALIZED_NAME_DEBT_PAYMENTS)
  @javax.annotation.Nullable
  private BigDecimal debtPayments;

  public static final String SERIALIZED_NAME_DIVIDENDS = "dividends";
  @SerializedName(SERIALIZED_NAME_DIVIDENDS)
  @javax.annotation.Nullable
  private BigDecimal dividends;

  public static final String SERIALIZED_NAME_DIVIDENDS_PAID_DIRECT = "dividends_paid_direct";
  @SerializedName(SERIALIZED_NAME_DIVIDENDS_PAID_DIRECT)
  @javax.annotation.Nullable
  private BigDecimal dividendsPaidDirect;

  public static final String SERIALIZED_NAME_DIVIDENDS_RECEIVED_DIRECT = "dividends_received_direct";
  @SerializedName(SERIALIZED_NAME_DIVIDENDS_RECEIVED_DIRECT)
  @javax.annotation.Nullable
  private BigDecimal dividendsReceivedDirect;

  public static final String SERIALIZED_NAME_EFFECT_OF_EXCHANGE_RATE_CHANGES = "effect_of_exchange_rate_changes";
  @SerializedName(SERIALIZED_NAME_EFFECT_OF_EXCHANGE_RATE_CHANGES)
  @javax.annotation.Nullable
  private BigDecimal effectOfExchangeRateChanges;

  public static final String SERIALIZED_NAME_ENDING_CASH_POSITION = "ending_cash_position";
  @SerializedName(SERIALIZED_NAME_ENDING_CASH_POSITION)
  @javax.annotation.Nullable
  private BigDecimal endingCashPosition;

  public static final String SERIALIZED_NAME_FFO = "ffo";
  @SerializedName(SERIALIZED_NAME_FFO)
  @javax.annotation.Nullable
  private BigDecimal ffo;

  public static final String SERIALIZED_NAME_INTEREST_PAID_DIRECT = "interest_paid_direct";
  @SerializedName(SERIALIZED_NAME_INTEREST_PAID_DIRECT)
  @javax.annotation.Nullable
  private BigDecimal interestPaidDirect;

  public static final String SERIALIZED_NAME_INTEREST_RECEIVED_DIRECT = "interest_received_direct";
  @SerializedName(SERIALIZED_NAME_INTEREST_RECEIVED_DIRECT)
  @javax.annotation.Nullable
  private BigDecimal interestReceivedDirect;

  public static final String SERIALIZED_NAME_ISSUANCE_OF_STOCK = "issuance_of_stock";
  @SerializedName(SERIALIZED_NAME_ISSUANCE_OF_STOCK)
  @javax.annotation.Nullable
  private BigDecimal issuanceOfStock;

  public static final String SERIALIZED_NAME_NET_CHANGE_IN_CASH = "net_change_in_cash";
  @SerializedName(SERIALIZED_NAME_NET_CHANGE_IN_CASH)
  @javax.annotation.Nullable
  private BigDecimal netChangeInCash;

  public static final String SERIALIZED_NAME_NET_INTANGIBLES_PURCHASE_AND_SALE = "net_intangibles_purchase_and_sale";
  @SerializedName(SERIALIZED_NAME_NET_INTANGIBLES_PURCHASE_AND_SALE)
  @javax.annotation.Nullable
  private BigDecimal netIntangiblesPurchaseAndSale;

  public static final String SERIALIZED_NAME_NET_ISSUANCE_OF_DEBT = "net_issuance_of_debt";
  @SerializedName(SERIALIZED_NAME_NET_ISSUANCE_OF_DEBT)
  @javax.annotation.Nullable
  private BigDecimal netIssuanceOfDebt;

  public static final String SERIALIZED_NAME_NET_ISSUANCE_OF_PREFERRED = "net_issuance_of_preferred";
  @SerializedName(SERIALIZED_NAME_NET_ISSUANCE_OF_PREFERRED)
  @javax.annotation.Nullable
  private BigDecimal netIssuanceOfPreferred;

  public static final String SERIALIZED_NAME_OTHER_CASH_PAYMENTS_FROM_OPERATING_ACTIVITIES = "other_cash_payments_from_operating_activities";
  @SerializedName(SERIALIZED_NAME_OTHER_CASH_PAYMENTS_FROM_OPERATING_ACTIVITIES)
  @javax.annotation.Nullable
  private BigDecimal otherCashPaymentsFromOperatingActivities;

  public static final String SERIALIZED_NAME_OTHER_CASH_RECEIPTS_FROM_OPERATING_ACTIVITIES = "other_cash_receipts_from_operating_activities";
  @SerializedName(SERIALIZED_NAME_OTHER_CASH_RECEIPTS_FROM_OPERATING_ACTIVITIES)
  @javax.annotation.Nullable
  private BigDecimal otherCashReceiptsFromOperatingActivities;

  public static final String SERIALIZED_NAME_OTHER_FINANCING = "other_financing";
  @SerializedName(SERIALIZED_NAME_OTHER_FINANCING)
  @javax.annotation.Nullable
  private BigDecimal otherFinancing;

  public static final String SERIALIZED_NAME_PAYMENTS_ON_BEHALF_OF_EMPLOYEES = "payments_on_behalf_of_employees";
  @SerializedName(SERIALIZED_NAME_PAYMENTS_ON_BEHALF_OF_EMPLOYEES)
  @javax.annotation.Nullable
  private BigDecimal paymentsOnBehalfOfEmployees;

  public static final String SERIALIZED_NAME_PAYMENTS_TO_SUPPLIERS_FOR_GOODS_AND_SERVICES = "payments_to_suppliers_for_goods_and_services";
  @SerializedName(SERIALIZED_NAME_PAYMENTS_TO_SUPPLIERS_FOR_GOODS_AND_SERVICES)
  @javax.annotation.Nullable
  private BigDecimal paymentsToSuppliersForGoodsAndServices;

  public static final String SERIALIZED_NAME_PURCHASE_OF_BUSINESS = "purchase_of_business";
  @SerializedName(SERIALIZED_NAME_PURCHASE_OF_BUSINESS)
  @javax.annotation.Nullable
  private BigDecimal purchaseOfBusiness;

  public static final String SERIALIZED_NAME_PURCHASE_OF_INVESTMENT = "purchase_of_investment";
  @SerializedName(SERIALIZED_NAME_PURCHASE_OF_INVESTMENT)
  @javax.annotation.Nullable
  private BigDecimal purchaseOfInvestment;

  public static final String SERIALIZED_NAME_PURCHASE_OF_PPE = "purchase_of_ppe";
  @SerializedName(SERIALIZED_NAME_PURCHASE_OF_PPE)
  @javax.annotation.Nullable
  private BigDecimal purchaseOfPpe;

  public static final String SERIALIZED_NAME_RECEIPTS_FROM_CUSTOMERS = "receipts_from_customers";
  @SerializedName(SERIALIZED_NAME_RECEIPTS_FROM_CUSTOMERS)
  @javax.annotation.Nullable
  private BigDecimal receiptsFromCustomers;

  public static final String SERIALIZED_NAME_RECEIPTS_FROM_GOVERNMENT_GRANTS = "receipts_from_government_grants";
  @SerializedName(SERIALIZED_NAME_RECEIPTS_FROM_GOVERNMENT_GRANTS)
  @javax.annotation.Nullable
  private BigDecimal receiptsFromGovernmentGrants;

  public static final String SERIALIZED_NAME_REPURCHASE_OF_STOCK = "repurchase_of_stock";
  @SerializedName(SERIALIZED_NAME_REPURCHASE_OF_STOCK)
  @javax.annotation.Nullable
  private BigDecimal repurchaseOfStock;

  public static final String SERIALIZED_NAME_SALE_OF_BUSINESS = "sale_of_business";
  @SerializedName(SERIALIZED_NAME_SALE_OF_BUSINESS)
  @javax.annotation.Nullable
  private BigDecimal saleOfBusiness;

  public static final String SERIALIZED_NAME_SALE_OF_INVESTMENT = "sale_of_investment";
  @SerializedName(SERIALIZED_NAME_SALE_OF_INVESTMENT)
  @javax.annotation.Nullable
  private BigDecimal saleOfInvestment;

  public static final String SERIALIZED_NAME_SALE_OF_PPE = "sale_of_ppe";
  @SerializedName(SERIALIZED_NAME_SALE_OF_PPE)
  @javax.annotation.Nullable
  private BigDecimal saleOfPpe;

  public static final String SERIALIZED_NAME_TAXES_REFUND_PAID_DIRECT = "taxes_refund_paid_direct";
  @SerializedName(SERIALIZED_NAME_TAXES_REFUND_PAID_DIRECT)
  @javax.annotation.Nullable
  private BigDecimal taxesRefundPaidDirect;

  public static final String SERIALIZED_NAME_TOTAL_FREE_CASH_FLOW = "total_free_cash_flow";
  @SerializedName(SERIALIZED_NAME_TOTAL_FREE_CASH_FLOW)
  @javax.annotation.Nullable
  private BigDecimal totalFreeCashFlow;

  public FundamentalsNREITDIRECTCashflowStatement() {
  }

  public FundamentalsNREITDIRECTCashflowStatement beginningCashPosition(@javax.annotation.Nullable BigDecimal beginningCashPosition) {
    this.beginningCashPosition = beginningCashPosition;
    return this;
  }

  /**
   * Get beginningCashPosition
   * @return beginningCashPosition
   */
  @javax.annotation.Nullable
  public BigDecimal getBeginningCashPosition() {
    return beginningCashPosition;
  }

  public void setBeginningCashPosition(@javax.annotation.Nullable BigDecimal beginningCashPosition) {
    this.beginningCashPosition = beginningCashPosition;
  }


  public FundamentalsNREITDIRECTCashflowStatement cashFlowCapitalExpenditure(@javax.annotation.Nullable BigDecimal cashFlowCapitalExpenditure) {
    this.cashFlowCapitalExpenditure = cashFlowCapitalExpenditure;
    return this;
  }

  /**
   * &lt;p&gt;{{Cash_Flow_CPEX}} refers to the funds spent for a company to acquire or upgrade physical assets such as property, industrial buildings or equipment.&lt;/p&gt;
   * @return cashFlowCapitalExpenditure
   */
  @javax.annotation.Nullable
  public BigDecimal getCashFlowCapitalExpenditure() {
    return cashFlowCapitalExpenditure;
  }

  public void setCashFlowCapitalExpenditure(@javax.annotation.Nullable BigDecimal cashFlowCapitalExpenditure) {
    this.cashFlowCapitalExpenditure = cashFlowCapitalExpenditure;
  }


  public FundamentalsNREITDIRECTCashflowStatement cashFlowForLeaseFinancing(@javax.annotation.Nullable BigDecimal cashFlowForLeaseFinancing) {
    this.cashFlowForLeaseFinancing = cashFlowForLeaseFinancing;
    return this;
  }

  /**
   * https://www.gurufocus.com/glossary/cash_flow_for_lease_financing
   * @return cashFlowForLeaseFinancing
   */
  @javax.annotation.Nullable
  public BigDecimal getCashFlowForLeaseFinancing() {
    return cashFlowForLeaseFinancing;
  }

  public void setCashFlowForLeaseFinancing(@javax.annotation.Nullable BigDecimal cashFlowForLeaseFinancing) {
    this.cashFlowForLeaseFinancing = cashFlowForLeaseFinancing;
  }


  public FundamentalsNREITDIRECTCashflowStatement cashFlowFromInvesting(@javax.annotation.Nullable BigDecimal cashFlowFromInvesting) {
    this.cashFlowFromInvesting = cashFlowFromInvesting;
    return this;
  }

  /**
   * &lt;p&gt;{{Cash_Flow_from_Investing}} covers the cash a company gains or spends from investment activities in financial market and operating subsidiaries. It also includes the cash the company used for {{Net_PPE}}(PPE). If a company spends cash on {{Net_PPE}} (PPE), this will reduce their cash position. This is called {{Cash_Flow_CPEX}} (CPEX). Likewise, if a company buys another company for cash, this will reduce their cash position. &lt;br&gt;{{Cash_Flow_from_Investing}} is calculated as {{Cash_Flow_from_Investing}} &#x3D; {{PurchaseOfPPE}} + {{SaleOfPPE}} + {{PurchaseOfBusiness}} + {{SaleOfBusiness}} + {{PurchaseOfInvestment}} + {{SaleOfInvestment}} + {{NetIntangiblesPurchaseAndSale}} + {{CashFromDiscontinuedInvestingActivities}} + {{CashFromOtherInvestingActivities}}&lt;/p&gt;
   * @return cashFlowFromInvesting
   */
  @javax.annotation.Nullable
  public BigDecimal getCashFlowFromInvesting() {
    return cashFlowFromInvesting;
  }

  public void setCashFlowFromInvesting(@javax.annotation.Nullable BigDecimal cashFlowFromInvesting) {
    this.cashFlowFromInvesting = cashFlowFromInvesting;
  }


  public FundamentalsNREITDIRECTCashflowStatement cashFlowFromOperations(@javax.annotation.Nullable BigDecimal cashFlowFromOperations) {
    this.cashFlowFromOperations = cashFlowFromOperations;
    return this;
  }

  /**
   * &lt;p&gt;{{Cash_Flow_from_Operations}} refers to the cash brought in through a company&#39;s sales. &lt;br&gt;Therefore, {{Cash_Flow_from_Operations}} &#x3D; {{NetIncomeFromContinuingOperations}} + {{CF_DDA}} + {ChangeInWorkingCapital}} + Deferred Tax + {{Cash_Flow_from_Disc_Op}} + {{AssetImpairmentCharge}} + {{StockBasedCompensation}} + {{Cash_Flow_from_Others}}&lt;/p&gt;
   * @return cashFlowFromOperations
   */
  @javax.annotation.Nullable
  public BigDecimal getCashFlowFromOperations() {
    return cashFlowFromOperations;
  }

  public void setCashFlowFromOperations(@javax.annotation.Nullable BigDecimal cashFlowFromOperations) {
    this.cashFlowFromOperations = cashFlowFromOperations;
  }


  public FundamentalsNREITDIRECTCashflowStatement cashFlowFromOthers(@javax.annotation.Nullable BigDecimal cashFlowFromOthers) {
    this.cashFlowFromOthers = cashFlowFromOthers;
    return this;
  }

  /**
   * &lt;p&gt;{{Cash_Flow_from_Others}} may include {{ChangeInWorkingCapital}}. These are cash differences caused by the {{ChangeInInventory}}, {{AccountsPayable}}, {{Accts_Rec}} etc. For instance, if a company pays its suppliers slower, its cash position will build up faster. If a company receives payments from its customers slower, its {{Accts_Rec}} will rise, and its cash position will grow more slowly (or even shrink).&lt;/p&gt;
   * @return cashFlowFromOthers
   */
  @javax.annotation.Nullable
  public BigDecimal getCashFlowFromOthers() {
    return cashFlowFromOthers;
  }

  public void setCashFlowFromOthers(@javax.annotation.Nullable BigDecimal cashFlowFromOthers) {
    this.cashFlowFromOthers = cashFlowFromOthers;
  }


  public FundamentalsNREITDIRECTCashflowStatement cashFromDiscontinuedInvestingActivities(@javax.annotation.Nullable BigDecimal cashFromDiscontinuedInvestingActivities) {
    this.cashFromDiscontinuedInvestingActivities = cashFromDiscontinuedInvestingActivities;
    return this;
  }

  /**
   * &lt;p&gt;{{CashFromDiscontinuedInvestingActivities}} means the cash received by a company that comes from the discontinued investing activities.&lt;/p&gt;
   * @return cashFromDiscontinuedInvestingActivities
   */
  @javax.annotation.Nullable
  public BigDecimal getCashFromDiscontinuedInvestingActivities() {
    return cashFromDiscontinuedInvestingActivities;
  }

  public void setCashFromDiscontinuedInvestingActivities(@javax.annotation.Nullable BigDecimal cashFromDiscontinuedInvestingActivities) {
    this.cashFromDiscontinuedInvestingActivities = cashFromDiscontinuedInvestingActivities;
  }


  public FundamentalsNREITDIRECTCashflowStatement cashFromFinancing(@javax.annotation.Nullable BigDecimal cashFromFinancing) {
    this.cashFromFinancing = cashFromFinancing;
    return this;
  }

  /**
   * &lt;p&gt;{{Cash_from_Financing}} is the cash generated/spent from financial activities such as share issuance (buy back), debt issuance (repayment), and dividends paid to preferred and common stockholders. In the calculation of {{total_freecashflow}}, {{Cash_from_Financing}} is not calculated because it is not related to operating activities. &lt;br&gt;{{Cash_from_Financing}} &#x3D; {{Issuance_of_Stock}} + {{Repurchase_of_Stock}} + {{Net_Issuance_of_Debt}} + {{Net_Issuance_of_preferred}} + {{Dividends}} + Other Financing&lt;/p&gt;
   * @return cashFromFinancing
   */
  @javax.annotation.Nullable
  public BigDecimal getCashFromFinancing() {
    return cashFromFinancing;
  }

  public void setCashFromFinancing(@javax.annotation.Nullable BigDecimal cashFromFinancing) {
    this.cashFromFinancing = cashFromFinancing;
  }


  public FundamentalsNREITDIRECTCashflowStatement cashFromOtherInvestingActivities(@javax.annotation.Nullable BigDecimal cashFromOtherInvestingActivities) {
    this.cashFromOtherInvestingActivities = cashFromOtherInvestingActivities;
    return this;
  }

  /**
   * &lt;p&gt;{{CashFromOtherInvestingActivities}} means the cash received by a company that comes from other investing activities.&lt;/p&gt;
   * @return cashFromOtherInvestingActivities
   */
  @javax.annotation.Nullable
  public BigDecimal getCashFromOtherInvestingActivities() {
    return cashFromOtherInvestingActivities;
  }

  public void setCashFromOtherInvestingActivities(@javax.annotation.Nullable BigDecimal cashFromOtherInvestingActivities) {
    this.cashFromOtherInvestingActivities = cashFromOtherInvestingActivities;
  }


  public FundamentalsNREITDIRECTCashflowStatement cashPayments(@javax.annotation.Nullable BigDecimal cashPayments) {
    this.cashPayments = cashPayments;
    return this;
  }

  /**
   * Get cashPayments
   * @return cashPayments
   */
  @javax.annotation.Nullable
  public BigDecimal getCashPayments() {
    return cashPayments;
  }

  public void setCashPayments(@javax.annotation.Nullable BigDecimal cashPayments) {
    this.cashPayments = cashPayments;
  }


  public FundamentalsNREITDIRECTCashflowStatement cashReceiptsFromOperatingActivities(@javax.annotation.Nullable BigDecimal cashReceiptsFromOperatingActivities) {
    this.cashReceiptsFromOperatingActivities = cashReceiptsFromOperatingActivities;
    return this;
  }

  /**
   * &lt;p&gt;Cash flow from operations refers to the cash brought in through a company&#39;s normal business operations. It is the cash flow before any investment or financing activities. It is the cash version of {{Net_Income}}. &lt;br&gt;{{Cash_Flow_from_Operations}} &#x3D; {{Net_Income}} + {{DDA}} + {{Cash_Flow_from_Disc_Op}} + {{Cash_Flow_from_Others}}&lt;/p&gt;
   * @return cashReceiptsFromOperatingActivities
   */
  @javax.annotation.Nullable
  public BigDecimal getCashReceiptsFromOperatingActivities() {
    return cashReceiptsFromOperatingActivities;
  }

  public void setCashReceiptsFromOperatingActivities(@javax.annotation.Nullable BigDecimal cashReceiptsFromOperatingActivities) {
    this.cashReceiptsFromOperatingActivities = cashReceiptsFromOperatingActivities;
  }


  public FundamentalsNREITDIRECTCashflowStatement debtIssuance(@javax.annotation.Nullable BigDecimal debtIssuance) {
    this.debtIssuance = debtIssuance;
    return this;
  }

  /**
   * Get debtIssuance
   * @return debtIssuance
   */
  @javax.annotation.Nullable
  public BigDecimal getDebtIssuance() {
    return debtIssuance;
  }

  public void setDebtIssuance(@javax.annotation.Nullable BigDecimal debtIssuance) {
    this.debtIssuance = debtIssuance;
  }


  public FundamentalsNREITDIRECTCashflowStatement debtPayments(@javax.annotation.Nullable BigDecimal debtPayments) {
    this.debtPayments = debtPayments;
    return this;
  }

  /**
   * Get debtPayments
   * @return debtPayments
   */
  @javax.annotation.Nullable
  public BigDecimal getDebtPayments() {
    return debtPayments;
  }

  public void setDebtPayments(@javax.annotation.Nullable BigDecimal debtPayments) {
    this.debtPayments = debtPayments;
  }


  public FundamentalsNREITDIRECTCashflowStatement dividends(@javax.annotation.Nullable BigDecimal dividends) {
    this.dividends = dividends;
    return this;
  }

  /**
   * &lt;p&gt;{{Dividends}} refers to the payment of cash to shareholders as dividends when the company generates income.&lt;/p&gt;
   * @return dividends
   */
  @javax.annotation.Nullable
  public BigDecimal getDividends() {
    return dividends;
  }

  public void setDividends(@javax.annotation.Nullable BigDecimal dividends) {
    this.dividends = dividends;
  }


  public FundamentalsNREITDIRECTCashflowStatement dividendsPaidDirect(@javax.annotation.Nullable BigDecimal dividendsPaidDirect) {
    this.dividendsPaidDirect = dividendsPaidDirect;
    return this;
  }

  /**
   * Get dividendsPaidDirect
   * @return dividendsPaidDirect
   */
  @javax.annotation.Nullable
  public BigDecimal getDividendsPaidDirect() {
    return dividendsPaidDirect;
  }

  public void setDividendsPaidDirect(@javax.annotation.Nullable BigDecimal dividendsPaidDirect) {
    this.dividendsPaidDirect = dividendsPaidDirect;
  }


  public FundamentalsNREITDIRECTCashflowStatement dividendsReceivedDirect(@javax.annotation.Nullable BigDecimal dividendsReceivedDirect) {
    this.dividendsReceivedDirect = dividendsReceivedDirect;
    return this;
  }

  /**
   * Get dividendsReceivedDirect
   * @return dividendsReceivedDirect
   */
  @javax.annotation.Nullable
  public BigDecimal getDividendsReceivedDirect() {
    return dividendsReceivedDirect;
  }

  public void setDividendsReceivedDirect(@javax.annotation.Nullable BigDecimal dividendsReceivedDirect) {
    this.dividendsReceivedDirect = dividendsReceivedDirect;
  }


  public FundamentalsNREITDIRECTCashflowStatement effectOfExchangeRateChanges(@javax.annotation.Nullable BigDecimal effectOfExchangeRateChanges) {
    this.effectOfExchangeRateChanges = effectOfExchangeRateChanges;
    return this;
  }

  /**
   * Get effectOfExchangeRateChanges
   * @return effectOfExchangeRateChanges
   */
  @javax.annotation.Nullable
  public BigDecimal getEffectOfExchangeRateChanges() {
    return effectOfExchangeRateChanges;
  }

  public void setEffectOfExchangeRateChanges(@javax.annotation.Nullable BigDecimal effectOfExchangeRateChanges) {
    this.effectOfExchangeRateChanges = effectOfExchangeRateChanges;
  }


  public FundamentalsNREITDIRECTCashflowStatement endingCashPosition(@javax.annotation.Nullable BigDecimal endingCashPosition) {
    this.endingCashPosition = endingCashPosition;
    return this;
  }

  /**
   * Get endingCashPosition
   * @return endingCashPosition
   */
  @javax.annotation.Nullable
  public BigDecimal getEndingCashPosition() {
    return endingCashPosition;
  }

  public void setEndingCashPosition(@javax.annotation.Nullable BigDecimal endingCashPosition) {
    this.endingCashPosition = endingCashPosition;
  }


  public FundamentalsNREITDIRECTCashflowStatement ffo(@javax.annotation.Nullable BigDecimal ffo) {
    this.ffo = ffo;
    return this;
  }

  /**
   * &lt;p&gt;{{FFO}} (Funds from operations) refers to the figure used by real estate investment trusts (REITs) to define the cash flow from their operations. It is calculated by adding depreciation and amortization to earnings, subtracting any gains on sales.&lt;/p&gt;
   * @return ffo
   */
  @javax.annotation.Nullable
  public BigDecimal getFfo() {
    return ffo;
  }

  public void setFfo(@javax.annotation.Nullable BigDecimal ffo) {
    this.ffo = ffo;
  }


  public FundamentalsNREITDIRECTCashflowStatement interestPaidDirect(@javax.annotation.Nullable BigDecimal interestPaidDirect) {
    this.interestPaidDirect = interestPaidDirect;
    return this;
  }

  /**
   * Get interestPaidDirect
   * @return interestPaidDirect
   */
  @javax.annotation.Nullable
  public BigDecimal getInterestPaidDirect() {
    return interestPaidDirect;
  }

  public void setInterestPaidDirect(@javax.annotation.Nullable BigDecimal interestPaidDirect) {
    this.interestPaidDirect = interestPaidDirect;
  }


  public FundamentalsNREITDIRECTCashflowStatement interestReceivedDirect(@javax.annotation.Nullable BigDecimal interestReceivedDirect) {
    this.interestReceivedDirect = interestReceivedDirect;
    return this;
  }

  /**
   * Get interestReceivedDirect
   * @return interestReceivedDirect
   */
  @javax.annotation.Nullable
  public BigDecimal getInterestReceivedDirect() {
    return interestReceivedDirect;
  }

  public void setInterestReceivedDirect(@javax.annotation.Nullable BigDecimal interestReceivedDirect) {
    this.interestReceivedDirect = interestReceivedDirect;
  }


  public FundamentalsNREITDIRECTCashflowStatement issuanceOfStock(@javax.annotation.Nullable BigDecimal issuanceOfStock) {
    this.issuanceOfStock = issuanceOfStock;
    return this;
  }

  /**
   * &lt;p&gt;A company may raise cash from issuing new shares. It can also use cash to buy back shares. If this number is positive, it means that the company has received more cash from issuing shares than it has paid to buy back shares. If this number is negative, it means that company has paid more cash to buy back shares than it has received for issuing shares.&lt;/p&gt;
   * @return issuanceOfStock
   */
  @javax.annotation.Nullable
  public BigDecimal getIssuanceOfStock() {
    return issuanceOfStock;
  }

  public void setIssuanceOfStock(@javax.annotation.Nullable BigDecimal issuanceOfStock) {
    this.issuanceOfStock = issuanceOfStock;
  }


  public FundamentalsNREITDIRECTCashflowStatement netChangeInCash(@javax.annotation.Nullable BigDecimal netChangeInCash) {
    this.netChangeInCash = netChangeInCash;
    return this;
  }

  /**
   * &lt;p&gt;{{Net_Change_in_Cash}} is calculated as {{Net_Change_in_Cash}} &#x3D; {{Cash_Flow_from_Operations}} + {{Cash_Flow_from_Investing}} + {{Cash_from_Financing}} + {{effect_of_exchange_rate_changes}}&lt;/p&gt;
   * @return netChangeInCash
   */
  @javax.annotation.Nullable
  public BigDecimal getNetChangeInCash() {
    return netChangeInCash;
  }

  public void setNetChangeInCash(@javax.annotation.Nullable BigDecimal netChangeInCash) {
    this.netChangeInCash = netChangeInCash;
  }


  public FundamentalsNREITDIRECTCashflowStatement netIntangiblesPurchaseAndSale(@javax.annotation.Nullable BigDecimal netIntangiblesPurchaseAndSale) {
    this.netIntangiblesPurchaseAndSale = netIntangiblesPurchaseAndSale;
    return this;
  }

  /**
   * &lt;p&gt;{{NetIntangiblesPurchaseAndSale}} means the net cash inflow received by a company that comes from the purchase and sale of intangibles. It equals the cash received from sale of intangibles minus the cash spent on purchasing intangibles.&lt;/p&gt;
   * @return netIntangiblesPurchaseAndSale
   */
  @javax.annotation.Nullable
  public BigDecimal getNetIntangiblesPurchaseAndSale() {
    return netIntangiblesPurchaseAndSale;
  }

  public void setNetIntangiblesPurchaseAndSale(@javax.annotation.Nullable BigDecimal netIntangiblesPurchaseAndSale) {
    this.netIntangiblesPurchaseAndSale = netIntangiblesPurchaseAndSale;
  }


  public FundamentalsNREITDIRECTCashflowStatement netIssuanceOfDebt(@javax.annotation.Nullable BigDecimal netIssuanceOfDebt) {
    this.netIssuanceOfDebt = netIssuanceOfDebt;
    return this;
  }

  /**
   * &lt;p&gt;{{Net_Issuance_of_Debt}} is the cash a company received or spent through debt related activities such as debt issuance or debt repayment. If a company pays down its debt during the period, this number will be negative. If a company issued more debt, it receives cash and this number is positive.&lt;/p&gt;
   * @return netIssuanceOfDebt
   */
  @javax.annotation.Nullable
  public BigDecimal getNetIssuanceOfDebt() {
    return netIssuanceOfDebt;
  }

  public void setNetIssuanceOfDebt(@javax.annotation.Nullable BigDecimal netIssuanceOfDebt) {
    this.netIssuanceOfDebt = netIssuanceOfDebt;
  }


  public FundamentalsNREITDIRECTCashflowStatement netIssuanceOfPreferred(@javax.annotation.Nullable BigDecimal netIssuanceOfPreferred) {
    this.netIssuanceOfPreferred = netIssuanceOfPreferred;
    return this;
  }

  /**
   * &lt;p&gt;A company may raise cash from issuing new preferred shares. It can also use cash to buy back preferred shares. If this number is positive, it means that the company has received more cash from issuing preferred shares than it has paid to buy back preferred shares. If this number is negative, it means that company has paid more cash to buy back preferred shares than it has received for issuing preferred shares.&lt;/p&gt;
   * @return netIssuanceOfPreferred
   */
  @javax.annotation.Nullable
  public BigDecimal getNetIssuanceOfPreferred() {
    return netIssuanceOfPreferred;
  }

  public void setNetIssuanceOfPreferred(@javax.annotation.Nullable BigDecimal netIssuanceOfPreferred) {
    this.netIssuanceOfPreferred = netIssuanceOfPreferred;
  }


  public FundamentalsNREITDIRECTCashflowStatement otherCashPaymentsFromOperatingActivities(@javax.annotation.Nullable BigDecimal otherCashPaymentsFromOperatingActivities) {
    this.otherCashPaymentsFromOperatingActivities = otherCashPaymentsFromOperatingActivities;
    return this;
  }

  /**
   * Get otherCashPaymentsFromOperatingActivities
   * @return otherCashPaymentsFromOperatingActivities
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherCashPaymentsFromOperatingActivities() {
    return otherCashPaymentsFromOperatingActivities;
  }

  public void setOtherCashPaymentsFromOperatingActivities(@javax.annotation.Nullable BigDecimal otherCashPaymentsFromOperatingActivities) {
    this.otherCashPaymentsFromOperatingActivities = otherCashPaymentsFromOperatingActivities;
  }


  public FundamentalsNREITDIRECTCashflowStatement otherCashReceiptsFromOperatingActivities(@javax.annotation.Nullable BigDecimal otherCashReceiptsFromOperatingActivities) {
    this.otherCashReceiptsFromOperatingActivities = otherCashReceiptsFromOperatingActivities;
    return this;
  }

  /**
   * &lt;p&gt;{{CashFromOtherInvestingActivities}} means the cash received by a company that comes from other investing activities.&lt;/p&gt;
   * @return otherCashReceiptsFromOperatingActivities
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherCashReceiptsFromOperatingActivities() {
    return otherCashReceiptsFromOperatingActivities;
  }

  public void setOtherCashReceiptsFromOperatingActivities(@javax.annotation.Nullable BigDecimal otherCashReceiptsFromOperatingActivities) {
    this.otherCashReceiptsFromOperatingActivities = otherCashReceiptsFromOperatingActivities;
  }


  public FundamentalsNREITDIRECTCashflowStatement otherFinancing(@javax.annotation.Nullable BigDecimal otherFinancing) {
    this.otherFinancing = otherFinancing;
    return this;
  }

  /**
   * &lt;p&gt;{{Other_Financing}} represents other {{Cash_from_Financing}} activity that not otherwise classified, which includes: Proceeds From Stock Option Exercised, Other Financing Charges.&lt;/p&gt;
   * @return otherFinancing
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherFinancing() {
    return otherFinancing;
  }

  public void setOtherFinancing(@javax.annotation.Nullable BigDecimal otherFinancing) {
    this.otherFinancing = otherFinancing;
  }


  public FundamentalsNREITDIRECTCashflowStatement paymentsOnBehalfOfEmployees(@javax.annotation.Nullable BigDecimal paymentsOnBehalfOfEmployees) {
    this.paymentsOnBehalfOfEmployees = paymentsOnBehalfOfEmployees;
    return this;
  }

  /**
   * Get paymentsOnBehalfOfEmployees
   * @return paymentsOnBehalfOfEmployees
   */
  @javax.annotation.Nullable
  public BigDecimal getPaymentsOnBehalfOfEmployees() {
    return paymentsOnBehalfOfEmployees;
  }

  public void setPaymentsOnBehalfOfEmployees(@javax.annotation.Nullable BigDecimal paymentsOnBehalfOfEmployees) {
    this.paymentsOnBehalfOfEmployees = paymentsOnBehalfOfEmployees;
  }


  public FundamentalsNREITDIRECTCashflowStatement paymentsToSuppliersForGoodsAndServices(@javax.annotation.Nullable BigDecimal paymentsToSuppliersForGoodsAndServices) {
    this.paymentsToSuppliersForGoodsAndServices = paymentsToSuppliersForGoodsAndServices;
    return this;
  }

  /**
   * Cash flow statement direct method: the total cash payments to suppliers
   * @return paymentsToSuppliersForGoodsAndServices
   */
  @javax.annotation.Nullable
  public BigDecimal getPaymentsToSuppliersForGoodsAndServices() {
    return paymentsToSuppliersForGoodsAndServices;
  }

  public void setPaymentsToSuppliersForGoodsAndServices(@javax.annotation.Nullable BigDecimal paymentsToSuppliersForGoodsAndServices) {
    this.paymentsToSuppliersForGoodsAndServices = paymentsToSuppliersForGoodsAndServices;
  }


  public FundamentalsNREITDIRECTCashflowStatement purchaseOfBusiness(@javax.annotation.Nullable BigDecimal purchaseOfBusiness) {
    this.purchaseOfBusiness = purchaseOfBusiness;
    return this;
  }

  /**
   * &lt;p&gt;{{PurchaseOfBusiness}} is the amount used to purchase business.&lt;/p&gt;
   * @return purchaseOfBusiness
   */
  @javax.annotation.Nullable
  public BigDecimal getPurchaseOfBusiness() {
    return purchaseOfBusiness;
  }

  public void setPurchaseOfBusiness(@javax.annotation.Nullable BigDecimal purchaseOfBusiness) {
    this.purchaseOfBusiness = purchaseOfBusiness;
  }


  public FundamentalsNREITDIRECTCashflowStatement purchaseOfInvestment(@javax.annotation.Nullable BigDecimal purchaseOfInvestment) {
    this.purchaseOfInvestment = purchaseOfInvestment;
    return this;
  }

  /**
   * &lt;p&gt;{{PurchaseOfInvestment}} represents cash outflow on the purchase of investments in securities.&lt;/p&gt;
   * @return purchaseOfInvestment
   */
  @javax.annotation.Nullable
  public BigDecimal getPurchaseOfInvestment() {
    return purchaseOfInvestment;
  }

  public void setPurchaseOfInvestment(@javax.annotation.Nullable BigDecimal purchaseOfInvestment) {
    this.purchaseOfInvestment = purchaseOfInvestment;
  }


  public FundamentalsNREITDIRECTCashflowStatement purchaseOfPpe(@javax.annotation.Nullable BigDecimal purchaseOfPpe) {
    this.purchaseOfPpe = purchaseOfPpe;
    return this;
  }

  /**
   * &lt;p&gt;{{PurchaseOfPPE}} is the amount used to purchase Property, Plant and Equipment.&lt;/p&gt;
   * @return purchaseOfPpe
   */
  @javax.annotation.Nullable
  public BigDecimal getPurchaseOfPpe() {
    return purchaseOfPpe;
  }

  public void setPurchaseOfPpe(@javax.annotation.Nullable BigDecimal purchaseOfPpe) {
    this.purchaseOfPpe = purchaseOfPpe;
  }


  public FundamentalsNREITDIRECTCashflowStatement receiptsFromCustomers(@javax.annotation.Nullable BigDecimal receiptsFromCustomers) {
    this.receiptsFromCustomers = receiptsFromCustomers;
    return this;
  }

  /**
   * Cash flow statement direct method: cash collections from customers
   * @return receiptsFromCustomers
   */
  @javax.annotation.Nullable
  public BigDecimal getReceiptsFromCustomers() {
    return receiptsFromCustomers;
  }

  public void setReceiptsFromCustomers(@javax.annotation.Nullable BigDecimal receiptsFromCustomers) {
    this.receiptsFromCustomers = receiptsFromCustomers;
  }


  public FundamentalsNREITDIRECTCashflowStatement receiptsFromGovernmentGrants(@javax.annotation.Nullable BigDecimal receiptsFromGovernmentGrants) {
    this.receiptsFromGovernmentGrants = receiptsFromGovernmentGrants;
    return this;
  }

  /**
   * Get receiptsFromGovernmentGrants
   * @return receiptsFromGovernmentGrants
   */
  @javax.annotation.Nullable
  public BigDecimal getReceiptsFromGovernmentGrants() {
    return receiptsFromGovernmentGrants;
  }

  public void setReceiptsFromGovernmentGrants(@javax.annotation.Nullable BigDecimal receiptsFromGovernmentGrants) {
    this.receiptsFromGovernmentGrants = receiptsFromGovernmentGrants;
  }


  public FundamentalsNREITDIRECTCashflowStatement repurchaseOfStock(@javax.annotation.Nullable BigDecimal repurchaseOfStock) {
    this.repurchaseOfStock = repurchaseOfStock;
    return this;
  }

  /**
   * &lt;p&gt;A company may raise cash from issuing new shares. It can also use cash to buy back shares. {{Repurchase_of_Stock}} represents the cash outflow to reacquire common stock during the period.&lt;/p&gt;
   * @return repurchaseOfStock
   */
  @javax.annotation.Nullable
  public BigDecimal getRepurchaseOfStock() {
    return repurchaseOfStock;
  }

  public void setRepurchaseOfStock(@javax.annotation.Nullable BigDecimal repurchaseOfStock) {
    this.repurchaseOfStock = repurchaseOfStock;
  }


  public FundamentalsNREITDIRECTCashflowStatement saleOfBusiness(@javax.annotation.Nullable BigDecimal saleOfBusiness) {
    this.saleOfBusiness = saleOfBusiness;
    return this;
  }

  /**
   * &lt;p&gt;{{SaleOfBusiness}} is the amount earned to sell business.&lt;/p&gt;
   * @return saleOfBusiness
   */
  @javax.annotation.Nullable
  public BigDecimal getSaleOfBusiness() {
    return saleOfBusiness;
  }

  public void setSaleOfBusiness(@javax.annotation.Nullable BigDecimal saleOfBusiness) {
    this.saleOfBusiness = saleOfBusiness;
  }


  public FundamentalsNREITDIRECTCashflowStatement saleOfInvestment(@javax.annotation.Nullable BigDecimal saleOfInvestment) {
    this.saleOfInvestment = saleOfInvestment;
    return this;
  }

  /**
   * &lt;p&gt;{{SaleOfInvestment}} represents cash inflow on the sale of investments in securities.&lt;/p&gt;
   * @return saleOfInvestment
   */
  @javax.annotation.Nullable
  public BigDecimal getSaleOfInvestment() {
    return saleOfInvestment;
  }

  public void setSaleOfInvestment(@javax.annotation.Nullable BigDecimal saleOfInvestment) {
    this.saleOfInvestment = saleOfInvestment;
  }


  public FundamentalsNREITDIRECTCashflowStatement saleOfPpe(@javax.annotation.Nullable BigDecimal saleOfPpe) {
    this.saleOfPpe = saleOfPpe;
    return this;
  }

  /**
   * &lt;p&gt;{{SaleOfPPE}} is the amount earned to sell {{Net_PPE}}. &lt;/p&gt;
   * @return saleOfPpe
   */
  @javax.annotation.Nullable
  public BigDecimal getSaleOfPpe() {
    return saleOfPpe;
  }

  public void setSaleOfPpe(@javax.annotation.Nullable BigDecimal saleOfPpe) {
    this.saleOfPpe = saleOfPpe;
  }


  public FundamentalsNREITDIRECTCashflowStatement taxesRefundPaidDirect(@javax.annotation.Nullable BigDecimal taxesRefundPaidDirect) {
    this.taxesRefundPaidDirect = taxesRefundPaidDirect;
    return this;
  }

  /**
   * Get taxesRefundPaidDirect
   * @return taxesRefundPaidDirect
   */
  @javax.annotation.Nullable
  public BigDecimal getTaxesRefundPaidDirect() {
    return taxesRefundPaidDirect;
  }

  public void setTaxesRefundPaidDirect(@javax.annotation.Nullable BigDecimal taxesRefundPaidDirect) {
    this.taxesRefundPaidDirect = taxesRefundPaidDirect;
  }


  public FundamentalsNREITDIRECTCashflowStatement totalFreeCashFlow(@javax.annotation.Nullable BigDecimal totalFreeCashFlow) {
    this.totalFreeCashFlow = totalFreeCashFlow;
    return this;
  }

  /**
   * &lt;p&gt;{{total_freecashflow}} is considered one of the most important parameters to measure a company&#39;s earnings power by value investors because it is not subject to estimates of {{DDA}} (DDA). However, when we look at the {{total_freecashflow}}, we should look from a long term perspective, because any year&#39;s {{total_freecashflow}} can be drastically affected by the spending on {{Net_PPE}} (PPE) of the business in that year. Over the long term, {{total_freecashflow}} should give pretty good picture on the real earnings power of the company. &lt;br&gt;{{total_freecashflow}} is calculated as {{total_freecashflow}} &#x3D; {{cash_Flow_from_Operations}} + {{Cash_Flow_CPEX}}&lt;/p&gt;
   * @return totalFreeCashFlow
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalFreeCashFlow() {
    return totalFreeCashFlow;
  }

  public void setTotalFreeCashFlow(@javax.annotation.Nullable BigDecimal totalFreeCashFlow) {
    this.totalFreeCashFlow = totalFreeCashFlow;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FundamentalsNREITDIRECTCashflowStatement fundamentalsNREITDIRECTCashflowStatement = (FundamentalsNREITDIRECTCashflowStatement) o;
    return Objects.equals(this.beginningCashPosition, fundamentalsNREITDIRECTCashflowStatement.beginningCashPosition) &&
        Objects.equals(this.cashFlowCapitalExpenditure, fundamentalsNREITDIRECTCashflowStatement.cashFlowCapitalExpenditure) &&
        Objects.equals(this.cashFlowForLeaseFinancing, fundamentalsNREITDIRECTCashflowStatement.cashFlowForLeaseFinancing) &&
        Objects.equals(this.cashFlowFromInvesting, fundamentalsNREITDIRECTCashflowStatement.cashFlowFromInvesting) &&
        Objects.equals(this.cashFlowFromOperations, fundamentalsNREITDIRECTCashflowStatement.cashFlowFromOperations) &&
        Objects.equals(this.cashFlowFromOthers, fundamentalsNREITDIRECTCashflowStatement.cashFlowFromOthers) &&
        Objects.equals(this.cashFromDiscontinuedInvestingActivities, fundamentalsNREITDIRECTCashflowStatement.cashFromDiscontinuedInvestingActivities) &&
        Objects.equals(this.cashFromFinancing, fundamentalsNREITDIRECTCashflowStatement.cashFromFinancing) &&
        Objects.equals(this.cashFromOtherInvestingActivities, fundamentalsNREITDIRECTCashflowStatement.cashFromOtherInvestingActivities) &&
        Objects.equals(this.cashPayments, fundamentalsNREITDIRECTCashflowStatement.cashPayments) &&
        Objects.equals(this.cashReceiptsFromOperatingActivities, fundamentalsNREITDIRECTCashflowStatement.cashReceiptsFromOperatingActivities) &&
        Objects.equals(this.debtIssuance, fundamentalsNREITDIRECTCashflowStatement.debtIssuance) &&
        Objects.equals(this.debtPayments, fundamentalsNREITDIRECTCashflowStatement.debtPayments) &&
        Objects.equals(this.dividends, fundamentalsNREITDIRECTCashflowStatement.dividends) &&
        Objects.equals(this.dividendsPaidDirect, fundamentalsNREITDIRECTCashflowStatement.dividendsPaidDirect) &&
        Objects.equals(this.dividendsReceivedDirect, fundamentalsNREITDIRECTCashflowStatement.dividendsReceivedDirect) &&
        Objects.equals(this.effectOfExchangeRateChanges, fundamentalsNREITDIRECTCashflowStatement.effectOfExchangeRateChanges) &&
        Objects.equals(this.endingCashPosition, fundamentalsNREITDIRECTCashflowStatement.endingCashPosition) &&
        Objects.equals(this.ffo, fundamentalsNREITDIRECTCashflowStatement.ffo) &&
        Objects.equals(this.interestPaidDirect, fundamentalsNREITDIRECTCashflowStatement.interestPaidDirect) &&
        Objects.equals(this.interestReceivedDirect, fundamentalsNREITDIRECTCashflowStatement.interestReceivedDirect) &&
        Objects.equals(this.issuanceOfStock, fundamentalsNREITDIRECTCashflowStatement.issuanceOfStock) &&
        Objects.equals(this.netChangeInCash, fundamentalsNREITDIRECTCashflowStatement.netChangeInCash) &&
        Objects.equals(this.netIntangiblesPurchaseAndSale, fundamentalsNREITDIRECTCashflowStatement.netIntangiblesPurchaseAndSale) &&
        Objects.equals(this.netIssuanceOfDebt, fundamentalsNREITDIRECTCashflowStatement.netIssuanceOfDebt) &&
        Objects.equals(this.netIssuanceOfPreferred, fundamentalsNREITDIRECTCashflowStatement.netIssuanceOfPreferred) &&
        Objects.equals(this.otherCashPaymentsFromOperatingActivities, fundamentalsNREITDIRECTCashflowStatement.otherCashPaymentsFromOperatingActivities) &&
        Objects.equals(this.otherCashReceiptsFromOperatingActivities, fundamentalsNREITDIRECTCashflowStatement.otherCashReceiptsFromOperatingActivities) &&
        Objects.equals(this.otherFinancing, fundamentalsNREITDIRECTCashflowStatement.otherFinancing) &&
        Objects.equals(this.paymentsOnBehalfOfEmployees, fundamentalsNREITDIRECTCashflowStatement.paymentsOnBehalfOfEmployees) &&
        Objects.equals(this.paymentsToSuppliersForGoodsAndServices, fundamentalsNREITDIRECTCashflowStatement.paymentsToSuppliersForGoodsAndServices) &&
        Objects.equals(this.purchaseOfBusiness, fundamentalsNREITDIRECTCashflowStatement.purchaseOfBusiness) &&
        Objects.equals(this.purchaseOfInvestment, fundamentalsNREITDIRECTCashflowStatement.purchaseOfInvestment) &&
        Objects.equals(this.purchaseOfPpe, fundamentalsNREITDIRECTCashflowStatement.purchaseOfPpe) &&
        Objects.equals(this.receiptsFromCustomers, fundamentalsNREITDIRECTCashflowStatement.receiptsFromCustomers) &&
        Objects.equals(this.receiptsFromGovernmentGrants, fundamentalsNREITDIRECTCashflowStatement.receiptsFromGovernmentGrants) &&
        Objects.equals(this.repurchaseOfStock, fundamentalsNREITDIRECTCashflowStatement.repurchaseOfStock) &&
        Objects.equals(this.saleOfBusiness, fundamentalsNREITDIRECTCashflowStatement.saleOfBusiness) &&
        Objects.equals(this.saleOfInvestment, fundamentalsNREITDIRECTCashflowStatement.saleOfInvestment) &&
        Objects.equals(this.saleOfPpe, fundamentalsNREITDIRECTCashflowStatement.saleOfPpe) &&
        Objects.equals(this.taxesRefundPaidDirect, fundamentalsNREITDIRECTCashflowStatement.taxesRefundPaidDirect) &&
        Objects.equals(this.totalFreeCashFlow, fundamentalsNREITDIRECTCashflowStatement.totalFreeCashFlow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(beginningCashPosition, cashFlowCapitalExpenditure, cashFlowForLeaseFinancing, cashFlowFromInvesting, cashFlowFromOperations, cashFlowFromOthers, cashFromDiscontinuedInvestingActivities, cashFromFinancing, cashFromOtherInvestingActivities, cashPayments, cashReceiptsFromOperatingActivities, debtIssuance, debtPayments, dividends, dividendsPaidDirect, dividendsReceivedDirect, effectOfExchangeRateChanges, endingCashPosition, ffo, interestPaidDirect, interestReceivedDirect, issuanceOfStock, netChangeInCash, netIntangiblesPurchaseAndSale, netIssuanceOfDebt, netIssuanceOfPreferred, otherCashPaymentsFromOperatingActivities, otherCashReceiptsFromOperatingActivities, otherFinancing, paymentsOnBehalfOfEmployees, paymentsToSuppliersForGoodsAndServices, purchaseOfBusiness, purchaseOfInvestment, purchaseOfPpe, receiptsFromCustomers, receiptsFromGovernmentGrants, repurchaseOfStock, saleOfBusiness, saleOfInvestment, saleOfPpe, taxesRefundPaidDirect, totalFreeCashFlow);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FundamentalsNREITDIRECTCashflowStatement {\n");
    sb.append("    beginningCashPosition: ").append(toIndentedString(beginningCashPosition)).append("\n");
    sb.append("    cashFlowCapitalExpenditure: ").append(toIndentedString(cashFlowCapitalExpenditure)).append("\n");
    sb.append("    cashFlowForLeaseFinancing: ").append(toIndentedString(cashFlowForLeaseFinancing)).append("\n");
    sb.append("    cashFlowFromInvesting: ").append(toIndentedString(cashFlowFromInvesting)).append("\n");
    sb.append("    cashFlowFromOperations: ").append(toIndentedString(cashFlowFromOperations)).append("\n");
    sb.append("    cashFlowFromOthers: ").append(toIndentedString(cashFlowFromOthers)).append("\n");
    sb.append("    cashFromDiscontinuedInvestingActivities: ").append(toIndentedString(cashFromDiscontinuedInvestingActivities)).append("\n");
    sb.append("    cashFromFinancing: ").append(toIndentedString(cashFromFinancing)).append("\n");
    sb.append("    cashFromOtherInvestingActivities: ").append(toIndentedString(cashFromOtherInvestingActivities)).append("\n");
    sb.append("    cashPayments: ").append(toIndentedString(cashPayments)).append("\n");
    sb.append("    cashReceiptsFromOperatingActivities: ").append(toIndentedString(cashReceiptsFromOperatingActivities)).append("\n");
    sb.append("    debtIssuance: ").append(toIndentedString(debtIssuance)).append("\n");
    sb.append("    debtPayments: ").append(toIndentedString(debtPayments)).append("\n");
    sb.append("    dividends: ").append(toIndentedString(dividends)).append("\n");
    sb.append("    dividendsPaidDirect: ").append(toIndentedString(dividendsPaidDirect)).append("\n");
    sb.append("    dividendsReceivedDirect: ").append(toIndentedString(dividendsReceivedDirect)).append("\n");
    sb.append("    effectOfExchangeRateChanges: ").append(toIndentedString(effectOfExchangeRateChanges)).append("\n");
    sb.append("    endingCashPosition: ").append(toIndentedString(endingCashPosition)).append("\n");
    sb.append("    ffo: ").append(toIndentedString(ffo)).append("\n");
    sb.append("    interestPaidDirect: ").append(toIndentedString(interestPaidDirect)).append("\n");
    sb.append("    interestReceivedDirect: ").append(toIndentedString(interestReceivedDirect)).append("\n");
    sb.append("    issuanceOfStock: ").append(toIndentedString(issuanceOfStock)).append("\n");
    sb.append("    netChangeInCash: ").append(toIndentedString(netChangeInCash)).append("\n");
    sb.append("    netIntangiblesPurchaseAndSale: ").append(toIndentedString(netIntangiblesPurchaseAndSale)).append("\n");
    sb.append("    netIssuanceOfDebt: ").append(toIndentedString(netIssuanceOfDebt)).append("\n");
    sb.append("    netIssuanceOfPreferred: ").append(toIndentedString(netIssuanceOfPreferred)).append("\n");
    sb.append("    otherCashPaymentsFromOperatingActivities: ").append(toIndentedString(otherCashPaymentsFromOperatingActivities)).append("\n");
    sb.append("    otherCashReceiptsFromOperatingActivities: ").append(toIndentedString(otherCashReceiptsFromOperatingActivities)).append("\n");
    sb.append("    otherFinancing: ").append(toIndentedString(otherFinancing)).append("\n");
    sb.append("    paymentsOnBehalfOfEmployees: ").append(toIndentedString(paymentsOnBehalfOfEmployees)).append("\n");
    sb.append("    paymentsToSuppliersForGoodsAndServices: ").append(toIndentedString(paymentsToSuppliersForGoodsAndServices)).append("\n");
    sb.append("    purchaseOfBusiness: ").append(toIndentedString(purchaseOfBusiness)).append("\n");
    sb.append("    purchaseOfInvestment: ").append(toIndentedString(purchaseOfInvestment)).append("\n");
    sb.append("    purchaseOfPpe: ").append(toIndentedString(purchaseOfPpe)).append("\n");
    sb.append("    receiptsFromCustomers: ").append(toIndentedString(receiptsFromCustomers)).append("\n");
    sb.append("    receiptsFromGovernmentGrants: ").append(toIndentedString(receiptsFromGovernmentGrants)).append("\n");
    sb.append("    repurchaseOfStock: ").append(toIndentedString(repurchaseOfStock)).append("\n");
    sb.append("    saleOfBusiness: ").append(toIndentedString(saleOfBusiness)).append("\n");
    sb.append("    saleOfInvestment: ").append(toIndentedString(saleOfInvestment)).append("\n");
    sb.append("    saleOfPpe: ").append(toIndentedString(saleOfPpe)).append("\n");
    sb.append("    taxesRefundPaidDirect: ").append(toIndentedString(taxesRefundPaidDirect)).append("\n");
    sb.append("    totalFreeCashFlow: ").append(toIndentedString(totalFreeCashFlow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("beginning_cash_position");
    openapiFields.add("cash_flow_capital_expenditure");
    openapiFields.add("cash_flow_for_lease_financing");
    openapiFields.add("cash_flow_from_investing");
    openapiFields.add("cash_flow_from_operations");
    openapiFields.add("cash_flow_from_others");
    openapiFields.add("cash_from_discontinued_investing_activities");
    openapiFields.add("cash_from_financing");
    openapiFields.add("cash_from_other_investing_activities");
    openapiFields.add("cash_payments");
    openapiFields.add("cash_receipts_from_operating_activities");
    openapiFields.add("debt_issuance");
    openapiFields.add("debt_payments");
    openapiFields.add("dividends");
    openapiFields.add("dividends_paid_direct");
    openapiFields.add("dividends_received_direct");
    openapiFields.add("effect_of_exchange_rate_changes");
    openapiFields.add("ending_cash_position");
    openapiFields.add("ffo");
    openapiFields.add("interest_paid_direct");
    openapiFields.add("interest_received_direct");
    openapiFields.add("issuance_of_stock");
    openapiFields.add("net_change_in_cash");
    openapiFields.add("net_intangibles_purchase_and_sale");
    openapiFields.add("net_issuance_of_debt");
    openapiFields.add("net_issuance_of_preferred");
    openapiFields.add("other_cash_payments_from_operating_activities");
    openapiFields.add("other_cash_receipts_from_operating_activities");
    openapiFields.add("other_financing");
    openapiFields.add("payments_on_behalf_of_employees");
    openapiFields.add("payments_to_suppliers_for_goods_and_services");
    openapiFields.add("purchase_of_business");
    openapiFields.add("purchase_of_investment");
    openapiFields.add("purchase_of_ppe");
    openapiFields.add("receipts_from_customers");
    openapiFields.add("receipts_from_government_grants");
    openapiFields.add("repurchase_of_stock");
    openapiFields.add("sale_of_business");
    openapiFields.add("sale_of_investment");
    openapiFields.add("sale_of_ppe");
    openapiFields.add("taxes_refund_paid_direct");
    openapiFields.add("total_free_cash_flow");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FundamentalsNREITDIRECTCashflowStatement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FundamentalsNREITDIRECTCashflowStatement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FundamentalsNREITDIRECTCashflowStatement is not found in the empty JSON string", FundamentalsNREITDIRECTCashflowStatement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FundamentalsNREITDIRECTCashflowStatement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FundamentalsNREITDIRECTCashflowStatement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FundamentalsNREITDIRECTCashflowStatement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FundamentalsNREITDIRECTCashflowStatement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FundamentalsNREITDIRECTCashflowStatement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FundamentalsNREITDIRECTCashflowStatement.class));

       return (TypeAdapter<T>) new TypeAdapter<FundamentalsNREITDIRECTCashflowStatement>() {
           @Override
           public void write(JsonWriter out, FundamentalsNREITDIRECTCashflowStatement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FundamentalsNREITDIRECTCashflowStatement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FundamentalsNREITDIRECTCashflowStatement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FundamentalsNREITDIRECTCashflowStatement
   * @throws IOException if the JSON string is invalid with respect to FundamentalsNREITDIRECTCashflowStatement
   */
  public static FundamentalsNREITDIRECTCashflowStatement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FundamentalsNREITDIRECTCashflowStatement.class);
  }

  /**
   * Convert an instance of FundamentalsNREITDIRECTCashflowStatement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

