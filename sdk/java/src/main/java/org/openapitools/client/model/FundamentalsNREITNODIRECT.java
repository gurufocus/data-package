/*
 * Gurufocus Data Package API
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FundamentalsNREITNODIRECTBalanceSheet;
import org.openapitools.client.model.FundamentalsNREITNODIRECTBasicInformation;
import org.openapitools.client.model.FundamentalsNREITNODIRECTCashflowStatement;
import org.openapitools.client.model.FundamentalsNREITNODIRECTIncomeStatement;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FundamentalsNREITNODIRECT
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-11T01:10:00.357398434Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class FundamentalsNREITNODIRECT {
  public static final String SERIALIZED_NAME_BALANCE_SHEET = "balance_sheet";
  @SerializedName(SERIALIZED_NAME_BALANCE_SHEET)
  @javax.annotation.Nullable
  private FundamentalsNREITNODIRECTBalanceSheet balanceSheet;

  public static final String SERIALIZED_NAME_BASIC_INFORMATION = "basic_information";
  @SerializedName(SERIALIZED_NAME_BASIC_INFORMATION)
  @javax.annotation.Nullable
  private FundamentalsNREITNODIRECTBasicInformation basicInformation;

  public static final String SERIALIZED_NAME_CASHFLOW_STATEMENT = "cashflow_statement";
  @SerializedName(SERIALIZED_NAME_CASHFLOW_STATEMENT)
  @javax.annotation.Nullable
  private FundamentalsNREITNODIRECTCashflowStatement cashflowStatement;

  public static final String SERIALIZED_NAME_INCOME_STATEMENT = "income_statement";
  @SerializedName(SERIALIZED_NAME_INCOME_STATEMENT)
  @javax.annotation.Nullable
  private FundamentalsNREITNODIRECTIncomeStatement incomeStatement;

  public FundamentalsNREITNODIRECT() {
  }

  public FundamentalsNREITNODIRECT balanceSheet(@javax.annotation.Nullable FundamentalsNREITNODIRECTBalanceSheet balanceSheet) {
    this.balanceSheet = balanceSheet;
    return this;
  }

  /**
   * Get balanceSheet
   * @return balanceSheet
   */
  @javax.annotation.Nullable
  public FundamentalsNREITNODIRECTBalanceSheet getBalanceSheet() {
    return balanceSheet;
  }

  public void setBalanceSheet(@javax.annotation.Nullable FundamentalsNREITNODIRECTBalanceSheet balanceSheet) {
    this.balanceSheet = balanceSheet;
  }


  public FundamentalsNREITNODIRECT basicInformation(@javax.annotation.Nullable FundamentalsNREITNODIRECTBasicInformation basicInformation) {
    this.basicInformation = basicInformation;
    return this;
  }

  /**
   * Get basicInformation
   * @return basicInformation
   */
  @javax.annotation.Nullable
  public FundamentalsNREITNODIRECTBasicInformation getBasicInformation() {
    return basicInformation;
  }

  public void setBasicInformation(@javax.annotation.Nullable FundamentalsNREITNODIRECTBasicInformation basicInformation) {
    this.basicInformation = basicInformation;
  }


  public FundamentalsNREITNODIRECT cashflowStatement(@javax.annotation.Nullable FundamentalsNREITNODIRECTCashflowStatement cashflowStatement) {
    this.cashflowStatement = cashflowStatement;
    return this;
  }

  /**
   * Get cashflowStatement
   * @return cashflowStatement
   */
  @javax.annotation.Nullable
  public FundamentalsNREITNODIRECTCashflowStatement getCashflowStatement() {
    return cashflowStatement;
  }

  public void setCashflowStatement(@javax.annotation.Nullable FundamentalsNREITNODIRECTCashflowStatement cashflowStatement) {
    this.cashflowStatement = cashflowStatement;
  }


  public FundamentalsNREITNODIRECT incomeStatement(@javax.annotation.Nullable FundamentalsNREITNODIRECTIncomeStatement incomeStatement) {
    this.incomeStatement = incomeStatement;
    return this;
  }

  /**
   * Get incomeStatement
   * @return incomeStatement
   */
  @javax.annotation.Nullable
  public FundamentalsNREITNODIRECTIncomeStatement getIncomeStatement() {
    return incomeStatement;
  }

  public void setIncomeStatement(@javax.annotation.Nullable FundamentalsNREITNODIRECTIncomeStatement incomeStatement) {
    this.incomeStatement = incomeStatement;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FundamentalsNREITNODIRECT fundamentalsNREITNODIRECT = (FundamentalsNREITNODIRECT) o;
    return Objects.equals(this.balanceSheet, fundamentalsNREITNODIRECT.balanceSheet) &&
        Objects.equals(this.basicInformation, fundamentalsNREITNODIRECT.basicInformation) &&
        Objects.equals(this.cashflowStatement, fundamentalsNREITNODIRECT.cashflowStatement) &&
        Objects.equals(this.incomeStatement, fundamentalsNREITNODIRECT.incomeStatement);
  }

  @Override
  public int hashCode() {
    return Objects.hash(balanceSheet, basicInformation, cashflowStatement, incomeStatement);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FundamentalsNREITNODIRECT {\n");
    sb.append("    balanceSheet: ").append(toIndentedString(balanceSheet)).append("\n");
    sb.append("    basicInformation: ").append(toIndentedString(basicInformation)).append("\n");
    sb.append("    cashflowStatement: ").append(toIndentedString(cashflowStatement)).append("\n");
    sb.append("    incomeStatement: ").append(toIndentedString(incomeStatement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("balance_sheet");
    openapiFields.add("basic_information");
    openapiFields.add("cashflow_statement");
    openapiFields.add("income_statement");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FundamentalsNREITNODIRECT
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FundamentalsNREITNODIRECT.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FundamentalsNREITNODIRECT is not found in the empty JSON string", FundamentalsNREITNODIRECT.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FundamentalsNREITNODIRECT.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FundamentalsNREITNODIRECT` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `balance_sheet`
      if (jsonObj.get("balance_sheet") != null && !jsonObj.get("balance_sheet").isJsonNull()) {
        FundamentalsNREITNODIRECTBalanceSheet.validateJsonElement(jsonObj.get("balance_sheet"));
      }
      // validate the optional field `basic_information`
      if (jsonObj.get("basic_information") != null && !jsonObj.get("basic_information").isJsonNull()) {
        FundamentalsNREITNODIRECTBasicInformation.validateJsonElement(jsonObj.get("basic_information"));
      }
      // validate the optional field `cashflow_statement`
      if (jsonObj.get("cashflow_statement") != null && !jsonObj.get("cashflow_statement").isJsonNull()) {
        FundamentalsNREITNODIRECTCashflowStatement.validateJsonElement(jsonObj.get("cashflow_statement"));
      }
      // validate the optional field `income_statement`
      if (jsonObj.get("income_statement") != null && !jsonObj.get("income_statement").isJsonNull()) {
        FundamentalsNREITNODIRECTIncomeStatement.validateJsonElement(jsonObj.get("income_statement"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FundamentalsNREITNODIRECT.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FundamentalsNREITNODIRECT' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FundamentalsNREITNODIRECT> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FundamentalsNREITNODIRECT.class));

       return (TypeAdapter<T>) new TypeAdapter<FundamentalsNREITNODIRECT>() {
           @Override
           public void write(JsonWriter out, FundamentalsNREITNODIRECT value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FundamentalsNREITNODIRECT read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FundamentalsNREITNODIRECT given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FundamentalsNREITNODIRECT
   * @throws IOException if the JSON string is invalid with respect to FundamentalsNREITNODIRECT
   */
  public static FundamentalsNREITNODIRECT fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FundamentalsNREITNODIRECT.class);
  }

  /**
   * Convert an instance of FundamentalsNREITNODIRECT to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

