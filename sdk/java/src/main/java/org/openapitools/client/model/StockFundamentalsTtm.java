/*
 * Gurufocus Data Package API
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FundamentalsINOREITNODIRECT;
import org.openapitools.client.model.FundamentalsIREITNODIRECT;
import org.openapitools.client.model.FundamentalsNNOREITDIRECT;
import org.openapitools.client.model.FundamentalsNNOREITNODIRECT;
import org.openapitools.client.model.FundamentalsNNOREITNODIRECTBalanceSheet;
import org.openapitools.client.model.FundamentalsNNOREITNODIRECTBasicInformation;
import org.openapitools.client.model.FundamentalsNNOREITNODIRECTCashflowStatement;
import org.openapitools.client.model.FundamentalsNNOREITNODIRECTIncomeStatement;
import org.openapitools.client.model.FundamentalsNREITDIRECT;
import org.openapitools.client.model.FundamentalsNREITNODIRECT;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-11T01:10:00.357398434Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class StockFundamentalsTtm extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(StockFundamentalsTtm.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!StockFundamentalsTtm.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'StockFundamentalsTtm' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FundamentalsIREITNODIRECT> adapterFundamentalsIREITNODIRECT = gson.getDelegateAdapter(this, TypeToken.get(FundamentalsIREITNODIRECT.class));
            final TypeAdapter<FundamentalsINOREITNODIRECT> adapterFundamentalsINOREITNODIRECT = gson.getDelegateAdapter(this, TypeToken.get(FundamentalsINOREITNODIRECT.class));
            final TypeAdapter<FundamentalsNREITDIRECT> adapterFundamentalsNREITDIRECT = gson.getDelegateAdapter(this, TypeToken.get(FundamentalsNREITDIRECT.class));
            final TypeAdapter<FundamentalsNNOREITDIRECT> adapterFundamentalsNNOREITDIRECT = gson.getDelegateAdapter(this, TypeToken.get(FundamentalsNNOREITDIRECT.class));
            final TypeAdapter<FundamentalsNREITNODIRECT> adapterFundamentalsNREITNODIRECT = gson.getDelegateAdapter(this, TypeToken.get(FundamentalsNREITNODIRECT.class));
            final TypeAdapter<FundamentalsNNOREITNODIRECT> adapterFundamentalsNNOREITNODIRECT = gson.getDelegateAdapter(this, TypeToken.get(FundamentalsNNOREITNODIRECT.class));

            return (TypeAdapter<T>) new TypeAdapter<StockFundamentalsTtm>() {
                @Override
                public void write(JsonWriter out, StockFundamentalsTtm value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `FundamentalsIREITNODIRECT`
                    if (value.getActualInstance() instanceof FundamentalsIREITNODIRECT) {
                        JsonElement element = adapterFundamentalsIREITNODIRECT.toJsonTree((FundamentalsIREITNODIRECT)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `FundamentalsINOREITNODIRECT`
                    if (value.getActualInstance() instanceof FundamentalsINOREITNODIRECT) {
                        JsonElement element = adapterFundamentalsINOREITNODIRECT.toJsonTree((FundamentalsINOREITNODIRECT)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `FundamentalsNREITDIRECT`
                    if (value.getActualInstance() instanceof FundamentalsNREITDIRECT) {
                        JsonElement element = adapterFundamentalsNREITDIRECT.toJsonTree((FundamentalsNREITDIRECT)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `FundamentalsNNOREITDIRECT`
                    if (value.getActualInstance() instanceof FundamentalsNNOREITDIRECT) {
                        JsonElement element = adapterFundamentalsNNOREITDIRECT.toJsonTree((FundamentalsNNOREITDIRECT)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `FundamentalsNREITNODIRECT`
                    if (value.getActualInstance() instanceof FundamentalsNREITNODIRECT) {
                        JsonElement element = adapterFundamentalsNREITNODIRECT.toJsonTree((FundamentalsNREITNODIRECT)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `FundamentalsNNOREITNODIRECT`
                    if (value.getActualInstance() instanceof FundamentalsNNOREITNODIRECT) {
                        JsonElement element = adapterFundamentalsNNOREITNODIRECT.toJsonTree((FundamentalsNNOREITNODIRECT)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: FundamentalsINOREITNODIRECT, FundamentalsIREITNODIRECT, FundamentalsNNOREITDIRECT, FundamentalsNNOREITNODIRECT, FundamentalsNREITDIRECT, FundamentalsNREITNODIRECT");
                }

                @Override
                public StockFundamentalsTtm read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize FundamentalsIREITNODIRECT
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FundamentalsIREITNODIRECT.validateJsonElement(jsonElement);
                        actualAdapter = adapterFundamentalsIREITNODIRECT;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FundamentalsIREITNODIRECT'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for FundamentalsIREITNODIRECT failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FundamentalsIREITNODIRECT'", e);
                    }
                    // deserialize FundamentalsINOREITNODIRECT
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FundamentalsINOREITNODIRECT.validateJsonElement(jsonElement);
                        actualAdapter = adapterFundamentalsINOREITNODIRECT;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FundamentalsINOREITNODIRECT'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for FundamentalsINOREITNODIRECT failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FundamentalsINOREITNODIRECT'", e);
                    }
                    // deserialize FundamentalsNREITDIRECT
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FundamentalsNREITDIRECT.validateJsonElement(jsonElement);
                        actualAdapter = adapterFundamentalsNREITDIRECT;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FundamentalsNREITDIRECT'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for FundamentalsNREITDIRECT failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FundamentalsNREITDIRECT'", e);
                    }
                    // deserialize FundamentalsNNOREITDIRECT
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FundamentalsNNOREITDIRECT.validateJsonElement(jsonElement);
                        actualAdapter = adapterFundamentalsNNOREITDIRECT;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FundamentalsNNOREITDIRECT'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for FundamentalsNNOREITDIRECT failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FundamentalsNNOREITDIRECT'", e);
                    }
                    // deserialize FundamentalsNREITNODIRECT
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FundamentalsNREITNODIRECT.validateJsonElement(jsonElement);
                        actualAdapter = adapterFundamentalsNREITNODIRECT;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FundamentalsNREITNODIRECT'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for FundamentalsNREITNODIRECT failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FundamentalsNREITNODIRECT'", e);
                    }
                    // deserialize FundamentalsNNOREITNODIRECT
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FundamentalsNNOREITNODIRECT.validateJsonElement(jsonElement);
                        actualAdapter = adapterFundamentalsNNOREITNODIRECT;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FundamentalsNNOREITNODIRECT'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for FundamentalsNNOREITNODIRECT failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FundamentalsNNOREITNODIRECT'", e);
                    }

                    if (match == 1) {
                        StockFundamentalsTtm ret = new StockFundamentalsTtm();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for StockFundamentalsTtm: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public StockFundamentalsTtm() {
        super("oneOf", Boolean.FALSE);
    }

    public StockFundamentalsTtm(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("FundamentalsIREITNODIRECT", FundamentalsIREITNODIRECT.class);
        schemas.put("FundamentalsINOREITNODIRECT", FundamentalsINOREITNODIRECT.class);
        schemas.put("FundamentalsNREITDIRECT", FundamentalsNREITDIRECT.class);
        schemas.put("FundamentalsNNOREITDIRECT", FundamentalsNNOREITDIRECT.class);
        schemas.put("FundamentalsNREITNODIRECT", FundamentalsNREITNODIRECT.class);
        schemas.put("FundamentalsNNOREITNODIRECT", FundamentalsNNOREITNODIRECT.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return StockFundamentalsTtm.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * FundamentalsINOREITNODIRECT, FundamentalsIREITNODIRECT, FundamentalsNNOREITDIRECT, FundamentalsNNOREITNODIRECT, FundamentalsNREITDIRECT, FundamentalsNREITNODIRECT
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof FundamentalsIREITNODIRECT) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof FundamentalsINOREITNODIRECT) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof FundamentalsNREITDIRECT) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof FundamentalsNNOREITDIRECT) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof FundamentalsNREITNODIRECT) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof FundamentalsNNOREITNODIRECT) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be FundamentalsINOREITNODIRECT, FundamentalsIREITNODIRECT, FundamentalsNNOREITDIRECT, FundamentalsNNOREITNODIRECT, FundamentalsNREITDIRECT, FundamentalsNREITNODIRECT");
    }

    /**
     * Get the actual instance, which can be the following:
     * FundamentalsINOREITNODIRECT, FundamentalsIREITNODIRECT, FundamentalsNNOREITDIRECT, FundamentalsNNOREITNODIRECT, FundamentalsNREITDIRECT, FundamentalsNREITNODIRECT
     *
     * @return The actual instance (FundamentalsINOREITNODIRECT, FundamentalsIREITNODIRECT, FundamentalsNNOREITDIRECT, FundamentalsNNOREITNODIRECT, FundamentalsNREITDIRECT, FundamentalsNREITNODIRECT)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `FundamentalsIREITNODIRECT`. If the actual instance is not `FundamentalsIREITNODIRECT`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FundamentalsIREITNODIRECT`
     * @throws ClassCastException if the instance is not `FundamentalsIREITNODIRECT`
     */
    public FundamentalsIREITNODIRECT getFundamentalsIREITNODIRECT() throws ClassCastException {
        return (FundamentalsIREITNODIRECT)super.getActualInstance();
    }

    /**
     * Get the actual instance of `FundamentalsINOREITNODIRECT`. If the actual instance is not `FundamentalsINOREITNODIRECT`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FundamentalsINOREITNODIRECT`
     * @throws ClassCastException if the instance is not `FundamentalsINOREITNODIRECT`
     */
    public FundamentalsINOREITNODIRECT getFundamentalsINOREITNODIRECT() throws ClassCastException {
        return (FundamentalsINOREITNODIRECT)super.getActualInstance();
    }

    /**
     * Get the actual instance of `FundamentalsNREITDIRECT`. If the actual instance is not `FundamentalsNREITDIRECT`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FundamentalsNREITDIRECT`
     * @throws ClassCastException if the instance is not `FundamentalsNREITDIRECT`
     */
    public FundamentalsNREITDIRECT getFundamentalsNREITDIRECT() throws ClassCastException {
        return (FundamentalsNREITDIRECT)super.getActualInstance();
    }

    /**
     * Get the actual instance of `FundamentalsNNOREITDIRECT`. If the actual instance is not `FundamentalsNNOREITDIRECT`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FundamentalsNNOREITDIRECT`
     * @throws ClassCastException if the instance is not `FundamentalsNNOREITDIRECT`
     */
    public FundamentalsNNOREITDIRECT getFundamentalsNNOREITDIRECT() throws ClassCastException {
        return (FundamentalsNNOREITDIRECT)super.getActualInstance();
    }

    /**
     * Get the actual instance of `FundamentalsNREITNODIRECT`. If the actual instance is not `FundamentalsNREITNODIRECT`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FundamentalsNREITNODIRECT`
     * @throws ClassCastException if the instance is not `FundamentalsNREITNODIRECT`
     */
    public FundamentalsNREITNODIRECT getFundamentalsNREITNODIRECT() throws ClassCastException {
        return (FundamentalsNREITNODIRECT)super.getActualInstance();
    }

    /**
     * Get the actual instance of `FundamentalsNNOREITNODIRECT`. If the actual instance is not `FundamentalsNNOREITNODIRECT`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FundamentalsNNOREITNODIRECT`
     * @throws ClassCastException if the instance is not `FundamentalsNNOREITNODIRECT`
     */
    public FundamentalsNNOREITNODIRECT getFundamentalsNNOREITNODIRECT() throws ClassCastException {
        return (FundamentalsNNOREITNODIRECT)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to StockFundamentalsTtm
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with FundamentalsIREITNODIRECT
        try {
            FundamentalsIREITNODIRECT.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for FundamentalsIREITNODIRECT failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with FundamentalsINOREITNODIRECT
        try {
            FundamentalsINOREITNODIRECT.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for FundamentalsINOREITNODIRECT failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with FundamentalsNREITDIRECT
        try {
            FundamentalsNREITDIRECT.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for FundamentalsNREITDIRECT failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with FundamentalsNNOREITDIRECT
        try {
            FundamentalsNNOREITDIRECT.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for FundamentalsNNOREITDIRECT failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with FundamentalsNREITNODIRECT
        try {
            FundamentalsNREITNODIRECT.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for FundamentalsNREITNODIRECT failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with FundamentalsNNOREITNODIRECT
        try {
            FundamentalsNNOREITNODIRECT.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for FundamentalsNNOREITNODIRECT failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for StockFundamentalsTtm with oneOf schemas: FundamentalsINOREITNODIRECT, FundamentalsIREITNODIRECT, FundamentalsNNOREITDIRECT, FundamentalsNNOREITNODIRECT, FundamentalsNREITDIRECT, FundamentalsNREITNODIRECT. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of StockFundamentalsTtm given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of StockFundamentalsTtm
     * @throws IOException if the JSON string is invalid with respect to StockFundamentalsTtm
     */
    public static StockFundamentalsTtm fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, StockFundamentalsTtm.class);
    }

    /**
     * Convert an instance of StockFundamentalsTtm to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

