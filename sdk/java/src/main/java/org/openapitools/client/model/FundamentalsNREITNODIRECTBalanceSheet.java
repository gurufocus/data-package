/*
 * Gurufocus Data Package API
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FundamentalsNREITNODIRECTBalanceSheet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-11T01:10:00.357398434Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class FundamentalsNREITNODIRECTBalanceSheet {
  public static final String SERIALIZED_NAME_ACCOUNTS_PAYABLE = "accounts_payable";
  @SerializedName(SERIALIZED_NAME_ACCOUNTS_PAYABLE)
  @javax.annotation.Nullable
  private BigDecimal accountsPayable;

  public static final String SERIALIZED_NAME_ACCOUNTS_PAYABLE_ACCRUED_EXPENSE = "accounts_payable_accrued_expense";
  @SerializedName(SERIALIZED_NAME_ACCOUNTS_PAYABLE_ACCRUED_EXPENSE)
  @javax.annotation.Nullable
  private BigDecimal accountsPayableAccruedExpense;

  public static final String SERIALIZED_NAME_ACCOUNTS_RECEIVABLE = "accounts_receivable";
  @SerializedName(SERIALIZED_NAME_ACCOUNTS_RECEIVABLE)
  @javax.annotation.Nullable
  private BigDecimal accountsReceivable;

  public static final String SERIALIZED_NAME_ACCUMULATED_DEPRECIATION = "accumulated_depreciation";
  @SerializedName(SERIALIZED_NAME_ACCUMULATED_DEPRECIATION)
  @javax.annotation.Nullable
  private BigDecimal accumulatedDepreciation;

  public static final String SERIALIZED_NAME_ACCUMULATED_OTHER_COMPREHENSIVE_INCOME = "accumulated_other_comprehensive_income";
  @SerializedName(SERIALIZED_NAME_ACCUMULATED_OTHER_COMPREHENSIVE_INCOME)
  @javax.annotation.Nullable
  private BigDecimal accumulatedOtherComprehensiveIncome;

  public static final String SERIALIZED_NAME_ADDITIONAL_PAID_IN_CAPITAL = "additional_paid_in_capital";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PAID_IN_CAPITAL)
  @javax.annotation.Nullable
  private BigDecimal additionalPaidInCapital;

  public static final String SERIALIZED_NAME_BS_CURRENT_DEFERRED_LIABILITIES = "bs_current_deferred_liabilities";
  @SerializedName(SERIALIZED_NAME_BS_CURRENT_DEFERRED_LIABILITIES)
  @javax.annotation.Nullable
  private BigDecimal bsCurrentDeferredLiabilities;

  public static final String SERIALIZED_NAME_BUILDINGS_AND_IMPROVEMENTS = "buildings_and_improvements";
  @SerializedName(SERIALIZED_NAME_BUILDINGS_AND_IMPROVEMENTS)
  @javax.annotation.Nullable
  private BigDecimal buildingsAndImprovements;

  public static final String SERIALIZED_NAME_CASH_AND_CASH_EQUIVALENTS = "cash_and_cash_equivalents";
  @SerializedName(SERIALIZED_NAME_CASH_AND_CASH_EQUIVALENTS)
  @javax.annotation.Nullable
  private BigDecimal cashAndCashEquivalents;

  public static final String SERIALIZED_NAME_CASH_EQUIVALENTS_MARKETABLE_SECURITIES = "cash_equivalents_marketable_securities";
  @SerializedName(SERIALIZED_NAME_CASH_EQUIVALENTS_MARKETABLE_SECURITIES)
  @javax.annotation.Nullable
  private BigDecimal cashEquivalentsMarketableSecurities;

  public static final String SERIALIZED_NAME_COMMON_STOCK = "common_stock";
  @SerializedName(SERIALIZED_NAME_COMMON_STOCK)
  @javax.annotation.Nullable
  private BigDecimal commonStock;

  public static final String SERIALIZED_NAME_CONSTRUCTION_IN_PROGRESS = "construction_in_progress";
  @SerializedName(SERIALIZED_NAME_CONSTRUCTION_IN_PROGRESS)
  @javax.annotation.Nullable
  private BigDecimal constructionInProgress;

  public static final String SERIALIZED_NAME_CURRENT_ACCRUED_EXPENSES = "current_accrued_expenses";
  @SerializedName(SERIALIZED_NAME_CURRENT_ACCRUED_EXPENSES)
  @javax.annotation.Nullable
  private BigDecimal currentAccruedExpenses;

  public static final String SERIALIZED_NAME_CURRENT_DEFERRED_REVENUE = "current_deferred_revenue";
  @SerializedName(SERIALIZED_NAME_CURRENT_DEFERRED_REVENUE)
  @javax.annotation.Nullable
  private BigDecimal currentDeferredRevenue;

  public static final String SERIALIZED_NAME_CURRENT_DEFERRED_TAXES_LIABILITIES = "current_deferred_taxes_liabilities";
  @SerializedName(SERIALIZED_NAME_CURRENT_DEFERRED_TAXES_LIABILITIES)
  @javax.annotation.Nullable
  private BigDecimal currentDeferredTaxesLiabilities;

  public static final String SERIALIZED_NAME_DEBT_TO_EQUITY = "debt_to_equity";
  @SerializedName(SERIALIZED_NAME_DEBT_TO_EQUITY)
  @javax.annotation.Nullable
  private BigDecimal debtToEquity;

  public static final String SERIALIZED_NAME_EQUITY_TO_ASSET = "equity_to_asset";
  @SerializedName(SERIALIZED_NAME_EQUITY_TO_ASSET)
  @javax.annotation.Nullable
  private BigDecimal equityToAsset;

  public static final String SERIALIZED_NAME_FINISHED_GOODS = "finished_goods";
  @SerializedName(SERIALIZED_NAME_FINISHED_GOODS)
  @javax.annotation.Nullable
  private BigDecimal finishedGoods;

  public static final String SERIALIZED_NAME_GOOD_WILL = "good_will";
  @SerializedName(SERIALIZED_NAME_GOOD_WILL)
  @javax.annotation.Nullable
  private BigDecimal goodWill;

  public static final String SERIALIZED_NAME_GROSS_PPE = "gross_ppe";
  @SerializedName(SERIALIZED_NAME_GROSS_PPE)
  @javax.annotation.Nullable
  private BigDecimal grossPpe;

  public static final String SERIALIZED_NAME_INTANGIBLES = "intangibles";
  @SerializedName(SERIALIZED_NAME_INTANGIBLES)
  @javax.annotation.Nullable
  private BigDecimal intangibles;

  public static final String SERIALIZED_NAME_INVENTORIES_ADJUSTMENTS_ALLOWANCES = "inventories_adjustments_allowances";
  @SerializedName(SERIALIZED_NAME_INVENTORIES_ADJUSTMENTS_ALLOWANCES)
  @javax.annotation.Nullable
  private BigDecimal inventoriesAdjustmentsAllowances;

  public static final String SERIALIZED_NAME_INVENTORY = "inventory";
  @SerializedName(SERIALIZED_NAME_INVENTORY)
  @javax.annotation.Nullable
  private BigDecimal inventory;

  public static final String SERIALIZED_NAME_INVESTMENTS_AND_ADVANCES = "investments_and_advances";
  @SerializedName(SERIALIZED_NAME_INVESTMENTS_AND_ADVANCES)
  @javax.annotation.Nullable
  private BigDecimal investmentsAndAdvances;

  public static final String SERIALIZED_NAME_LAND_AND_IMPROVEMENTS = "land_and_improvements";
  @SerializedName(SERIALIZED_NAME_LAND_AND_IMPROVEMENTS)
  @javax.annotation.Nullable
  private BigDecimal landAndImprovements;

  public static final String SERIALIZED_NAME_LOANS_RECEIVABLE = "loans_receivable";
  @SerializedName(SERIALIZED_NAME_LOANS_RECEIVABLE)
  @javax.annotation.Nullable
  private BigDecimal loansReceivable;

  public static final String SERIALIZED_NAME_LONG_TERM_CAPITAL_LEASE_OBLIGATION = "long_term_capital_lease_obligation";
  @SerializedName(SERIALIZED_NAME_LONG_TERM_CAPITAL_LEASE_OBLIGATION)
  @javax.annotation.Nullable
  private BigDecimal longTermCapitalLeaseObligation;

  public static final String SERIALIZED_NAME_LONG_TERM_DEBT = "long_term_debt";
  @SerializedName(SERIALIZED_NAME_LONG_TERM_DEBT)
  @javax.annotation.Nullable
  private BigDecimal longTermDebt;

  public static final String SERIALIZED_NAME_LONG_TERM_DEBT_AND_CAPITAL_LEASE_OBLIGATION = "long_term_debt_and_capital_lease_obligation";
  @SerializedName(SERIALIZED_NAME_LONG_TERM_DEBT_AND_CAPITAL_LEASE_OBLIGATION)
  @javax.annotation.Nullable
  private BigDecimal longTermDebtAndCapitalLeaseObligation;

  public static final String SERIALIZED_NAME_MACHINERY_FURNITURE_EQUIPMENT = "machinery_furniture_equipment";
  @SerializedName(SERIALIZED_NAME_MACHINERY_FURNITURE_EQUIPMENT)
  @javax.annotation.Nullable
  private BigDecimal machineryFurnitureEquipment;

  public static final String SERIALIZED_NAME_MARKE_TABLE_SECURITIES = "marke_table_securities";
  @SerializedName(SERIALIZED_NAME_MARKE_TABLE_SECURITIES)
  @javax.annotation.Nullable
  private BigDecimal markeTableSecurities;

  public static final String SERIALIZED_NAME_MINORITY_INTEREST = "minority_interest";
  @SerializedName(SERIALIZED_NAME_MINORITY_INTEREST)
  @javax.annotation.Nullable
  private BigDecimal minorityInterest;

  public static final String SERIALIZED_NAME_NET_PPE = "net_ppe";
  @SerializedName(SERIALIZED_NAME_NET_PPE)
  @javax.annotation.Nullable
  private BigDecimal netPpe;

  public static final String SERIALIZED_NAME_NON_CURRENT_DEFERRED_INCOME_TAX = "non_current_deferred_income_tax";
  @SerializedName(SERIALIZED_NAME_NON_CURRENT_DEFERRED_INCOME_TAX)
  @javax.annotation.Nullable
  private BigDecimal nonCurrentDeferredIncomeTax;

  public static final String SERIALIZED_NAME_NON_CURRENT_DEFERRED_LIABILITIES = "non_current_deferred_liabilities";
  @SerializedName(SERIALIZED_NAME_NON_CURRENT_DEFERRED_LIABILITIES)
  @javax.annotation.Nullable
  private BigDecimal nonCurrentDeferredLiabilities;

  public static final String SERIALIZED_NAME_NOTES_RECEIVABLE = "notes_receivable";
  @SerializedName(SERIALIZED_NAME_NOTES_RECEIVABLE)
  @javax.annotation.Nullable
  private BigDecimal notesReceivable;

  public static final String SERIALIZED_NAME_OTHER_CURRENT_ASSETS = "other_current_assets";
  @SerializedName(SERIALIZED_NAME_OTHER_CURRENT_ASSETS)
  @javax.annotation.Nullable
  private BigDecimal otherCurrentAssets;

  public static final String SERIALIZED_NAME_OTHER_CURRENT_LIABILITIES = "other_current_liabilities";
  @SerializedName(SERIALIZED_NAME_OTHER_CURRENT_LIABILITIES)
  @javax.annotation.Nullable
  private BigDecimal otherCurrentLiabilities;

  public static final String SERIALIZED_NAME_OTHER_CURRENT_PAYABLES = "other_current_payables";
  @SerializedName(SERIALIZED_NAME_OTHER_CURRENT_PAYABLES)
  @javax.annotation.Nullable
  private BigDecimal otherCurrentPayables;

  public static final String SERIALIZED_NAME_OTHER_CURRENT_RECEIVABLES = "other_current_receivables";
  @SerializedName(SERIALIZED_NAME_OTHER_CURRENT_RECEIVABLES)
  @javax.annotation.Nullable
  private BigDecimal otherCurrentReceivables;

  public static final String SERIALIZED_NAME_OTHER_EQUITY = "other_equity";
  @SerializedName(SERIALIZED_NAME_OTHER_EQUITY)
  @javax.annotation.Nullable
  private BigDecimal otherEquity;

  public static final String SERIALIZED_NAME_OTHER_GROSS_PPE = "other_gross_ppe";
  @SerializedName(SERIALIZED_NAME_OTHER_GROSS_PPE)
  @javax.annotation.Nullable
  private BigDecimal otherGrossPpe;

  public static final String SERIALIZED_NAME_OTHER_INVENTORIES = "other_inventories";
  @SerializedName(SERIALIZED_NAME_OTHER_INVENTORIES)
  @javax.annotation.Nullable
  private BigDecimal otherInventories;

  public static final String SERIALIZED_NAME_OTHER_LONG_TERM_ASSETS = "other_long_term_assets";
  @SerializedName(SERIALIZED_NAME_OTHER_LONG_TERM_ASSETS)
  @javax.annotation.Nullable
  private BigDecimal otherLongTermAssets;

  public static final String SERIALIZED_NAME_OTHER_LONG_TERM_LIABILITIES = "other_long_term_liabilities";
  @SerializedName(SERIALIZED_NAME_OTHER_LONG_TERM_LIABILITIES)
  @javax.annotation.Nullable
  private BigDecimal otherLongTermLiabilities;

  public static final String SERIALIZED_NAME_PENSION_AND_RETIREMENT_BENEFIT = "pension_and_retirement_benefit";
  @SerializedName(SERIALIZED_NAME_PENSION_AND_RETIREMENT_BENEFIT)
  @javax.annotation.Nullable
  private BigDecimal pensionAndRetirementBenefit;

  public static final String SERIALIZED_NAME_PREFERRED_STOCK = "preferred_stock";
  @SerializedName(SERIALIZED_NAME_PREFERRED_STOCK)
  @javax.annotation.Nullable
  private BigDecimal preferredStock;

  public static final String SERIALIZED_NAME_RAW_MATERIALS = "raw_materials";
  @SerializedName(SERIALIZED_NAME_RAW_MATERIALS)
  @javax.annotation.Nullable
  private BigDecimal rawMaterials;

  public static final String SERIALIZED_NAME_RETAINED_EARNINGS = "retained_earnings";
  @SerializedName(SERIALIZED_NAME_RETAINED_EARNINGS)
  @javax.annotation.Nullable
  private BigDecimal retainedEarnings;

  public static final String SERIALIZED_NAME_SHORT_TERM_CAPITAL_LEASE_OBLIGATION = "short_term_capital_lease_obligation";
  @SerializedName(SERIALIZED_NAME_SHORT_TERM_CAPITAL_LEASE_OBLIGATION)
  @javax.annotation.Nullable
  private BigDecimal shortTermCapitalLeaseObligation;

  public static final String SERIALIZED_NAME_SHORT_TERM_DEBT = "short_term_debt";
  @SerializedName(SERIALIZED_NAME_SHORT_TERM_DEBT)
  @javax.annotation.Nullable
  private BigDecimal shortTermDebt;

  public static final String SERIALIZED_NAME_SHORT_TERM_DEBT_AND_CAPITAL_LEASE_OBLIGATION = "short_term_debt_and_capital_lease_obligation";
  @SerializedName(SERIALIZED_NAME_SHORT_TERM_DEBT_AND_CAPITAL_LEASE_OBLIGATION)
  @javax.annotation.Nullable
  private BigDecimal shortTermDebtAndCapitalLeaseObligation;

  public static final String SERIALIZED_NAME_TOTAL_ASSETS = "total_assets";
  @SerializedName(SERIALIZED_NAME_TOTAL_ASSETS)
  @javax.annotation.Nullable
  private BigDecimal totalAssets;

  public static final String SERIALIZED_NAME_TOTAL_CURRENT_ASSETS = "total_current_assets";
  @SerializedName(SERIALIZED_NAME_TOTAL_CURRENT_ASSETS)
  @javax.annotation.Nullable
  private BigDecimal totalCurrentAssets;

  public static final String SERIALIZED_NAME_TOTAL_CURRENT_LIABILITIES = "total_current_liabilities";
  @SerializedName(SERIALIZED_NAME_TOTAL_CURRENT_LIABILITIES)
  @javax.annotation.Nullable
  private BigDecimal totalCurrentLiabilities;

  public static final String SERIALIZED_NAME_TOTAL_EQUITY = "total_equity";
  @SerializedName(SERIALIZED_NAME_TOTAL_EQUITY)
  @javax.annotation.Nullable
  private BigDecimal totalEquity;

  public static final String SERIALIZED_NAME_TOTAL_LIABILITIES = "total_liabilities";
  @SerializedName(SERIALIZED_NAME_TOTAL_LIABILITIES)
  @javax.annotation.Nullable
  private BigDecimal totalLiabilities;

  public static final String SERIALIZED_NAME_TOTAL_NON_CURRENT_ASSETS = "total_non_current_assets";
  @SerializedName(SERIALIZED_NAME_TOTAL_NON_CURRENT_ASSETS)
  @javax.annotation.Nullable
  private BigDecimal totalNonCurrentAssets;

  public static final String SERIALIZED_NAME_TOTAL_NON_CURRENT_LIABILITIES_NET_MINORITY_INTEREST = "total_non_current_liabilities_net_minority_interest";
  @SerializedName(SERIALIZED_NAME_TOTAL_NON_CURRENT_LIABILITIES_NET_MINORITY_INTEREST)
  @javax.annotation.Nullable
  private BigDecimal totalNonCurrentLiabilitiesNetMinorityInterest;

  public static final String SERIALIZED_NAME_TOTAL_RECEIVABLES = "total_receivables";
  @SerializedName(SERIALIZED_NAME_TOTAL_RECEIVABLES)
  @javax.annotation.Nullable
  private BigDecimal totalReceivables;

  public static final String SERIALIZED_NAME_TOTAL_STOCKHOLDERS_EQUITY = "total_stockholders_equity";
  @SerializedName(SERIALIZED_NAME_TOTAL_STOCKHOLDERS_EQUITY)
  @javax.annotation.Nullable
  private BigDecimal totalStockholdersEquity;

  public static final String SERIALIZED_NAME_TOTAL_TAX_PAYABLE = "total_tax_payable";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAX_PAYABLE)
  @javax.annotation.Nullable
  private BigDecimal totalTaxPayable;

  public static final String SERIALIZED_NAME_TREASURY_STOCK = "treasury_stock";
  @SerializedName(SERIALIZED_NAME_TREASURY_STOCK)
  @javax.annotation.Nullable
  private BigDecimal treasuryStock;

  public static final String SERIALIZED_NAME_WORK_IN_PROCESS = "work_in_process";
  @SerializedName(SERIALIZED_NAME_WORK_IN_PROCESS)
  @javax.annotation.Nullable
  private BigDecimal workInProcess;

  public FundamentalsNREITNODIRECTBalanceSheet() {
  }

  public FundamentalsNREITNODIRECTBalanceSheet accountsPayable(@javax.annotation.Nullable BigDecimal accountsPayable) {
    this.accountsPayable = accountsPayable;
    return this;
  }

  /**
   * &lt;p&gt;{{Accts_Payable}} usually includes {{AccountsPayable}}, accrued compensation and related benefits, etc. {{AccountsPayable}} is money owed by a business to its suppliers shown as a liability on a company&#39;s balance sheet. It is distinct from notes payable liabilities, which are debts created by formal legal instrument documents. It is part of the current portion of the liabilities (due within one year or within the normal operating cycle if longer) reflected on the balace sheet of the company. A higher {{AccountsPayable}} means lower Working Capital needed to operate the business.&lt;/p&gt;
   * @return accountsPayable
   */
  @javax.annotation.Nullable
  public BigDecimal getAccountsPayable() {
    return accountsPayable;
  }

  public void setAccountsPayable(@javax.annotation.Nullable BigDecimal accountsPayable) {
    this.accountsPayable = accountsPayable;
  }


  public FundamentalsNREITNODIRECTBalanceSheet accountsPayableAccruedExpense(@javax.annotation.Nullable BigDecimal accountsPayableAccruedExpense) {
    this.accountsPayableAccruedExpense = accountsPayableAccruedExpense;
    return this;
  }

  /**
   * &lt;p&gt;{{Accts_Payable}} usually includes {{AccountsPayable}}, accrued compensation and related benefits, etc. It is money owed by a business to its suppliers shown as a liability on a company&#39;s balance sheet. It is distinct from notes payable liabilities, which are debts created by formal legal instrument documents. It is part of the current portion of the liabilities (due within one year or within the normal operating cycle if longer) reflected on the balace sheet of the company. A higher {{AccountsPayable}} means lower Working Capital needed to operate the business.&lt;/p&gt;
   * @return accountsPayableAccruedExpense
   */
  @javax.annotation.Nullable
  public BigDecimal getAccountsPayableAccruedExpense() {
    return accountsPayableAccruedExpense;
  }

  public void setAccountsPayableAccruedExpense(@javax.annotation.Nullable BigDecimal accountsPayableAccruedExpense) {
    this.accountsPayableAccruedExpense = accountsPayableAccruedExpense;
  }


  public FundamentalsNREITNODIRECTBalanceSheet accountsReceivable(@javax.annotation.Nullable BigDecimal accountsReceivable) {
    this.accountsReceivable = accountsReceivable;
    return this;
  }

  /**
   * &lt;p&gt;{{Accts_Rec}} is money owed to a business by customers and shown on its Balance Sheet as an asset. {{Accts_Rec}} are created when a customer has received a product but has not yet paid for that product. It is related to {{DaysSalesOutstanding}}, which measures of the average number of days that a company takes to collect revenue after a sale has been made. It is a financial ratio that illustrates how well a company&#39;s accounts receivables are being managed. &lt;br&gt;{{DaysSalesOutstanding}} &#x3D; {{Accts_Rec}} / {{Revenue}} * Days in Period&lt;/p&gt;
   * @return accountsReceivable
   */
  @javax.annotation.Nullable
  public BigDecimal getAccountsReceivable() {
    return accountsReceivable;
  }

  public void setAccountsReceivable(@javax.annotation.Nullable BigDecimal accountsReceivable) {
    this.accountsReceivable = accountsReceivable;
  }


  public FundamentalsNREITNODIRECTBalanceSheet accumulatedDepreciation(@javax.annotation.Nullable BigDecimal accumulatedDepreciation) {
    this.accumulatedDepreciation = accumulatedDepreciation;
    return this;
  }

  /**
   * &lt;p&gt;The {{AccumulatedDepreciation}} of an asset up to a single point in its life. Regardless of the method used to calculate it, the depreciation of an asset during a single period is added to the previous period&#39;s {{AccumulatedDepreciation}} to get the current {{AccumulatedDepreciation}}.&lt;/p&gt;
   * @return accumulatedDepreciation
   */
  @javax.annotation.Nullable
  public BigDecimal getAccumulatedDepreciation() {
    return accumulatedDepreciation;
  }

  public void setAccumulatedDepreciation(@javax.annotation.Nullable BigDecimal accumulatedDepreciation) {
    this.accumulatedDepreciation = accumulatedDepreciation;
  }


  public FundamentalsNREITNODIRECTBalanceSheet accumulatedOtherComprehensiveIncome(@javax.annotation.Nullable BigDecimal accumulatedOtherComprehensiveIncome) {
    this.accumulatedOtherComprehensiveIncome = accumulatedOtherComprehensiveIncome;
    return this;
  }

  /**
   * &lt;p&gt;{{accumulated_other_comprehensive_income}} is the aggregate amount of gains or losses that are not part of retained earnings.&lt;/p&gt;
   * @return accumulatedOtherComprehensiveIncome
   */
  @javax.annotation.Nullable
  public BigDecimal getAccumulatedOtherComprehensiveIncome() {
    return accumulatedOtherComprehensiveIncome;
  }

  public void setAccumulatedOtherComprehensiveIncome(@javax.annotation.Nullable BigDecimal accumulatedOtherComprehensiveIncome) {
    this.accumulatedOtherComprehensiveIncome = accumulatedOtherComprehensiveIncome;
  }


  public FundamentalsNREITNODIRECTBalanceSheet additionalPaidInCapital(@javax.annotation.Nullable BigDecimal additionalPaidInCapital) {
    this.additionalPaidInCapital = additionalPaidInCapital;
    return this;
  }

  /**
   * &lt;p&gt;{{AdditionalPaidInCapital}} is the capital that a company raises in a financing round in excess of the capital&#39;s par value. The account represents the excess paid by an investor over the par-value price of a stock issue. {{AdditionalPaidInCapital}} can arise from issuing either preferred or common stock. &lt;br&gt;{{AdditionalPaidInCapital}} is calculated as: {{AdditionalPaidInCapital}} &#x3D; (Issue Price - Par Value) * {{Shares_Outstanding}}&lt;/p&gt;
   * @return additionalPaidInCapital
   */
  @javax.annotation.Nullable
  public BigDecimal getAdditionalPaidInCapital() {
    return additionalPaidInCapital;
  }

  public void setAdditionalPaidInCapital(@javax.annotation.Nullable BigDecimal additionalPaidInCapital) {
    this.additionalPaidInCapital = additionalPaidInCapital;
  }


  public FundamentalsNREITNODIRECTBalanceSheet bsCurrentDeferredLiabilities(@javax.annotation.Nullable BigDecimal bsCurrentDeferredLiabilities) {
    this.bsCurrentDeferredLiabilities = bsCurrentDeferredLiabilities;
    return this;
  }

  /**
   * &lt;p&gt;{{BS_CurrentDeferredLiabilities}} represents the current portion of obligations, which is a liability that usually would have been paid but is now pas due.&lt;/p&gt;
   * @return bsCurrentDeferredLiabilities
   */
  @javax.annotation.Nullable
  public BigDecimal getBsCurrentDeferredLiabilities() {
    return bsCurrentDeferredLiabilities;
  }

  public void setBsCurrentDeferredLiabilities(@javax.annotation.Nullable BigDecimal bsCurrentDeferredLiabilities) {
    this.bsCurrentDeferredLiabilities = bsCurrentDeferredLiabilities;
  }


  public FundamentalsNREITNODIRECTBalanceSheet buildingsAndImprovements(@javax.annotation.Nullable BigDecimal buildingsAndImprovements) {
    this.buildingsAndImprovements = buildingsAndImprovements;
    return this;
  }

  /**
   * &lt;p&gt;{{BuildingsAndImprovements}} are capital events that materially extend the useful life of a building or increase the value of a building, or both. A building improvement should be capitalized as betterment and recorded as an addition of value to the existing building if the expenditure for the improvement meets or exceeds the capitalization threshold, or the expenditure increases the life or value of the building by 25 percent of the original life period or cost.&lt;/p&gt;
   * @return buildingsAndImprovements
   */
  @javax.annotation.Nullable
  public BigDecimal getBuildingsAndImprovements() {
    return buildingsAndImprovements;
  }

  public void setBuildingsAndImprovements(@javax.annotation.Nullable BigDecimal buildingsAndImprovements) {
    this.buildingsAndImprovements = buildingsAndImprovements;
  }


  public FundamentalsNREITNODIRECTBalanceSheet cashAndCashEquivalents(@javax.annotation.Nullable BigDecimal cashAndCashEquivalents) {
    this.cashAndCashEquivalents = cashAndCashEquivalents;
    return this;
  }

  /**
   * &lt;p&gt;{{CashAndCashEquivalents}} are the most liquid assets on the balance sheet. Cash equivalents are assets that are readily convertible into cash, such as money market holdings, short-term government bonds or Treasury bills, marketable securities and commercial paper. &lt;br&gt;A high number means either: 1) The company has competitive advantage generating lots of cash 2) Just sold a business or bonds (not necessarily good) &lt;br&gt;A low stockpile of cash usually means poor to mediocre economics.&lt;/p&gt;
   * @return cashAndCashEquivalents
   */
  @javax.annotation.Nullable
  public BigDecimal getCashAndCashEquivalents() {
    return cashAndCashEquivalents;
  }

  public void setCashAndCashEquivalents(@javax.annotation.Nullable BigDecimal cashAndCashEquivalents) {
    this.cashAndCashEquivalents = cashAndCashEquivalents;
  }


  public FundamentalsNREITNODIRECTBalanceSheet cashEquivalentsMarketableSecurities(@javax.annotation.Nullable BigDecimal cashEquivalentsMarketableSecurities) {
    this.cashEquivalentsMarketableSecurities = cashEquivalentsMarketableSecurities;
    return this;
  }

  /**
   * &lt;p&gt;{{Cash_and_Equiv}} are the most liquid assets on the balance sheet. Cash equivalents are assets that are readily convertible into cash, such as money market holdings, short-term government bonds or Treasury bills, marketable securities and commercial paper. Marketable Securities are very liquid securities that can be converted into cash quickly at a reasonable price.&lt;/p&gt;
   * @return cashEquivalentsMarketableSecurities
   */
  @javax.annotation.Nullable
  public BigDecimal getCashEquivalentsMarketableSecurities() {
    return cashEquivalentsMarketableSecurities;
  }

  public void setCashEquivalentsMarketableSecurities(@javax.annotation.Nullable BigDecimal cashEquivalentsMarketableSecurities) {
    this.cashEquivalentsMarketableSecurities = cashEquivalentsMarketableSecurities;
  }


  public FundamentalsNREITNODIRECTBalanceSheet commonStock(@javax.annotation.Nullable BigDecimal commonStock) {
    this.commonStock = commonStock;
    return this;
  }

  /**
   * &lt;p&gt;{{CommonStock}} is listed on  the Balance Sheet at the par value of the total shares outstanding of a company. The par value of {{CommonStock}} is meaningless. It is usually set at an absurdly low number.&lt;/p&gt;
   * @return commonStock
   */
  @javax.annotation.Nullable
  public BigDecimal getCommonStock() {
    return commonStock;
  }

  public void setCommonStock(@javax.annotation.Nullable BigDecimal commonStock) {
    this.commonStock = commonStock;
  }


  public FundamentalsNREITNODIRECTBalanceSheet constructionInProgress(@javax.annotation.Nullable BigDecimal constructionInProgress) {
    this.constructionInProgress = constructionInProgress;
    return this;
  }

  /**
   * &lt;p&gt;It records the cost of construction work, which is not yet completed (typically, applied to capital budget items). A {{ConstructionInProgress}} item is not depreciated until the asset is placed in service. Normally, upon completion, a construction in progress item is reclassified, and the reclassified asset is capitalized and depreciated.&lt;/p&gt;
   * @return constructionInProgress
   */
  @javax.annotation.Nullable
  public BigDecimal getConstructionInProgress() {
    return constructionInProgress;
  }

  public void setConstructionInProgress(@javax.annotation.Nullable BigDecimal constructionInProgress) {
    this.constructionInProgress = constructionInProgress;
  }


  public FundamentalsNREITNODIRECTBalanceSheet currentAccruedExpenses(@javax.annotation.Nullable BigDecimal currentAccruedExpenses) {
    this.currentAccruedExpenses = currentAccruedExpenses;
    return this;
  }

  /**
   * &lt;p&gt;{{CurrentAccruedExpenses}} is the expense incurred during the accounting period, but not required to be paid until a later date. It includes compensation, interest, pensions and all other miscellaneous accruals reported by the company.&lt;/p&gt;
   * @return currentAccruedExpenses
   */
  @javax.annotation.Nullable
  public BigDecimal getCurrentAccruedExpenses() {
    return currentAccruedExpenses;
  }

  public void setCurrentAccruedExpenses(@javax.annotation.Nullable BigDecimal currentAccruedExpenses) {
    this.currentAccruedExpenses = currentAccruedExpenses;
  }


  public FundamentalsNREITNODIRECTBalanceSheet currentDeferredRevenue(@javax.annotation.Nullable BigDecimal currentDeferredRevenue) {
    this.currentDeferredRevenue = currentDeferredRevenue;
    return this;
  }

  /**
   * &lt;p&gt;{{CurrentDeferredRevenue}} represents collections of cash or other assets related to revenue producing activity for which revenue has not yet been recognized. Generally, an entity records deferred revenue when it receives consideration from a customer before achieving certain criteria that must be met for revenue to be recognized in conformity with GAAP. It can be either current or non-current item. Also called unearned revenue.&lt;/p&gt;
   * @return currentDeferredRevenue
   */
  @javax.annotation.Nullable
  public BigDecimal getCurrentDeferredRevenue() {
    return currentDeferredRevenue;
  }

  public void setCurrentDeferredRevenue(@javax.annotation.Nullable BigDecimal currentDeferredRevenue) {
    this.currentDeferredRevenue = currentDeferredRevenue;
  }


  public FundamentalsNREITNODIRECTBalanceSheet currentDeferredTaxesLiabilities(@javax.annotation.Nullable BigDecimal currentDeferredTaxesLiabilities) {
    this.currentDeferredTaxesLiabilities = currentDeferredTaxesLiabilities;
    return this;
  }

  /**
   * &lt;p&gt;{{CurrentDeferredTaxesLiabilities}} means a future tax liability, resulting from temporary differences between book (accounting) value of assets and liabilities and their tax value, or timing differences between the recognition of gains and losses in financial statements and their recognition in a tax computation. Deferred tax liabilities generally arise where tax relief is provided in advance of an accounting expense, or income is accrued but not taxed until received.&lt;/p&gt;
   * @return currentDeferredTaxesLiabilities
   */
  @javax.annotation.Nullable
  public BigDecimal getCurrentDeferredTaxesLiabilities() {
    return currentDeferredTaxesLiabilities;
  }

  public void setCurrentDeferredTaxesLiabilities(@javax.annotation.Nullable BigDecimal currentDeferredTaxesLiabilities) {
    this.currentDeferredTaxesLiabilities = currentDeferredTaxesLiabilities;
  }


  public FundamentalsNREITNODIRECTBalanceSheet debtToEquity(@javax.annotation.Nullable BigDecimal debtToEquity) {
    this.debtToEquity = debtToEquity;
    return this;
  }

  /**
   * The Debt/Equity (D/E) Ratio is calculated by dividing a company’s total liabilities by its shareholder equity. The ratio is used to evaluate a company&#39;s financial leverage.
   * @return debtToEquity
   */
  @javax.annotation.Nullable
  public BigDecimal getDebtToEquity() {
    return debtToEquity;
  }

  public void setDebtToEquity(@javax.annotation.Nullable BigDecimal debtToEquity) {
    this.debtToEquity = debtToEquity;
  }


  public FundamentalsNREITNODIRECTBalanceSheet equityToAsset(@javax.annotation.Nullable BigDecimal equityToAsset) {
    this.equityToAsset = equityToAsset;
    return this;
  }

  /**
   * Equity to Asset ratio is calculated as shareholder&#39;s tangible equity divided by its total asset.
   * @return equityToAsset
   */
  @javax.annotation.Nullable
  public BigDecimal getEquityToAsset() {
    return equityToAsset;
  }

  public void setEquityToAsset(@javax.annotation.Nullable BigDecimal equityToAsset) {
    this.equityToAsset = equityToAsset;
  }


  public FundamentalsNREITNODIRECTBalanceSheet finishedGoods(@javax.annotation.Nullable BigDecimal finishedGoods) {
    this.finishedGoods = finishedGoods;
    return this;
  }

  /**
   * &lt;p&gt;{{FinishedGoods}} are the products in a manufacturer&#39;s inventory that are completed and are waiting to be sold.&lt;/p&gt;
   * @return finishedGoods
   */
  @javax.annotation.Nullable
  public BigDecimal getFinishedGoods() {
    return finishedGoods;
  }

  public void setFinishedGoods(@javax.annotation.Nullable BigDecimal finishedGoods) {
    this.finishedGoods = finishedGoods;
  }


  public FundamentalsNREITNODIRECTBalanceSheet goodWill(@javax.annotation.Nullable BigDecimal goodWill) {
    this.goodWill = goodWill;
    return this;
  }

  /**
   * &lt;p&gt;A {{Goodwill}} is an {{Intangibles}} that arises as a result of the acquisition of one company by another for a premium value. The value of a company&#39;s brand name, solid customer base, good customer relations, good employee relations and any patents or proprietary technology represent {{Goodwill}}. {{Goodwill}} is considered an {{Intangibles}} because it is not a physical asset like buildings or equipment. The {{Goodwill}} account can be found in the assets portion of a company&#39;s balance sheet.&lt;/p&gt;
   * @return goodWill
   */
  @javax.annotation.Nullable
  public BigDecimal getGoodWill() {
    return goodWill;
  }

  public void setGoodWill(@javax.annotation.Nullable BigDecimal goodWill) {
    this.goodWill = goodWill;
  }


  public FundamentalsNREITNODIRECTBalanceSheet grossPpe(@javax.annotation.Nullable BigDecimal grossPpe) {
    this.grossPpe = grossPpe;
    return this;
  }

  /**
   * &lt;p&gt;Property, Plant and Equipment (PPE) are the fixed assets of the companyFixed assets are also known as non-current assets. Property, Plant and Equipment includes assets that will - in the normal course of business - neither be used up in the next year nor will become a part of any product sold to customers. Some of the most common parts of Property, Plant and Equipment are: Land, Buildings (and leasehold improvements), Transportation equipment, Manufacturing equipment, Office equipment, Office furniture. Companies with lots of Property, Plant and Equipment often have special categories. For example, railroad property includes: Track, Ties, Ballast, Bridges, Tunnels, Signals, Locomotives, Freight Cars. There is often a note in the financial statements - found in a company&#39;s 10-K - that will explain the different categories of property a company owns. &lt;br&gt;The market value of Property, Plant and Equipment can differ tremendously from the book value of Property, Plant and Equipment. For example, when Berkshire Hathaway liquidated its textile mills, it had to pay the buyers of the company&#39;s manufacturing equipment to haul the equipment  away. That property, plant, and equipment was literally worth less than zero. On the other hand, some companies own thousands of acres of land. All Property, Plant and Equipment other than land is depreciated. Land is never depreciated. However, land is not marked up to market value either. Under Generally Accepted Accounting Principles (GAAP), land is shown on the balance sheet at cost. &lt;br&gt;The Property, Plant and Equipment line shown on the balance sheet is {{GrossPPE}}. This means it is the cost of the property, plant, and equipment not less accumulated depreciation.&lt;/p&gt;
   * @return grossPpe
   */
  @javax.annotation.Nullable
  public BigDecimal getGrossPpe() {
    return grossPpe;
  }

  public void setGrossPpe(@javax.annotation.Nullable BigDecimal grossPpe) {
    this.grossPpe = grossPpe;
  }


  public FundamentalsNREITNODIRECTBalanceSheet intangibles(@javax.annotation.Nullable BigDecimal intangibles) {
    this.intangibles = intangibles;
    return this;
  }

  /**
   * &lt;p&gt;{{Intangibles}} are defined as identifiable non-monetary assets that cannot be seen, touched or physically measured.  Examples of {{Intangibles}} include trade secrets, copyrights, patents, trademarks. If a company acquires assets at the prices above the book value, it may carry {{Goodwill}} on its balance sheet. {{Goodwill}} reflects the difference between the price the company paid and the book value of the assets. If a company (company A) received a patent through their own work, though it has value, it does not show up on its balance sheet as an intangible asset. However, if company A sells this patent to company B, it will show up on company B&#39;s balance sheet as an {{Intangibles}}. The same applies to brand names, trade secrets etc. For instance, Coca-Cola&#39;s brand is extremely valuable, but the brand does not appear on its balance sheet, because the brand was never acquired.&lt;/p&gt;
   * @return intangibles
   */
  @javax.annotation.Nullable
  public BigDecimal getIntangibles() {
    return intangibles;
  }

  public void setIntangibles(@javax.annotation.Nullable BigDecimal intangibles) {
    this.intangibles = intangibles;
  }


  public FundamentalsNREITNODIRECTBalanceSheet inventoriesAdjustmentsAllowances(@javax.annotation.Nullable BigDecimal inventoriesAdjustmentsAllowances) {
    this.inventoriesAdjustmentsAllowances = inventoriesAdjustmentsAllowances;
    return this;
  }

  /**
   * &lt;p&gt;{{InventoriesAdjustmentsAllowances}} represents certain charges made in the current period in inventory resulting from breakage, spoilage, employee theft and shoplifting, etc.&lt;/p&gt;
   * @return inventoriesAdjustmentsAllowances
   */
  @javax.annotation.Nullable
  public BigDecimal getInventoriesAdjustmentsAllowances() {
    return inventoriesAdjustmentsAllowances;
  }

  public void setInventoriesAdjustmentsAllowances(@javax.annotation.Nullable BigDecimal inventoriesAdjustmentsAllowances) {
    this.inventoriesAdjustmentsAllowances = inventoriesAdjustmentsAllowances;
  }


  public FundamentalsNREITNODIRECTBalanceSheet inventory(@javax.annotation.Nullable BigDecimal inventory) {
    this.inventory = inventory;
    return this;
  }

  /**
   * &lt;p&gt;{{Inventory}} includes the raw materials, work-in-process goods and completely finished goods of a company. It is a portion of a company™s current assets.&lt;/p&gt;
   * @return inventory
   */
  @javax.annotation.Nullable
  public BigDecimal getInventory() {
    return inventory;
  }

  public void setInventory(@javax.annotation.Nullable BigDecimal inventory) {
    this.inventory = inventory;
  }


  public FundamentalsNREITNODIRECTBalanceSheet investmentsAndAdvances(@javax.annotation.Nullable BigDecimal investmentsAndAdvances) {
    this.investmentsAndAdvances = investmentsAndAdvances;
    return this;
  }

  /**
   * &lt;p&gt;{{InvestmentsAndAdvances}} includes all the non-current investments in affiliates, real estate, securities, etc.&lt;/p&gt;
   * @return investmentsAndAdvances
   */
  @javax.annotation.Nullable
  public BigDecimal getInvestmentsAndAdvances() {
    return investmentsAndAdvances;
  }

  public void setInvestmentsAndAdvances(@javax.annotation.Nullable BigDecimal investmentsAndAdvances) {
    this.investmentsAndAdvances = investmentsAndAdvances;
  }


  public FundamentalsNREITNODIRECTBalanceSheet landAndImprovements(@javax.annotation.Nullable BigDecimal landAndImprovements) {
    this.landAndImprovements = landAndImprovements;
    return this;
  }

  /**
   * &lt;p&gt;Land is the surface or crust of the earth, which can be used to support structures, and may be used to grow crops, grass, shrubs, and trees. Land is characterized as having an unlimited life (indefinite). {{LandAndImprovements}} is a long-term asset which indicates the cost of the constructed improvements to land, such as driveways, walkways, lighting, and parking lots.&lt;/p&gt;
   * @return landAndImprovements
   */
  @javax.annotation.Nullable
  public BigDecimal getLandAndImprovements() {
    return landAndImprovements;
  }

  public void setLandAndImprovements(@javax.annotation.Nullable BigDecimal landAndImprovements) {
    this.landAndImprovements = landAndImprovements;
  }


  public FundamentalsNREITNODIRECTBalanceSheet loansReceivable(@javax.annotation.Nullable BigDecimal loansReceivable) {
    this.loansReceivable = loansReceivable;
    return this;
  }

  /**
   * Get loansReceivable
   * @return loansReceivable
   */
  @javax.annotation.Nullable
  public BigDecimal getLoansReceivable() {
    return loansReceivable;
  }

  public void setLoansReceivable(@javax.annotation.Nullable BigDecimal loansReceivable) {
    this.loansReceivable = loansReceivable;
  }


  public FundamentalsNREITNODIRECTBalanceSheet longTermCapitalLeaseObligation(@javax.annotation.Nullable BigDecimal longTermCapitalLeaseObligation) {
    this.longTermCapitalLeaseObligation = longTermCapitalLeaseObligation;
    return this;
  }

  /**
   * &lt;p&gt;{{LongTermCapitalLeaseObligation}} are the amount due for long-term asset lease agreements that are nearly equivalent to asset purchases. Capital lease obligations are installment payments that constitute a payment of principal plus interest for the capital lease. The {{ShortTermCapitalLeaseObligation}} is the portion of a {{LongTermCapitalLeaseObligation}} that is due over the next year.&lt;/p&gt;
   * @return longTermCapitalLeaseObligation
   */
  @javax.annotation.Nullable
  public BigDecimal getLongTermCapitalLeaseObligation() {
    return longTermCapitalLeaseObligation;
  }

  public void setLongTermCapitalLeaseObligation(@javax.annotation.Nullable BigDecimal longTermCapitalLeaseObligation) {
    this.longTermCapitalLeaseObligation = longTermCapitalLeaseObligation;
  }


  public FundamentalsNREITNODIRECTBalanceSheet longTermDebt(@javax.annotation.Nullable BigDecimal longTermDebt) {
    this.longTermDebt = longTermDebt;
    return this;
  }

  /**
   * &lt;p&gt;{{LongTermDebt}} is the sum of the carrying values as of the balance sheet date of all long-term debt, which is debt initially having maturities due after one year or beyond the operating cycle, if longer, but excluding the portions thereof scheduled to be repaid within one year or the normal operating cycle, if longer.&lt;/p&gt;
   * @return longTermDebt
   */
  @javax.annotation.Nullable
  public BigDecimal getLongTermDebt() {
    return longTermDebt;
  }

  public void setLongTermDebt(@javax.annotation.Nullable BigDecimal longTermDebt) {
    this.longTermDebt = longTermDebt;
  }


  public FundamentalsNREITNODIRECTBalanceSheet longTermDebtAndCapitalLeaseObligation(@javax.annotation.Nullable BigDecimal longTermDebtAndCapitalLeaseObligation) {
    this.longTermDebtAndCapitalLeaseObligation = longTermDebtAndCapitalLeaseObligation;
    return this;
  }

  /**
   * &lt;p&gt;{{LongTermDebt}} is the debt due more than 12 months in the future. The debt can be owed to banks or bondholders. Some companies issue bonds to investors and pay interest on the bonds. &lt;br&gt;{{LongTermCapitalLeaseObligation}} represents the total liability for long-term leases lasting over one year. It&#39;s amount equal to the present value (the principal) at the beginning of the lease term less lease payments during the lease term. &lt;br&gt;{{Long-Term_Debt}} can be used to calculate {{ltd2asset}}: {{ltd2asset}} &#x3D; {{Long-Term_Debt}} / {{Total_Assets}}&lt;/p&gt;
   * @return longTermDebtAndCapitalLeaseObligation
   */
  @javax.annotation.Nullable
  public BigDecimal getLongTermDebtAndCapitalLeaseObligation() {
    return longTermDebtAndCapitalLeaseObligation;
  }

  public void setLongTermDebtAndCapitalLeaseObligation(@javax.annotation.Nullable BigDecimal longTermDebtAndCapitalLeaseObligation) {
    this.longTermDebtAndCapitalLeaseObligation = longTermDebtAndCapitalLeaseObligation;
  }


  public FundamentalsNREITNODIRECTBalanceSheet machineryFurnitureEquipment(@javax.annotation.Nullable BigDecimal machineryFurnitureEquipment) {
    this.machineryFurnitureEquipment = machineryFurnitureEquipment;
    return this;
  }

  /**
   * &lt;p&gt;{{MachineryFurnitureEquipment}} represents those fixed assets specifically dealing with tools, equipment and office furniture.&lt;/p&gt;
   * @return machineryFurnitureEquipment
   */
  @javax.annotation.Nullable
  public BigDecimal getMachineryFurnitureEquipment() {
    return machineryFurnitureEquipment;
  }

  public void setMachineryFurnitureEquipment(@javax.annotation.Nullable BigDecimal machineryFurnitureEquipment) {
    this.machineryFurnitureEquipment = machineryFurnitureEquipment;
  }


  public FundamentalsNREITNODIRECTBalanceSheet markeTableSecurities(@javax.annotation.Nullable BigDecimal markeTableSecurities) {
    this.markeTableSecurities = markeTableSecurities;
    return this;
  }

  /**
   * &lt;p&gt;{{MarketableSecurities}} are very liquid securities that can be converted into cash quickly at a reasonable price.&lt;/p&gt;
   * @return markeTableSecurities
   */
  @javax.annotation.Nullable
  public BigDecimal getMarkeTableSecurities() {
    return markeTableSecurities;
  }

  public void setMarkeTableSecurities(@javax.annotation.Nullable BigDecimal markeTableSecurities) {
    this.markeTableSecurities = markeTableSecurities;
  }


  public FundamentalsNREITNODIRECTBalanceSheet minorityInterest(@javax.annotation.Nullable BigDecimal minorityInterest) {
    this.minorityInterest = minorityInterest;
    return this;
  }

  /**
   * &lt;p&gt;{{Minority_interest}} is the carrying amount of the equity interests owned by non-controlling shareholders, partners, or other equity holders in one or more of the entities included in the reporting entity&#39;s consolidated financial statements.&lt;/p&gt;
   * @return minorityInterest
   */
  @javax.annotation.Nullable
  public BigDecimal getMinorityInterest() {
    return minorityInterest;
  }

  public void setMinorityInterest(@javax.annotation.Nullable BigDecimal minorityInterest) {
    this.minorityInterest = minorityInterest;
  }


  public FundamentalsNREITNODIRECTBalanceSheet netPpe(@javax.annotation.Nullable BigDecimal netPpe) {
    this.netPpe = netPpe;
    return this;
  }

  /**
   * &lt;p&gt;{{Net_PPE}} (PPE) are the fixed assets of the companyFixed assets are also known as non-current assets. {{Net_PPE}} includes assets that will - in the normal course of business - neither be used up in the next year nor will become a part of any product sold to customers. Some of the most common parts of property, plant, and equipment are: Land, Buildings (and leasehold improvements), Transportation equipment, Manufacturing equipment, Office equipment, Office furniture. Companies with lots of property, plant, and equipment often have special categories. For example, railroad property includes: Track, Ties, Ballast, Bridges, Tunnels, Signals, Locomotives, Freight Cars. There is often a note in the financial statements - found in a company&#39;s 10-K - that will explain the different categories of property a company owns. &lt;br&gt;The market value of {{Net_PPE}} can differ tremendously from the book value of {{Net_PPE}}. For example, when Berkshire Hathaway liquidated its textile mills, it had to pay the buyers of the company&#39;s manufacturing equipment to haul the equipment  away. That {{Net_PPE}} was literally worth less than zero. On the other hand, some companies own thousands of acres of land. All {{Net_PPE}} other than land is depreciated. Land is never depreciated. However, land is not marked up to market value either. Under Generally Accepted Accounting Principles (GAAP), land is shown on the balance sheet at cost. &lt;br&gt;The {{Net_PPE}} line shown on the balance sheet is usually net {{Net_PPE}}. This means it is the cost of the {{Net_PPE}} less accumulated depreciation.&lt;/p&gt;
   * @return netPpe
   */
  @javax.annotation.Nullable
  public BigDecimal getNetPpe() {
    return netPpe;
  }

  public void setNetPpe(@javax.annotation.Nullable BigDecimal netPpe) {
    this.netPpe = netPpe;
  }


  public FundamentalsNREITNODIRECTBalanceSheet nonCurrentDeferredIncomeTax(@javax.annotation.Nullable BigDecimal nonCurrentDeferredIncomeTax) {
    this.nonCurrentDeferredIncomeTax = nonCurrentDeferredIncomeTax;
    return this;
  }

  /**
   * The NonCurrent Deferred Income Tax represents the non-current portion of deferred income taxes, which is the difference in income recognition between tax laws and the accounting methods.
   * @return nonCurrentDeferredIncomeTax
   */
  @javax.annotation.Nullable
  public BigDecimal getNonCurrentDeferredIncomeTax() {
    return nonCurrentDeferredIncomeTax;
  }

  public void setNonCurrentDeferredIncomeTax(@javax.annotation.Nullable BigDecimal nonCurrentDeferredIncomeTax) {
    this.nonCurrentDeferredIncomeTax = nonCurrentDeferredIncomeTax;
  }


  public FundamentalsNREITNODIRECTBalanceSheet nonCurrentDeferredLiabilities(@javax.annotation.Nullable BigDecimal nonCurrentDeferredLiabilities) {
    this.nonCurrentDeferredLiabilities = nonCurrentDeferredLiabilities;
    return this;
  }

  /**
   * &lt;p&gt;{{NonCurrentDeferredLiabilities}} represents the non-current portion of obligations, which is a liability that usually would have been paid but is now pas due.&lt;/p&gt;
   * @return nonCurrentDeferredLiabilities
   */
  @javax.annotation.Nullable
  public BigDecimal getNonCurrentDeferredLiabilities() {
    return nonCurrentDeferredLiabilities;
  }

  public void setNonCurrentDeferredLiabilities(@javax.annotation.Nullable BigDecimal nonCurrentDeferredLiabilities) {
    this.nonCurrentDeferredLiabilities = nonCurrentDeferredLiabilities;
  }


  public FundamentalsNREITNODIRECTBalanceSheet notesReceivable(@javax.annotation.Nullable BigDecimal notesReceivable) {
    this.notesReceivable = notesReceivable;
    return this;
  }

  /**
   * &lt;p&gt;{{NotesReceivable}} is an unconditional promise to receive a definite sum of money at a future date(s) within one year of the balance sheet date or the normal operating cycle, whichever is longer.&lt;/p&gt;
   * @return notesReceivable
   */
  @javax.annotation.Nullable
  public BigDecimal getNotesReceivable() {
    return notesReceivable;
  }

  public void setNotesReceivable(@javax.annotation.Nullable BigDecimal notesReceivable) {
    this.notesReceivable = notesReceivable;
  }


  public FundamentalsNREITNODIRECTBalanceSheet otherCurrentAssets(@javax.annotation.Nullable BigDecimal otherCurrentAssets) {
    this.otherCurrentAssets = otherCurrentAssets;
    return this;
  }

  /**
   * &lt;p&gt;Technically, {{Other_Current_Assets}} line may include any asset that will be used up within the next 12 months. However, {{Other_Current_Assets}} never include assets that are listed elsewhere in the current assets section of the balance sheet. For this reason, {{Other_Current_Assets}} are almost never: Cash, Trade Receivables, {{Inventory}}. The assets grouped under {{Other_Current_Assets}} are most commonly: Prepaid Expenses, Tax Assets, Non-Trade Receivables, Other (too numerous to list). Some companies can and do choose to report each of these items separately. {{Other_Current_Assets}} may be made up largely of Prepaid Expenses - unless these are listed on a separate line of the balance sheet. &lt;br&gt;There are a variety of {{Other_Current_Assets}} like non-trade receivables which are simply too numerous to list. If a company is following correct reporting procedures, it should not lump items that are different from one another and yet individually important to the company together under the line {{Other_Current_Assets}}. &lt;br&gt;At most companies, {{Other_Current_Assets}} are a small and unimportant part of the total balance sheet.&lt;/p&gt;
   * @return otherCurrentAssets
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherCurrentAssets() {
    return otherCurrentAssets;
  }

  public void setOtherCurrentAssets(@javax.annotation.Nullable BigDecimal otherCurrentAssets) {
    this.otherCurrentAssets = otherCurrentAssets;
  }


  public FundamentalsNREITNODIRECTBalanceSheet otherCurrentLiabilities(@javax.annotation.Nullable BigDecimal otherCurrentLiabilities) {
    this.otherCurrentLiabilities = otherCurrentLiabilities;
    return this;
  }

  /**
   * &lt;p&gt;The liability a company needs to pay in the next 12 months, but not assigned to {{AccountsPayable}} or Debt. For instance, Wal-Mart (WMT) has accrued wages, salaries, valuation, bonuses, insurance liabilities, accrued tax etc. These are all included in {{Other_Current_Liab}}.&lt;/p&gt;
   * @return otherCurrentLiabilities
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherCurrentLiabilities() {
    return otherCurrentLiabilities;
  }

  public void setOtherCurrentLiabilities(@javax.annotation.Nullable BigDecimal otherCurrentLiabilities) {
    this.otherCurrentLiabilities = otherCurrentLiabilities;
  }


  public FundamentalsNREITNODIRECTBalanceSheet otherCurrentPayables(@javax.annotation.Nullable BigDecimal otherCurrentPayables) {
    this.otherCurrentPayables = otherCurrentPayables;
    return this;
  }

  /**
   * &lt;p&gt;{{OtherCurrentPayables}} is the payables owed and expected to be paid within one year or one operating cycle that not otherwise classified. It includes dividends payable and all other current payables.&lt;/p&gt;
   * @return otherCurrentPayables
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherCurrentPayables() {
    return otherCurrentPayables;
  }

  public void setOtherCurrentPayables(@javax.annotation.Nullable BigDecimal otherCurrentPayables) {
    this.otherCurrentPayables = otherCurrentPayables;
  }


  public FundamentalsNREITNODIRECTBalanceSheet otherCurrentReceivables(@javax.annotation.Nullable BigDecimal otherCurrentReceivables) {
    this.otherCurrentReceivables = otherCurrentReceivables;
    return this;
  }

  /**
   * &lt;p&gt;{{OtherCurrentReceivables}} is other current receivables of that not otherwise classified. GuruFocus uses a standardized financial statement format for all companies. GuruFocus lists {{Accts_Rec}}, {{NotesReceivable}}, {{LoansReceivable}} and {{OtherCurrentReceivables}} under the \&quot;{{TotalReceivables}}\&quot; section.&lt;/p&gt;
   * @return otherCurrentReceivables
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherCurrentReceivables() {
    return otherCurrentReceivables;
  }

  public void setOtherCurrentReceivables(@javax.annotation.Nullable BigDecimal otherCurrentReceivables) {
    this.otherCurrentReceivables = otherCurrentReceivables;
  }


  public FundamentalsNREITNODIRECTBalanceSheet otherEquity(@javax.annotation.Nullable BigDecimal otherEquity) {
    this.otherEquity = otherEquity;
    return this;
  }

  /**
   * &lt;p&gt;{{OtherEquity}} is instruments issued by the company that cannot be identified by other specific items in the Equity section. GuruFocus lists following items in \&quot;{{Total_Equity}}\&quot; section: {{CommonStock}}, {{Preferred_Stock}}, {{Retained_Earnings}}, {{accumulated_other_comprehensive_income}}, {{AdditionalPaidInCapital}}, {{Treasury_Stock}}, {{OtherEquity}}.&lt;/p&gt;
   * @return otherEquity
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherEquity() {
    return otherEquity;
  }

  public void setOtherEquity(@javax.annotation.Nullable BigDecimal otherEquity) {
    this.otherEquity = otherEquity;
  }


  public FundamentalsNREITNODIRECTBalanceSheet otherGrossPpe(@javax.annotation.Nullable BigDecimal otherGrossPpe) {
    this.otherGrossPpe = otherGrossPpe;
    return this;
  }

  /**
   * &lt;p&gt;{{OtherGrossPPE}} is property, plant and equipment recorded on a company&#39;s balance sheet that not otherwise classified. GuruFocus lists {{LandAndImprovements}}, {{BuildingsAndImprovements}}, {{MachineryFurnitureEquipment}}, {{ConstructionInProgress}} and {{OtherGrossPPE}} under the \&quot;{{GrossPPE}}\&quot; section.&lt;/p&gt;
   * @return otherGrossPpe
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherGrossPpe() {
    return otherGrossPpe;
  }

  public void setOtherGrossPpe(@javax.annotation.Nullable BigDecimal otherGrossPpe) {
    this.otherGrossPpe = otherGrossPpe;
  }


  public FundamentalsNREITNODIRECTBalanceSheet otherInventories(@javax.annotation.Nullable BigDecimal otherInventories) {
    this.otherInventories = otherInventories;
    return this;
  }

  /**
   * &lt;p&gt;Other inventories including goods for resale, stocks in transit, consignment stocks, etc.&lt;/p&gt;
   * @return otherInventories
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherInventories() {
    return otherInventories;
  }

  public void setOtherInventories(@javax.annotation.Nullable BigDecimal otherInventories) {
    this.otherInventories = otherInventories;
  }


  public FundamentalsNREITNODIRECTBalanceSheet otherLongTermAssets(@javax.annotation.Nullable BigDecimal otherLongTermAssets) {
    this.otherLongTermAssets = otherLongTermAssets;
    return this;
  }

  /**
   * &lt;p&gt;GuruFocus lists {{InvestmentsAndAdvances}}, {{Intangibles}}, {{Net_PPE}} and {{Other_Long-Term_Assets}} under the \&quot;{{TotalNonCurrentAssets}}\&quot; section. &lt;br&gt;{{Other_Long-Term_Assets}} includes following items: Investment in Properties, Non-current Accounts Receivable, Non-current Note Receivables, Non-current Deferred Assets, Non-current Prepaid Assets, Defined Pension Benefit, Other (too numerous to list). Some companies can do choose to report each of these items separately. Yet, there are a variety of {{Other_Long-Term_Assets}} which are simply too numerous to list.&lt;/p&gt;
   * @return otherLongTermAssets
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherLongTermAssets() {
    return otherLongTermAssets;
  }

  public void setOtherLongTermAssets(@javax.annotation.Nullable BigDecimal otherLongTermAssets) {
    this.otherLongTermAssets = otherLongTermAssets;
  }


  public FundamentalsNREITNODIRECTBalanceSheet otherLongTermLiabilities(@javax.annotation.Nullable BigDecimal otherLongTermLiabilities) {
    this.otherLongTermLiabilities = otherLongTermLiabilities;
    return this;
  }

  /**
   * &lt;p&gt;{{Other_Long-Term_Liab}} are the other liabilities on the balance sheet that do not need to be repaid within the next 12 months, but still need to be repaid over time.&lt;/p&gt;
   * @return otherLongTermLiabilities
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherLongTermLiabilities() {
    return otherLongTermLiabilities;
  }

  public void setOtherLongTermLiabilities(@javax.annotation.Nullable BigDecimal otherLongTermLiabilities) {
    this.otherLongTermLiabilities = otherLongTermLiabilities;
  }


  public FundamentalsNREITNODIRECTBalanceSheet pensionAndRetirementBenefit(@javax.annotation.Nullable BigDecimal pensionAndRetirementBenefit) {
    this.pensionAndRetirementBenefit = pensionAndRetirementBenefit;
    return this;
  }

  /**
   * The total about of pension and retirement benefits
   * @return pensionAndRetirementBenefit
   */
  @javax.annotation.Nullable
  public BigDecimal getPensionAndRetirementBenefit() {
    return pensionAndRetirementBenefit;
  }

  public void setPensionAndRetirementBenefit(@javax.annotation.Nullable BigDecimal pensionAndRetirementBenefit) {
    this.pensionAndRetirementBenefit = pensionAndRetirementBenefit;
  }


  public FundamentalsNREITNODIRECTBalanceSheet preferredStock(@javax.annotation.Nullable BigDecimal preferredStock) {
    this.preferredStock = preferredStock;
    return this;
  }

  /**
   * &lt;p&gt;{{Preferred_Stock}} is a special equity security that has properties of both equity and debt. It is generally considered a hybrid instrument. {{Preferred_Stock}} is senior to {{CommonStock}}, but is subordinate to bonds in terms of claim or rights to their share of the assets of the company. {{Preferred_Stock}} has priority over {{CommonStock}} in the payment of dividends and any payments received when a company liquidates. &lt;br&gt;{{Preferred_Stock}} comes in many forms. It can be: Convertible or Non-Convertible, Cumulative or Non-Cumulative, Voting or Non-Voting, Callable or Non-Callable, Maturity Date or No Maturity Date. &lt;br&gt;A {{Preferred_Stock}} without a maturity date is called a perpetual preferred stock. These are relatively rare. A good example of perpetual {{Preferred_Stock}} is the many series of Public Storage (PSA) preferred shares that trade on the New York Stock Exchange. &lt;br&gt;Before investing in preferred stock, it is important to know which of the above groups the stock belongs to. Is it convertible or non-convertible? Are dividends cumulative or non-cumulative? It is also critical that an investor knows what bonds the company has in front of the {{Preferred_Stock}}. Bondholders get paid first. So the decision to buy a {{Preferred_Stock}} can be similar to the decision to buy a bond. But, remember, the {{Preferred_Stock}} of a company with bonds is junior to those bonds.  &lt;br&gt;Unless a {{Preferred_Stock}} is convertible, the upside in a preferred stock investment is more limited than in a {{CommonStock}} investment. If a company doubles its earnings, it is usually under no more obligation to double the dividends paid to preferred shareholders than it is to double the interest paid to its bankers and bondholders.So {{Preferred_Stock}} is very different from {{CommonStock}}.&lt;/p&gt;
   * @return preferredStock
   */
  @javax.annotation.Nullable
  public BigDecimal getPreferredStock() {
    return preferredStock;
  }

  public void setPreferredStock(@javax.annotation.Nullable BigDecimal preferredStock) {
    this.preferredStock = preferredStock;
  }


  public FundamentalsNREITNODIRECTBalanceSheet rawMaterials(@javax.annotation.Nullable BigDecimal rawMaterials) {
    this.rawMaterials = rawMaterials;
    return this;
  }

  /**
   * &lt;p&gt;{{RawMaterials}} are materials and components scheduled for use in making a product.&lt;/p&gt;
   * @return rawMaterials
   */
  @javax.annotation.Nullable
  public BigDecimal getRawMaterials() {
    return rawMaterials;
  }

  public void setRawMaterials(@javax.annotation.Nullable BigDecimal rawMaterials) {
    this.rawMaterials = rawMaterials;
  }


  public FundamentalsNREITNODIRECTBalanceSheet retainedEarnings(@javax.annotation.Nullable BigDecimal retainedEarnings) {
    this.retainedEarnings = retainedEarnings;
    return this;
  }

  /**
   * &lt;p&gt;{{Retained_Earnings}} is the accumulated portion of {{Net_Income}} that is not distributed to shareholders. Because the {{Net_Income}} was not distributed to shareholders, shareholders&#39; equity is increased by the same amount. Of course, if a company loses, it is called retained losses, or accumulated losses. Historically profitable companies sometimes have negative {{Retained_Earnings}}. This is because they have cumulatively paid out more to shareholders than they reported in profits. If a company has negative {{Retained_Earnings}}, investors should check the 10-year financial results. They should not assume that negative {{Retained_Earnings}} prove a company has generally lost money in the past. Of course, many companies with negative {{Retained_Earnings}} have indeed lost money in the past.&lt;/p&gt;
   * @return retainedEarnings
   */
  @javax.annotation.Nullable
  public BigDecimal getRetainedEarnings() {
    return retainedEarnings;
  }

  public void setRetainedEarnings(@javax.annotation.Nullable BigDecimal retainedEarnings) {
    this.retainedEarnings = retainedEarnings;
  }


  public FundamentalsNREITNODIRECTBalanceSheet shortTermCapitalLeaseObligation(@javax.annotation.Nullable BigDecimal shortTermCapitalLeaseObligation) {
    this.shortTermCapitalLeaseObligation = shortTermCapitalLeaseObligation;
    return this;
  }

  /**
   * Get shortTermCapitalLeaseObligation
   * @return shortTermCapitalLeaseObligation
   */
  @javax.annotation.Nullable
  public BigDecimal getShortTermCapitalLeaseObligation() {
    return shortTermCapitalLeaseObligation;
  }

  public void setShortTermCapitalLeaseObligation(@javax.annotation.Nullable BigDecimal shortTermCapitalLeaseObligation) {
    this.shortTermCapitalLeaseObligation = shortTermCapitalLeaseObligation;
  }


  public FundamentalsNREITNODIRECTBalanceSheet shortTermDebt(@javax.annotation.Nullable BigDecimal shortTermDebt) {
    this.shortTermDebt = shortTermDebt;
    return this;
  }

  /**
   * Get shortTermDebt
   * @return shortTermDebt
   */
  @javax.annotation.Nullable
  public BigDecimal getShortTermDebt() {
    return shortTermDebt;
  }

  public void setShortTermDebt(@javax.annotation.Nullable BigDecimal shortTermDebt) {
    this.shortTermDebt = shortTermDebt;
  }


  public FundamentalsNREITNODIRECTBalanceSheet shortTermDebtAndCapitalLeaseObligation(@javax.annotation.Nullable BigDecimal shortTermDebtAndCapitalLeaseObligation) {
    this.shortTermDebtAndCapitalLeaseObligation = shortTermDebtAndCapitalLeaseObligation;
    return this;
  }

  /**
   * &lt;p&gt;{{Short-Term_Debt}} is the portion of a company&#39;s debt and capital lease obligation that need to be paid within the next 12 months. It equals {{ShortTermDebt_without_lease}} plus {{ShortTermCapitalLeaseObligation}}. This gives investors an idea of how much money the company needs to pay down for the principle of its debt.&lt;/p&gt;
   * @return shortTermDebtAndCapitalLeaseObligation
   */
  @javax.annotation.Nullable
  public BigDecimal getShortTermDebtAndCapitalLeaseObligation() {
    return shortTermDebtAndCapitalLeaseObligation;
  }

  public void setShortTermDebtAndCapitalLeaseObligation(@javax.annotation.Nullable BigDecimal shortTermDebtAndCapitalLeaseObligation) {
    this.shortTermDebtAndCapitalLeaseObligation = shortTermDebtAndCapitalLeaseObligation;
  }


  public FundamentalsNREITNODIRECTBalanceSheet totalAssets(@javax.annotation.Nullable BigDecimal totalAssets) {
    this.totalAssets = totalAssets;
    return this;
  }

  /**
   * &lt;p&gt;{{Total_Assets}} are all the assets a company owns. From the capital sources of the assets, some of the assets are funded through shareholder&#39;s paid in capital and {{Retained_Earnings}} of the business. Others are funded through borrowed money. &lt;br&gt;Therefore, total assets can be calculated as: {{Total_Assets}} &#x3D; {{Total_Current_Assets}} + {{TotalNonCurrentAssets}} &#x3D; Total Shareholder&#39;s Equity + {{Total_Liabilities}} &lt;br&gt;Total Assets is connected with Return on Assets by {{ROA}} &#x3D; {{Net_Income}} / {{Total_Assets}} &lt;br&gt; Total Assets is linked to {{Revenue}} through {{turnover}}: {{turnover}}  &#x3D; {{Revenue}} / {{Total_Assets}} &lt;br&gt;Therefore, if a company grows its {{Total_Assets}} faster than its {{Revenue}}, the {{turnover}} will decline. This might be a warning sign for the business.&lt;/p&gt;
   * @return totalAssets
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalAssets() {
    return totalAssets;
  }

  public void setTotalAssets(@javax.annotation.Nullable BigDecimal totalAssets) {
    this.totalAssets = totalAssets;
  }


  public FundamentalsNREITNODIRECTBalanceSheet totalCurrentAssets(@javax.annotation.Nullable BigDecimal totalCurrentAssets) {
    this.totalCurrentAssets = totalCurrentAssets;
    return this;
  }

  /**
   * &lt;p&gt;{{Total_Current_Assets}} are the asset that can be converted to cash or used to pay current liabilities within 12 months. &lt;br&gt;{{Total_Current_Assets}} &#x3D; {{CashAndCashEquivalents}} + {{Accts_Rec}} + {{Inventory}} + {{Other_Current_Assets}} &lt;br&gt;{{Total_Current_Assets}} is linked to the {{current_ratio}}, which is calculated as {{Total_Current_Assets}} &#x3D; {{Total_Current_Assets}} / {{Total_Current_Liabilities}} &lt;br&gt;It is frequently used as an indicator of a company\\&#39;s liquidity, its ability to meet short-term obligations. &lt;br&gt;{{Total_Current_Assets}} is also linked to {{NCAV}}, {{NCAV}} &#x3D; {{Total_Current_Assets}} - {{Total_Current_Liabilities}}.&lt;/p&gt;
   * @return totalCurrentAssets
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalCurrentAssets() {
    return totalCurrentAssets;
  }

  public void setTotalCurrentAssets(@javax.annotation.Nullable BigDecimal totalCurrentAssets) {
    this.totalCurrentAssets = totalCurrentAssets;
  }


  public FundamentalsNREITNODIRECTBalanceSheet totalCurrentLiabilities(@javax.annotation.Nullable BigDecimal totalCurrentLiabilities) {
    this.totalCurrentLiabilities = totalCurrentLiabilities;
    return this;
  }

  /**
   * &lt;p&gt;{{Total_Current_Liabilities}} is the total amount of liabilities that the company needs to pay over the next 12 months. &lt;br&gt;{{Total_Current_Liabilities}} &#x3D; {{AccountsPayable}} + Current Portion of {{LongTermDebt}} + {{Other_Current_Liab}} &lt;br&gt;The increase of {{Total_Current_Liabilities}} of a company is not necessarily a bad thing. This may conserve the company&#39;s cash and contribute positively to cash flow. {{Total_Current_Liabilities}} is linked to {{Total_Current_Assets}} through {{NCAV}} and {{current_ratio}}. The {{current_ratio}} is equal to dividing {{Total_Current_Assets}} by {{Total_Current_Liabilities}}. It is frequently used as an indicator of a company&#39;s liquidity, its ability to meet short-term obligations. &lt;br&gt;{{Total_Current_Liabilities}} is also linked to {{NCAV}}, {{NCAV}} is calculated as {{Total_Current_Assets}} minus {{Total_Current_Liabilities}}.&lt;/p&gt;
   * @return totalCurrentLiabilities
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalCurrentLiabilities() {
    return totalCurrentLiabilities;
  }

  public void setTotalCurrentLiabilities(@javax.annotation.Nullable BigDecimal totalCurrentLiabilities) {
    this.totalCurrentLiabilities = totalCurrentLiabilities;
  }


  public FundamentalsNREITNODIRECTBalanceSheet totalEquity(@javax.annotation.Nullable BigDecimal totalEquity) {
    this.totalEquity = totalEquity;
    return this;
  }

  /**
   * &lt;p&gt;{{TotalEquityGrossMinorityInterest}} is residual interest, including minority interest, that remains in the assets of the enterprise after deducting its liabilities. Equity is increased by owners’ investments and by comprehensive income, and it is reduced by distributions to the owners.&lt;/p&gt;
   * @return totalEquity
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalEquity() {
    return totalEquity;
  }

  public void setTotalEquity(@javax.annotation.Nullable BigDecimal totalEquity) {
    this.totalEquity = totalEquity;
  }


  public FundamentalsNREITNODIRECTBalanceSheet totalLiabilities(@javax.annotation.Nullable BigDecimal totalLiabilities) {
    this.totalLiabilities = totalLiabilities;
    return this;
  }

  /**
   * &lt;p&gt;{{Total_Liabilities}} &#x3D; {{Total_Current_Liabilities}} + {{TotalNonCurrentLiabilitiesNetMinorityInterest}} &#x3D; {{Total_Current_Liabilities}} + {{Long-Term_Debt}} + {{ther_Long-Term_Liab}} &lt;br&gt;{{Total_Liabilities}} &#x3D; {{Total_Assets}} - {{TotalEquityGrossMinorityInterest}} &lt;br&gt;{{Total_Liabilities}} are the liabilities that the company has to pay others. It is a part of the balance sheet of a company that shareholders do not own, and would be obligated to pay back if the company liquidated.&lt;/p&gt;
   * @return totalLiabilities
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalLiabilities() {
    return totalLiabilities;
  }

  public void setTotalLiabilities(@javax.annotation.Nullable BigDecimal totalLiabilities) {
    this.totalLiabilities = totalLiabilities;
  }


  public FundamentalsNREITNODIRECTBalanceSheet totalNonCurrentAssets(@javax.annotation.Nullable BigDecimal totalNonCurrentAssets) {
    this.totalNonCurrentAssets = totalNonCurrentAssets;
    return this;
  }

  /**
   * Get totalNonCurrentAssets
   * @return totalNonCurrentAssets
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalNonCurrentAssets() {
    return totalNonCurrentAssets;
  }

  public void setTotalNonCurrentAssets(@javax.annotation.Nullable BigDecimal totalNonCurrentAssets) {
    this.totalNonCurrentAssets = totalNonCurrentAssets;
  }


  public FundamentalsNREITNODIRECTBalanceSheet totalNonCurrentLiabilitiesNetMinorityInterest(@javax.annotation.Nullable BigDecimal totalNonCurrentLiabilitiesNetMinorityInterest) {
    this.totalNonCurrentLiabilitiesNetMinorityInterest = totalNonCurrentLiabilitiesNetMinorityInterest;
    return this;
  }

  /**
   * Get totalNonCurrentLiabilitiesNetMinorityInterest
   * @return totalNonCurrentLiabilitiesNetMinorityInterest
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalNonCurrentLiabilitiesNetMinorityInterest() {
    return totalNonCurrentLiabilitiesNetMinorityInterest;
  }

  public void setTotalNonCurrentLiabilitiesNetMinorityInterest(@javax.annotation.Nullable BigDecimal totalNonCurrentLiabilitiesNetMinorityInterest) {
    this.totalNonCurrentLiabilitiesNetMinorityInterest = totalNonCurrentLiabilitiesNetMinorityInterest;
  }


  public FundamentalsNREITNODIRECTBalanceSheet totalReceivables(@javax.annotation.Nullable BigDecimal totalReceivables) {
    this.totalReceivables = totalReceivables;
    return this;
  }

  /**
   * &lt;p&gt;{{TotalReceivables}} is the sum of all receivables owed by customers and affiliates within one year, including {{Accts_Rec}}, {{NotesReceivable}}, {{LoansReceivable}},{{OtherCurrentReceivables}}.&lt;/p&gt;
   * @return totalReceivables
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalReceivables() {
    return totalReceivables;
  }

  public void setTotalReceivables(@javax.annotation.Nullable BigDecimal totalReceivables) {
    this.totalReceivables = totalReceivables;
  }


  public FundamentalsNREITNODIRECTBalanceSheet totalStockholdersEquity(@javax.annotation.Nullable BigDecimal totalStockholdersEquity) {
    this.totalStockholdersEquity = totalStockholdersEquity;
    return this;
  }

  /**
   * &lt;p&gt;{{Total_Equity}} refers to the net assets owned by shareholders. &lt;br&gt;{{Total_Equity}} &#x3D; {{Preferred_Stock}} + {{CommonStock}} + Capital Surplus + {{Retained_Earnings}} &lt;br&gt;{{Total_Equity}} and {{Total_Liabilities}} are the two components for {{Total_Assets}}: &lt;br&gt;Total Assets &#x3D; Total Shareholder&#39;s Equity + {{Total_Liabilities}}  &#x3D; {{Total_Current_Assets}} + {{TotalNonCurrentAssets}} &lt;br&gt;{{Total_Equity}} is used to calculate {{Book_Value_Per_Share}}: {{Book_Value_Per_Share}} &#x3D; ({{Total_Equity}} - {{Preferred_Stock}})/ {{BS_share}}. &lt;br&gt;The ratio of a company&#39;s debt over equity can be used to measure how leveraged this company is: {{deb2equity}} &#x3D; ({{Long-Term_Debt}} + {{Short-Term_Debt}})/{{Total_Equity}}.&lt;/p&gt;
   * @return totalStockholdersEquity
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalStockholdersEquity() {
    return totalStockholdersEquity;
  }

  public void setTotalStockholdersEquity(@javax.annotation.Nullable BigDecimal totalStockholdersEquity) {
    this.totalStockholdersEquity = totalStockholdersEquity;
  }


  public FundamentalsNREITNODIRECTBalanceSheet totalTaxPayable(@javax.annotation.Nullable BigDecimal totalTaxPayable) {
    this.totalTaxPayable = totalTaxPayable;
    return this;
  }

  /**
   * &lt;p&gt;{{TotalTaxPayable}} is the taxes liability owed to federal, state, and local tax authorities. It is the carrying value as of the balance sheet date of obligations incurred and payable for statutory income, sales, use, payroll, excise, real, property and other taxes.&lt;/p&gt;
   * @return totalTaxPayable
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalTaxPayable() {
    return totalTaxPayable;
  }

  public void setTotalTaxPayable(@javax.annotation.Nullable BigDecimal totalTaxPayable) {
    this.totalTaxPayable = totalTaxPayable;
  }


  public FundamentalsNREITNODIRECTBalanceSheet treasuryStock(@javax.annotation.Nullable BigDecimal treasuryStock) {
    this.treasuryStock = treasuryStock;
    return this;
  }

  /**
   * &lt;p&gt;{{Treasury_Stock}} is the portion of shares that a company keeps in their own treasury. {{Treasury_Stock}} may have come from a repurchase or buyback from shareholders; or it may have never been issued to the public in the first place. These shares don&#39;t pay dividends, have no voting rights, and should not be included in shares outstanding calculations.&lt;/p&gt;
   * @return treasuryStock
   */
  @javax.annotation.Nullable
  public BigDecimal getTreasuryStock() {
    return treasuryStock;
  }

  public void setTreasuryStock(@javax.annotation.Nullable BigDecimal treasuryStock) {
    this.treasuryStock = treasuryStock;
  }


  public FundamentalsNREITNODIRECTBalanceSheet workInProcess(@javax.annotation.Nullable BigDecimal workInProcess) {
    this.workInProcess = workInProcess;
    return this;
  }

  /**
   * &lt;p&gt;That part of a manufacturer&#39;s inventory that is in the production process and has not yet been completed and transferred to the finished goods inventory. This account contains the cost of the direct material, direct labor, and factory overhead placed into the products on the factory floor. A manufacturer must disclose in its financial statements the cost of its work-in-process as well as the cost of finished goods and materials on hand.&lt;/p&gt;
   * @return workInProcess
   */
  @javax.annotation.Nullable
  public BigDecimal getWorkInProcess() {
    return workInProcess;
  }

  public void setWorkInProcess(@javax.annotation.Nullable BigDecimal workInProcess) {
    this.workInProcess = workInProcess;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FundamentalsNREITNODIRECTBalanceSheet fundamentalsNREITNODIRECTBalanceSheet = (FundamentalsNREITNODIRECTBalanceSheet) o;
    return Objects.equals(this.accountsPayable, fundamentalsNREITNODIRECTBalanceSheet.accountsPayable) &&
        Objects.equals(this.accountsPayableAccruedExpense, fundamentalsNREITNODIRECTBalanceSheet.accountsPayableAccruedExpense) &&
        Objects.equals(this.accountsReceivable, fundamentalsNREITNODIRECTBalanceSheet.accountsReceivable) &&
        Objects.equals(this.accumulatedDepreciation, fundamentalsNREITNODIRECTBalanceSheet.accumulatedDepreciation) &&
        Objects.equals(this.accumulatedOtherComprehensiveIncome, fundamentalsNREITNODIRECTBalanceSheet.accumulatedOtherComprehensiveIncome) &&
        Objects.equals(this.additionalPaidInCapital, fundamentalsNREITNODIRECTBalanceSheet.additionalPaidInCapital) &&
        Objects.equals(this.bsCurrentDeferredLiabilities, fundamentalsNREITNODIRECTBalanceSheet.bsCurrentDeferredLiabilities) &&
        Objects.equals(this.buildingsAndImprovements, fundamentalsNREITNODIRECTBalanceSheet.buildingsAndImprovements) &&
        Objects.equals(this.cashAndCashEquivalents, fundamentalsNREITNODIRECTBalanceSheet.cashAndCashEquivalents) &&
        Objects.equals(this.cashEquivalentsMarketableSecurities, fundamentalsNREITNODIRECTBalanceSheet.cashEquivalentsMarketableSecurities) &&
        Objects.equals(this.commonStock, fundamentalsNREITNODIRECTBalanceSheet.commonStock) &&
        Objects.equals(this.constructionInProgress, fundamentalsNREITNODIRECTBalanceSheet.constructionInProgress) &&
        Objects.equals(this.currentAccruedExpenses, fundamentalsNREITNODIRECTBalanceSheet.currentAccruedExpenses) &&
        Objects.equals(this.currentDeferredRevenue, fundamentalsNREITNODIRECTBalanceSheet.currentDeferredRevenue) &&
        Objects.equals(this.currentDeferredTaxesLiabilities, fundamentalsNREITNODIRECTBalanceSheet.currentDeferredTaxesLiabilities) &&
        Objects.equals(this.debtToEquity, fundamentalsNREITNODIRECTBalanceSheet.debtToEquity) &&
        Objects.equals(this.equityToAsset, fundamentalsNREITNODIRECTBalanceSheet.equityToAsset) &&
        Objects.equals(this.finishedGoods, fundamentalsNREITNODIRECTBalanceSheet.finishedGoods) &&
        Objects.equals(this.goodWill, fundamentalsNREITNODIRECTBalanceSheet.goodWill) &&
        Objects.equals(this.grossPpe, fundamentalsNREITNODIRECTBalanceSheet.grossPpe) &&
        Objects.equals(this.intangibles, fundamentalsNREITNODIRECTBalanceSheet.intangibles) &&
        Objects.equals(this.inventoriesAdjustmentsAllowances, fundamentalsNREITNODIRECTBalanceSheet.inventoriesAdjustmentsAllowances) &&
        Objects.equals(this.inventory, fundamentalsNREITNODIRECTBalanceSheet.inventory) &&
        Objects.equals(this.investmentsAndAdvances, fundamentalsNREITNODIRECTBalanceSheet.investmentsAndAdvances) &&
        Objects.equals(this.landAndImprovements, fundamentalsNREITNODIRECTBalanceSheet.landAndImprovements) &&
        Objects.equals(this.loansReceivable, fundamentalsNREITNODIRECTBalanceSheet.loansReceivable) &&
        Objects.equals(this.longTermCapitalLeaseObligation, fundamentalsNREITNODIRECTBalanceSheet.longTermCapitalLeaseObligation) &&
        Objects.equals(this.longTermDebt, fundamentalsNREITNODIRECTBalanceSheet.longTermDebt) &&
        Objects.equals(this.longTermDebtAndCapitalLeaseObligation, fundamentalsNREITNODIRECTBalanceSheet.longTermDebtAndCapitalLeaseObligation) &&
        Objects.equals(this.machineryFurnitureEquipment, fundamentalsNREITNODIRECTBalanceSheet.machineryFurnitureEquipment) &&
        Objects.equals(this.markeTableSecurities, fundamentalsNREITNODIRECTBalanceSheet.markeTableSecurities) &&
        Objects.equals(this.minorityInterest, fundamentalsNREITNODIRECTBalanceSheet.minorityInterest) &&
        Objects.equals(this.netPpe, fundamentalsNREITNODIRECTBalanceSheet.netPpe) &&
        Objects.equals(this.nonCurrentDeferredIncomeTax, fundamentalsNREITNODIRECTBalanceSheet.nonCurrentDeferredIncomeTax) &&
        Objects.equals(this.nonCurrentDeferredLiabilities, fundamentalsNREITNODIRECTBalanceSheet.nonCurrentDeferredLiabilities) &&
        Objects.equals(this.notesReceivable, fundamentalsNREITNODIRECTBalanceSheet.notesReceivable) &&
        Objects.equals(this.otherCurrentAssets, fundamentalsNREITNODIRECTBalanceSheet.otherCurrentAssets) &&
        Objects.equals(this.otherCurrentLiabilities, fundamentalsNREITNODIRECTBalanceSheet.otherCurrentLiabilities) &&
        Objects.equals(this.otherCurrentPayables, fundamentalsNREITNODIRECTBalanceSheet.otherCurrentPayables) &&
        Objects.equals(this.otherCurrentReceivables, fundamentalsNREITNODIRECTBalanceSheet.otherCurrentReceivables) &&
        Objects.equals(this.otherEquity, fundamentalsNREITNODIRECTBalanceSheet.otherEquity) &&
        Objects.equals(this.otherGrossPpe, fundamentalsNREITNODIRECTBalanceSheet.otherGrossPpe) &&
        Objects.equals(this.otherInventories, fundamentalsNREITNODIRECTBalanceSheet.otherInventories) &&
        Objects.equals(this.otherLongTermAssets, fundamentalsNREITNODIRECTBalanceSheet.otherLongTermAssets) &&
        Objects.equals(this.otherLongTermLiabilities, fundamentalsNREITNODIRECTBalanceSheet.otherLongTermLiabilities) &&
        Objects.equals(this.pensionAndRetirementBenefit, fundamentalsNREITNODIRECTBalanceSheet.pensionAndRetirementBenefit) &&
        Objects.equals(this.preferredStock, fundamentalsNREITNODIRECTBalanceSheet.preferredStock) &&
        Objects.equals(this.rawMaterials, fundamentalsNREITNODIRECTBalanceSheet.rawMaterials) &&
        Objects.equals(this.retainedEarnings, fundamentalsNREITNODIRECTBalanceSheet.retainedEarnings) &&
        Objects.equals(this.shortTermCapitalLeaseObligation, fundamentalsNREITNODIRECTBalanceSheet.shortTermCapitalLeaseObligation) &&
        Objects.equals(this.shortTermDebt, fundamentalsNREITNODIRECTBalanceSheet.shortTermDebt) &&
        Objects.equals(this.shortTermDebtAndCapitalLeaseObligation, fundamentalsNREITNODIRECTBalanceSheet.shortTermDebtAndCapitalLeaseObligation) &&
        Objects.equals(this.totalAssets, fundamentalsNREITNODIRECTBalanceSheet.totalAssets) &&
        Objects.equals(this.totalCurrentAssets, fundamentalsNREITNODIRECTBalanceSheet.totalCurrentAssets) &&
        Objects.equals(this.totalCurrentLiabilities, fundamentalsNREITNODIRECTBalanceSheet.totalCurrentLiabilities) &&
        Objects.equals(this.totalEquity, fundamentalsNREITNODIRECTBalanceSheet.totalEquity) &&
        Objects.equals(this.totalLiabilities, fundamentalsNREITNODIRECTBalanceSheet.totalLiabilities) &&
        Objects.equals(this.totalNonCurrentAssets, fundamentalsNREITNODIRECTBalanceSheet.totalNonCurrentAssets) &&
        Objects.equals(this.totalNonCurrentLiabilitiesNetMinorityInterest, fundamentalsNREITNODIRECTBalanceSheet.totalNonCurrentLiabilitiesNetMinorityInterest) &&
        Objects.equals(this.totalReceivables, fundamentalsNREITNODIRECTBalanceSheet.totalReceivables) &&
        Objects.equals(this.totalStockholdersEquity, fundamentalsNREITNODIRECTBalanceSheet.totalStockholdersEquity) &&
        Objects.equals(this.totalTaxPayable, fundamentalsNREITNODIRECTBalanceSheet.totalTaxPayable) &&
        Objects.equals(this.treasuryStock, fundamentalsNREITNODIRECTBalanceSheet.treasuryStock) &&
        Objects.equals(this.workInProcess, fundamentalsNREITNODIRECTBalanceSheet.workInProcess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountsPayable, accountsPayableAccruedExpense, accountsReceivable, accumulatedDepreciation, accumulatedOtherComprehensiveIncome, additionalPaidInCapital, bsCurrentDeferredLiabilities, buildingsAndImprovements, cashAndCashEquivalents, cashEquivalentsMarketableSecurities, commonStock, constructionInProgress, currentAccruedExpenses, currentDeferredRevenue, currentDeferredTaxesLiabilities, debtToEquity, equityToAsset, finishedGoods, goodWill, grossPpe, intangibles, inventoriesAdjustmentsAllowances, inventory, investmentsAndAdvances, landAndImprovements, loansReceivable, longTermCapitalLeaseObligation, longTermDebt, longTermDebtAndCapitalLeaseObligation, machineryFurnitureEquipment, markeTableSecurities, minorityInterest, netPpe, nonCurrentDeferredIncomeTax, nonCurrentDeferredLiabilities, notesReceivable, otherCurrentAssets, otherCurrentLiabilities, otherCurrentPayables, otherCurrentReceivables, otherEquity, otherGrossPpe, otherInventories, otherLongTermAssets, otherLongTermLiabilities, pensionAndRetirementBenefit, preferredStock, rawMaterials, retainedEarnings, shortTermCapitalLeaseObligation, shortTermDebt, shortTermDebtAndCapitalLeaseObligation, totalAssets, totalCurrentAssets, totalCurrentLiabilities, totalEquity, totalLiabilities, totalNonCurrentAssets, totalNonCurrentLiabilitiesNetMinorityInterest, totalReceivables, totalStockholdersEquity, totalTaxPayable, treasuryStock, workInProcess);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FundamentalsNREITNODIRECTBalanceSheet {\n");
    sb.append("    accountsPayable: ").append(toIndentedString(accountsPayable)).append("\n");
    sb.append("    accountsPayableAccruedExpense: ").append(toIndentedString(accountsPayableAccruedExpense)).append("\n");
    sb.append("    accountsReceivable: ").append(toIndentedString(accountsReceivable)).append("\n");
    sb.append("    accumulatedDepreciation: ").append(toIndentedString(accumulatedDepreciation)).append("\n");
    sb.append("    accumulatedOtherComprehensiveIncome: ").append(toIndentedString(accumulatedOtherComprehensiveIncome)).append("\n");
    sb.append("    additionalPaidInCapital: ").append(toIndentedString(additionalPaidInCapital)).append("\n");
    sb.append("    bsCurrentDeferredLiabilities: ").append(toIndentedString(bsCurrentDeferredLiabilities)).append("\n");
    sb.append("    buildingsAndImprovements: ").append(toIndentedString(buildingsAndImprovements)).append("\n");
    sb.append("    cashAndCashEquivalents: ").append(toIndentedString(cashAndCashEquivalents)).append("\n");
    sb.append("    cashEquivalentsMarketableSecurities: ").append(toIndentedString(cashEquivalentsMarketableSecurities)).append("\n");
    sb.append("    commonStock: ").append(toIndentedString(commonStock)).append("\n");
    sb.append("    constructionInProgress: ").append(toIndentedString(constructionInProgress)).append("\n");
    sb.append("    currentAccruedExpenses: ").append(toIndentedString(currentAccruedExpenses)).append("\n");
    sb.append("    currentDeferredRevenue: ").append(toIndentedString(currentDeferredRevenue)).append("\n");
    sb.append("    currentDeferredTaxesLiabilities: ").append(toIndentedString(currentDeferredTaxesLiabilities)).append("\n");
    sb.append("    debtToEquity: ").append(toIndentedString(debtToEquity)).append("\n");
    sb.append("    equityToAsset: ").append(toIndentedString(equityToAsset)).append("\n");
    sb.append("    finishedGoods: ").append(toIndentedString(finishedGoods)).append("\n");
    sb.append("    goodWill: ").append(toIndentedString(goodWill)).append("\n");
    sb.append("    grossPpe: ").append(toIndentedString(grossPpe)).append("\n");
    sb.append("    intangibles: ").append(toIndentedString(intangibles)).append("\n");
    sb.append("    inventoriesAdjustmentsAllowances: ").append(toIndentedString(inventoriesAdjustmentsAllowances)).append("\n");
    sb.append("    inventory: ").append(toIndentedString(inventory)).append("\n");
    sb.append("    investmentsAndAdvances: ").append(toIndentedString(investmentsAndAdvances)).append("\n");
    sb.append("    landAndImprovements: ").append(toIndentedString(landAndImprovements)).append("\n");
    sb.append("    loansReceivable: ").append(toIndentedString(loansReceivable)).append("\n");
    sb.append("    longTermCapitalLeaseObligation: ").append(toIndentedString(longTermCapitalLeaseObligation)).append("\n");
    sb.append("    longTermDebt: ").append(toIndentedString(longTermDebt)).append("\n");
    sb.append("    longTermDebtAndCapitalLeaseObligation: ").append(toIndentedString(longTermDebtAndCapitalLeaseObligation)).append("\n");
    sb.append("    machineryFurnitureEquipment: ").append(toIndentedString(machineryFurnitureEquipment)).append("\n");
    sb.append("    markeTableSecurities: ").append(toIndentedString(markeTableSecurities)).append("\n");
    sb.append("    minorityInterest: ").append(toIndentedString(minorityInterest)).append("\n");
    sb.append("    netPpe: ").append(toIndentedString(netPpe)).append("\n");
    sb.append("    nonCurrentDeferredIncomeTax: ").append(toIndentedString(nonCurrentDeferredIncomeTax)).append("\n");
    sb.append("    nonCurrentDeferredLiabilities: ").append(toIndentedString(nonCurrentDeferredLiabilities)).append("\n");
    sb.append("    notesReceivable: ").append(toIndentedString(notesReceivable)).append("\n");
    sb.append("    otherCurrentAssets: ").append(toIndentedString(otherCurrentAssets)).append("\n");
    sb.append("    otherCurrentLiabilities: ").append(toIndentedString(otherCurrentLiabilities)).append("\n");
    sb.append("    otherCurrentPayables: ").append(toIndentedString(otherCurrentPayables)).append("\n");
    sb.append("    otherCurrentReceivables: ").append(toIndentedString(otherCurrentReceivables)).append("\n");
    sb.append("    otherEquity: ").append(toIndentedString(otherEquity)).append("\n");
    sb.append("    otherGrossPpe: ").append(toIndentedString(otherGrossPpe)).append("\n");
    sb.append("    otherInventories: ").append(toIndentedString(otherInventories)).append("\n");
    sb.append("    otherLongTermAssets: ").append(toIndentedString(otherLongTermAssets)).append("\n");
    sb.append("    otherLongTermLiabilities: ").append(toIndentedString(otherLongTermLiabilities)).append("\n");
    sb.append("    pensionAndRetirementBenefit: ").append(toIndentedString(pensionAndRetirementBenefit)).append("\n");
    sb.append("    preferredStock: ").append(toIndentedString(preferredStock)).append("\n");
    sb.append("    rawMaterials: ").append(toIndentedString(rawMaterials)).append("\n");
    sb.append("    retainedEarnings: ").append(toIndentedString(retainedEarnings)).append("\n");
    sb.append("    shortTermCapitalLeaseObligation: ").append(toIndentedString(shortTermCapitalLeaseObligation)).append("\n");
    sb.append("    shortTermDebt: ").append(toIndentedString(shortTermDebt)).append("\n");
    sb.append("    shortTermDebtAndCapitalLeaseObligation: ").append(toIndentedString(shortTermDebtAndCapitalLeaseObligation)).append("\n");
    sb.append("    totalAssets: ").append(toIndentedString(totalAssets)).append("\n");
    sb.append("    totalCurrentAssets: ").append(toIndentedString(totalCurrentAssets)).append("\n");
    sb.append("    totalCurrentLiabilities: ").append(toIndentedString(totalCurrentLiabilities)).append("\n");
    sb.append("    totalEquity: ").append(toIndentedString(totalEquity)).append("\n");
    sb.append("    totalLiabilities: ").append(toIndentedString(totalLiabilities)).append("\n");
    sb.append("    totalNonCurrentAssets: ").append(toIndentedString(totalNonCurrentAssets)).append("\n");
    sb.append("    totalNonCurrentLiabilitiesNetMinorityInterest: ").append(toIndentedString(totalNonCurrentLiabilitiesNetMinorityInterest)).append("\n");
    sb.append("    totalReceivables: ").append(toIndentedString(totalReceivables)).append("\n");
    sb.append("    totalStockholdersEquity: ").append(toIndentedString(totalStockholdersEquity)).append("\n");
    sb.append("    totalTaxPayable: ").append(toIndentedString(totalTaxPayable)).append("\n");
    sb.append("    treasuryStock: ").append(toIndentedString(treasuryStock)).append("\n");
    sb.append("    workInProcess: ").append(toIndentedString(workInProcess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accounts_payable");
    openapiFields.add("accounts_payable_accrued_expense");
    openapiFields.add("accounts_receivable");
    openapiFields.add("accumulated_depreciation");
    openapiFields.add("accumulated_other_comprehensive_income");
    openapiFields.add("additional_paid_in_capital");
    openapiFields.add("bs_current_deferred_liabilities");
    openapiFields.add("buildings_and_improvements");
    openapiFields.add("cash_and_cash_equivalents");
    openapiFields.add("cash_equivalents_marketable_securities");
    openapiFields.add("common_stock");
    openapiFields.add("construction_in_progress");
    openapiFields.add("current_accrued_expenses");
    openapiFields.add("current_deferred_revenue");
    openapiFields.add("current_deferred_taxes_liabilities");
    openapiFields.add("debt_to_equity");
    openapiFields.add("equity_to_asset");
    openapiFields.add("finished_goods");
    openapiFields.add("good_will");
    openapiFields.add("gross_ppe");
    openapiFields.add("intangibles");
    openapiFields.add("inventories_adjustments_allowances");
    openapiFields.add("inventory");
    openapiFields.add("investments_and_advances");
    openapiFields.add("land_and_improvements");
    openapiFields.add("loans_receivable");
    openapiFields.add("long_term_capital_lease_obligation");
    openapiFields.add("long_term_debt");
    openapiFields.add("long_term_debt_and_capital_lease_obligation");
    openapiFields.add("machinery_furniture_equipment");
    openapiFields.add("marke_table_securities");
    openapiFields.add("minority_interest");
    openapiFields.add("net_ppe");
    openapiFields.add("non_current_deferred_income_tax");
    openapiFields.add("non_current_deferred_liabilities");
    openapiFields.add("notes_receivable");
    openapiFields.add("other_current_assets");
    openapiFields.add("other_current_liabilities");
    openapiFields.add("other_current_payables");
    openapiFields.add("other_current_receivables");
    openapiFields.add("other_equity");
    openapiFields.add("other_gross_ppe");
    openapiFields.add("other_inventories");
    openapiFields.add("other_long_term_assets");
    openapiFields.add("other_long_term_liabilities");
    openapiFields.add("pension_and_retirement_benefit");
    openapiFields.add("preferred_stock");
    openapiFields.add("raw_materials");
    openapiFields.add("retained_earnings");
    openapiFields.add("short_term_capital_lease_obligation");
    openapiFields.add("short_term_debt");
    openapiFields.add("short_term_debt_and_capital_lease_obligation");
    openapiFields.add("total_assets");
    openapiFields.add("total_current_assets");
    openapiFields.add("total_current_liabilities");
    openapiFields.add("total_equity");
    openapiFields.add("total_liabilities");
    openapiFields.add("total_non_current_assets");
    openapiFields.add("total_non_current_liabilities_net_minority_interest");
    openapiFields.add("total_receivables");
    openapiFields.add("total_stockholders_equity");
    openapiFields.add("total_tax_payable");
    openapiFields.add("treasury_stock");
    openapiFields.add("work_in_process");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FundamentalsNREITNODIRECTBalanceSheet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FundamentalsNREITNODIRECTBalanceSheet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FundamentalsNREITNODIRECTBalanceSheet is not found in the empty JSON string", FundamentalsNREITNODIRECTBalanceSheet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FundamentalsNREITNODIRECTBalanceSheet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FundamentalsNREITNODIRECTBalanceSheet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FundamentalsNREITNODIRECTBalanceSheet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FundamentalsNREITNODIRECTBalanceSheet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FundamentalsNREITNODIRECTBalanceSheet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FundamentalsNREITNODIRECTBalanceSheet.class));

       return (TypeAdapter<T>) new TypeAdapter<FundamentalsNREITNODIRECTBalanceSheet>() {
           @Override
           public void write(JsonWriter out, FundamentalsNREITNODIRECTBalanceSheet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FundamentalsNREITNODIRECTBalanceSheet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FundamentalsNREITNODIRECTBalanceSheet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FundamentalsNREITNODIRECTBalanceSheet
   * @throws IOException if the JSON string is invalid with respect to FundamentalsNREITNODIRECTBalanceSheet
   */
  public static FundamentalsNREITNODIRECTBalanceSheet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FundamentalsNREITNODIRECTBalanceSheet.class);
  }

  /**
   * Convert an instance of FundamentalsNREITNODIRECTBalanceSheet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

