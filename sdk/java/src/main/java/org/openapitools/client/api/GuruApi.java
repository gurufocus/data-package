/*
 * Gurufocus Data Package API
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.DownloadListGet403Response;
import org.openapitools.client.model.DownloadListGet404Response;
import org.openapitools.client.model.DownloadListGet500Response;
import org.openapitools.client.model.GurusIdGet200Response;
import org.openapitools.client.model.GurusListGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GuruApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GuruApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GuruApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gurusIdGet
     * @param id Guru ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access the holdings and trades of over 4,500 institutional investors, enabling broad market trend analysis or fueling investment research tools with extensive institutional activity data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403003: No permission to check resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404001: Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500001: There are internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gurusIdGetCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gurus/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gurusIdGetValidateBeforeCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling gurusIdGet(Async)");
        }

        return gurusIdGetCall(id, _callback);

    }

    /**
     * Access the holdings and trades of over 4,500 institutional investors, enabling broad market trend analysis or fueling investment research tools with extensive institutional activity data
     * Last four quarters and future: &lt;ul&gt; &lt;li&gt;Quarterly portfolio holdings of the last 4 quarters&lt;/li&gt; &lt;li&gt;13D/G Data of the last 12 months&lt;/li&gt; &lt;/ul&gt;
     * @param id Guru ID (required)
     * @return GurusIdGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access the holdings and trades of over 4,500 institutional investors, enabling broad market trend analysis or fueling investment research tools with extensive institutional activity data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403003: No permission to check resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404001: Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500001: There are internal error </td><td>  -  </td></tr>
     </table>
     */
    public GurusIdGet200Response gurusIdGet(BigDecimal id) throws ApiException {
        ApiResponse<GurusIdGet200Response> localVarResp = gurusIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Access the holdings and trades of over 4,500 institutional investors, enabling broad market trend analysis or fueling investment research tools with extensive institutional activity data
     * Last four quarters and future: &lt;ul&gt; &lt;li&gt;Quarterly portfolio holdings of the last 4 quarters&lt;/li&gt; &lt;li&gt;13D/G Data of the last 12 months&lt;/li&gt; &lt;/ul&gt;
     * @param id Guru ID (required)
     * @return ApiResponse&lt;GurusIdGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access the holdings and trades of over 4,500 institutional investors, enabling broad market trend analysis or fueling investment research tools with extensive institutional activity data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403003: No permission to check resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404001: Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500001: There are internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GurusIdGet200Response> gurusIdGetWithHttpInfo(BigDecimal id) throws ApiException {
        okhttp3.Call localVarCall = gurusIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GurusIdGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Access the holdings and trades of over 4,500 institutional investors, enabling broad market trend analysis or fueling investment research tools with extensive institutional activity data (asynchronously)
     * Last four quarters and future: &lt;ul&gt; &lt;li&gt;Quarterly portfolio holdings of the last 4 quarters&lt;/li&gt; &lt;li&gt;13D/G Data of the last 12 months&lt;/li&gt; &lt;/ul&gt;
     * @param id Guru ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access the holdings and trades of over 4,500 institutional investors, enabling broad market trend analysis or fueling investment research tools with extensive institutional activity data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403003: No permission to check resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404001: Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500001: There are internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gurusIdGetAsync(BigDecimal id, final ApiCallback<GurusIdGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = gurusIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GurusIdGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gurusListGet
     * @param perPage The number of items to return per page. Default is 100. (optional)
     * @param page The page number to return. Default is 1. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of gurus </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403003: No permission to check resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404001: Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500001: There are internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gurusListGetCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gurus/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gurusListGetValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return gurusListGetCall(perPage, page, _callback);

    }

    /**
     * Get the list of available gurus&#39; basic information
     * Returns the list of available gurus&#39; basic information. You can use this api to map Gurufocus guru id and the id in your own system. The list is sorted by the id. You can use the &#x60;page&#x60; and &#x60;per_page&#x60; parameters to paginate the results.
     * @param perPage The number of items to return per page. Default is 100. (optional)
     * @param page The page number to return. Default is 1. (optional)
     * @return GurusListGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of gurus </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403003: No permission to check resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404001: Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500001: There are internal error </td><td>  -  </td></tr>
     </table>
     */
    public GurusListGet200Response gurusListGet(Integer perPage, Integer page) throws ApiException {
        ApiResponse<GurusListGet200Response> localVarResp = gurusListGetWithHttpInfo(perPage, page);
        return localVarResp.getData();
    }

    /**
     * Get the list of available gurus&#39; basic information
     * Returns the list of available gurus&#39; basic information. You can use this api to map Gurufocus guru id and the id in your own system. The list is sorted by the id. You can use the &#x60;page&#x60; and &#x60;per_page&#x60; parameters to paginate the results.
     * @param perPage The number of items to return per page. Default is 100. (optional)
     * @param page The page number to return. Default is 1. (optional)
     * @return ApiResponse&lt;GurusListGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of gurus </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403003: No permission to check resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404001: Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500001: There are internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GurusListGet200Response> gurusListGetWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = gurusListGetValidateBeforeCall(perPage, page, null);
        Type localVarReturnType = new TypeToken<GurusListGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of available gurus&#39; basic information (asynchronously)
     * Returns the list of available gurus&#39; basic information. You can use this api to map Gurufocus guru id and the id in your own system. The list is sorted by the id. You can use the &#x60;page&#x60; and &#x60;per_page&#x60; parameters to paginate the results.
     * @param perPage The number of items to return per page. Default is 100. (optional)
     * @param page The page number to return. Default is 1. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of gurus </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403003: No permission to check resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404001: Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500001: There are internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gurusListGetAsync(Integer perPage, Integer page, final ApiCallback<GurusListGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = gurusListGetValidateBeforeCall(perPage, page, _callback);
        Type localVarReturnType = new TypeToken<GurusListGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
