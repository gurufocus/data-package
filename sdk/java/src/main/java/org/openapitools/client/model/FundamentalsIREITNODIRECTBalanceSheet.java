/*
 * Gurufocus Data Package API
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FundamentalsIREITNODIRECTBalanceSheet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-11T01:10:00.357398434Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class FundamentalsIREITNODIRECTBalanceSheet {
  public static final String SERIALIZED_NAME_ACCOUNTS_RECEIVABLE = "accounts_receivable";
  @SerializedName(SERIALIZED_NAME_ACCOUNTS_RECEIVABLE)
  @javax.annotation.Nullable
  private BigDecimal accountsReceivable;

  public static final String SERIALIZED_NAME_ACCUMULATED_OTHER_COMPREHENSIVE_INCOME = "accumulated_other_comprehensive_income";
  @SerializedName(SERIALIZED_NAME_ACCUMULATED_OTHER_COMPREHENSIVE_INCOME)
  @javax.annotation.Nullable
  private BigDecimal accumulatedOtherComprehensiveIncome;

  public static final String SERIALIZED_NAME_ADDITIONAL_PAID_IN_CAPITAL = "additional_paid_in_capital";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PAID_IN_CAPITAL)
  @javax.annotation.Nullable
  private BigDecimal additionalPaidInCapital;

  public static final String SERIALIZED_NAME_BS_CASH_AND_CASH_EQUIVALENTS = "bs_cash_and_cash_equivalents";
  @SerializedName(SERIALIZED_NAME_BS_CASH_AND_CASH_EQUIVALENTS)
  @javax.annotation.Nullable
  private BigDecimal bsCashAndCashEquivalents;

  public static final String SERIALIZED_NAME_BS_CURRENT_DEFERRED_LIABILITIES = "bs_current_deferred_liabilities";
  @SerializedName(SERIALIZED_NAME_BS_CURRENT_DEFERRED_LIABILITIES)
  @javax.annotation.Nullable
  private BigDecimal bsCurrentDeferredLiabilities;

  public static final String SERIALIZED_NAME_BS_DEFERRED_POLICY_ACQUISITION_COSTS = "bs_deferred_policy_acquisition_costs";
  @SerializedName(SERIALIZED_NAME_BS_DEFERRED_POLICY_ACQUISITION_COSTS)
  @javax.annotation.Nullable
  private BigDecimal bsDeferredPolicyAcquisitionCosts;

  public static final String SERIALIZED_NAME_BS_EQUITY_INVESTMENTS = "bs_equity_investments";
  @SerializedName(SERIALIZED_NAME_BS_EQUITY_INVESTMENTS)
  @javax.annotation.Nullable
  private BigDecimal bsEquityInvestments;

  public static final String SERIALIZED_NAME_BS_FIXED_MATURITY_INVESTMENT = "bs_fixed_maturity_investment";
  @SerializedName(SERIALIZED_NAME_BS_FIXED_MATURITY_INVESTMENT)
  @javax.annotation.Nullable
  private BigDecimal bsFixedMaturityInvestment;

  public static final String SERIALIZED_NAME_BS_FUTURE_POLICY_BENEFITS = "bs_future_policy_benefits";
  @SerializedName(SERIALIZED_NAME_BS_FUTURE_POLICY_BENEFITS)
  @javax.annotation.Nullable
  private BigDecimal bsFuturePolicyBenefits;

  public static final String SERIALIZED_NAME_BS_NET_LOAN = "bs_net_loan";
  @SerializedName(SERIALIZED_NAME_BS_NET_LOAN)
  @javax.annotation.Nullable
  private BigDecimal bsNetLoan;

  public static final String SERIALIZED_NAME_BS_OTHER_ASSETS_INSURANCE = "bs_other_assets_insurance";
  @SerializedName(SERIALIZED_NAME_BS_OTHER_ASSETS_INSURANCE)
  @javax.annotation.Nullable
  private BigDecimal bsOtherAssetsInsurance;

  public static final String SERIALIZED_NAME_BS_OTHER_LIABILITIES_INSURANCE = "bs_other_liabilities_insurance";
  @SerializedName(SERIALIZED_NAME_BS_OTHER_LIABILITIES_INSURANCE)
  @javax.annotation.Nullable
  private BigDecimal bsOtherLiabilitiesInsurance;

  public static final String SERIALIZED_NAME_BS_PAYABLES_AND_ACCRUED_EXPENSES = "bs_payables_and_accrued_expenses";
  @SerializedName(SERIALIZED_NAME_BS_PAYABLES_AND_ACCRUED_EXPENSES)
  @javax.annotation.Nullable
  private BigDecimal bsPayablesAndAccruedExpenses;

  public static final String SERIALIZED_NAME_BS_POLICYHOLDER_FUNDS = "bs_policyholder_funds";
  @SerializedName(SERIALIZED_NAME_BS_POLICYHOLDER_FUNDS)
  @javax.annotation.Nullable
  private BigDecimal bsPolicyholderFunds;

  public static final String SERIALIZED_NAME_BS_TRADING_ASSETS = "bs_trading_assets";
  @SerializedName(SERIALIZED_NAME_BS_TRADING_ASSETS)
  @javax.annotation.Nullable
  private BigDecimal bsTradingAssets;

  public static final String SERIALIZED_NAME_BS_UNEARNED_PREMIUMS = "bs_unearned_premiums";
  @SerializedName(SERIALIZED_NAME_BS_UNEARNED_PREMIUMS)
  @javax.annotation.Nullable
  private BigDecimal bsUnearnedPremiums;

  public static final String SERIALIZED_NAME_BS_UNPAID_LOSS_AND_LOSS_RESERVE = "bs_unpaid_loss_and_loss_reserve";
  @SerializedName(SERIALIZED_NAME_BS_UNPAID_LOSS_AND_LOSS_RESERVE)
  @javax.annotation.Nullable
  private BigDecimal bsUnpaidLossAndLossReserve;

  public static final String SERIALIZED_NAME_COMMON_STOCK = "common_stock";
  @SerializedName(SERIALIZED_NAME_COMMON_STOCK)
  @javax.annotation.Nullable
  private BigDecimal commonStock;

  public static final String SERIALIZED_NAME_CURRENT_DEFERRED_REVENUE = "current_deferred_revenue";
  @SerializedName(SERIALIZED_NAME_CURRENT_DEFERRED_REVENUE)
  @javax.annotation.Nullable
  private BigDecimal currentDeferredRevenue;

  public static final String SERIALIZED_NAME_CURRENT_DEFERRED_TAXES_LIABILITIES = "current_deferred_taxes_liabilities";
  @SerializedName(SERIALIZED_NAME_CURRENT_DEFERRED_TAXES_LIABILITIES)
  @javax.annotation.Nullable
  private BigDecimal currentDeferredTaxesLiabilities;

  public static final String SERIALIZED_NAME_DEBT_TO_EQUITY = "debt_to_equity";
  @SerializedName(SERIALIZED_NAME_DEBT_TO_EQUITY)
  @javax.annotation.Nullable
  private BigDecimal debtToEquity;

  public static final String SERIALIZED_NAME_EQUITY_TO_ASSET = "equity_to_asset";
  @SerializedName(SERIALIZED_NAME_EQUITY_TO_ASSET)
  @javax.annotation.Nullable
  private BigDecimal equityToAsset;

  public static final String SERIALIZED_NAME_GOOD_WILL = "good_will";
  @SerializedName(SERIALIZED_NAME_GOOD_WILL)
  @javax.annotation.Nullable
  private BigDecimal goodWill;

  public static final String SERIALIZED_NAME_INTANGIBLES = "intangibles";
  @SerializedName(SERIALIZED_NAME_INTANGIBLES)
  @javax.annotation.Nullable
  private BigDecimal intangibles;

  public static final String SERIALIZED_NAME_LONG_TERM_DEBT_AND_CAPITAL_LEASE_OBLIGATION = "long_term_debt_and_capital_lease_obligation";
  @SerializedName(SERIALIZED_NAME_LONG_TERM_DEBT_AND_CAPITAL_LEASE_OBLIGATION)
  @javax.annotation.Nullable
  private BigDecimal longTermDebtAndCapitalLeaseObligation;

  public static final String SERIALIZED_NAME_MINORITY_INTEREST = "minority_interest";
  @SerializedName(SERIALIZED_NAME_MINORITY_INTEREST)
  @javax.annotation.Nullable
  private BigDecimal minorityInterest;

  public static final String SERIALIZED_NAME_NET_PPE = "net_ppe";
  @SerializedName(SERIALIZED_NAME_NET_PPE)
  @javax.annotation.Nullable
  private BigDecimal netPpe;

  public static final String SERIALIZED_NAME_NON_CURRENT_DEFERRED_INCOME_TAX = "non_current_deferred_income_tax";
  @SerializedName(SERIALIZED_NAME_NON_CURRENT_DEFERRED_INCOME_TAX)
  @javax.annotation.Nullable
  private BigDecimal nonCurrentDeferredIncomeTax;

  public static final String SERIALIZED_NAME_NON_CURRENT_DEFERRED_LIABILITIES = "non_current_deferred_liabilities";
  @SerializedName(SERIALIZED_NAME_NON_CURRENT_DEFERRED_LIABILITIES)
  @javax.annotation.Nullable
  private BigDecimal nonCurrentDeferredLiabilities;

  public static final String SERIALIZED_NAME_NOTES_RECEIVABLE = "notes_receivable";
  @SerializedName(SERIALIZED_NAME_NOTES_RECEIVABLE)
  @javax.annotation.Nullable
  private BigDecimal notesReceivable;

  public static final String SERIALIZED_NAME_OTHER_CURRENT_RECEIVABLES = "other_current_receivables";
  @SerializedName(SERIALIZED_NAME_OTHER_CURRENT_RECEIVABLES)
  @javax.annotation.Nullable
  private BigDecimal otherCurrentReceivables;

  public static final String SERIALIZED_NAME_OTHER_EQUITY = "other_equity";
  @SerializedName(SERIALIZED_NAME_OTHER_EQUITY)
  @javax.annotation.Nullable
  private BigDecimal otherEquity;

  public static final String SERIALIZED_NAME_PREFERRED_STOCK = "preferred_stock";
  @SerializedName(SERIALIZED_NAME_PREFERRED_STOCK)
  @javax.annotation.Nullable
  private BigDecimal preferredStock;

  public static final String SERIALIZED_NAME_RETAINED_EARNINGS = "retained_earnings";
  @SerializedName(SERIALIZED_NAME_RETAINED_EARNINGS)
  @javax.annotation.Nullable
  private BigDecimal retainedEarnings;

  public static final String SERIALIZED_NAME_SHORT_TERM_DEBT_AND_CAPITAL_LEASE_OBLIGATION = "short_term_debt_and_capital_lease_obligation";
  @SerializedName(SERIALIZED_NAME_SHORT_TERM_DEBT_AND_CAPITAL_LEASE_OBLIGATION)
  @javax.annotation.Nullable
  private BigDecimal shortTermDebtAndCapitalLeaseObligation;

  public static final String SERIALIZED_NAME_TOTAL_ASSETS = "total_assets";
  @SerializedName(SERIALIZED_NAME_TOTAL_ASSETS)
  @javax.annotation.Nullable
  private BigDecimal totalAssets;

  public static final String SERIALIZED_NAME_TOTAL_EQUITY = "total_equity";
  @SerializedName(SERIALIZED_NAME_TOTAL_EQUITY)
  @javax.annotation.Nullable
  private BigDecimal totalEquity;

  public static final String SERIALIZED_NAME_TOTAL_LIABILITIES = "total_liabilities";
  @SerializedName(SERIALIZED_NAME_TOTAL_LIABILITIES)
  @javax.annotation.Nullable
  private BigDecimal totalLiabilities;

  public static final String SERIALIZED_NAME_TOTAL_RECEIVABLES = "total_receivables";
  @SerializedName(SERIALIZED_NAME_TOTAL_RECEIVABLES)
  @javax.annotation.Nullable
  private BigDecimal totalReceivables;

  public static final String SERIALIZED_NAME_TOTAL_STOCKHOLDERS_EQUITY = "total_stockholders_equity";
  @SerializedName(SERIALIZED_NAME_TOTAL_STOCKHOLDERS_EQUITY)
  @javax.annotation.Nullable
  private BigDecimal totalStockholdersEquity;

  public static final String SERIALIZED_NAME_TREASURY_STOCK = "treasury_stock";
  @SerializedName(SERIALIZED_NAME_TREASURY_STOCK)
  @javax.annotation.Nullable
  private BigDecimal treasuryStock;

  public FundamentalsIREITNODIRECTBalanceSheet() {
  }

  public FundamentalsIREITNODIRECTBalanceSheet accountsReceivable(@javax.annotation.Nullable BigDecimal accountsReceivable) {
    this.accountsReceivable = accountsReceivable;
    return this;
  }

  /**
   * &lt;p&gt;{{Accts_Rec}} is money owed to a business by customers and shown on its Balance Sheet as an asset. {{Accts_Rec}} are created when a customer has received a product but has not yet paid for that product. It is related to {{DaysSalesOutstanding}}, which measures of the average number of days that a company takes to collect revenue after a sale has been made. It is a financial ratio that illustrates how well a company&#39;s accounts receivables are being managed. &lt;br&gt;{{DaysSalesOutstanding}} &#x3D; {{Accts_Rec}} / {{Revenue}} * Days in Period&lt;/p&gt;
   * @return accountsReceivable
   */
  @javax.annotation.Nullable
  public BigDecimal getAccountsReceivable() {
    return accountsReceivable;
  }

  public void setAccountsReceivable(@javax.annotation.Nullable BigDecimal accountsReceivable) {
    this.accountsReceivable = accountsReceivable;
  }


  public FundamentalsIREITNODIRECTBalanceSheet accumulatedOtherComprehensiveIncome(@javax.annotation.Nullable BigDecimal accumulatedOtherComprehensiveIncome) {
    this.accumulatedOtherComprehensiveIncome = accumulatedOtherComprehensiveIncome;
    return this;
  }

  /**
   * &lt;p&gt;{{accumulated_other_comprehensive_income}} is the aggregate amount of gains or losses that are not part of retained earnings.&lt;/p&gt;
   * @return accumulatedOtherComprehensiveIncome
   */
  @javax.annotation.Nullable
  public BigDecimal getAccumulatedOtherComprehensiveIncome() {
    return accumulatedOtherComprehensiveIncome;
  }

  public void setAccumulatedOtherComprehensiveIncome(@javax.annotation.Nullable BigDecimal accumulatedOtherComprehensiveIncome) {
    this.accumulatedOtherComprehensiveIncome = accumulatedOtherComprehensiveIncome;
  }


  public FundamentalsIREITNODIRECTBalanceSheet additionalPaidInCapital(@javax.annotation.Nullable BigDecimal additionalPaidInCapital) {
    this.additionalPaidInCapital = additionalPaidInCapital;
    return this;
  }

  /**
   * &lt;p&gt;{{AdditionalPaidInCapital}} is the capital that a company raises in a financing round in excess of the capital&#39;s par value. The account represents the excess paid by an investor over the par-value price of a stock issue. {{AdditionalPaidInCapital}} can arise from issuing either preferred or common stock. &lt;br&gt;{{AdditionalPaidInCapital}} is calculated as: {{AdditionalPaidInCapital}} &#x3D; (Issue Price - Par Value) * {{Shares_Outstanding}}&lt;/p&gt;
   * @return additionalPaidInCapital
   */
  @javax.annotation.Nullable
  public BigDecimal getAdditionalPaidInCapital() {
    return additionalPaidInCapital;
  }

  public void setAdditionalPaidInCapital(@javax.annotation.Nullable BigDecimal additionalPaidInCapital) {
    this.additionalPaidInCapital = additionalPaidInCapital;
  }


  public FundamentalsIREITNODIRECTBalanceSheet bsCashAndCashEquivalents(@javax.annotation.Nullable BigDecimal bsCashAndCashEquivalents) {
    this.bsCashAndCashEquivalents = bsCashAndCashEquivalents;
    return this;
  }

  /**
   * &lt;p&gt;{{CashAndCashEquivalents}} are the most liquid assets on the balance sheet. Cash equivalents are assets that are readily convertible into cash, such as money market holdings, short-term government bonds or Treasury bills, marketable securities and commercial paper.&lt;/p&gt;
   * @return bsCashAndCashEquivalents
   */
  @javax.annotation.Nullable
  public BigDecimal getBsCashAndCashEquivalents() {
    return bsCashAndCashEquivalents;
  }

  public void setBsCashAndCashEquivalents(@javax.annotation.Nullable BigDecimal bsCashAndCashEquivalents) {
    this.bsCashAndCashEquivalents = bsCashAndCashEquivalents;
  }


  public FundamentalsIREITNODIRECTBalanceSheet bsCurrentDeferredLiabilities(@javax.annotation.Nullable BigDecimal bsCurrentDeferredLiabilities) {
    this.bsCurrentDeferredLiabilities = bsCurrentDeferredLiabilities;
    return this;
  }

  /**
   * &lt;p&gt;{{BS_CurrentDeferredLiabilities}} represents the current portion of obligations, which is a liability that usually would have been paid but is now pas due.&lt;/p&gt;
   * @return bsCurrentDeferredLiabilities
   */
  @javax.annotation.Nullable
  public BigDecimal getBsCurrentDeferredLiabilities() {
    return bsCurrentDeferredLiabilities;
  }

  public void setBsCurrentDeferredLiabilities(@javax.annotation.Nullable BigDecimal bsCurrentDeferredLiabilities) {
    this.bsCurrentDeferredLiabilities = bsCurrentDeferredLiabilities;
  }


  public FundamentalsIREITNODIRECTBalanceSheet bsDeferredPolicyAcquisitionCosts(@javax.annotation.Nullable BigDecimal bsDeferredPolicyAcquisitionCosts) {
    this.bsDeferredPolicyAcquisitionCosts = bsDeferredPolicyAcquisitionCosts;
    return this;
  }

  /**
   * &lt;p&gt;{{BS_DeferredPolicyAcquisitionCosts}} represent the costs incurred by insurance companies for policy acquisitions that has not been paid.&lt;/p&gt;
   * @return bsDeferredPolicyAcquisitionCosts
   */
  @javax.annotation.Nullable
  public BigDecimal getBsDeferredPolicyAcquisitionCosts() {
    return bsDeferredPolicyAcquisitionCosts;
  }

  public void setBsDeferredPolicyAcquisitionCosts(@javax.annotation.Nullable BigDecimal bsDeferredPolicyAcquisitionCosts) {
    this.bsDeferredPolicyAcquisitionCosts = bsDeferredPolicyAcquisitionCosts;
  }


  public FundamentalsIREITNODIRECTBalanceSheet bsEquityInvestments(@javax.annotation.Nullable BigDecimal bsEquityInvestments) {
    this.bsEquityInvestments = bsEquityInvestments;
    return this;
  }

  /**
   * &lt;p&gt;{{BS_EquityInvestments}} mean that through these investments, the holders of these investments take ownership in the entities that issued these investment vehicles. Stock is kind of equity investment.&lt;/p&gt;
   * @return bsEquityInvestments
   */
  @javax.annotation.Nullable
  public BigDecimal getBsEquityInvestments() {
    return bsEquityInvestments;
  }

  public void setBsEquityInvestments(@javax.annotation.Nullable BigDecimal bsEquityInvestments) {
    this.bsEquityInvestments = bsEquityInvestments;
  }


  public FundamentalsIREITNODIRECTBalanceSheet bsFixedMaturityInvestment(@javax.annotation.Nullable BigDecimal bsFixedMaturityInvestment) {
    this.bsFixedMaturityInvestment = bsFixedMaturityInvestment;
    return this;
  }

  /**
   * &lt;p&gt;{{BS_FixedMaturityInvestment}} is financial assets that have fixed maturity dates, such as treasury bonds and corporate bonds. Before the maturity, these assets usually pay fixed interest rate. At maturity, the principle will be returned from the borrowed.&lt;/p&gt;
   * @return bsFixedMaturityInvestment
   */
  @javax.annotation.Nullable
  public BigDecimal getBsFixedMaturityInvestment() {
    return bsFixedMaturityInvestment;
  }

  public void setBsFixedMaturityInvestment(@javax.annotation.Nullable BigDecimal bsFixedMaturityInvestment) {
    this.bsFixedMaturityInvestment = bsFixedMaturityInvestment;
  }


  public FundamentalsIREITNODIRECTBalanceSheet bsFuturePolicyBenefits(@javax.annotation.Nullable BigDecimal bsFuturePolicyBenefits) {
    this.bsFuturePolicyBenefits = bsFuturePolicyBenefits;
    return this;
  }

  /**
   * &lt;p&gt;{{BS_FuturePolicyBenefits}} represents an insurance entity&#39;s net liability for future benefits (for example, death, cash surrender value) to be paid to or on behalf of policyholders, where the accounting policy describes the bases, methodologies and components of the reserve, and assumptions regarding estimates of expected investment yields, mortality, morbidity, terminations and expenses.&lt;/p&gt;
   * @return bsFuturePolicyBenefits
   */
  @javax.annotation.Nullable
  public BigDecimal getBsFuturePolicyBenefits() {
    return bsFuturePolicyBenefits;
  }

  public void setBsFuturePolicyBenefits(@javax.annotation.Nullable BigDecimal bsFuturePolicyBenefits) {
    this.bsFuturePolicyBenefits = bsFuturePolicyBenefits;
  }


  public FundamentalsIREITNODIRECTBalanceSheet bsNetLoan(@javax.annotation.Nullable BigDecimal bsNetLoan) {
    this.bsNetLoan = bsNetLoan;
    return this;
  }

  /**
   * &lt;p&gt;{{BS_NetLoan}} is total loans on banks&#39; book. These are the fund that banks have lent out. The loans contribute to banks&#39; income. Some borrower of the loans may stop paying their payment. In this case, the loan is called non-performing loans. Loans can be divided into residential loans, commercial loans or consumer loans.&lt;/p&gt;
   * @return bsNetLoan
   */
  @javax.annotation.Nullable
  public BigDecimal getBsNetLoan() {
    return bsNetLoan;
  }

  public void setBsNetLoan(@javax.annotation.Nullable BigDecimal bsNetLoan) {
    this.bsNetLoan = bsNetLoan;
  }


  public FundamentalsIREITNODIRECTBalanceSheet bsOtherAssetsInsurance(@javax.annotation.Nullable BigDecimal bsOtherAssetsInsurance) {
    this.bsOtherAssetsInsurance = bsOtherAssetsInsurance;
    return this;
  }

  /**
   * Get bsOtherAssetsInsurance
   * @return bsOtherAssetsInsurance
   */
  @javax.annotation.Nullable
  public BigDecimal getBsOtherAssetsInsurance() {
    return bsOtherAssetsInsurance;
  }

  public void setBsOtherAssetsInsurance(@javax.annotation.Nullable BigDecimal bsOtherAssetsInsurance) {
    this.bsOtherAssetsInsurance = bsOtherAssetsInsurance;
  }


  public FundamentalsIREITNODIRECTBalanceSheet bsOtherLiabilitiesInsurance(@javax.annotation.Nullable BigDecimal bsOtherLiabilitiesInsurance) {
    this.bsOtherLiabilitiesInsurance = bsOtherLiabilitiesInsurance;
    return this;
  }

  /**
   * Get bsOtherLiabilitiesInsurance
   * @return bsOtherLiabilitiesInsurance
   */
  @javax.annotation.Nullable
  public BigDecimal getBsOtherLiabilitiesInsurance() {
    return bsOtherLiabilitiesInsurance;
  }

  public void setBsOtherLiabilitiesInsurance(@javax.annotation.Nullable BigDecimal bsOtherLiabilitiesInsurance) {
    this.bsOtherLiabilitiesInsurance = bsOtherLiabilitiesInsurance;
  }


  public FundamentalsIREITNODIRECTBalanceSheet bsPayablesAndAccruedExpenses(@javax.annotation.Nullable BigDecimal bsPayablesAndAccruedExpenses) {
    this.bsPayablesAndAccruedExpenses = bsPayablesAndAccruedExpenses;
    return this;
  }

  /**
   * Get bsPayablesAndAccruedExpenses
   * @return bsPayablesAndAccruedExpenses
   */
  @javax.annotation.Nullable
  public BigDecimal getBsPayablesAndAccruedExpenses() {
    return bsPayablesAndAccruedExpenses;
  }

  public void setBsPayablesAndAccruedExpenses(@javax.annotation.Nullable BigDecimal bsPayablesAndAccruedExpenses) {
    this.bsPayablesAndAccruedExpenses = bsPayablesAndAccruedExpenses;
  }


  public FundamentalsIREITNODIRECTBalanceSheet bsPolicyholderFunds(@javax.annotation.Nullable BigDecimal bsPolicyholderFunds) {
    this.bsPolicyholderFunds = bsPolicyholderFunds;
    return this;
  }

  /**
   * &lt;p&gt;{{BS_PolicyholderFunds}}&lt;/p&gt;
   * @return bsPolicyholderFunds
   */
  @javax.annotation.Nullable
  public BigDecimal getBsPolicyholderFunds() {
    return bsPolicyholderFunds;
  }

  public void setBsPolicyholderFunds(@javax.annotation.Nullable BigDecimal bsPolicyholderFunds) {
    this.bsPolicyholderFunds = bsPolicyholderFunds;
  }


  public FundamentalsIREITNODIRECTBalanceSheet bsTradingAssets(@javax.annotation.Nullable BigDecimal bsTradingAssets) {
    this.bsTradingAssets = bsTradingAssets;
    return this;
  }

  /**
   * &lt;p&gt;Other assets that are traded in markets.&lt;/p&gt;
   * @return bsTradingAssets
   */
  @javax.annotation.Nullable
  public BigDecimal getBsTradingAssets() {
    return bsTradingAssets;
  }

  public void setBsTradingAssets(@javax.annotation.Nullable BigDecimal bsTradingAssets) {
    this.bsTradingAssets = bsTradingAssets;
  }


  public FundamentalsIREITNODIRECTBalanceSheet bsUnearnedPremiums(@javax.annotation.Nullable BigDecimal bsUnearnedPremiums) {
    this.bsUnearnedPremiums = bsUnearnedPremiums;
    return this;
  }

  /**
   * &lt;p&gt;{{BS_UnearnedPremiums}} is the portion of premium that has not been earned by insurance companies. Insurance companies have to pay them back to the insured if the policies are cancelled.&lt;/p&gt;
   * @return bsUnearnedPremiums
   */
  @javax.annotation.Nullable
  public BigDecimal getBsUnearnedPremiums() {
    return bsUnearnedPremiums;
  }

  public void setBsUnearnedPremiums(@javax.annotation.Nullable BigDecimal bsUnearnedPremiums) {
    this.bsUnearnedPremiums = bsUnearnedPremiums;
  }


  public FundamentalsIREITNODIRECTBalanceSheet bsUnpaidLossAndLossReserve(@javax.annotation.Nullable BigDecimal bsUnpaidLossAndLossReserve) {
    this.bsUnpaidLossAndLossReserve = bsUnpaidLossAndLossReserve;
    return this;
  }

  /**
   * &lt;p&gt;{{BS_UnpaidLossAndLossReserve}} is the fund insurance companies set aside for the loss that has not be paid or possible losses in the future.&lt;/p&gt;
   * @return bsUnpaidLossAndLossReserve
   */
  @javax.annotation.Nullable
  public BigDecimal getBsUnpaidLossAndLossReserve() {
    return bsUnpaidLossAndLossReserve;
  }

  public void setBsUnpaidLossAndLossReserve(@javax.annotation.Nullable BigDecimal bsUnpaidLossAndLossReserve) {
    this.bsUnpaidLossAndLossReserve = bsUnpaidLossAndLossReserve;
  }


  public FundamentalsIREITNODIRECTBalanceSheet commonStock(@javax.annotation.Nullable BigDecimal commonStock) {
    this.commonStock = commonStock;
    return this;
  }

  /**
   * &lt;p&gt;{{CommonStock}} is listed on  the Balance Sheet at the par value of the total shares outstanding of a company. The par value of {{CommonStock}} is meaningless. It is usually set at an absurdly low number.&lt;/p&gt;
   * @return commonStock
   */
  @javax.annotation.Nullable
  public BigDecimal getCommonStock() {
    return commonStock;
  }

  public void setCommonStock(@javax.annotation.Nullable BigDecimal commonStock) {
    this.commonStock = commonStock;
  }


  public FundamentalsIREITNODIRECTBalanceSheet currentDeferredRevenue(@javax.annotation.Nullable BigDecimal currentDeferredRevenue) {
    this.currentDeferredRevenue = currentDeferredRevenue;
    return this;
  }

  /**
   * &lt;p&gt;{{CurrentDeferredRevenue}} represents collections of cash or other assets related to revenue producing activity for which revenue has not yet been recognized. Generally, an entity records deferred revenue when it receives consideration from a customer before achieving certain criteria that must be met for revenue to be recognized in conformity with GAAP. It can be either current or non-current item. Also called unearned revenue.&lt;/p&gt;
   * @return currentDeferredRevenue
   */
  @javax.annotation.Nullable
  public BigDecimal getCurrentDeferredRevenue() {
    return currentDeferredRevenue;
  }

  public void setCurrentDeferredRevenue(@javax.annotation.Nullable BigDecimal currentDeferredRevenue) {
    this.currentDeferredRevenue = currentDeferredRevenue;
  }


  public FundamentalsIREITNODIRECTBalanceSheet currentDeferredTaxesLiabilities(@javax.annotation.Nullable BigDecimal currentDeferredTaxesLiabilities) {
    this.currentDeferredTaxesLiabilities = currentDeferredTaxesLiabilities;
    return this;
  }

  /**
   * &lt;p&gt;{{CurrentDeferredTaxesLiabilities}} means a future tax liability, resulting from temporary differences between book (accounting) value of assets and liabilities and their tax value, or timing differences between the recognition of gains and losses in financial statements and their recognition in a tax computation. Deferred tax liabilities generally arise where tax relief is provided in advance of an accounting expense, or income is accrued but not taxed until received.&lt;/p&gt;
   * @return currentDeferredTaxesLiabilities
   */
  @javax.annotation.Nullable
  public BigDecimal getCurrentDeferredTaxesLiabilities() {
    return currentDeferredTaxesLiabilities;
  }

  public void setCurrentDeferredTaxesLiabilities(@javax.annotation.Nullable BigDecimal currentDeferredTaxesLiabilities) {
    this.currentDeferredTaxesLiabilities = currentDeferredTaxesLiabilities;
  }


  public FundamentalsIREITNODIRECTBalanceSheet debtToEquity(@javax.annotation.Nullable BigDecimal debtToEquity) {
    this.debtToEquity = debtToEquity;
    return this;
  }

  /**
   * The Debt/Equity (D/E) Ratio is calculated by dividing a company’s total liabilities by its shareholder equity. The ratio is used to evaluate a company&#39;s financial leverage.
   * @return debtToEquity
   */
  @javax.annotation.Nullable
  public BigDecimal getDebtToEquity() {
    return debtToEquity;
  }

  public void setDebtToEquity(@javax.annotation.Nullable BigDecimal debtToEquity) {
    this.debtToEquity = debtToEquity;
  }


  public FundamentalsIREITNODIRECTBalanceSheet equityToAsset(@javax.annotation.Nullable BigDecimal equityToAsset) {
    this.equityToAsset = equityToAsset;
    return this;
  }

  /**
   * Equity to Asset ratio is calculated as shareholder&#39;s tangible equity divided by its total asset.
   * @return equityToAsset
   */
  @javax.annotation.Nullable
  public BigDecimal getEquityToAsset() {
    return equityToAsset;
  }

  public void setEquityToAsset(@javax.annotation.Nullable BigDecimal equityToAsset) {
    this.equityToAsset = equityToAsset;
  }


  public FundamentalsIREITNODIRECTBalanceSheet goodWill(@javax.annotation.Nullable BigDecimal goodWill) {
    this.goodWill = goodWill;
    return this;
  }

  /**
   * &lt;p&gt;A {{Goodwill}} is an {{Intangibles}} that arises as a result of the acquisition of one company by another for a premium value. The value of a company&#39;s brand name, solid customer base, good customer relations, good employee relations and any patents or proprietary technology represent {{Goodwill}}. {{Goodwill}} is considered an {{Intangibles}} because it is not a physical asset like buildings or equipment. The {{Goodwill}} account can be found in the assets portion of a company&#39;s balance sheet.&lt;/p&gt;
   * @return goodWill
   */
  @javax.annotation.Nullable
  public BigDecimal getGoodWill() {
    return goodWill;
  }

  public void setGoodWill(@javax.annotation.Nullable BigDecimal goodWill) {
    this.goodWill = goodWill;
  }


  public FundamentalsIREITNODIRECTBalanceSheet intangibles(@javax.annotation.Nullable BigDecimal intangibles) {
    this.intangibles = intangibles;
    return this;
  }

  /**
   * &lt;p&gt;{{Intangibles}} are defined as identifiable non-monetary assets that cannot be seen, touched or physically measured.  Examples of {{Intangibles}} include trade secrets, copyrights, patents, trademarks. If a company acquires assets at the prices above the book value, it may carry {{Goodwill}} on its balance sheet. {{Goodwill}} reflects the difference between the price the company paid and the book value of the assets. If a company (company A) received a patent through their own work, though it has value, it does not show up on its balance sheet as an intangible asset. However, if company A sells this patent to company B, it will show up on company B&#39;s balance sheet as an {{Intangibles}}. The same applies to brand names, trade secrets etc. For instance, Coca-Cola&#39;s brand is extremely valuable, but the brand does not appear on its balance sheet, because the brand was never acquired.&lt;/p&gt;
   * @return intangibles
   */
  @javax.annotation.Nullable
  public BigDecimal getIntangibles() {
    return intangibles;
  }

  public void setIntangibles(@javax.annotation.Nullable BigDecimal intangibles) {
    this.intangibles = intangibles;
  }


  public FundamentalsIREITNODIRECTBalanceSheet longTermDebtAndCapitalLeaseObligation(@javax.annotation.Nullable BigDecimal longTermDebtAndCapitalLeaseObligation) {
    this.longTermDebtAndCapitalLeaseObligation = longTermDebtAndCapitalLeaseObligation;
    return this;
  }

  /**
   * &lt;p&gt;{{LongTermDebt}} is the debt due more than 12 months in the future. The debt can be owed to banks or bondholders. Some companies issue bonds to investors and pay interest on the bonds. &lt;br&gt;{{LongTermCapitalLeaseObligation}} represents the total liability for long-term leases lasting over one year. It&#39;s amount equal to the present value (the principal) at the beginning of the lease term less lease payments during the lease term. &lt;br&gt;{{Long-Term_Debt}} can be used to calculate {{ltd2asset}}: {{ltd2asset}} &#x3D; {{Long-Term_Debt}} / {{Total_Assets}}&lt;/p&gt;
   * @return longTermDebtAndCapitalLeaseObligation
   */
  @javax.annotation.Nullable
  public BigDecimal getLongTermDebtAndCapitalLeaseObligation() {
    return longTermDebtAndCapitalLeaseObligation;
  }

  public void setLongTermDebtAndCapitalLeaseObligation(@javax.annotation.Nullable BigDecimal longTermDebtAndCapitalLeaseObligation) {
    this.longTermDebtAndCapitalLeaseObligation = longTermDebtAndCapitalLeaseObligation;
  }


  public FundamentalsIREITNODIRECTBalanceSheet minorityInterest(@javax.annotation.Nullable BigDecimal minorityInterest) {
    this.minorityInterest = minorityInterest;
    return this;
  }

  /**
   * &lt;p&gt;{{Minority_interest}} is the carrying amount of the equity interests owned by non-controlling shareholders, partners, or other equity holders in one or more of the entities included in the reporting entity&#39;s consolidated financial statements.&lt;/p&gt;
   * @return minorityInterest
   */
  @javax.annotation.Nullable
  public BigDecimal getMinorityInterest() {
    return minorityInterest;
  }

  public void setMinorityInterest(@javax.annotation.Nullable BigDecimal minorityInterest) {
    this.minorityInterest = minorityInterest;
  }


  public FundamentalsIREITNODIRECTBalanceSheet netPpe(@javax.annotation.Nullable BigDecimal netPpe) {
    this.netPpe = netPpe;
    return this;
  }

  /**
   * &lt;p&gt;{{Net_PPE}} (PPE) are the fixed assets of the companyFixed assets are also known as non-current assets. {{Net_PPE}} includes assets that will - in the normal course of business - neither be used up in the next year nor will become a part of any product sold to customers. Some of the most common parts of property, plant, and equipment are: Land, Buildings (and leasehold improvements), Transportation equipment, Manufacturing equipment, Office equipment, Office furniture. Companies with lots of property, plant, and equipment often have special categories. For example, railroad property includes: Track, Ties, Ballast, Bridges, Tunnels, Signals, Locomotives, Freight Cars. There is often a note in the financial statements - found in a company&#39;s 10-K - that will explain the different categories of property a company owns. &lt;br&gt;The market value of {{Net_PPE}} can differ tremendously from the book value of {{Net_PPE}}. For example, when Berkshire Hathaway liquidated its textile mills, it had to pay the buyers of the company&#39;s manufacturing equipment to haul the equipment  away. That {{Net_PPE}} was literally worth less than zero. On the other hand, some companies own thousands of acres of land. All {{Net_PPE}} other than land is depreciated. Land is never depreciated. However, land is not marked up to market value either. Under Generally Accepted Accounting Principles (GAAP), land is shown on the balance sheet at cost. &lt;br&gt;The {{Net_PPE}} line shown on the balance sheet is usually net {{Net_PPE}}. This means it is the cost of the {{Net_PPE}} less accumulated depreciation.&lt;/p&gt;
   * @return netPpe
   */
  @javax.annotation.Nullable
  public BigDecimal getNetPpe() {
    return netPpe;
  }

  public void setNetPpe(@javax.annotation.Nullable BigDecimal netPpe) {
    this.netPpe = netPpe;
  }


  public FundamentalsIREITNODIRECTBalanceSheet nonCurrentDeferredIncomeTax(@javax.annotation.Nullable BigDecimal nonCurrentDeferredIncomeTax) {
    this.nonCurrentDeferredIncomeTax = nonCurrentDeferredIncomeTax;
    return this;
  }

  /**
   * The NonCurrent Deferred Income Tax represents the non-current portion of deferred income taxes, which is the difference in income recognition between tax laws and the accounting methods.
   * @return nonCurrentDeferredIncomeTax
   */
  @javax.annotation.Nullable
  public BigDecimal getNonCurrentDeferredIncomeTax() {
    return nonCurrentDeferredIncomeTax;
  }

  public void setNonCurrentDeferredIncomeTax(@javax.annotation.Nullable BigDecimal nonCurrentDeferredIncomeTax) {
    this.nonCurrentDeferredIncomeTax = nonCurrentDeferredIncomeTax;
  }


  public FundamentalsIREITNODIRECTBalanceSheet nonCurrentDeferredLiabilities(@javax.annotation.Nullable BigDecimal nonCurrentDeferredLiabilities) {
    this.nonCurrentDeferredLiabilities = nonCurrentDeferredLiabilities;
    return this;
  }

  /**
   * &lt;p&gt;{{NonCurrentDeferredLiabilities}} represents the non-current portion of obligations, which is a liability that usually would have been paid but is now pas due.&lt;/p&gt;
   * @return nonCurrentDeferredLiabilities
   */
  @javax.annotation.Nullable
  public BigDecimal getNonCurrentDeferredLiabilities() {
    return nonCurrentDeferredLiabilities;
  }

  public void setNonCurrentDeferredLiabilities(@javax.annotation.Nullable BigDecimal nonCurrentDeferredLiabilities) {
    this.nonCurrentDeferredLiabilities = nonCurrentDeferredLiabilities;
  }


  public FundamentalsIREITNODIRECTBalanceSheet notesReceivable(@javax.annotation.Nullable BigDecimal notesReceivable) {
    this.notesReceivable = notesReceivable;
    return this;
  }

  /**
   * &lt;p&gt;{{NotesReceivable}} is an unconditional promise to receive a definite sum of money at a future date(s) within one year of the balance sheet date or the normal operating cycle, whichever is longer.&lt;/p&gt;
   * @return notesReceivable
   */
  @javax.annotation.Nullable
  public BigDecimal getNotesReceivable() {
    return notesReceivable;
  }

  public void setNotesReceivable(@javax.annotation.Nullable BigDecimal notesReceivable) {
    this.notesReceivable = notesReceivable;
  }


  public FundamentalsIREITNODIRECTBalanceSheet otherCurrentReceivables(@javax.annotation.Nullable BigDecimal otherCurrentReceivables) {
    this.otherCurrentReceivables = otherCurrentReceivables;
    return this;
  }

  /**
   * &lt;p&gt;{{OtherCurrentReceivables}} is other current receivables of that not otherwise classified. GuruFocus uses a standardized financial statement format for all companies. GuruFocus lists {{Accts_Rec}}, {{NotesReceivable}}, {{LoansReceivable}} and {{OtherCurrentReceivables}} under the \&quot;{{TotalReceivables}}\&quot; section.&lt;/p&gt;
   * @return otherCurrentReceivables
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherCurrentReceivables() {
    return otherCurrentReceivables;
  }

  public void setOtherCurrentReceivables(@javax.annotation.Nullable BigDecimal otherCurrentReceivables) {
    this.otherCurrentReceivables = otherCurrentReceivables;
  }


  public FundamentalsIREITNODIRECTBalanceSheet otherEquity(@javax.annotation.Nullable BigDecimal otherEquity) {
    this.otherEquity = otherEquity;
    return this;
  }

  /**
   * &lt;p&gt;{{OtherEquity}} is instruments issued by the company that cannot be identified by other specific items in the Equity section. GuruFocus lists following items in \&quot;{{Total_Equity}}\&quot; section: {{CommonStock}}, {{Preferred_Stock}}, {{Retained_Earnings}}, {{accumulated_other_comprehensive_income}}, {{AdditionalPaidInCapital}}, {{Treasury_Stock}}, {{OtherEquity}}.&lt;/p&gt;
   * @return otherEquity
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherEquity() {
    return otherEquity;
  }

  public void setOtherEquity(@javax.annotation.Nullable BigDecimal otherEquity) {
    this.otherEquity = otherEquity;
  }


  public FundamentalsIREITNODIRECTBalanceSheet preferredStock(@javax.annotation.Nullable BigDecimal preferredStock) {
    this.preferredStock = preferredStock;
    return this;
  }

  /**
   * &lt;p&gt;{{Preferred_Stock}} is a special equity security that has properties of both equity and debt. It is generally considered a hybrid instrument. {{Preferred_Stock}} is senior to {{CommonStock}}, but is subordinate to bonds in terms of claim or rights to their share of the assets of the company. {{Preferred_Stock}} has priority over {{CommonStock}} in the payment of dividends and any payments received when a company liquidates. &lt;br&gt;{{Preferred_Stock}} comes in many forms. It can be: Convertible or Non-Convertible, Cumulative or Non-Cumulative, Voting or Non-Voting, Callable or Non-Callable, Maturity Date or No Maturity Date. &lt;br&gt;A {{Preferred_Stock}} without a maturity date is called a perpetual preferred stock. These are relatively rare. A good example of perpetual {{Preferred_Stock}} is the many series of Public Storage (PSA) preferred shares that trade on the New York Stock Exchange. &lt;br&gt;Before investing in preferred stock, it is important to know which of the above groups the stock belongs to. Is it convertible or non-convertible? Are dividends cumulative or non-cumulative? It is also critical that an investor knows what bonds the company has in front of the {{Preferred_Stock}}. Bondholders get paid first. So the decision to buy a {{Preferred_Stock}} can be similar to the decision to buy a bond. But, remember, the {{Preferred_Stock}} of a company with bonds is junior to those bonds.  &lt;br&gt;Unless a {{Preferred_Stock}} is convertible, the upside in a preferred stock investment is more limited than in a {{CommonStock}} investment. If a company doubles its earnings, it is usually under no more obligation to double the dividends paid to preferred shareholders than it is to double the interest paid to its bankers and bondholders.So {{Preferred_Stock}} is very different from {{CommonStock}}.&lt;/p&gt;
   * @return preferredStock
   */
  @javax.annotation.Nullable
  public BigDecimal getPreferredStock() {
    return preferredStock;
  }

  public void setPreferredStock(@javax.annotation.Nullable BigDecimal preferredStock) {
    this.preferredStock = preferredStock;
  }


  public FundamentalsIREITNODIRECTBalanceSheet retainedEarnings(@javax.annotation.Nullable BigDecimal retainedEarnings) {
    this.retainedEarnings = retainedEarnings;
    return this;
  }

  /**
   * &lt;p&gt;{{Retained_Earnings}} is the accumulated portion of {{Net_Income}} that is not distributed to shareholders. Because the {{Net_Income}} was not distributed to shareholders, shareholders&#39; equity is increased by the same amount. Of course, if a company loses, it is called retained losses, or accumulated losses. Historically profitable companies sometimes have negative {{Retained_Earnings}}. This is because they have cumulatively paid out more to shareholders than they reported in profits. If a company has negative {{Retained_Earnings}}, investors should check the 10-year financial results. They should not assume that negative {{Retained_Earnings}} prove a company has generally lost money in the past. Of course, many companies with negative {{Retained_Earnings}} have indeed lost money in the past.&lt;/p&gt;
   * @return retainedEarnings
   */
  @javax.annotation.Nullable
  public BigDecimal getRetainedEarnings() {
    return retainedEarnings;
  }

  public void setRetainedEarnings(@javax.annotation.Nullable BigDecimal retainedEarnings) {
    this.retainedEarnings = retainedEarnings;
  }


  public FundamentalsIREITNODIRECTBalanceSheet shortTermDebtAndCapitalLeaseObligation(@javax.annotation.Nullable BigDecimal shortTermDebtAndCapitalLeaseObligation) {
    this.shortTermDebtAndCapitalLeaseObligation = shortTermDebtAndCapitalLeaseObligation;
    return this;
  }

  /**
   * &lt;p&gt;{{Short-Term_Debt}} is the portion of a company&#39;s debt and capital lease obligation that need to be paid within the next 12 months. It equals {{ShortTermDebt_without_lease}} plus {{ShortTermCapitalLeaseObligation}}. This gives investors an idea of how much money the company needs to pay down for the principle of its debt.&lt;/p&gt;
   * @return shortTermDebtAndCapitalLeaseObligation
   */
  @javax.annotation.Nullable
  public BigDecimal getShortTermDebtAndCapitalLeaseObligation() {
    return shortTermDebtAndCapitalLeaseObligation;
  }

  public void setShortTermDebtAndCapitalLeaseObligation(@javax.annotation.Nullable BigDecimal shortTermDebtAndCapitalLeaseObligation) {
    this.shortTermDebtAndCapitalLeaseObligation = shortTermDebtAndCapitalLeaseObligation;
  }


  public FundamentalsIREITNODIRECTBalanceSheet totalAssets(@javax.annotation.Nullable BigDecimal totalAssets) {
    this.totalAssets = totalAssets;
    return this;
  }

  /**
   * &lt;p&gt;{{Total_Assets}} are all the assets a company owns. From the capital sources of the assets, some of the assets are funded through shareholder&#39;s paid in capital and {{Retained_Earnings}} of the business. Others are funded through borrowed money. &lt;br&gt;Therefore, total assets can be calculated as: {{Total_Assets}} &#x3D; {{Total_Current_Assets}} + {{TotalNonCurrentAssets}} &#x3D; Total Shareholder&#39;s Equity + {{Total_Liabilities}} &lt;br&gt;Total Assets is connected with Return on Assets by {{ROA}} &#x3D; {{Net_Income}} / {{Total_Assets}} &lt;br&gt; Total Assets is linked to {{Revenue}} through {{turnover}}: {{turnover}}  &#x3D; {{Revenue}} / {{Total_Assets}} &lt;br&gt;Therefore, if a company grows its {{Total_Assets}} faster than its {{Revenue}}, the {{turnover}} will decline. This might be a warning sign for the business.&lt;/p&gt;
   * @return totalAssets
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalAssets() {
    return totalAssets;
  }

  public void setTotalAssets(@javax.annotation.Nullable BigDecimal totalAssets) {
    this.totalAssets = totalAssets;
  }


  public FundamentalsIREITNODIRECTBalanceSheet totalEquity(@javax.annotation.Nullable BigDecimal totalEquity) {
    this.totalEquity = totalEquity;
    return this;
  }

  /**
   * &lt;p&gt;{{TotalEquityGrossMinorityInterest}} is residual interest, including minority interest, that remains in the assets of the enterprise after deducting its liabilities. Equity is increased by owners’ investments and by comprehensive income, and it is reduced by distributions to the owners.&lt;/p&gt;
   * @return totalEquity
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalEquity() {
    return totalEquity;
  }

  public void setTotalEquity(@javax.annotation.Nullable BigDecimal totalEquity) {
    this.totalEquity = totalEquity;
  }


  public FundamentalsIREITNODIRECTBalanceSheet totalLiabilities(@javax.annotation.Nullable BigDecimal totalLiabilities) {
    this.totalLiabilities = totalLiabilities;
    return this;
  }

  /**
   * &lt;p&gt;{{Total_Liabilities}} &#x3D; {{Total_Current_Liabilities}} + {{TotalNonCurrentLiabilitiesNetMinorityInterest}} &#x3D; {{Total_Current_Liabilities}} + {{Long-Term_Debt}} + {{ther_Long-Term_Liab}} &lt;br&gt;{{Total_Liabilities}} &#x3D; {{Total_Assets}} - {{TotalEquityGrossMinorityInterest}} &lt;br&gt;{{Total_Liabilities}} are the liabilities that the company has to pay others. It is a part of the balance sheet of a company that shareholders do not own, and would be obligated to pay back if the company liquidated.&lt;/p&gt;
   * @return totalLiabilities
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalLiabilities() {
    return totalLiabilities;
  }

  public void setTotalLiabilities(@javax.annotation.Nullable BigDecimal totalLiabilities) {
    this.totalLiabilities = totalLiabilities;
  }


  public FundamentalsIREITNODIRECTBalanceSheet totalReceivables(@javax.annotation.Nullable BigDecimal totalReceivables) {
    this.totalReceivables = totalReceivables;
    return this;
  }

  /**
   * &lt;p&gt;{{TotalReceivables}} is the sum of all receivables owed by customers and affiliates within one year, including {{Accts_Rec}}, {{NotesReceivable}}, {{LoansReceivable}},{{OtherCurrentReceivables}}.&lt;/p&gt;
   * @return totalReceivables
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalReceivables() {
    return totalReceivables;
  }

  public void setTotalReceivables(@javax.annotation.Nullable BigDecimal totalReceivables) {
    this.totalReceivables = totalReceivables;
  }


  public FundamentalsIREITNODIRECTBalanceSheet totalStockholdersEquity(@javax.annotation.Nullable BigDecimal totalStockholdersEquity) {
    this.totalStockholdersEquity = totalStockholdersEquity;
    return this;
  }

  /**
   * &lt;p&gt;{{Total_Equity}} refers to the net assets owned by shareholders. &lt;br&gt;{{Total_Equity}} &#x3D; {{Preferred_Stock}} + {{CommonStock}} + Capital Surplus + {{Retained_Earnings}} &lt;br&gt;{{Total_Equity}} and {{Total_Liabilities}} are the two components for {{Total_Assets}}: &lt;br&gt;Total Assets &#x3D; Total Shareholder&#39;s Equity + {{Total_Liabilities}}  &#x3D; {{Total_Current_Assets}} + {{TotalNonCurrentAssets}} &lt;br&gt;{{Total_Equity}} is used to calculate {{Book_Value_Per_Share}}: {{Book_Value_Per_Share}} &#x3D; ({{Total_Equity}} - {{Preferred_Stock}})/ {{BS_share}}. &lt;br&gt;The ratio of a company&#39;s debt over equity can be used to measure how leveraged this company is: {{deb2equity}} &#x3D; ({{Long-Term_Debt}} + {{Short-Term_Debt}})/{{Total_Equity}}.&lt;/p&gt;
   * @return totalStockholdersEquity
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalStockholdersEquity() {
    return totalStockholdersEquity;
  }

  public void setTotalStockholdersEquity(@javax.annotation.Nullable BigDecimal totalStockholdersEquity) {
    this.totalStockholdersEquity = totalStockholdersEquity;
  }


  public FundamentalsIREITNODIRECTBalanceSheet treasuryStock(@javax.annotation.Nullable BigDecimal treasuryStock) {
    this.treasuryStock = treasuryStock;
    return this;
  }

  /**
   * &lt;p&gt;{{Treasury_Stock}} is the portion of shares that a company keeps in their own treasury. {{Treasury_Stock}} may have come from a repurchase or buyback from shareholders; or it may have never been issued to the public in the first place. These shares don&#39;t pay dividends, have no voting rights, and should not be included in shares outstanding calculations.&lt;/p&gt;
   * @return treasuryStock
   */
  @javax.annotation.Nullable
  public BigDecimal getTreasuryStock() {
    return treasuryStock;
  }

  public void setTreasuryStock(@javax.annotation.Nullable BigDecimal treasuryStock) {
    this.treasuryStock = treasuryStock;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FundamentalsIREITNODIRECTBalanceSheet fundamentalsIREITNODIRECTBalanceSheet = (FundamentalsIREITNODIRECTBalanceSheet) o;
    return Objects.equals(this.accountsReceivable, fundamentalsIREITNODIRECTBalanceSheet.accountsReceivable) &&
        Objects.equals(this.accumulatedOtherComprehensiveIncome, fundamentalsIREITNODIRECTBalanceSheet.accumulatedOtherComprehensiveIncome) &&
        Objects.equals(this.additionalPaidInCapital, fundamentalsIREITNODIRECTBalanceSheet.additionalPaidInCapital) &&
        Objects.equals(this.bsCashAndCashEquivalents, fundamentalsIREITNODIRECTBalanceSheet.bsCashAndCashEquivalents) &&
        Objects.equals(this.bsCurrentDeferredLiabilities, fundamentalsIREITNODIRECTBalanceSheet.bsCurrentDeferredLiabilities) &&
        Objects.equals(this.bsDeferredPolicyAcquisitionCosts, fundamentalsIREITNODIRECTBalanceSheet.bsDeferredPolicyAcquisitionCosts) &&
        Objects.equals(this.bsEquityInvestments, fundamentalsIREITNODIRECTBalanceSheet.bsEquityInvestments) &&
        Objects.equals(this.bsFixedMaturityInvestment, fundamentalsIREITNODIRECTBalanceSheet.bsFixedMaturityInvestment) &&
        Objects.equals(this.bsFuturePolicyBenefits, fundamentalsIREITNODIRECTBalanceSheet.bsFuturePolicyBenefits) &&
        Objects.equals(this.bsNetLoan, fundamentalsIREITNODIRECTBalanceSheet.bsNetLoan) &&
        Objects.equals(this.bsOtherAssetsInsurance, fundamentalsIREITNODIRECTBalanceSheet.bsOtherAssetsInsurance) &&
        Objects.equals(this.bsOtherLiabilitiesInsurance, fundamentalsIREITNODIRECTBalanceSheet.bsOtherLiabilitiesInsurance) &&
        Objects.equals(this.bsPayablesAndAccruedExpenses, fundamentalsIREITNODIRECTBalanceSheet.bsPayablesAndAccruedExpenses) &&
        Objects.equals(this.bsPolicyholderFunds, fundamentalsIREITNODIRECTBalanceSheet.bsPolicyholderFunds) &&
        Objects.equals(this.bsTradingAssets, fundamentalsIREITNODIRECTBalanceSheet.bsTradingAssets) &&
        Objects.equals(this.bsUnearnedPremiums, fundamentalsIREITNODIRECTBalanceSheet.bsUnearnedPremiums) &&
        Objects.equals(this.bsUnpaidLossAndLossReserve, fundamentalsIREITNODIRECTBalanceSheet.bsUnpaidLossAndLossReserve) &&
        Objects.equals(this.commonStock, fundamentalsIREITNODIRECTBalanceSheet.commonStock) &&
        Objects.equals(this.currentDeferredRevenue, fundamentalsIREITNODIRECTBalanceSheet.currentDeferredRevenue) &&
        Objects.equals(this.currentDeferredTaxesLiabilities, fundamentalsIREITNODIRECTBalanceSheet.currentDeferredTaxesLiabilities) &&
        Objects.equals(this.debtToEquity, fundamentalsIREITNODIRECTBalanceSheet.debtToEquity) &&
        Objects.equals(this.equityToAsset, fundamentalsIREITNODIRECTBalanceSheet.equityToAsset) &&
        Objects.equals(this.goodWill, fundamentalsIREITNODIRECTBalanceSheet.goodWill) &&
        Objects.equals(this.intangibles, fundamentalsIREITNODIRECTBalanceSheet.intangibles) &&
        Objects.equals(this.longTermDebtAndCapitalLeaseObligation, fundamentalsIREITNODIRECTBalanceSheet.longTermDebtAndCapitalLeaseObligation) &&
        Objects.equals(this.minorityInterest, fundamentalsIREITNODIRECTBalanceSheet.minorityInterest) &&
        Objects.equals(this.netPpe, fundamentalsIREITNODIRECTBalanceSheet.netPpe) &&
        Objects.equals(this.nonCurrentDeferredIncomeTax, fundamentalsIREITNODIRECTBalanceSheet.nonCurrentDeferredIncomeTax) &&
        Objects.equals(this.nonCurrentDeferredLiabilities, fundamentalsIREITNODIRECTBalanceSheet.nonCurrentDeferredLiabilities) &&
        Objects.equals(this.notesReceivable, fundamentalsIREITNODIRECTBalanceSheet.notesReceivable) &&
        Objects.equals(this.otherCurrentReceivables, fundamentalsIREITNODIRECTBalanceSheet.otherCurrentReceivables) &&
        Objects.equals(this.otherEquity, fundamentalsIREITNODIRECTBalanceSheet.otherEquity) &&
        Objects.equals(this.preferredStock, fundamentalsIREITNODIRECTBalanceSheet.preferredStock) &&
        Objects.equals(this.retainedEarnings, fundamentalsIREITNODIRECTBalanceSheet.retainedEarnings) &&
        Objects.equals(this.shortTermDebtAndCapitalLeaseObligation, fundamentalsIREITNODIRECTBalanceSheet.shortTermDebtAndCapitalLeaseObligation) &&
        Objects.equals(this.totalAssets, fundamentalsIREITNODIRECTBalanceSheet.totalAssets) &&
        Objects.equals(this.totalEquity, fundamentalsIREITNODIRECTBalanceSheet.totalEquity) &&
        Objects.equals(this.totalLiabilities, fundamentalsIREITNODIRECTBalanceSheet.totalLiabilities) &&
        Objects.equals(this.totalReceivables, fundamentalsIREITNODIRECTBalanceSheet.totalReceivables) &&
        Objects.equals(this.totalStockholdersEquity, fundamentalsIREITNODIRECTBalanceSheet.totalStockholdersEquity) &&
        Objects.equals(this.treasuryStock, fundamentalsIREITNODIRECTBalanceSheet.treasuryStock);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountsReceivable, accumulatedOtherComprehensiveIncome, additionalPaidInCapital, bsCashAndCashEquivalents, bsCurrentDeferredLiabilities, bsDeferredPolicyAcquisitionCosts, bsEquityInvestments, bsFixedMaturityInvestment, bsFuturePolicyBenefits, bsNetLoan, bsOtherAssetsInsurance, bsOtherLiabilitiesInsurance, bsPayablesAndAccruedExpenses, bsPolicyholderFunds, bsTradingAssets, bsUnearnedPremiums, bsUnpaidLossAndLossReserve, commonStock, currentDeferredRevenue, currentDeferredTaxesLiabilities, debtToEquity, equityToAsset, goodWill, intangibles, longTermDebtAndCapitalLeaseObligation, minorityInterest, netPpe, nonCurrentDeferredIncomeTax, nonCurrentDeferredLiabilities, notesReceivable, otherCurrentReceivables, otherEquity, preferredStock, retainedEarnings, shortTermDebtAndCapitalLeaseObligation, totalAssets, totalEquity, totalLiabilities, totalReceivables, totalStockholdersEquity, treasuryStock);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FundamentalsIREITNODIRECTBalanceSheet {\n");
    sb.append("    accountsReceivable: ").append(toIndentedString(accountsReceivable)).append("\n");
    sb.append("    accumulatedOtherComprehensiveIncome: ").append(toIndentedString(accumulatedOtherComprehensiveIncome)).append("\n");
    sb.append("    additionalPaidInCapital: ").append(toIndentedString(additionalPaidInCapital)).append("\n");
    sb.append("    bsCashAndCashEquivalents: ").append(toIndentedString(bsCashAndCashEquivalents)).append("\n");
    sb.append("    bsCurrentDeferredLiabilities: ").append(toIndentedString(bsCurrentDeferredLiabilities)).append("\n");
    sb.append("    bsDeferredPolicyAcquisitionCosts: ").append(toIndentedString(bsDeferredPolicyAcquisitionCosts)).append("\n");
    sb.append("    bsEquityInvestments: ").append(toIndentedString(bsEquityInvestments)).append("\n");
    sb.append("    bsFixedMaturityInvestment: ").append(toIndentedString(bsFixedMaturityInvestment)).append("\n");
    sb.append("    bsFuturePolicyBenefits: ").append(toIndentedString(bsFuturePolicyBenefits)).append("\n");
    sb.append("    bsNetLoan: ").append(toIndentedString(bsNetLoan)).append("\n");
    sb.append("    bsOtherAssetsInsurance: ").append(toIndentedString(bsOtherAssetsInsurance)).append("\n");
    sb.append("    bsOtherLiabilitiesInsurance: ").append(toIndentedString(bsOtherLiabilitiesInsurance)).append("\n");
    sb.append("    bsPayablesAndAccruedExpenses: ").append(toIndentedString(bsPayablesAndAccruedExpenses)).append("\n");
    sb.append("    bsPolicyholderFunds: ").append(toIndentedString(bsPolicyholderFunds)).append("\n");
    sb.append("    bsTradingAssets: ").append(toIndentedString(bsTradingAssets)).append("\n");
    sb.append("    bsUnearnedPremiums: ").append(toIndentedString(bsUnearnedPremiums)).append("\n");
    sb.append("    bsUnpaidLossAndLossReserve: ").append(toIndentedString(bsUnpaidLossAndLossReserve)).append("\n");
    sb.append("    commonStock: ").append(toIndentedString(commonStock)).append("\n");
    sb.append("    currentDeferredRevenue: ").append(toIndentedString(currentDeferredRevenue)).append("\n");
    sb.append("    currentDeferredTaxesLiabilities: ").append(toIndentedString(currentDeferredTaxesLiabilities)).append("\n");
    sb.append("    debtToEquity: ").append(toIndentedString(debtToEquity)).append("\n");
    sb.append("    equityToAsset: ").append(toIndentedString(equityToAsset)).append("\n");
    sb.append("    goodWill: ").append(toIndentedString(goodWill)).append("\n");
    sb.append("    intangibles: ").append(toIndentedString(intangibles)).append("\n");
    sb.append("    longTermDebtAndCapitalLeaseObligation: ").append(toIndentedString(longTermDebtAndCapitalLeaseObligation)).append("\n");
    sb.append("    minorityInterest: ").append(toIndentedString(minorityInterest)).append("\n");
    sb.append("    netPpe: ").append(toIndentedString(netPpe)).append("\n");
    sb.append("    nonCurrentDeferredIncomeTax: ").append(toIndentedString(nonCurrentDeferredIncomeTax)).append("\n");
    sb.append("    nonCurrentDeferredLiabilities: ").append(toIndentedString(nonCurrentDeferredLiabilities)).append("\n");
    sb.append("    notesReceivable: ").append(toIndentedString(notesReceivable)).append("\n");
    sb.append("    otherCurrentReceivables: ").append(toIndentedString(otherCurrentReceivables)).append("\n");
    sb.append("    otherEquity: ").append(toIndentedString(otherEquity)).append("\n");
    sb.append("    preferredStock: ").append(toIndentedString(preferredStock)).append("\n");
    sb.append("    retainedEarnings: ").append(toIndentedString(retainedEarnings)).append("\n");
    sb.append("    shortTermDebtAndCapitalLeaseObligation: ").append(toIndentedString(shortTermDebtAndCapitalLeaseObligation)).append("\n");
    sb.append("    totalAssets: ").append(toIndentedString(totalAssets)).append("\n");
    sb.append("    totalEquity: ").append(toIndentedString(totalEquity)).append("\n");
    sb.append("    totalLiabilities: ").append(toIndentedString(totalLiabilities)).append("\n");
    sb.append("    totalReceivables: ").append(toIndentedString(totalReceivables)).append("\n");
    sb.append("    totalStockholdersEquity: ").append(toIndentedString(totalStockholdersEquity)).append("\n");
    sb.append("    treasuryStock: ").append(toIndentedString(treasuryStock)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accounts_receivable");
    openapiFields.add("accumulated_other_comprehensive_income");
    openapiFields.add("additional_paid_in_capital");
    openapiFields.add("bs_cash_and_cash_equivalents");
    openapiFields.add("bs_current_deferred_liabilities");
    openapiFields.add("bs_deferred_policy_acquisition_costs");
    openapiFields.add("bs_equity_investments");
    openapiFields.add("bs_fixed_maturity_investment");
    openapiFields.add("bs_future_policy_benefits");
    openapiFields.add("bs_net_loan");
    openapiFields.add("bs_other_assets_insurance");
    openapiFields.add("bs_other_liabilities_insurance");
    openapiFields.add("bs_payables_and_accrued_expenses");
    openapiFields.add("bs_policyholder_funds");
    openapiFields.add("bs_trading_assets");
    openapiFields.add("bs_unearned_premiums");
    openapiFields.add("bs_unpaid_loss_and_loss_reserve");
    openapiFields.add("common_stock");
    openapiFields.add("current_deferred_revenue");
    openapiFields.add("current_deferred_taxes_liabilities");
    openapiFields.add("debt_to_equity");
    openapiFields.add("equity_to_asset");
    openapiFields.add("good_will");
    openapiFields.add("intangibles");
    openapiFields.add("long_term_debt_and_capital_lease_obligation");
    openapiFields.add("minority_interest");
    openapiFields.add("net_ppe");
    openapiFields.add("non_current_deferred_income_tax");
    openapiFields.add("non_current_deferred_liabilities");
    openapiFields.add("notes_receivable");
    openapiFields.add("other_current_receivables");
    openapiFields.add("other_equity");
    openapiFields.add("preferred_stock");
    openapiFields.add("retained_earnings");
    openapiFields.add("short_term_debt_and_capital_lease_obligation");
    openapiFields.add("total_assets");
    openapiFields.add("total_equity");
    openapiFields.add("total_liabilities");
    openapiFields.add("total_receivables");
    openapiFields.add("total_stockholders_equity");
    openapiFields.add("treasury_stock");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FundamentalsIREITNODIRECTBalanceSheet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FundamentalsIREITNODIRECTBalanceSheet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FundamentalsIREITNODIRECTBalanceSheet is not found in the empty JSON string", FundamentalsIREITNODIRECTBalanceSheet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FundamentalsIREITNODIRECTBalanceSheet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FundamentalsIREITNODIRECTBalanceSheet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FundamentalsIREITNODIRECTBalanceSheet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FundamentalsIREITNODIRECTBalanceSheet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FundamentalsIREITNODIRECTBalanceSheet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FundamentalsIREITNODIRECTBalanceSheet.class));

       return (TypeAdapter<T>) new TypeAdapter<FundamentalsIREITNODIRECTBalanceSheet>() {
           @Override
           public void write(JsonWriter out, FundamentalsIREITNODIRECTBalanceSheet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FundamentalsIREITNODIRECTBalanceSheet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FundamentalsIREITNODIRECTBalanceSheet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FundamentalsIREITNODIRECTBalanceSheet
   * @throws IOException if the JSON string is invalid with respect to FundamentalsIREITNODIRECTBalanceSheet
   */
  public static FundamentalsIREITNODIRECTBalanceSheet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FundamentalsIREITNODIRECTBalanceSheet.class);
  }

  /**
   * Convert an instance of FundamentalsIREITNODIRECTBalanceSheet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

