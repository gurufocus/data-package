/*
 * Gurufocus Data Package API
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FundamentalsNREITNODIRECTCashflowStatement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-11T01:10:00.357398434Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class FundamentalsNREITNODIRECTCashflowStatement {
  public static final String SERIALIZED_NAME_ASSET_IMPAIRMENT_CHARGE = "asset_impairment_charge";
  @SerializedName(SERIALIZED_NAME_ASSET_IMPAIRMENT_CHARGE)
  @javax.annotation.Nullable
  private BigDecimal assetImpairmentCharge;

  public static final String SERIALIZED_NAME_BEGINNING_CASH_POSITION = "beginning_cash_position";
  @SerializedName(SERIALIZED_NAME_BEGINNING_CASH_POSITION)
  @javax.annotation.Nullable
  private BigDecimal beginningCashPosition;

  public static final String SERIALIZED_NAME_CASH_FLOW_CAPITAL_EXPENDITURE = "cash_flow_capital_expenditure";
  @SerializedName(SERIALIZED_NAME_CASH_FLOW_CAPITAL_EXPENDITURE)
  @javax.annotation.Nullable
  private BigDecimal cashFlowCapitalExpenditure;

  public static final String SERIALIZED_NAME_CASH_FLOW_DEFERRED_TAX = "cash_flow_deferred_tax";
  @SerializedName(SERIALIZED_NAME_CASH_FLOW_DEFERRED_TAX)
  @javax.annotation.Nullable
  private BigDecimal cashFlowDeferredTax;

  public static final String SERIALIZED_NAME_CASH_FLOW_DEPRECIATION_DEPLETION_AMORTIZATION = "cash_flow_depreciation_depletion_amortization";
  @SerializedName(SERIALIZED_NAME_CASH_FLOW_DEPRECIATION_DEPLETION_AMORTIZATION)
  @javax.annotation.Nullable
  private BigDecimal cashFlowDepreciationDepletionAmortization;

  public static final String SERIALIZED_NAME_CASH_FLOW_FOR_LEASE_FINANCING = "cash_flow_for_lease_financing";
  @SerializedName(SERIALIZED_NAME_CASH_FLOW_FOR_LEASE_FINANCING)
  @javax.annotation.Nullable
  private BigDecimal cashFlowForLeaseFinancing;

  public static final String SERIALIZED_NAME_CASH_FLOW_FROM_INVESTING = "cash_flow_from_investing";
  @SerializedName(SERIALIZED_NAME_CASH_FLOW_FROM_INVESTING)
  @javax.annotation.Nullable
  private BigDecimal cashFlowFromInvesting;

  public static final String SERIALIZED_NAME_CASH_FLOW_FROM_OPERATIONS = "cash_flow_from_operations";
  @SerializedName(SERIALIZED_NAME_CASH_FLOW_FROM_OPERATIONS)
  @javax.annotation.Nullable
  private BigDecimal cashFlowFromOperations;

  public static final String SERIALIZED_NAME_CASH_FLOW_FROM_OTHERS = "cash_flow_from_others";
  @SerializedName(SERIALIZED_NAME_CASH_FLOW_FROM_OTHERS)
  @javax.annotation.Nullable
  private BigDecimal cashFlowFromOthers;

  public static final String SERIALIZED_NAME_CASH_FROM_DISCONTINUED_INVESTING_ACTIVITIES = "cash_from_discontinued_investing_activities";
  @SerializedName(SERIALIZED_NAME_CASH_FROM_DISCONTINUED_INVESTING_ACTIVITIES)
  @javax.annotation.Nullable
  private BigDecimal cashFromDiscontinuedInvestingActivities;

  public static final String SERIALIZED_NAME_CASH_FROM_DISCONTINUED_OPERATING_ACTIVITIES = "cash_from_discontinued_operating_activities";
  @SerializedName(SERIALIZED_NAME_CASH_FROM_DISCONTINUED_OPERATING_ACTIVITIES)
  @javax.annotation.Nullable
  private BigDecimal cashFromDiscontinuedOperatingActivities;

  public static final String SERIALIZED_NAME_CASH_FROM_FINANCING = "cash_from_financing";
  @SerializedName(SERIALIZED_NAME_CASH_FROM_FINANCING)
  @javax.annotation.Nullable
  private BigDecimal cashFromFinancing;

  public static final String SERIALIZED_NAME_CASH_FROM_OTHER_INVESTING_ACTIVITIES = "cash_from_other_investing_activities";
  @SerializedName(SERIALIZED_NAME_CASH_FROM_OTHER_INVESTING_ACTIVITIES)
  @javax.annotation.Nullable
  private BigDecimal cashFromOtherInvestingActivities;

  public static final String SERIALIZED_NAME_CHANGE_IN_INVENTORY = "change_in_inventory";
  @SerializedName(SERIALIZED_NAME_CHANGE_IN_INVENTORY)
  @javax.annotation.Nullable
  private BigDecimal changeInInventory;

  public static final String SERIALIZED_NAME_CHANGE_IN_OTHER_WORKING_CAPITAL = "change_in_other_working_capital";
  @SerializedName(SERIALIZED_NAME_CHANGE_IN_OTHER_WORKING_CAPITAL)
  @javax.annotation.Nullable
  private BigDecimal changeInOtherWorkingCapital;

  public static final String SERIALIZED_NAME_CHANGE_IN_PAYABLES_AND_ACCRUED_EXPENSE = "change_in_payables_and_accrued_expense";
  @SerializedName(SERIALIZED_NAME_CHANGE_IN_PAYABLES_AND_ACCRUED_EXPENSE)
  @javax.annotation.Nullable
  private BigDecimal changeInPayablesAndAccruedExpense;

  public static final String SERIALIZED_NAME_CHANGE_IN_PREPAID_ASSETS = "change_in_prepaid_assets";
  @SerializedName(SERIALIZED_NAME_CHANGE_IN_PREPAID_ASSETS)
  @javax.annotation.Nullable
  private BigDecimal changeInPrepaidAssets;

  public static final String SERIALIZED_NAME_CHANGE_IN_RECEIVABLES = "change_in_receivables";
  @SerializedName(SERIALIZED_NAME_CHANGE_IN_RECEIVABLES)
  @javax.annotation.Nullable
  private BigDecimal changeInReceivables;

  public static final String SERIALIZED_NAME_CHANGE_IN_WORKING_CAPITAL = "change_in_working_capital";
  @SerializedName(SERIALIZED_NAME_CHANGE_IN_WORKING_CAPITAL)
  @javax.annotation.Nullable
  private BigDecimal changeInWorkingCapital;

  public static final String SERIALIZED_NAME_DEBT_ISSUANCE = "debt_issuance";
  @SerializedName(SERIALIZED_NAME_DEBT_ISSUANCE)
  @javax.annotation.Nullable
  private BigDecimal debtIssuance;

  public static final String SERIALIZED_NAME_DEBT_PAYMENTS = "debt_payments";
  @SerializedName(SERIALIZED_NAME_DEBT_PAYMENTS)
  @javax.annotation.Nullable
  private BigDecimal debtPayments;

  public static final String SERIALIZED_NAME_DIVIDENDS = "dividends";
  @SerializedName(SERIALIZED_NAME_DIVIDENDS)
  @javax.annotation.Nullable
  private BigDecimal dividends;

  public static final String SERIALIZED_NAME_EFFECT_OF_EXCHANGE_RATE_CHANGES = "effect_of_exchange_rate_changes";
  @SerializedName(SERIALIZED_NAME_EFFECT_OF_EXCHANGE_RATE_CHANGES)
  @javax.annotation.Nullable
  private BigDecimal effectOfExchangeRateChanges;

  public static final String SERIALIZED_NAME_ENDING_CASH_POSITION = "ending_cash_position";
  @SerializedName(SERIALIZED_NAME_ENDING_CASH_POSITION)
  @javax.annotation.Nullable
  private BigDecimal endingCashPosition;

  public static final String SERIALIZED_NAME_FFO = "ffo";
  @SerializedName(SERIALIZED_NAME_FFO)
  @javax.annotation.Nullable
  private BigDecimal ffo;

  public static final String SERIALIZED_NAME_ISSUANCE_OF_STOCK = "issuance_of_stock";
  @SerializedName(SERIALIZED_NAME_ISSUANCE_OF_STOCK)
  @javax.annotation.Nullable
  private BigDecimal issuanceOfStock;

  public static final String SERIALIZED_NAME_NET_CHANGE_IN_CASH = "net_change_in_cash";
  @SerializedName(SERIALIZED_NAME_NET_CHANGE_IN_CASH)
  @javax.annotation.Nullable
  private BigDecimal netChangeInCash;

  public static final String SERIALIZED_NAME_NET_INCOME_FROM_CONTINUING_OPERATIONS = "net_income_from_continuing_operations";
  @SerializedName(SERIALIZED_NAME_NET_INCOME_FROM_CONTINUING_OPERATIONS)
  @javax.annotation.Nullable
  private BigDecimal netIncomeFromContinuingOperations;

  public static final String SERIALIZED_NAME_NET_INTANGIBLES_PURCHASE_AND_SALE = "net_intangibles_purchase_and_sale";
  @SerializedName(SERIALIZED_NAME_NET_INTANGIBLES_PURCHASE_AND_SALE)
  @javax.annotation.Nullable
  private BigDecimal netIntangiblesPurchaseAndSale;

  public static final String SERIALIZED_NAME_NET_ISSUANCE_OF_DEBT = "net_issuance_of_debt";
  @SerializedName(SERIALIZED_NAME_NET_ISSUANCE_OF_DEBT)
  @javax.annotation.Nullable
  private BigDecimal netIssuanceOfDebt;

  public static final String SERIALIZED_NAME_NET_ISSUANCE_OF_PREFERRED = "net_issuance_of_preferred";
  @SerializedName(SERIALIZED_NAME_NET_ISSUANCE_OF_PREFERRED)
  @javax.annotation.Nullable
  private BigDecimal netIssuanceOfPreferred;

  public static final String SERIALIZED_NAME_OTHER_FINANCING = "other_financing";
  @SerializedName(SERIALIZED_NAME_OTHER_FINANCING)
  @javax.annotation.Nullable
  private BigDecimal otherFinancing;

  public static final String SERIALIZED_NAME_PURCHASE_OF_BUSINESS = "purchase_of_business";
  @SerializedName(SERIALIZED_NAME_PURCHASE_OF_BUSINESS)
  @javax.annotation.Nullable
  private BigDecimal purchaseOfBusiness;

  public static final String SERIALIZED_NAME_PURCHASE_OF_INVESTMENT = "purchase_of_investment";
  @SerializedName(SERIALIZED_NAME_PURCHASE_OF_INVESTMENT)
  @javax.annotation.Nullable
  private BigDecimal purchaseOfInvestment;

  public static final String SERIALIZED_NAME_PURCHASE_OF_PPE = "purchase_of_ppe";
  @SerializedName(SERIALIZED_NAME_PURCHASE_OF_PPE)
  @javax.annotation.Nullable
  private BigDecimal purchaseOfPpe;

  public static final String SERIALIZED_NAME_REPURCHASE_OF_STOCK = "repurchase_of_stock";
  @SerializedName(SERIALIZED_NAME_REPURCHASE_OF_STOCK)
  @javax.annotation.Nullable
  private BigDecimal repurchaseOfStock;

  public static final String SERIALIZED_NAME_SALE_OF_BUSINESS = "sale_of_business";
  @SerializedName(SERIALIZED_NAME_SALE_OF_BUSINESS)
  @javax.annotation.Nullable
  private BigDecimal saleOfBusiness;

  public static final String SERIALIZED_NAME_SALE_OF_INVESTMENT = "sale_of_investment";
  @SerializedName(SERIALIZED_NAME_SALE_OF_INVESTMENT)
  @javax.annotation.Nullable
  private BigDecimal saleOfInvestment;

  public static final String SERIALIZED_NAME_SALE_OF_PPE = "sale_of_ppe";
  @SerializedName(SERIALIZED_NAME_SALE_OF_PPE)
  @javax.annotation.Nullable
  private BigDecimal saleOfPpe;

  public static final String SERIALIZED_NAME_STOCK_BASED_COMPENSATION = "stock_based_compensation";
  @SerializedName(SERIALIZED_NAME_STOCK_BASED_COMPENSATION)
  @javax.annotation.Nullable
  private BigDecimal stockBasedCompensation;

  public static final String SERIALIZED_NAME_TOTAL_FREE_CASH_FLOW = "total_free_cash_flow";
  @SerializedName(SERIALIZED_NAME_TOTAL_FREE_CASH_FLOW)
  @javax.annotation.Nullable
  private BigDecimal totalFreeCashFlow;

  public FundamentalsNREITNODIRECTCashflowStatement() {
  }

  public FundamentalsNREITNODIRECTCashflowStatement assetImpairmentCharge(@javax.annotation.Nullable BigDecimal assetImpairmentCharge) {
    this.assetImpairmentCharge = assetImpairmentCharge;
    return this;
  }

  /**
   * Get assetImpairmentCharge
   * @return assetImpairmentCharge
   */
  @javax.annotation.Nullable
  public BigDecimal getAssetImpairmentCharge() {
    return assetImpairmentCharge;
  }

  public void setAssetImpairmentCharge(@javax.annotation.Nullable BigDecimal assetImpairmentCharge) {
    this.assetImpairmentCharge = assetImpairmentCharge;
  }


  public FundamentalsNREITNODIRECTCashflowStatement beginningCashPosition(@javax.annotation.Nullable BigDecimal beginningCashPosition) {
    this.beginningCashPosition = beginningCashPosition;
    return this;
  }

  /**
   * Get beginningCashPosition
   * @return beginningCashPosition
   */
  @javax.annotation.Nullable
  public BigDecimal getBeginningCashPosition() {
    return beginningCashPosition;
  }

  public void setBeginningCashPosition(@javax.annotation.Nullable BigDecimal beginningCashPosition) {
    this.beginningCashPosition = beginningCashPosition;
  }


  public FundamentalsNREITNODIRECTCashflowStatement cashFlowCapitalExpenditure(@javax.annotation.Nullable BigDecimal cashFlowCapitalExpenditure) {
    this.cashFlowCapitalExpenditure = cashFlowCapitalExpenditure;
    return this;
  }

  /**
   * &lt;p&gt;{{Cash_Flow_CPEX}} refers to the funds spent for a company to acquire or upgrade physical assets such as property, industrial buildings or equipment.&lt;/p&gt;
   * @return cashFlowCapitalExpenditure
   */
  @javax.annotation.Nullable
  public BigDecimal getCashFlowCapitalExpenditure() {
    return cashFlowCapitalExpenditure;
  }

  public void setCashFlowCapitalExpenditure(@javax.annotation.Nullable BigDecimal cashFlowCapitalExpenditure) {
    this.cashFlowCapitalExpenditure = cashFlowCapitalExpenditure;
  }


  public FundamentalsNREITNODIRECTCashflowStatement cashFlowDeferredTax(@javax.annotation.Nullable BigDecimal cashFlowDeferredTax) {
    this.cashFlowDeferredTax = cashFlowDeferredTax;
    return this;
  }

  /**
   * &lt;p&gt;{{CF_DeferredTax}} represents future tax liability or asset, resulting from temporary differences between book (accounting) value of assets and liabilities, and their tax value. This arises due to differences between financial accounting for shareholders and tax accounting.&lt;/p&gt;
   * @return cashFlowDeferredTax
   */
  @javax.annotation.Nullable
  public BigDecimal getCashFlowDeferredTax() {
    return cashFlowDeferredTax;
  }

  public void setCashFlowDeferredTax(@javax.annotation.Nullable BigDecimal cashFlowDeferredTax) {
    this.cashFlowDeferredTax = cashFlowDeferredTax;
  }


  public FundamentalsNREITNODIRECTCashflowStatement cashFlowDepreciationDepletionAmortization(@javax.annotation.Nullable BigDecimal cashFlowDepreciationDepletionAmortization) {
    this.cashFlowDepreciationDepletionAmortization = cashFlowDepreciationDepletionAmortization;
    return this;
  }

  /**
   * &lt;p&gt;{{DDA}} is a present expense that accounts for the past cost of an asset that is now providing benefits. Depletion and amortization are synonyms for depreciation. Generally: The term depreciation is used when discussing man made tangible assets. The term depletion is used when discussing natural tangible assets. The term amortization is used when discussing intangible assets&lt;/p&gt;
   * @return cashFlowDepreciationDepletionAmortization
   */
  @javax.annotation.Nullable
  public BigDecimal getCashFlowDepreciationDepletionAmortization() {
    return cashFlowDepreciationDepletionAmortization;
  }

  public void setCashFlowDepreciationDepletionAmortization(@javax.annotation.Nullable BigDecimal cashFlowDepreciationDepletionAmortization) {
    this.cashFlowDepreciationDepletionAmortization = cashFlowDepreciationDepletionAmortization;
  }


  public FundamentalsNREITNODIRECTCashflowStatement cashFlowForLeaseFinancing(@javax.annotation.Nullable BigDecimal cashFlowForLeaseFinancing) {
    this.cashFlowForLeaseFinancing = cashFlowForLeaseFinancing;
    return this;
  }

  /**
   * https://www.gurufocus.com/glossary/cash_flow_for_lease_financing
   * @return cashFlowForLeaseFinancing
   */
  @javax.annotation.Nullable
  public BigDecimal getCashFlowForLeaseFinancing() {
    return cashFlowForLeaseFinancing;
  }

  public void setCashFlowForLeaseFinancing(@javax.annotation.Nullable BigDecimal cashFlowForLeaseFinancing) {
    this.cashFlowForLeaseFinancing = cashFlowForLeaseFinancing;
  }


  public FundamentalsNREITNODIRECTCashflowStatement cashFlowFromInvesting(@javax.annotation.Nullable BigDecimal cashFlowFromInvesting) {
    this.cashFlowFromInvesting = cashFlowFromInvesting;
    return this;
  }

  /**
   * &lt;p&gt;{{Cash_Flow_from_Investing}} covers the cash a company gains or spends from investment activities in financial market and operating subsidiaries. It also includes the cash the company used for {{Net_PPE}}(PPE). If a company spends cash on {{Net_PPE}} (PPE), this will reduce their cash position. This is called {{Cash_Flow_CPEX}} (CPEX). Likewise, if a company buys another company for cash, this will reduce their cash position. &lt;br&gt;{{Cash_Flow_from_Investing}} is calculated as {{Cash_Flow_from_Investing}} &#x3D; {{PurchaseOfPPE}} + {{SaleOfPPE}} + {{PurchaseOfBusiness}} + {{SaleOfBusiness}} + {{PurchaseOfInvestment}} + {{SaleOfInvestment}} + {{NetIntangiblesPurchaseAndSale}} + {{CashFromDiscontinuedInvestingActivities}} + {{CashFromOtherInvestingActivities}}&lt;/p&gt;
   * @return cashFlowFromInvesting
   */
  @javax.annotation.Nullable
  public BigDecimal getCashFlowFromInvesting() {
    return cashFlowFromInvesting;
  }

  public void setCashFlowFromInvesting(@javax.annotation.Nullable BigDecimal cashFlowFromInvesting) {
    this.cashFlowFromInvesting = cashFlowFromInvesting;
  }


  public FundamentalsNREITNODIRECTCashflowStatement cashFlowFromOperations(@javax.annotation.Nullable BigDecimal cashFlowFromOperations) {
    this.cashFlowFromOperations = cashFlowFromOperations;
    return this;
  }

  /**
   * &lt;p&gt;{{Cash_Flow_from_Operations}} refers to the cash brought in through a company&#39;s sales. &lt;br&gt;Therefore, {{Cash_Flow_from_Operations}} &#x3D; {{NetIncomeFromContinuingOperations}} + {{CF_DDA}} + {ChangeInWorkingCapital}} + Deferred Tax + {{Cash_Flow_from_Disc_Op}} + {{AssetImpairmentCharge}} + {{StockBasedCompensation}} + {{Cash_Flow_from_Others}}&lt;/p&gt;
   * @return cashFlowFromOperations
   */
  @javax.annotation.Nullable
  public BigDecimal getCashFlowFromOperations() {
    return cashFlowFromOperations;
  }

  public void setCashFlowFromOperations(@javax.annotation.Nullable BigDecimal cashFlowFromOperations) {
    this.cashFlowFromOperations = cashFlowFromOperations;
  }


  public FundamentalsNREITNODIRECTCashflowStatement cashFlowFromOthers(@javax.annotation.Nullable BigDecimal cashFlowFromOthers) {
    this.cashFlowFromOthers = cashFlowFromOthers;
    return this;
  }

  /**
   * &lt;p&gt;{{Cash_Flow_from_Others}} may include {{ChangeInWorkingCapital}}. These are cash differences caused by the {{ChangeInInventory}}, {{AccountsPayable}}, {{Accts_Rec}} etc. For instance, if a company pays its suppliers slower, its cash position will build up faster. If a company receives payments from its customers slower, its {{Accts_Rec}} will rise, and its cash position will grow more slowly (or even shrink).&lt;/p&gt;
   * @return cashFlowFromOthers
   */
  @javax.annotation.Nullable
  public BigDecimal getCashFlowFromOthers() {
    return cashFlowFromOthers;
  }

  public void setCashFlowFromOthers(@javax.annotation.Nullable BigDecimal cashFlowFromOthers) {
    this.cashFlowFromOthers = cashFlowFromOthers;
  }


  public FundamentalsNREITNODIRECTCashflowStatement cashFromDiscontinuedInvestingActivities(@javax.annotation.Nullable BigDecimal cashFromDiscontinuedInvestingActivities) {
    this.cashFromDiscontinuedInvestingActivities = cashFromDiscontinuedInvestingActivities;
    return this;
  }

  /**
   * &lt;p&gt;{{CashFromDiscontinuedInvestingActivities}} means the cash received by a company that comes from the discontinued investing activities.&lt;/p&gt;
   * @return cashFromDiscontinuedInvestingActivities
   */
  @javax.annotation.Nullable
  public BigDecimal getCashFromDiscontinuedInvestingActivities() {
    return cashFromDiscontinuedInvestingActivities;
  }

  public void setCashFromDiscontinuedInvestingActivities(@javax.annotation.Nullable BigDecimal cashFromDiscontinuedInvestingActivities) {
    this.cashFromDiscontinuedInvestingActivities = cashFromDiscontinuedInvestingActivities;
  }


  public FundamentalsNREITNODIRECTCashflowStatement cashFromDiscontinuedOperatingActivities(@javax.annotation.Nullable BigDecimal cashFromDiscontinuedOperatingActivities) {
    this.cashFromDiscontinuedOperatingActivities = cashFromDiscontinuedOperatingActivities;
    return this;
  }

  /**
   * The cash generated from discontinued operations
   * @return cashFromDiscontinuedOperatingActivities
   */
  @javax.annotation.Nullable
  public BigDecimal getCashFromDiscontinuedOperatingActivities() {
    return cashFromDiscontinuedOperatingActivities;
  }

  public void setCashFromDiscontinuedOperatingActivities(@javax.annotation.Nullable BigDecimal cashFromDiscontinuedOperatingActivities) {
    this.cashFromDiscontinuedOperatingActivities = cashFromDiscontinuedOperatingActivities;
  }


  public FundamentalsNREITNODIRECTCashflowStatement cashFromFinancing(@javax.annotation.Nullable BigDecimal cashFromFinancing) {
    this.cashFromFinancing = cashFromFinancing;
    return this;
  }

  /**
   * &lt;p&gt;{{Cash_from_Financing}} is the cash generated/spent from financial activities such as share issuance (buy back), debt issuance (repayment), and dividends paid to preferred and common stockholders. In the calculation of {{total_freecashflow}}, {{Cash_from_Financing}} is not calculated because it is not related to operating activities. &lt;br&gt;{{Cash_from_Financing}} &#x3D; {{Issuance_of_Stock}} + {{Repurchase_of_Stock}} + {{Net_Issuance_of_Debt}} + {{Net_Issuance_of_preferred}} + {{Dividends}} + Other Financing&lt;/p&gt;
   * @return cashFromFinancing
   */
  @javax.annotation.Nullable
  public BigDecimal getCashFromFinancing() {
    return cashFromFinancing;
  }

  public void setCashFromFinancing(@javax.annotation.Nullable BigDecimal cashFromFinancing) {
    this.cashFromFinancing = cashFromFinancing;
  }


  public FundamentalsNREITNODIRECTCashflowStatement cashFromOtherInvestingActivities(@javax.annotation.Nullable BigDecimal cashFromOtherInvestingActivities) {
    this.cashFromOtherInvestingActivities = cashFromOtherInvestingActivities;
    return this;
  }

  /**
   * &lt;p&gt;{{CashFromOtherInvestingActivities}} means the cash received by a company that comes from other investing activities.&lt;/p&gt;
   * @return cashFromOtherInvestingActivities
   */
  @javax.annotation.Nullable
  public BigDecimal getCashFromOtherInvestingActivities() {
    return cashFromOtherInvestingActivities;
  }

  public void setCashFromOtherInvestingActivities(@javax.annotation.Nullable BigDecimal cashFromOtherInvestingActivities) {
    this.cashFromOtherInvestingActivities = cashFromOtherInvestingActivities;
  }


  public FundamentalsNREITNODIRECTCashflowStatement changeInInventory(@javax.annotation.Nullable BigDecimal changeInInventory) {
    this.changeInInventory = changeInInventory;
    return this;
  }

  /**
   * &lt;p&gt;{{ChangeInInventory}} is the difference between last period&#39;s ending inventory and the current period&#39;s ending inventory.&lt;/p&gt;
   * @return changeInInventory
   */
  @javax.annotation.Nullable
  public BigDecimal getChangeInInventory() {
    return changeInInventory;
  }

  public void setChangeInInventory(@javax.annotation.Nullable BigDecimal changeInInventory) {
    this.changeInInventory = changeInInventory;
  }


  public FundamentalsNREITNODIRECTCashflowStatement changeInOtherWorkingCapital(@javax.annotation.Nullable BigDecimal changeInOtherWorkingCapital) {
    this.changeInOtherWorkingCapital = changeInOtherWorkingCapital;
    return this;
  }

  /**
   * Get changeInOtherWorkingCapital
   * @return changeInOtherWorkingCapital
   */
  @javax.annotation.Nullable
  public BigDecimal getChangeInOtherWorkingCapital() {
    return changeInOtherWorkingCapital;
  }

  public void setChangeInOtherWorkingCapital(@javax.annotation.Nullable BigDecimal changeInOtherWorkingCapital) {
    this.changeInOtherWorkingCapital = changeInOtherWorkingCapital;
  }


  public FundamentalsNREITNODIRECTCashflowStatement changeInPayablesAndAccruedExpense(@javax.annotation.Nullable BigDecimal changeInPayablesAndAccruedExpense) {
    this.changeInPayablesAndAccruedExpense = changeInPayablesAndAccruedExpense;
    return this;
  }

  /**
   * &lt;p&gt;{{ChangeInPayablesAndAccruedExpense}} is the increase or decrease between periods of the {{Accts_Payable}}. Accrued expenses represent expenses incurred at the end of the reporting period but not yet paid; also called accrued liabilities. The accrued liability is shown under Liabilities section in the balance sheet.&lt;/p&gt;
   * @return changeInPayablesAndAccruedExpense
   */
  @javax.annotation.Nullable
  public BigDecimal getChangeInPayablesAndAccruedExpense() {
    return changeInPayablesAndAccruedExpense;
  }

  public void setChangeInPayablesAndAccruedExpense(@javax.annotation.Nullable BigDecimal changeInPayablesAndAccruedExpense) {
    this.changeInPayablesAndAccruedExpense = changeInPayablesAndAccruedExpense;
  }


  public FundamentalsNREITNODIRECTCashflowStatement changeInPrepaidAssets(@javax.annotation.Nullable BigDecimal changeInPrepaidAssets) {
    this.changeInPrepaidAssets = changeInPrepaidAssets;
    return this;
  }

  /**
   * &lt;p&gt;{{ChangeInPrepaidAssets}} is any increase or decrease between periods of the prepaid assets.&lt;/p&gt;
   * @return changeInPrepaidAssets
   */
  @javax.annotation.Nullable
  public BigDecimal getChangeInPrepaidAssets() {
    return changeInPrepaidAssets;
  }

  public void setChangeInPrepaidAssets(@javax.annotation.Nullable BigDecimal changeInPrepaidAssets) {
    this.changeInPrepaidAssets = changeInPrepaidAssets;
  }


  public FundamentalsNREITNODIRECTCashflowStatement changeInReceivables(@javax.annotation.Nullable BigDecimal changeInReceivables) {
    this.changeInReceivables = changeInReceivables;
    return this;
  }

  /**
   * &lt;p&gt;Change In {{Accts_Rec}} relative to the previous period. It is any increase or decrease in the cash a company is owed by its customers.&lt;/p&gt;
   * @return changeInReceivables
   */
  @javax.annotation.Nullable
  public BigDecimal getChangeInReceivables() {
    return changeInReceivables;
  }

  public void setChangeInReceivables(@javax.annotation.Nullable BigDecimal changeInReceivables) {
    this.changeInReceivables = changeInReceivables;
  }


  public FundamentalsNREITNODIRECTCashflowStatement changeInWorkingCapital(@javax.annotation.Nullable BigDecimal changeInWorkingCapital) {
    this.changeInWorkingCapital = changeInWorkingCapital;
    return this;
  }

  /**
   * &lt;p&gt;Working Capital is a measure of a company&#39;s short term liquidity or its ability to cover short term liabilities. It is defined as the difference between a company&#39;s {{Total_Current_Assets}} and {{Total_Current_Liabilities}}. &lt;br&gt;Working Capital is calculated as: Working Capital &#x3D; {{Total_Current_Assets}} - {{Total_Current_Liabilities}} &lt;br&gt;{{ChangeInWorkingCapital}} is reported in the cash flow statement since it is one of the major ways in which {{Net_Income}} can differ from operating cash flow.&lt;/p&gt;
   * @return changeInWorkingCapital
   */
  @javax.annotation.Nullable
  public BigDecimal getChangeInWorkingCapital() {
    return changeInWorkingCapital;
  }

  public void setChangeInWorkingCapital(@javax.annotation.Nullable BigDecimal changeInWorkingCapital) {
    this.changeInWorkingCapital = changeInWorkingCapital;
  }


  public FundamentalsNREITNODIRECTCashflowStatement debtIssuance(@javax.annotation.Nullable BigDecimal debtIssuance) {
    this.debtIssuance = debtIssuance;
    return this;
  }

  /**
   * Get debtIssuance
   * @return debtIssuance
   */
  @javax.annotation.Nullable
  public BigDecimal getDebtIssuance() {
    return debtIssuance;
  }

  public void setDebtIssuance(@javax.annotation.Nullable BigDecimal debtIssuance) {
    this.debtIssuance = debtIssuance;
  }


  public FundamentalsNREITNODIRECTCashflowStatement debtPayments(@javax.annotation.Nullable BigDecimal debtPayments) {
    this.debtPayments = debtPayments;
    return this;
  }

  /**
   * Get debtPayments
   * @return debtPayments
   */
  @javax.annotation.Nullable
  public BigDecimal getDebtPayments() {
    return debtPayments;
  }

  public void setDebtPayments(@javax.annotation.Nullable BigDecimal debtPayments) {
    this.debtPayments = debtPayments;
  }


  public FundamentalsNREITNODIRECTCashflowStatement dividends(@javax.annotation.Nullable BigDecimal dividends) {
    this.dividends = dividends;
    return this;
  }

  /**
   * &lt;p&gt;{{Dividends}} refers to the payment of cash to shareholders as dividends when the company generates income.&lt;/p&gt;
   * @return dividends
   */
  @javax.annotation.Nullable
  public BigDecimal getDividends() {
    return dividends;
  }

  public void setDividends(@javax.annotation.Nullable BigDecimal dividends) {
    this.dividends = dividends;
  }


  public FundamentalsNREITNODIRECTCashflowStatement effectOfExchangeRateChanges(@javax.annotation.Nullable BigDecimal effectOfExchangeRateChanges) {
    this.effectOfExchangeRateChanges = effectOfExchangeRateChanges;
    return this;
  }

  /**
   * Get effectOfExchangeRateChanges
   * @return effectOfExchangeRateChanges
   */
  @javax.annotation.Nullable
  public BigDecimal getEffectOfExchangeRateChanges() {
    return effectOfExchangeRateChanges;
  }

  public void setEffectOfExchangeRateChanges(@javax.annotation.Nullable BigDecimal effectOfExchangeRateChanges) {
    this.effectOfExchangeRateChanges = effectOfExchangeRateChanges;
  }


  public FundamentalsNREITNODIRECTCashflowStatement endingCashPosition(@javax.annotation.Nullable BigDecimal endingCashPosition) {
    this.endingCashPosition = endingCashPosition;
    return this;
  }

  /**
   * Get endingCashPosition
   * @return endingCashPosition
   */
  @javax.annotation.Nullable
  public BigDecimal getEndingCashPosition() {
    return endingCashPosition;
  }

  public void setEndingCashPosition(@javax.annotation.Nullable BigDecimal endingCashPosition) {
    this.endingCashPosition = endingCashPosition;
  }


  public FundamentalsNREITNODIRECTCashflowStatement ffo(@javax.annotation.Nullable BigDecimal ffo) {
    this.ffo = ffo;
    return this;
  }

  /**
   * &lt;p&gt;{{FFO}} (Funds from operations) refers to the figure used by real estate investment trusts (REITs) to define the cash flow from their operations. It is calculated by adding depreciation and amortization to earnings, subtracting any gains on sales.&lt;/p&gt;
   * @return ffo
   */
  @javax.annotation.Nullable
  public BigDecimal getFfo() {
    return ffo;
  }

  public void setFfo(@javax.annotation.Nullable BigDecimal ffo) {
    this.ffo = ffo;
  }


  public FundamentalsNREITNODIRECTCashflowStatement issuanceOfStock(@javax.annotation.Nullable BigDecimal issuanceOfStock) {
    this.issuanceOfStock = issuanceOfStock;
    return this;
  }

  /**
   * &lt;p&gt;A company may raise cash from issuing new shares. It can also use cash to buy back shares. If this number is positive, it means that the company has received more cash from issuing shares than it has paid to buy back shares. If this number is negative, it means that company has paid more cash to buy back shares than it has received for issuing shares.&lt;/p&gt;
   * @return issuanceOfStock
   */
  @javax.annotation.Nullable
  public BigDecimal getIssuanceOfStock() {
    return issuanceOfStock;
  }

  public void setIssuanceOfStock(@javax.annotation.Nullable BigDecimal issuanceOfStock) {
    this.issuanceOfStock = issuanceOfStock;
  }


  public FundamentalsNREITNODIRECTCashflowStatement netChangeInCash(@javax.annotation.Nullable BigDecimal netChangeInCash) {
    this.netChangeInCash = netChangeInCash;
    return this;
  }

  /**
   * &lt;p&gt;{{Net_Change_in_Cash}} is calculated as {{Net_Change_in_Cash}} &#x3D; {{Cash_Flow_from_Operations}} + {{Cash_Flow_from_Investing}} + {{Cash_from_Financing}} + {{effect_of_exchange_rate_changes}}&lt;/p&gt;
   * @return netChangeInCash
   */
  @javax.annotation.Nullable
  public BigDecimal getNetChangeInCash() {
    return netChangeInCash;
  }

  public void setNetChangeInCash(@javax.annotation.Nullable BigDecimal netChangeInCash) {
    this.netChangeInCash = netChangeInCash;
  }


  public FundamentalsNREITNODIRECTCashflowStatement netIncomeFromContinuingOperations(@javax.annotation.Nullable BigDecimal netIncomeFromContinuingOperations) {
    this.netIncomeFromContinuingOperations = netIncomeFromContinuingOperations;
    return this;
  }

  /**
   * &lt;p&gt;{{NetIncomeFromContinuingOperations}} indicates the {{Net_Income}} that a firm brings in from ongoing business activities. These activities are expected to continue into the next reporting period. It excludes extraordinary items, income from the cumulative effects of accounting changes, non-recurring items, income from tax loss carry forward, and {{IS_preferred_dividends}}.&lt;/p&gt;
   * @return netIncomeFromContinuingOperations
   */
  @javax.annotation.Nullable
  public BigDecimal getNetIncomeFromContinuingOperations() {
    return netIncomeFromContinuingOperations;
  }

  public void setNetIncomeFromContinuingOperations(@javax.annotation.Nullable BigDecimal netIncomeFromContinuingOperations) {
    this.netIncomeFromContinuingOperations = netIncomeFromContinuingOperations;
  }


  public FundamentalsNREITNODIRECTCashflowStatement netIntangiblesPurchaseAndSale(@javax.annotation.Nullable BigDecimal netIntangiblesPurchaseAndSale) {
    this.netIntangiblesPurchaseAndSale = netIntangiblesPurchaseAndSale;
    return this;
  }

  /**
   * &lt;p&gt;{{NetIntangiblesPurchaseAndSale}} means the net cash inflow received by a company that comes from the purchase and sale of intangibles. It equals the cash received from sale of intangibles minus the cash spent on purchasing intangibles.&lt;/p&gt;
   * @return netIntangiblesPurchaseAndSale
   */
  @javax.annotation.Nullable
  public BigDecimal getNetIntangiblesPurchaseAndSale() {
    return netIntangiblesPurchaseAndSale;
  }

  public void setNetIntangiblesPurchaseAndSale(@javax.annotation.Nullable BigDecimal netIntangiblesPurchaseAndSale) {
    this.netIntangiblesPurchaseAndSale = netIntangiblesPurchaseAndSale;
  }


  public FundamentalsNREITNODIRECTCashflowStatement netIssuanceOfDebt(@javax.annotation.Nullable BigDecimal netIssuanceOfDebt) {
    this.netIssuanceOfDebt = netIssuanceOfDebt;
    return this;
  }

  /**
   * &lt;p&gt;{{Net_Issuance_of_Debt}} is the cash a company received or spent through debt related activities such as debt issuance or debt repayment. If a company pays down its debt during the period, this number will be negative. If a company issued more debt, it receives cash and this number is positive.&lt;/p&gt;
   * @return netIssuanceOfDebt
   */
  @javax.annotation.Nullable
  public BigDecimal getNetIssuanceOfDebt() {
    return netIssuanceOfDebt;
  }

  public void setNetIssuanceOfDebt(@javax.annotation.Nullable BigDecimal netIssuanceOfDebt) {
    this.netIssuanceOfDebt = netIssuanceOfDebt;
  }


  public FundamentalsNREITNODIRECTCashflowStatement netIssuanceOfPreferred(@javax.annotation.Nullable BigDecimal netIssuanceOfPreferred) {
    this.netIssuanceOfPreferred = netIssuanceOfPreferred;
    return this;
  }

  /**
   * &lt;p&gt;A company may raise cash from issuing new preferred shares. It can also use cash to buy back preferred shares. If this number is positive, it means that the company has received more cash from issuing preferred shares than it has paid to buy back preferred shares. If this number is negative, it means that company has paid more cash to buy back preferred shares than it has received for issuing preferred shares.&lt;/p&gt;
   * @return netIssuanceOfPreferred
   */
  @javax.annotation.Nullable
  public BigDecimal getNetIssuanceOfPreferred() {
    return netIssuanceOfPreferred;
  }

  public void setNetIssuanceOfPreferred(@javax.annotation.Nullable BigDecimal netIssuanceOfPreferred) {
    this.netIssuanceOfPreferred = netIssuanceOfPreferred;
  }


  public FundamentalsNREITNODIRECTCashflowStatement otherFinancing(@javax.annotation.Nullable BigDecimal otherFinancing) {
    this.otherFinancing = otherFinancing;
    return this;
  }

  /**
   * &lt;p&gt;{{Other_Financing}} represents other {{Cash_from_Financing}} activity that not otherwise classified, which includes: Proceeds From Stock Option Exercised, Other Financing Charges.&lt;/p&gt;
   * @return otherFinancing
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherFinancing() {
    return otherFinancing;
  }

  public void setOtherFinancing(@javax.annotation.Nullable BigDecimal otherFinancing) {
    this.otherFinancing = otherFinancing;
  }


  public FundamentalsNREITNODIRECTCashflowStatement purchaseOfBusiness(@javax.annotation.Nullable BigDecimal purchaseOfBusiness) {
    this.purchaseOfBusiness = purchaseOfBusiness;
    return this;
  }

  /**
   * &lt;p&gt;{{PurchaseOfBusiness}} is the amount used to purchase business.&lt;/p&gt;
   * @return purchaseOfBusiness
   */
  @javax.annotation.Nullable
  public BigDecimal getPurchaseOfBusiness() {
    return purchaseOfBusiness;
  }

  public void setPurchaseOfBusiness(@javax.annotation.Nullable BigDecimal purchaseOfBusiness) {
    this.purchaseOfBusiness = purchaseOfBusiness;
  }


  public FundamentalsNREITNODIRECTCashflowStatement purchaseOfInvestment(@javax.annotation.Nullable BigDecimal purchaseOfInvestment) {
    this.purchaseOfInvestment = purchaseOfInvestment;
    return this;
  }

  /**
   * &lt;p&gt;{{PurchaseOfInvestment}} represents cash outflow on the purchase of investments in securities.&lt;/p&gt;
   * @return purchaseOfInvestment
   */
  @javax.annotation.Nullable
  public BigDecimal getPurchaseOfInvestment() {
    return purchaseOfInvestment;
  }

  public void setPurchaseOfInvestment(@javax.annotation.Nullable BigDecimal purchaseOfInvestment) {
    this.purchaseOfInvestment = purchaseOfInvestment;
  }


  public FundamentalsNREITNODIRECTCashflowStatement purchaseOfPpe(@javax.annotation.Nullable BigDecimal purchaseOfPpe) {
    this.purchaseOfPpe = purchaseOfPpe;
    return this;
  }

  /**
   * &lt;p&gt;{{PurchaseOfPPE}} is the amount used to purchase Property, Plant and Equipment.&lt;/p&gt;
   * @return purchaseOfPpe
   */
  @javax.annotation.Nullable
  public BigDecimal getPurchaseOfPpe() {
    return purchaseOfPpe;
  }

  public void setPurchaseOfPpe(@javax.annotation.Nullable BigDecimal purchaseOfPpe) {
    this.purchaseOfPpe = purchaseOfPpe;
  }


  public FundamentalsNREITNODIRECTCashflowStatement repurchaseOfStock(@javax.annotation.Nullable BigDecimal repurchaseOfStock) {
    this.repurchaseOfStock = repurchaseOfStock;
    return this;
  }

  /**
   * &lt;p&gt;A company may raise cash from issuing new shares. It can also use cash to buy back shares. {{Repurchase_of_Stock}} represents the cash outflow to reacquire common stock during the period.&lt;/p&gt;
   * @return repurchaseOfStock
   */
  @javax.annotation.Nullable
  public BigDecimal getRepurchaseOfStock() {
    return repurchaseOfStock;
  }

  public void setRepurchaseOfStock(@javax.annotation.Nullable BigDecimal repurchaseOfStock) {
    this.repurchaseOfStock = repurchaseOfStock;
  }


  public FundamentalsNREITNODIRECTCashflowStatement saleOfBusiness(@javax.annotation.Nullable BigDecimal saleOfBusiness) {
    this.saleOfBusiness = saleOfBusiness;
    return this;
  }

  /**
   * &lt;p&gt;{{SaleOfBusiness}} is the amount earned to sell business.&lt;/p&gt;
   * @return saleOfBusiness
   */
  @javax.annotation.Nullable
  public BigDecimal getSaleOfBusiness() {
    return saleOfBusiness;
  }

  public void setSaleOfBusiness(@javax.annotation.Nullable BigDecimal saleOfBusiness) {
    this.saleOfBusiness = saleOfBusiness;
  }


  public FundamentalsNREITNODIRECTCashflowStatement saleOfInvestment(@javax.annotation.Nullable BigDecimal saleOfInvestment) {
    this.saleOfInvestment = saleOfInvestment;
    return this;
  }

  /**
   * &lt;p&gt;{{SaleOfInvestment}} represents cash inflow on the sale of investments in securities.&lt;/p&gt;
   * @return saleOfInvestment
   */
  @javax.annotation.Nullable
  public BigDecimal getSaleOfInvestment() {
    return saleOfInvestment;
  }

  public void setSaleOfInvestment(@javax.annotation.Nullable BigDecimal saleOfInvestment) {
    this.saleOfInvestment = saleOfInvestment;
  }


  public FundamentalsNREITNODIRECTCashflowStatement saleOfPpe(@javax.annotation.Nullable BigDecimal saleOfPpe) {
    this.saleOfPpe = saleOfPpe;
    return this;
  }

  /**
   * &lt;p&gt;{{SaleOfPPE}} is the amount earned to sell {{Net_PPE}}. &lt;/p&gt;
   * @return saleOfPpe
   */
  @javax.annotation.Nullable
  public BigDecimal getSaleOfPpe() {
    return saleOfPpe;
  }

  public void setSaleOfPpe(@javax.annotation.Nullable BigDecimal saleOfPpe) {
    this.saleOfPpe = saleOfPpe;
  }


  public FundamentalsNREITNODIRECTCashflowStatement stockBasedCompensation(@javax.annotation.Nullable BigDecimal stockBasedCompensation) {
    this.stockBasedCompensation = stockBasedCompensation;
    return this;
  }

  /**
   * &lt;p&gt;{{StockBasedCompensation}} is a way corporations use stock options to reward employees. It provides executives and employees the opportunity to share in the growth of the company and, if structured properly, can align their interests with the interests of the company&#39;s shareholders and investors, without burning the company&#39;s cash on hand.&lt;/p&gt;
   * @return stockBasedCompensation
   */
  @javax.annotation.Nullable
  public BigDecimal getStockBasedCompensation() {
    return stockBasedCompensation;
  }

  public void setStockBasedCompensation(@javax.annotation.Nullable BigDecimal stockBasedCompensation) {
    this.stockBasedCompensation = stockBasedCompensation;
  }


  public FundamentalsNREITNODIRECTCashflowStatement totalFreeCashFlow(@javax.annotation.Nullable BigDecimal totalFreeCashFlow) {
    this.totalFreeCashFlow = totalFreeCashFlow;
    return this;
  }

  /**
   * &lt;p&gt;{{total_freecashflow}} is considered one of the most important parameters to measure a company&#39;s earnings power by value investors because it is not subject to estimates of {{DDA}} (DDA). However, when we look at the {{total_freecashflow}}, we should look from a long term perspective, because any year&#39;s {{total_freecashflow}} can be drastically affected by the spending on {{Net_PPE}} (PPE) of the business in that year. Over the long term, {{total_freecashflow}} should give pretty good picture on the real earnings power of the company. &lt;br&gt;{{total_freecashflow}} is calculated as {{total_freecashflow}} &#x3D; {{cash_Flow_from_Operations}} + {{Cash_Flow_CPEX}}&lt;/p&gt;
   * @return totalFreeCashFlow
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalFreeCashFlow() {
    return totalFreeCashFlow;
  }

  public void setTotalFreeCashFlow(@javax.annotation.Nullable BigDecimal totalFreeCashFlow) {
    this.totalFreeCashFlow = totalFreeCashFlow;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FundamentalsNREITNODIRECTCashflowStatement fundamentalsNREITNODIRECTCashflowStatement = (FundamentalsNREITNODIRECTCashflowStatement) o;
    return Objects.equals(this.assetImpairmentCharge, fundamentalsNREITNODIRECTCashflowStatement.assetImpairmentCharge) &&
        Objects.equals(this.beginningCashPosition, fundamentalsNREITNODIRECTCashflowStatement.beginningCashPosition) &&
        Objects.equals(this.cashFlowCapitalExpenditure, fundamentalsNREITNODIRECTCashflowStatement.cashFlowCapitalExpenditure) &&
        Objects.equals(this.cashFlowDeferredTax, fundamentalsNREITNODIRECTCashflowStatement.cashFlowDeferredTax) &&
        Objects.equals(this.cashFlowDepreciationDepletionAmortization, fundamentalsNREITNODIRECTCashflowStatement.cashFlowDepreciationDepletionAmortization) &&
        Objects.equals(this.cashFlowForLeaseFinancing, fundamentalsNREITNODIRECTCashflowStatement.cashFlowForLeaseFinancing) &&
        Objects.equals(this.cashFlowFromInvesting, fundamentalsNREITNODIRECTCashflowStatement.cashFlowFromInvesting) &&
        Objects.equals(this.cashFlowFromOperations, fundamentalsNREITNODIRECTCashflowStatement.cashFlowFromOperations) &&
        Objects.equals(this.cashFlowFromOthers, fundamentalsNREITNODIRECTCashflowStatement.cashFlowFromOthers) &&
        Objects.equals(this.cashFromDiscontinuedInvestingActivities, fundamentalsNREITNODIRECTCashflowStatement.cashFromDiscontinuedInvestingActivities) &&
        Objects.equals(this.cashFromDiscontinuedOperatingActivities, fundamentalsNREITNODIRECTCashflowStatement.cashFromDiscontinuedOperatingActivities) &&
        Objects.equals(this.cashFromFinancing, fundamentalsNREITNODIRECTCashflowStatement.cashFromFinancing) &&
        Objects.equals(this.cashFromOtherInvestingActivities, fundamentalsNREITNODIRECTCashflowStatement.cashFromOtherInvestingActivities) &&
        Objects.equals(this.changeInInventory, fundamentalsNREITNODIRECTCashflowStatement.changeInInventory) &&
        Objects.equals(this.changeInOtherWorkingCapital, fundamentalsNREITNODIRECTCashflowStatement.changeInOtherWorkingCapital) &&
        Objects.equals(this.changeInPayablesAndAccruedExpense, fundamentalsNREITNODIRECTCashflowStatement.changeInPayablesAndAccruedExpense) &&
        Objects.equals(this.changeInPrepaidAssets, fundamentalsNREITNODIRECTCashflowStatement.changeInPrepaidAssets) &&
        Objects.equals(this.changeInReceivables, fundamentalsNREITNODIRECTCashflowStatement.changeInReceivables) &&
        Objects.equals(this.changeInWorkingCapital, fundamentalsNREITNODIRECTCashflowStatement.changeInWorkingCapital) &&
        Objects.equals(this.debtIssuance, fundamentalsNREITNODIRECTCashflowStatement.debtIssuance) &&
        Objects.equals(this.debtPayments, fundamentalsNREITNODIRECTCashflowStatement.debtPayments) &&
        Objects.equals(this.dividends, fundamentalsNREITNODIRECTCashflowStatement.dividends) &&
        Objects.equals(this.effectOfExchangeRateChanges, fundamentalsNREITNODIRECTCashflowStatement.effectOfExchangeRateChanges) &&
        Objects.equals(this.endingCashPosition, fundamentalsNREITNODIRECTCashflowStatement.endingCashPosition) &&
        Objects.equals(this.ffo, fundamentalsNREITNODIRECTCashflowStatement.ffo) &&
        Objects.equals(this.issuanceOfStock, fundamentalsNREITNODIRECTCashflowStatement.issuanceOfStock) &&
        Objects.equals(this.netChangeInCash, fundamentalsNREITNODIRECTCashflowStatement.netChangeInCash) &&
        Objects.equals(this.netIncomeFromContinuingOperations, fundamentalsNREITNODIRECTCashflowStatement.netIncomeFromContinuingOperations) &&
        Objects.equals(this.netIntangiblesPurchaseAndSale, fundamentalsNREITNODIRECTCashflowStatement.netIntangiblesPurchaseAndSale) &&
        Objects.equals(this.netIssuanceOfDebt, fundamentalsNREITNODIRECTCashflowStatement.netIssuanceOfDebt) &&
        Objects.equals(this.netIssuanceOfPreferred, fundamentalsNREITNODIRECTCashflowStatement.netIssuanceOfPreferred) &&
        Objects.equals(this.otherFinancing, fundamentalsNREITNODIRECTCashflowStatement.otherFinancing) &&
        Objects.equals(this.purchaseOfBusiness, fundamentalsNREITNODIRECTCashflowStatement.purchaseOfBusiness) &&
        Objects.equals(this.purchaseOfInvestment, fundamentalsNREITNODIRECTCashflowStatement.purchaseOfInvestment) &&
        Objects.equals(this.purchaseOfPpe, fundamentalsNREITNODIRECTCashflowStatement.purchaseOfPpe) &&
        Objects.equals(this.repurchaseOfStock, fundamentalsNREITNODIRECTCashflowStatement.repurchaseOfStock) &&
        Objects.equals(this.saleOfBusiness, fundamentalsNREITNODIRECTCashflowStatement.saleOfBusiness) &&
        Objects.equals(this.saleOfInvestment, fundamentalsNREITNODIRECTCashflowStatement.saleOfInvestment) &&
        Objects.equals(this.saleOfPpe, fundamentalsNREITNODIRECTCashflowStatement.saleOfPpe) &&
        Objects.equals(this.stockBasedCompensation, fundamentalsNREITNODIRECTCashflowStatement.stockBasedCompensation) &&
        Objects.equals(this.totalFreeCashFlow, fundamentalsNREITNODIRECTCashflowStatement.totalFreeCashFlow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetImpairmentCharge, beginningCashPosition, cashFlowCapitalExpenditure, cashFlowDeferredTax, cashFlowDepreciationDepletionAmortization, cashFlowForLeaseFinancing, cashFlowFromInvesting, cashFlowFromOperations, cashFlowFromOthers, cashFromDiscontinuedInvestingActivities, cashFromDiscontinuedOperatingActivities, cashFromFinancing, cashFromOtherInvestingActivities, changeInInventory, changeInOtherWorkingCapital, changeInPayablesAndAccruedExpense, changeInPrepaidAssets, changeInReceivables, changeInWorkingCapital, debtIssuance, debtPayments, dividends, effectOfExchangeRateChanges, endingCashPosition, ffo, issuanceOfStock, netChangeInCash, netIncomeFromContinuingOperations, netIntangiblesPurchaseAndSale, netIssuanceOfDebt, netIssuanceOfPreferred, otherFinancing, purchaseOfBusiness, purchaseOfInvestment, purchaseOfPpe, repurchaseOfStock, saleOfBusiness, saleOfInvestment, saleOfPpe, stockBasedCompensation, totalFreeCashFlow);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FundamentalsNREITNODIRECTCashflowStatement {\n");
    sb.append("    assetImpairmentCharge: ").append(toIndentedString(assetImpairmentCharge)).append("\n");
    sb.append("    beginningCashPosition: ").append(toIndentedString(beginningCashPosition)).append("\n");
    sb.append("    cashFlowCapitalExpenditure: ").append(toIndentedString(cashFlowCapitalExpenditure)).append("\n");
    sb.append("    cashFlowDeferredTax: ").append(toIndentedString(cashFlowDeferredTax)).append("\n");
    sb.append("    cashFlowDepreciationDepletionAmortization: ").append(toIndentedString(cashFlowDepreciationDepletionAmortization)).append("\n");
    sb.append("    cashFlowForLeaseFinancing: ").append(toIndentedString(cashFlowForLeaseFinancing)).append("\n");
    sb.append("    cashFlowFromInvesting: ").append(toIndentedString(cashFlowFromInvesting)).append("\n");
    sb.append("    cashFlowFromOperations: ").append(toIndentedString(cashFlowFromOperations)).append("\n");
    sb.append("    cashFlowFromOthers: ").append(toIndentedString(cashFlowFromOthers)).append("\n");
    sb.append("    cashFromDiscontinuedInvestingActivities: ").append(toIndentedString(cashFromDiscontinuedInvestingActivities)).append("\n");
    sb.append("    cashFromDiscontinuedOperatingActivities: ").append(toIndentedString(cashFromDiscontinuedOperatingActivities)).append("\n");
    sb.append("    cashFromFinancing: ").append(toIndentedString(cashFromFinancing)).append("\n");
    sb.append("    cashFromOtherInvestingActivities: ").append(toIndentedString(cashFromOtherInvestingActivities)).append("\n");
    sb.append("    changeInInventory: ").append(toIndentedString(changeInInventory)).append("\n");
    sb.append("    changeInOtherWorkingCapital: ").append(toIndentedString(changeInOtherWorkingCapital)).append("\n");
    sb.append("    changeInPayablesAndAccruedExpense: ").append(toIndentedString(changeInPayablesAndAccruedExpense)).append("\n");
    sb.append("    changeInPrepaidAssets: ").append(toIndentedString(changeInPrepaidAssets)).append("\n");
    sb.append("    changeInReceivables: ").append(toIndentedString(changeInReceivables)).append("\n");
    sb.append("    changeInWorkingCapital: ").append(toIndentedString(changeInWorkingCapital)).append("\n");
    sb.append("    debtIssuance: ").append(toIndentedString(debtIssuance)).append("\n");
    sb.append("    debtPayments: ").append(toIndentedString(debtPayments)).append("\n");
    sb.append("    dividends: ").append(toIndentedString(dividends)).append("\n");
    sb.append("    effectOfExchangeRateChanges: ").append(toIndentedString(effectOfExchangeRateChanges)).append("\n");
    sb.append("    endingCashPosition: ").append(toIndentedString(endingCashPosition)).append("\n");
    sb.append("    ffo: ").append(toIndentedString(ffo)).append("\n");
    sb.append("    issuanceOfStock: ").append(toIndentedString(issuanceOfStock)).append("\n");
    sb.append("    netChangeInCash: ").append(toIndentedString(netChangeInCash)).append("\n");
    sb.append("    netIncomeFromContinuingOperations: ").append(toIndentedString(netIncomeFromContinuingOperations)).append("\n");
    sb.append("    netIntangiblesPurchaseAndSale: ").append(toIndentedString(netIntangiblesPurchaseAndSale)).append("\n");
    sb.append("    netIssuanceOfDebt: ").append(toIndentedString(netIssuanceOfDebt)).append("\n");
    sb.append("    netIssuanceOfPreferred: ").append(toIndentedString(netIssuanceOfPreferred)).append("\n");
    sb.append("    otherFinancing: ").append(toIndentedString(otherFinancing)).append("\n");
    sb.append("    purchaseOfBusiness: ").append(toIndentedString(purchaseOfBusiness)).append("\n");
    sb.append("    purchaseOfInvestment: ").append(toIndentedString(purchaseOfInvestment)).append("\n");
    sb.append("    purchaseOfPpe: ").append(toIndentedString(purchaseOfPpe)).append("\n");
    sb.append("    repurchaseOfStock: ").append(toIndentedString(repurchaseOfStock)).append("\n");
    sb.append("    saleOfBusiness: ").append(toIndentedString(saleOfBusiness)).append("\n");
    sb.append("    saleOfInvestment: ").append(toIndentedString(saleOfInvestment)).append("\n");
    sb.append("    saleOfPpe: ").append(toIndentedString(saleOfPpe)).append("\n");
    sb.append("    stockBasedCompensation: ").append(toIndentedString(stockBasedCompensation)).append("\n");
    sb.append("    totalFreeCashFlow: ").append(toIndentedString(totalFreeCashFlow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asset_impairment_charge");
    openapiFields.add("beginning_cash_position");
    openapiFields.add("cash_flow_capital_expenditure");
    openapiFields.add("cash_flow_deferred_tax");
    openapiFields.add("cash_flow_depreciation_depletion_amortization");
    openapiFields.add("cash_flow_for_lease_financing");
    openapiFields.add("cash_flow_from_investing");
    openapiFields.add("cash_flow_from_operations");
    openapiFields.add("cash_flow_from_others");
    openapiFields.add("cash_from_discontinued_investing_activities");
    openapiFields.add("cash_from_discontinued_operating_activities");
    openapiFields.add("cash_from_financing");
    openapiFields.add("cash_from_other_investing_activities");
    openapiFields.add("change_in_inventory");
    openapiFields.add("change_in_other_working_capital");
    openapiFields.add("change_in_payables_and_accrued_expense");
    openapiFields.add("change_in_prepaid_assets");
    openapiFields.add("change_in_receivables");
    openapiFields.add("change_in_working_capital");
    openapiFields.add("debt_issuance");
    openapiFields.add("debt_payments");
    openapiFields.add("dividends");
    openapiFields.add("effect_of_exchange_rate_changes");
    openapiFields.add("ending_cash_position");
    openapiFields.add("ffo");
    openapiFields.add("issuance_of_stock");
    openapiFields.add("net_change_in_cash");
    openapiFields.add("net_income_from_continuing_operations");
    openapiFields.add("net_intangibles_purchase_and_sale");
    openapiFields.add("net_issuance_of_debt");
    openapiFields.add("net_issuance_of_preferred");
    openapiFields.add("other_financing");
    openapiFields.add("purchase_of_business");
    openapiFields.add("purchase_of_investment");
    openapiFields.add("purchase_of_ppe");
    openapiFields.add("repurchase_of_stock");
    openapiFields.add("sale_of_business");
    openapiFields.add("sale_of_investment");
    openapiFields.add("sale_of_ppe");
    openapiFields.add("stock_based_compensation");
    openapiFields.add("total_free_cash_flow");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FundamentalsNREITNODIRECTCashflowStatement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FundamentalsNREITNODIRECTCashflowStatement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FundamentalsNREITNODIRECTCashflowStatement is not found in the empty JSON string", FundamentalsNREITNODIRECTCashflowStatement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FundamentalsNREITNODIRECTCashflowStatement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FundamentalsNREITNODIRECTCashflowStatement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FundamentalsNREITNODIRECTCashflowStatement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FundamentalsNREITNODIRECTCashflowStatement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FundamentalsNREITNODIRECTCashflowStatement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FundamentalsNREITNODIRECTCashflowStatement.class));

       return (TypeAdapter<T>) new TypeAdapter<FundamentalsNREITNODIRECTCashflowStatement>() {
           @Override
           public void write(JsonWriter out, FundamentalsNREITNODIRECTCashflowStatement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FundamentalsNREITNODIRECTCashflowStatement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FundamentalsNREITNODIRECTCashflowStatement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FundamentalsNREITNODIRECTCashflowStatement
   * @throws IOException if the JSON string is invalid with respect to FundamentalsNREITNODIRECTCashflowStatement
   */
  public static FundamentalsNREITNODIRECTCashflowStatement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FundamentalsNREITNODIRECTCashflowStatement.class);
  }

  /**
   * Convert an instance of FundamentalsNREITNODIRECTCashflowStatement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

