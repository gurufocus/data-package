/*
 * Gurufocus Data Package API
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FundamentalsNREITDIRECTIncomeStatement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-11T01:10:00.357398434Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class FundamentalsNREITDIRECTIncomeStatement {
  public static final String SERIALIZED_NAME_COST_OF_GOODS_SOLD = "cost_of_goods_sold";
  @SerializedName(SERIALIZED_NAME_COST_OF_GOODS_SOLD)
  @javax.annotation.Nullable
  private BigDecimal costOfGoodsSold;

  public static final String SERIALIZED_NAME_DEPRECIATION_DEPLETION_AMORTIZATION = "depreciation_depletion_amortization";
  @SerializedName(SERIALIZED_NAME_DEPRECIATION_DEPLETION_AMORTIZATION)
  @javax.annotation.Nullable
  private BigDecimal depreciationDepletionAmortization;

  public static final String SERIALIZED_NAME_EBIT = "ebit";
  @SerializedName(SERIALIZED_NAME_EBIT)
  @javax.annotation.Nullable
  private BigDecimal ebit;

  public static final String SERIALIZED_NAME_EBITDA = "ebitda";
  @SerializedName(SERIALIZED_NAME_EBITDA)
  @javax.annotation.Nullable
  private BigDecimal ebitda;

  public static final String SERIALIZED_NAME_EBITDA_MARGIN = "ebitda_margin";
  @SerializedName(SERIALIZED_NAME_EBITDA_MARGIN)
  @javax.annotation.Nullable
  private BigDecimal ebitdaMargin;

  public static final String SERIALIZED_NAME_EPS_BASIC = "eps_basic";
  @SerializedName(SERIALIZED_NAME_EPS_BASIC)
  @javax.annotation.Nullable
  private BigDecimal epsBasic;

  public static final String SERIALIZED_NAME_EPS_DILUATED = "eps_diluated";
  @SerializedName(SERIALIZED_NAME_EPS_DILUATED)
  @javax.annotation.Nullable
  private BigDecimal epsDiluated;

  public static final String SERIALIZED_NAME_GROSS_MARGIN = "gross_margin";
  @SerializedName(SERIALIZED_NAME_GROSS_MARGIN)
  @javax.annotation.Nullable
  private BigDecimal grossMargin;

  public static final String SERIALIZED_NAME_GROSS_PROFIT = "gross_profit";
  @SerializedName(SERIALIZED_NAME_GROSS_PROFIT)
  @javax.annotation.Nullable
  private BigDecimal grossProfit;

  public static final String SERIALIZED_NAME_INTEREST_EXPENSE = "interest_expense";
  @SerializedName(SERIALIZED_NAME_INTEREST_EXPENSE)
  @javax.annotation.Nullable
  private BigDecimal interestExpense;

  public static final String SERIALIZED_NAME_INTEREST_INCOME = "interest_income";
  @SerializedName(SERIALIZED_NAME_INTEREST_INCOME)
  @javax.annotation.Nullable
  private BigDecimal interestIncome;

  public static final String SERIALIZED_NAME_IS_PREFERRED_DIVIDENDS = "is_preferred_dividends";
  @SerializedName(SERIALIZED_NAME_IS_PREFERRED_DIVIDENDS)
  @javax.annotation.Nullable
  private BigDecimal isPreferredDividends;

  public static final String SERIALIZED_NAME_NET_INCOME = "net_income";
  @SerializedName(SERIALIZED_NAME_NET_INCOME)
  @javax.annotation.Nullable
  private BigDecimal netIncome;

  public static final String SERIALIZED_NAME_NET_INCOME_CONTINUING_OPERATIONS = "net_income_continuing_operations";
  @SerializedName(SERIALIZED_NAME_NET_INCOME_CONTINUING_OPERATIONS)
  @javax.annotation.Nullable
  private BigDecimal netIncomeContinuingOperations;

  public static final String SERIALIZED_NAME_NET_INCOME_DISCONTINUED_OPERATIONS = "net_income_discontinued_operations";
  @SerializedName(SERIALIZED_NAME_NET_INCOME_DISCONTINUED_OPERATIONS)
  @javax.annotation.Nullable
  private BigDecimal netIncomeDiscontinuedOperations;

  public static final String SERIALIZED_NAME_NET_INCOME_INCLUDING_NONCONTROLLING_INTERESTS = "net_income_including_noncontrolling_interests";
  @SerializedName(SERIALIZED_NAME_NET_INCOME_INCLUDING_NONCONTROLLING_INTERESTS)
  @javax.annotation.Nullable
  private BigDecimal netIncomeIncludingNoncontrollingInterests;

  public static final String SERIALIZED_NAME_NET_INTEREST_INCOME = "net_interest_income";
  @SerializedName(SERIALIZED_NAME_NET_INTEREST_INCOME)
  @javax.annotation.Nullable
  private BigDecimal netInterestIncome;

  public static final String SERIALIZED_NAME_NET_MARGIN = "net_margin";
  @SerializedName(SERIALIZED_NAME_NET_MARGIN)
  @javax.annotation.Nullable
  private BigDecimal netMargin;

  public static final String SERIALIZED_NAME_OPERATING_INCOME = "operating_income";
  @SerializedName(SERIALIZED_NAME_OPERATING_INCOME)
  @javax.annotation.Nullable
  private BigDecimal operatingIncome;

  public static final String SERIALIZED_NAME_OPERATING_MARGIN = "operating_margin";
  @SerializedName(SERIALIZED_NAME_OPERATING_MARGIN)
  @javax.annotation.Nullable
  private BigDecimal operatingMargin;

  public static final String SERIALIZED_NAME_OTHER_INCOME_EXPENSE = "other_income_expense";
  @SerializedName(SERIALIZED_NAME_OTHER_INCOME_EXPENSE)
  @javax.annotation.Nullable
  private BigDecimal otherIncomeExpense;

  public static final String SERIALIZED_NAME_OTHER_INCOME_MINORITY_INTEREST = "other_income_minority_interest";
  @SerializedName(SERIALIZED_NAME_OTHER_INCOME_MINORITY_INTEREST)
  @javax.annotation.Nullable
  private BigDecimal otherIncomeMinorityInterest;

  public static final String SERIALIZED_NAME_OTHER_NET_INCOME_LOSS = "other_net_income_loss";
  @SerializedName(SERIALIZED_NAME_OTHER_NET_INCOME_LOSS)
  @javax.annotation.Nullable
  private BigDecimal otherNetIncomeLoss;

  public static final String SERIALIZED_NAME_OTHER_OPERATING_CHARGES = "other_operating_charges";
  @SerializedName(SERIALIZED_NAME_OTHER_OPERATING_CHARGES)
  @javax.annotation.Nullable
  private BigDecimal otherOperatingCharges;

  public static final String SERIALIZED_NAME_PRETAX_INCOME = "pretax_income";
  @SerializedName(SERIALIZED_NAME_PRETAX_INCOME)
  @javax.annotation.Nullable
  private BigDecimal pretaxIncome;

  public static final String SERIALIZED_NAME_RESEARCH_DEVELOPMENT = "research_development";
  @SerializedName(SERIALIZED_NAME_RESEARCH_DEVELOPMENT)
  @javax.annotation.Nullable
  private BigDecimal researchDevelopment;

  public static final String SERIALIZED_NAME_REVENUE = "revenue";
  @SerializedName(SERIALIZED_NAME_REVENUE)
  @javax.annotation.Nullable
  private BigDecimal revenue;

  public static final String SERIALIZED_NAME_SELLING_GENERAL_ADMIN_EXPENSE = "selling_general_admin_expense";
  @SerializedName(SERIALIZED_NAME_SELLING_GENERAL_ADMIN_EXPENSE)
  @javax.annotation.Nullable
  private BigDecimal sellingGeneralAdminExpense;

  public static final String SERIALIZED_NAME_SHARES_OUTSTANDING = "shares_outstanding";
  @SerializedName(SERIALIZED_NAME_SHARES_OUTSTANDING)
  @javax.annotation.Nullable
  private BigDecimal sharesOutstanding;

  public static final String SERIALIZED_NAME_TAX_PROVISION = "tax_provision";
  @SerializedName(SERIALIZED_NAME_TAX_PROVISION)
  @javax.annotation.Nullable
  private BigDecimal taxProvision;

  public static final String SERIALIZED_NAME_TAX_RATE = "tax_rate";
  @SerializedName(SERIALIZED_NAME_TAX_RATE)
  @javax.annotation.Nullable
  private BigDecimal taxRate;

  public static final String SERIALIZED_NAME_TOTAL_OPERATING_EXPENSE = "total_operating_expense";
  @SerializedName(SERIALIZED_NAME_TOTAL_OPERATING_EXPENSE)
  @javax.annotation.Nullable
  private BigDecimal totalOperatingExpense;

  public FundamentalsNREITDIRECTIncomeStatement() {
  }

  public FundamentalsNREITDIRECTIncomeStatement costOfGoodsSold(@javax.annotation.Nullable BigDecimal costOfGoodsSold) {
    this.costOfGoodsSold = costOfGoodsSold;
    return this;
  }

  /**
   * &lt;p&gt;{{cogs}} is the aggregate cost of goods produced and sold, and services rendered during the reporting period. It excludes {{TotalOperatingExpense}}, such as {{DDA}} and {{SGA}}. &lt;br&gt;{{cogs}} is directly linked to profitability of the company through {{grossmargin}}. {{grossmargin}} is calculated as ({{revenue}} - {{cogs}}) / {{revenue}}. &lt;br&gt;{{cogs}} is also directly linked to another concept called {{InventoryTurnover}}, which is calculated as {{COGS}} / Average {{Inventory}}.&lt;/p&gt;
   * @return costOfGoodsSold
   */
  @javax.annotation.Nullable
  public BigDecimal getCostOfGoodsSold() {
    return costOfGoodsSold;
  }

  public void setCostOfGoodsSold(@javax.annotation.Nullable BigDecimal costOfGoodsSold) {
    this.costOfGoodsSold = costOfGoodsSold;
  }


  public FundamentalsNREITDIRECTIncomeStatement depreciationDepletionAmortization(@javax.annotation.Nullable BigDecimal depreciationDepletionAmortization) {
    this.depreciationDepletionAmortization = depreciationDepletionAmortization;
    return this;
  }

  /**
   * &lt;p&gt;{{DDA}} is a present expense that accounts for the past cost of an asset that is now providing benefits. Depletion and amortization are synonyms for depreciation. Generally: The term depreciation is used when discussing man made tangible assets. The term depletion is used when discussing natural tangible assets. The term amortization is used when discussing intangible assets&lt;/p&gt;
   * @return depreciationDepletionAmortization
   */
  @javax.annotation.Nullable
  public BigDecimal getDepreciationDepletionAmortization() {
    return depreciationDepletionAmortization;
  }

  public void setDepreciationDepletionAmortization(@javax.annotation.Nullable BigDecimal depreciationDepletionAmortization) {
    this.depreciationDepletionAmortization = depreciationDepletionAmortization;
  }


  public FundamentalsNREITDIRECTIncomeStatement ebit(@javax.annotation.Nullable BigDecimal ebit) {
    this.ebit = ebit;
    return this;
  }

  /**
   * In accounting and finance, earnings before interest and taxes (EBIT), is a measure of a firm&#39;s profit that includes all expenses except interest and income tax expenses. It is the difference between operating revenues and operating expenses.
   * @return ebit
   */
  @javax.annotation.Nullable
  public BigDecimal getEbit() {
    return ebit;
  }

  public void setEbit(@javax.annotation.Nullable BigDecimal ebit) {
    this.ebit = ebit;
  }


  public FundamentalsNREITDIRECTIncomeStatement ebitda(@javax.annotation.Nullable BigDecimal ebitda) {
    this.ebitda = ebitda;
    return this;
  }

  /**
   * &lt;p&gt;Earnings Before Interest, Taxes, Depreciation, and Amortization ({{EBITDA}}) is what the company earns before it expenses interest, taxes, depreciation and amortization. &lt;br&gt;{{EBITDA}} is calculated as {{EBITDA}} &#x3D; {{Revenue}} - {{COGS}} - {{SGA}} - {{RD}} &#x3D; {{Gross_Profit}} - {{SGA}} - {{RD}} &lt;br&gt; The use of {{EBITDA}} is an attempt to make the results of different companies more comparable and uniform.&lt;/p&gt;
   * @return ebitda
   */
  @javax.annotation.Nullable
  public BigDecimal getEbitda() {
    return ebitda;
  }

  public void setEbitda(@javax.annotation.Nullable BigDecimal ebitda) {
    this.ebitda = ebitda;
  }


  public FundamentalsNREITDIRECTIncomeStatement ebitdaMargin(@javax.annotation.Nullable BigDecimal ebitdaMargin) {
    this.ebitdaMargin = ebitdaMargin;
    return this;
  }

  /**
   * Get ebitdaMargin
   * @return ebitdaMargin
   */
  @javax.annotation.Nullable
  public BigDecimal getEbitdaMargin() {
    return ebitdaMargin;
  }

  public void setEbitdaMargin(@javax.annotation.Nullable BigDecimal ebitdaMargin) {
    this.ebitdaMargin = ebitdaMargin;
  }


  public FundamentalsNREITDIRECTIncomeStatement epsBasic(@javax.annotation.Nullable BigDecimal epsBasic) {
    this.epsBasic = epsBasic;
    return this;
  }

  /**
   * &lt;p&gt;{{eps_basic}} is a rough measurement of the amount of a company&#39;s profit that can be allocated to one share of its stock. {{eps_basic}} do not factor in the dilutive effects on convertible securities. &lt;br&gt;{{eps_basic}} is calculated as: {{eps_basic}} &#x3D; ({{Net_Income}} - {{IS_preferred_dividends}}) / {{shares_basic}}&lt;/p&gt;
   * @return epsBasic
   */
  @javax.annotation.Nullable
  public BigDecimal getEpsBasic() {
    return epsBasic;
  }

  public void setEpsBasic(@javax.annotation.Nullable BigDecimal epsBasic) {
    this.epsBasic = epsBasic;
  }


  public FundamentalsNREITDIRECTIncomeStatement epsDiluated(@javax.annotation.Nullable BigDecimal epsDiluated) {
    this.epsDiluated = epsDiluated;
    return this;
  }

  /**
   * &lt;p&gt;{{eps_diluated}} is a rough measurement of the amount of a company&#39;s profit that can be allocated to one share of its stock. {{eps_diluated}} takes into account all of the outstanding dilutive securities that could potentially be exercised (such as stock options and convertible {{Preferred_Stock}}) and shows how such an action would impact {{per_share_eps}}. &lt;br&gt;{{eps_diluated}} is calculated as: {{eps_diluated}} &#x3D; ({{Net_Income}} - {{IS_preferred_dividends}}) / {{Shares_Outstanding}}&lt;/p&gt;
   * @return epsDiluated
   */
  @javax.annotation.Nullable
  public BigDecimal getEpsDiluated() {
    return epsDiluated;
  }

  public void setEpsDiluated(@javax.annotation.Nullable BigDecimal epsDiluated) {
    this.epsDiluated = epsDiluated;
  }


  public FundamentalsNREITDIRECTIncomeStatement grossMargin(@javax.annotation.Nullable BigDecimal grossMargin) {
    this.grossMargin = grossMargin;
    return this;
  }

  /**
   * Gross Margin % is calculated as gross profit divided by its revenue.
   * @return grossMargin
   */
  @javax.annotation.Nullable
  public BigDecimal getGrossMargin() {
    return grossMargin;
  }

  public void setGrossMargin(@javax.annotation.Nullable BigDecimal grossMargin) {
    this.grossMargin = grossMargin;
  }


  public FundamentalsNREITDIRECTIncomeStatement grossProfit(@javax.annotation.Nullable BigDecimal grossProfit) {
    this.grossProfit = grossProfit;
    return this;
  }

  /**
   * &lt;p&gt;{{Gross_Profit}} is the different between the sale prices and the cost of buying or producing the goods. It is calculated as {{Gross_Profit}} &#x3D; {{Revenue}} - {{COGS}} &lt;br&gt;{{Gross_Profit}} is the numerator in the calculation of {{grossmargin}}: {{grossmargin}} &#x3D; {{Gross_Profit}} / {{Revenue}} &#x3D; ({{Revenue}} - {{COGS}}) / {{Revenue}} &lt;br&gt;A positive {{Gross_Profit}} is only the first step for a company to make a net profit. The {{Gross_Profit}} needs to be big enough to also cover related labor, equipment, rental, marketing/advertising, research and development and a lot of other costs in selling the products.&lt;/p&gt;
   * @return grossProfit
   */
  @javax.annotation.Nullable
  public BigDecimal getGrossProfit() {
    return grossProfit;
  }

  public void setGrossProfit(@javax.annotation.Nullable BigDecimal grossProfit) {
    this.grossProfit = grossProfit;
  }


  public FundamentalsNREITDIRECTIncomeStatement interestExpense(@javax.annotation.Nullable BigDecimal interestExpense) {
    this.interestExpense = interestExpense;
    return this;
  }

  /**
   * &lt;p&gt;{{InterestExpense}} is the amount reported by a company or individual as an expense for borrowed money. It is related to {{interest_coverage}}, which is a ratio that determines how easily a company can pay interest expenses on outstanding debt. &lt;br&gt;{{interest_coverage}} is calculated as -1 * {{Operating_Income}} / {{InterestExpense}} &lt;br&gt;If both {{InterestExpense}} and {{InterestIncome}} are empty, while {{NetInterestIncome}} is negative, then use {{NetInterestIncome}} as {{InterestExpense}}.&lt;/p&gt;
   * @return interestExpense
   */
  @javax.annotation.Nullable
  public BigDecimal getInterestExpense() {
    return interestExpense;
  }

  public void setInterestExpense(@javax.annotation.Nullable BigDecimal interestExpense) {
    this.interestExpense = interestExpense;
  }


  public FundamentalsNREITDIRECTIncomeStatement interestIncome(@javax.annotation.Nullable BigDecimal interestIncome) {
    this.interestIncome = interestIncome;
    return this;
  }

  /**
   * &lt;p&gt;{{InterestIncome}} is the interest earned on cash temporarily held in savings accounts, certificates of deposits, or other investments.&lt;/p&gt;
   * @return interestIncome
   */
  @javax.annotation.Nullable
  public BigDecimal getInterestIncome() {
    return interestIncome;
  }

  public void setInterestIncome(@javax.annotation.Nullable BigDecimal interestIncome) {
    this.interestIncome = interestIncome;
  }


  public FundamentalsNREITDIRECTIncomeStatement isPreferredDividends(@javax.annotation.Nullable BigDecimal isPreferredDividends) {
    this.isPreferredDividends = isPreferredDividends;
    return this;
  }

  /**
   * &lt;p&gt;{{IS_preferred_dividends}} is a dividend that is accrued and paid on a company&#39;s preferred shares. In the event that a company is unable to pay all dividends, claims to {{IS_preferred_dividends}} take precedence over claims to dividends that are paid on common shares.&lt;/p&gt;
   * @return isPreferredDividends
   */
  @javax.annotation.Nullable
  public BigDecimal getIsPreferredDividends() {
    return isPreferredDividends;
  }

  public void setIsPreferredDividends(@javax.annotation.Nullable BigDecimal isPreferredDividends) {
    this.isPreferredDividends = isPreferredDividends;
  }


  public FundamentalsNREITDIRECTIncomeStatement netIncome(@javax.annotation.Nullable BigDecimal netIncome) {
    this.netIncome = netIncome;
    return this;
  }

  /**
   * &lt;p&gt;{{Net_Income}} is the net profit that a company earns after deducting all costs and losses including {{COGS}}, {{SGA}}, {{DDA}}, {{InterestExpense}}, non-recurring items and {{tax}}.  &lt;br&gt;{{Net_Income}}  &#x3D; {{Revenue}} - {{COGS}}, - {{SGA}} - {{RD}}  - {{DDA}} - {{InterestExpense}} + Non-Recurring Items  - {{tax}} &#x3D; Earnings Before Depreciation and Amortization - {{DDA}} - {{InterestExpense}} - Non-Recurring Items (NRI) - {{tax}} &#x3D; {{Operating_Income}} - {{InterestExpense}} - Non-Recurring Items (NRI) - {{tax}} &#x3D; {{Pretax_Income}} - {{tax}}&lt;/p&gt;
   * @return netIncome
   */
  @javax.annotation.Nullable
  public BigDecimal getNetIncome() {
    return netIncome;
  }

  public void setNetIncome(@javax.annotation.Nullable BigDecimal netIncome) {
    this.netIncome = netIncome;
  }


  public FundamentalsNREITDIRECTIncomeStatement netIncomeContinuingOperations(@javax.annotation.Nullable BigDecimal netIncomeContinuingOperations) {
    this.netIncomeContinuingOperations = netIncomeContinuingOperations;
    return this;
  }

  /**
   * &lt;p&gt;{{Net_Income_(Continuing_Operations)}} indicates the net income that a firm brings in from ongoing business activities. These activities are expected to continue into the next reporting period.&lt;/p&gt;
   * @return netIncomeContinuingOperations
   */
  @javax.annotation.Nullable
  public BigDecimal getNetIncomeContinuingOperations() {
    return netIncomeContinuingOperations;
  }

  public void setNetIncomeContinuingOperations(@javax.annotation.Nullable BigDecimal netIncomeContinuingOperations) {
    this.netIncomeContinuingOperations = netIncomeContinuingOperations;
  }


  public FundamentalsNREITDIRECTIncomeStatement netIncomeDiscontinuedOperations(@javax.annotation.Nullable BigDecimal netIncomeDiscontinuedOperations) {
    this.netIncomeDiscontinuedOperations = netIncomeDiscontinuedOperations;
    return this;
  }

  /**
   * &lt;p&gt;{{Net_Income_(Discontinued_Operations)}} indicates the net income that a firm brought in from operations that will not be used in future reporting periods.&lt;/p&gt;
   * @return netIncomeDiscontinuedOperations
   */
  @javax.annotation.Nullable
  public BigDecimal getNetIncomeDiscontinuedOperations() {
    return netIncomeDiscontinuedOperations;
  }

  public void setNetIncomeDiscontinuedOperations(@javax.annotation.Nullable BigDecimal netIncomeDiscontinuedOperations) {
    this.netIncomeDiscontinuedOperations = netIncomeDiscontinuedOperations;
  }


  public FundamentalsNREITDIRECTIncomeStatement netIncomeIncludingNoncontrollingInterests(@javax.annotation.Nullable BigDecimal netIncomeIncludingNoncontrollingInterests) {
    this.netIncomeIncludingNoncontrollingInterests = netIncomeIncludingNoncontrollingInterests;
    return this;
  }

  /**
   * Get netIncomeIncludingNoncontrollingInterests
   * @return netIncomeIncludingNoncontrollingInterests
   */
  @javax.annotation.Nullable
  public BigDecimal getNetIncomeIncludingNoncontrollingInterests() {
    return netIncomeIncludingNoncontrollingInterests;
  }

  public void setNetIncomeIncludingNoncontrollingInterests(@javax.annotation.Nullable BigDecimal netIncomeIncludingNoncontrollingInterests) {
    this.netIncomeIncludingNoncontrollingInterests = netIncomeIncludingNoncontrollingInterests;
  }


  public FundamentalsNREITDIRECTIncomeStatement netInterestIncome(@javax.annotation.Nullable BigDecimal netInterestIncome) {
    this.netInterestIncome = netInterestIncome;
    return this;
  }

  /**
   * &lt;p&gt;{{IS_NetInterestIncome}} is the income earned by banks from the fund they have on their balance sheet.&lt;/p&gt;
   * @return netInterestIncome
   */
  @javax.annotation.Nullable
  public BigDecimal getNetInterestIncome() {
    return netInterestIncome;
  }

  public void setNetInterestIncome(@javax.annotation.Nullable BigDecimal netInterestIncome) {
    this.netInterestIncome = netInterestIncome;
  }


  public FundamentalsNREITDIRECTIncomeStatement netMargin(@javax.annotation.Nullable BigDecimal netMargin) {
    this.netMargin = netMargin;
    return this;
  }

  /**
   * Net margin is calculated as Net Income divided by its Revenue.
   * @return netMargin
   */
  @javax.annotation.Nullable
  public BigDecimal getNetMargin() {
    return netMargin;
  }

  public void setNetMargin(@javax.annotation.Nullable BigDecimal netMargin) {
    this.netMargin = netMargin;
  }


  public FundamentalsNREITDIRECTIncomeStatement operatingIncome(@javax.annotation.Nullable BigDecimal operatingIncome) {
    this.operatingIncome = operatingIncome;
    return this;
  }

  /**
   * &lt;p&gt;{{Operating_Income}}, sometimes also called Earnings Before Interest and Taxes (EBIT), is the profit a company earned through operations. All expenses, including cash expenses such as {{COGS}}, {{RD}}, wages, and non-cash expenses, such as {{DDA}}, have been deducted from the sales. &lt;br&gt;{{Operating_Income}} (EBIT) &#x3D; {{Revenue}} - {{COGS}} - {{SGA}} - {{RD}} - {{DDA}} &#x3D; {{Gross_Profit}} - {{SGA}} - {{RD}} - {{DDA}} &#x3D; {{EBITDA}} - {{DDA}}&lt;/p&gt;
   * @return operatingIncome
   */
  @javax.annotation.Nullable
  public BigDecimal getOperatingIncome() {
    return operatingIncome;
  }

  public void setOperatingIncome(@javax.annotation.Nullable BigDecimal operatingIncome) {
    this.operatingIncome = operatingIncome;
  }


  public FundamentalsNREITDIRECTIncomeStatement operatingMargin(@javax.annotation.Nullable BigDecimal operatingMargin) {
    this.operatingMargin = operatingMargin;
    return this;
  }

  /**
   * Operating Margin % is calculated as Operating Income divided by its Revenue.
   * @return operatingMargin
   */
  @javax.annotation.Nullable
  public BigDecimal getOperatingMargin() {
    return operatingMargin;
  }

  public void setOperatingMargin(@javax.annotation.Nullable BigDecimal operatingMargin) {
    this.operatingMargin = operatingMargin;
  }


  public FundamentalsNREITDIRECTIncomeStatement otherIncomeExpense(@javax.annotation.Nullable BigDecimal otherIncomeExpense) {
    this.otherIncomeExpense = otherIncomeExpense;
    return this;
  }

  /**
   * &lt;p&gt;{{OtherIncomeExpense}} includes {{Minority_interest}}. {{Minority_interest}} is a significant but non-controlling ownership of less than 50% of a company&#39;s voting shares by either an investor or another company.&lt;/p&gt;
   * @return otherIncomeExpense
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherIncomeExpense() {
    return otherIncomeExpense;
  }

  public void setOtherIncomeExpense(@javax.annotation.Nullable BigDecimal otherIncomeExpense) {
    this.otherIncomeExpense = otherIncomeExpense;
  }


  public FundamentalsNREITDIRECTIncomeStatement otherIncomeMinorityInterest(@javax.annotation.Nullable BigDecimal otherIncomeMinorityInterest) {
    this.otherIncomeMinorityInterest = otherIncomeMinorityInterest;
    return this;
  }

  /**
   * &lt;p&gt;{{OtherIncomeExpense}} includes {{Minority_interest}}. {{Minority_interest}} is a significant but non-controlling ownership of less than 50% of a company&#39;s voting shares by either an investor or another company.&lt;/p&gt;
   * @return otherIncomeMinorityInterest
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherIncomeMinorityInterest() {
    return otherIncomeMinorityInterest;
  }

  public void setOtherIncomeMinorityInterest(@javax.annotation.Nullable BigDecimal otherIncomeMinorityInterest) {
    this.otherIncomeMinorityInterest = otherIncomeMinorityInterest;
  }


  public FundamentalsNREITDIRECTIncomeStatement otherNetIncomeLoss(@javax.annotation.Nullable BigDecimal otherNetIncomeLoss) {
    this.otherNetIncomeLoss = otherNetIncomeLoss;
    return this;
  }

  /**
   * Get otherNetIncomeLoss
   * @return otherNetIncomeLoss
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherNetIncomeLoss() {
    return otherNetIncomeLoss;
  }

  public void setOtherNetIncomeLoss(@javax.annotation.Nullable BigDecimal otherNetIncomeLoss) {
    this.otherNetIncomeLoss = otherNetIncomeLoss;
  }


  public FundamentalsNREITDIRECTIncomeStatement otherOperatingCharges(@javax.annotation.Nullable BigDecimal otherOperatingCharges) {
    this.otherOperatingCharges = otherOperatingCharges;
    return this;
  }

  /**
   * &lt;p&gt;GuruFocus uses a standardized financial statement format for all companies. For non-financial companies, GuruFocus lists {{SGA}}, Advertising, {{RD}}, and {{other_operating_charges}} under the \&quot;{{TotalOperatingExpense}}\&quot; section. {{other_operating_charges}} sometimes includes: Restructuring, and merger, Acquisition related and other, Litigation settlement charge, Other (too numerous to list). Some companies can and do choose to report each of these items separately. Yet, there are a variety of {{other_operating_charges}} which are simply too numerous to list.&lt;/p&gt;
   * @return otherOperatingCharges
   */
  @javax.annotation.Nullable
  public BigDecimal getOtherOperatingCharges() {
    return otherOperatingCharges;
  }

  public void setOtherOperatingCharges(@javax.annotation.Nullable BigDecimal otherOperatingCharges) {
    this.otherOperatingCharges = otherOperatingCharges;
  }


  public FundamentalsNREITDIRECTIncomeStatement pretaxIncome(@javax.annotation.Nullable BigDecimal pretaxIncome) {
    this.pretaxIncome = pretaxIncome;
    return this;
  }

  /**
   * &lt;p&gt;{{Pretax_Income}} is the income that a company earns before paying income taxes. &lt;br&gt;{{Pretax_Income}} is calculated as {{Operating_Income}} + {{Non_Operating_Income}} + {{InterestExpense}} + {{InterestIncome}} + other&lt;/p&gt;
   * @return pretaxIncome
   */
  @javax.annotation.Nullable
  public BigDecimal getPretaxIncome() {
    return pretaxIncome;
  }

  public void setPretaxIncome(@javax.annotation.Nullable BigDecimal pretaxIncome) {
    this.pretaxIncome = pretaxIncome;
  }


  public FundamentalsNREITDIRECTIncomeStatement researchDevelopment(@javax.annotation.Nullable BigDecimal researchDevelopment) {
    this.researchDevelopment = researchDevelopment;
    return this;
  }

  /**
   * &lt;p&gt;This is the expense the company spent on research and development.&lt;br&gt;If competitive advantage is created by a patent or tech advantage, at some point it will disappear. High {{RD}} usually dictates high {{SGA}} which threatens the competitive advantage.&lt;/p&gt;
   * @return researchDevelopment
   */
  @javax.annotation.Nullable
  public BigDecimal getResearchDevelopment() {
    return researchDevelopment;
  }

  public void setResearchDevelopment(@javax.annotation.Nullable BigDecimal researchDevelopment) {
    this.researchDevelopment = researchDevelopment;
  }


  public FundamentalsNREITDIRECTIncomeStatement revenue(@javax.annotation.Nullable BigDecimal revenue) {
    this.revenue = revenue;
    return this;
  }

  /**
   * Get revenue
   * @return revenue
   */
  @javax.annotation.Nullable
  public BigDecimal getRevenue() {
    return revenue;
  }

  public void setRevenue(@javax.annotation.Nullable BigDecimal revenue) {
    this.revenue = revenue;
  }


  public FundamentalsNREITDIRECTIncomeStatement sellingGeneralAdminExpense(@javax.annotation.Nullable BigDecimal sellingGeneralAdminExpense) {
    this.sellingGeneralAdminExpense = sellingGeneralAdminExpense;
    return this;
  }

  /**
   * Selling, General, &amp; Admin. Expense (SGA) includes the direct and indirect costs and all general and administrative expenses of a company. For instance, personnel cost, advertising, rent, communication costs are all part of SGA.
   * @return sellingGeneralAdminExpense
   */
  @javax.annotation.Nullable
  public BigDecimal getSellingGeneralAdminExpense() {
    return sellingGeneralAdminExpense;
  }

  public void setSellingGeneralAdminExpense(@javax.annotation.Nullable BigDecimal sellingGeneralAdminExpense) {
    this.sellingGeneralAdminExpense = sellingGeneralAdminExpense;
  }


  public FundamentalsNREITDIRECTIncomeStatement sharesOutstanding(@javax.annotation.Nullable BigDecimal sharesOutstanding) {
    this.sharesOutstanding = sharesOutstanding;
    return this;
  }

  /**
   * &lt;p&gt;{{Cash_Flow_from_Others}} may include {{ChangeInWorkingCapital}}. These are cash differences caused by the {{ChangeInInventory}}, {{AccountsPayable}}, {{Accts_Rec}} etc. For instance, if a company pays its suppliers slower, its cash position will build up faster. If a company receives payments from its customers slower, its {{Accts_Rec}} will rise, and its cash position will grow more slowly (or even shrink).&lt;/p&gt;
   * @return sharesOutstanding
   */
  @javax.annotation.Nullable
  public BigDecimal getSharesOutstanding() {
    return sharesOutstanding;
  }

  public void setSharesOutstanding(@javax.annotation.Nullable BigDecimal sharesOutstanding) {
    this.sharesOutstanding = sharesOutstanding;
  }


  public FundamentalsNREITDIRECTIncomeStatement taxProvision(@javax.annotation.Nullable BigDecimal taxProvision) {
    this.taxProvision = taxProvision;
    return this;
  }

  /**
   * &lt;p&gt;{{TaxProvision}} is the tax to be paid.&lt;/p&gt;
   * @return taxProvision
   */
  @javax.annotation.Nullable
  public BigDecimal getTaxProvision() {
    return taxProvision;
  }

  public void setTaxProvision(@javax.annotation.Nullable BigDecimal taxProvision) {
    this.taxProvision = taxProvision;
  }


  public FundamentalsNREITDIRECTIncomeStatement taxRate(@javax.annotation.Nullable BigDecimal taxRate) {
    this.taxRate = taxRate;
    return this;
  }

  /**
   * &lt;p&gt;{{TaxRate}} is the ratio of {{tax}} divided by {{Pretax_Income}}, usually presented in percent. &lt;br&gt; {{{TaxRate}} &#x3D; {{tax}} / {{Pretax_Income}}&lt;/p&gt;
   * @return taxRate
   */
  @javax.annotation.Nullable
  public BigDecimal getTaxRate() {
    return taxRate;
  }

  public void setTaxRate(@javax.annotation.Nullable BigDecimal taxRate) {
    this.taxRate = taxRate;
  }


  public FundamentalsNREITDIRECTIncomeStatement totalOperatingExpense(@javax.annotation.Nullable BigDecimal totalOperatingExpense) {
    this.totalOperatingExpense = totalOperatingExpense;
    return this;
  }

  /**
   * Get totalOperatingExpense
   * @return totalOperatingExpense
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalOperatingExpense() {
    return totalOperatingExpense;
  }

  public void setTotalOperatingExpense(@javax.annotation.Nullable BigDecimal totalOperatingExpense) {
    this.totalOperatingExpense = totalOperatingExpense;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FundamentalsNREITDIRECTIncomeStatement fundamentalsNREITDIRECTIncomeStatement = (FundamentalsNREITDIRECTIncomeStatement) o;
    return Objects.equals(this.costOfGoodsSold, fundamentalsNREITDIRECTIncomeStatement.costOfGoodsSold) &&
        Objects.equals(this.depreciationDepletionAmortization, fundamentalsNREITDIRECTIncomeStatement.depreciationDepletionAmortization) &&
        Objects.equals(this.ebit, fundamentalsNREITDIRECTIncomeStatement.ebit) &&
        Objects.equals(this.ebitda, fundamentalsNREITDIRECTIncomeStatement.ebitda) &&
        Objects.equals(this.ebitdaMargin, fundamentalsNREITDIRECTIncomeStatement.ebitdaMargin) &&
        Objects.equals(this.epsBasic, fundamentalsNREITDIRECTIncomeStatement.epsBasic) &&
        Objects.equals(this.epsDiluated, fundamentalsNREITDIRECTIncomeStatement.epsDiluated) &&
        Objects.equals(this.grossMargin, fundamentalsNREITDIRECTIncomeStatement.grossMargin) &&
        Objects.equals(this.grossProfit, fundamentalsNREITDIRECTIncomeStatement.grossProfit) &&
        Objects.equals(this.interestExpense, fundamentalsNREITDIRECTIncomeStatement.interestExpense) &&
        Objects.equals(this.interestIncome, fundamentalsNREITDIRECTIncomeStatement.interestIncome) &&
        Objects.equals(this.isPreferredDividends, fundamentalsNREITDIRECTIncomeStatement.isPreferredDividends) &&
        Objects.equals(this.netIncome, fundamentalsNREITDIRECTIncomeStatement.netIncome) &&
        Objects.equals(this.netIncomeContinuingOperations, fundamentalsNREITDIRECTIncomeStatement.netIncomeContinuingOperations) &&
        Objects.equals(this.netIncomeDiscontinuedOperations, fundamentalsNREITDIRECTIncomeStatement.netIncomeDiscontinuedOperations) &&
        Objects.equals(this.netIncomeIncludingNoncontrollingInterests, fundamentalsNREITDIRECTIncomeStatement.netIncomeIncludingNoncontrollingInterests) &&
        Objects.equals(this.netInterestIncome, fundamentalsNREITDIRECTIncomeStatement.netInterestIncome) &&
        Objects.equals(this.netMargin, fundamentalsNREITDIRECTIncomeStatement.netMargin) &&
        Objects.equals(this.operatingIncome, fundamentalsNREITDIRECTIncomeStatement.operatingIncome) &&
        Objects.equals(this.operatingMargin, fundamentalsNREITDIRECTIncomeStatement.operatingMargin) &&
        Objects.equals(this.otherIncomeExpense, fundamentalsNREITDIRECTIncomeStatement.otherIncomeExpense) &&
        Objects.equals(this.otherIncomeMinorityInterest, fundamentalsNREITDIRECTIncomeStatement.otherIncomeMinorityInterest) &&
        Objects.equals(this.otherNetIncomeLoss, fundamentalsNREITDIRECTIncomeStatement.otherNetIncomeLoss) &&
        Objects.equals(this.otherOperatingCharges, fundamentalsNREITDIRECTIncomeStatement.otherOperatingCharges) &&
        Objects.equals(this.pretaxIncome, fundamentalsNREITDIRECTIncomeStatement.pretaxIncome) &&
        Objects.equals(this.researchDevelopment, fundamentalsNREITDIRECTIncomeStatement.researchDevelopment) &&
        Objects.equals(this.revenue, fundamentalsNREITDIRECTIncomeStatement.revenue) &&
        Objects.equals(this.sellingGeneralAdminExpense, fundamentalsNREITDIRECTIncomeStatement.sellingGeneralAdminExpense) &&
        Objects.equals(this.sharesOutstanding, fundamentalsNREITDIRECTIncomeStatement.sharesOutstanding) &&
        Objects.equals(this.taxProvision, fundamentalsNREITDIRECTIncomeStatement.taxProvision) &&
        Objects.equals(this.taxRate, fundamentalsNREITDIRECTIncomeStatement.taxRate) &&
        Objects.equals(this.totalOperatingExpense, fundamentalsNREITDIRECTIncomeStatement.totalOperatingExpense);
  }

  @Override
  public int hashCode() {
    return Objects.hash(costOfGoodsSold, depreciationDepletionAmortization, ebit, ebitda, ebitdaMargin, epsBasic, epsDiluated, grossMargin, grossProfit, interestExpense, interestIncome, isPreferredDividends, netIncome, netIncomeContinuingOperations, netIncomeDiscontinuedOperations, netIncomeIncludingNoncontrollingInterests, netInterestIncome, netMargin, operatingIncome, operatingMargin, otherIncomeExpense, otherIncomeMinorityInterest, otherNetIncomeLoss, otherOperatingCharges, pretaxIncome, researchDevelopment, revenue, sellingGeneralAdminExpense, sharesOutstanding, taxProvision, taxRate, totalOperatingExpense);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FundamentalsNREITDIRECTIncomeStatement {\n");
    sb.append("    costOfGoodsSold: ").append(toIndentedString(costOfGoodsSold)).append("\n");
    sb.append("    depreciationDepletionAmortization: ").append(toIndentedString(depreciationDepletionAmortization)).append("\n");
    sb.append("    ebit: ").append(toIndentedString(ebit)).append("\n");
    sb.append("    ebitda: ").append(toIndentedString(ebitda)).append("\n");
    sb.append("    ebitdaMargin: ").append(toIndentedString(ebitdaMargin)).append("\n");
    sb.append("    epsBasic: ").append(toIndentedString(epsBasic)).append("\n");
    sb.append("    epsDiluated: ").append(toIndentedString(epsDiluated)).append("\n");
    sb.append("    grossMargin: ").append(toIndentedString(grossMargin)).append("\n");
    sb.append("    grossProfit: ").append(toIndentedString(grossProfit)).append("\n");
    sb.append("    interestExpense: ").append(toIndentedString(interestExpense)).append("\n");
    sb.append("    interestIncome: ").append(toIndentedString(interestIncome)).append("\n");
    sb.append("    isPreferredDividends: ").append(toIndentedString(isPreferredDividends)).append("\n");
    sb.append("    netIncome: ").append(toIndentedString(netIncome)).append("\n");
    sb.append("    netIncomeContinuingOperations: ").append(toIndentedString(netIncomeContinuingOperations)).append("\n");
    sb.append("    netIncomeDiscontinuedOperations: ").append(toIndentedString(netIncomeDiscontinuedOperations)).append("\n");
    sb.append("    netIncomeIncludingNoncontrollingInterests: ").append(toIndentedString(netIncomeIncludingNoncontrollingInterests)).append("\n");
    sb.append("    netInterestIncome: ").append(toIndentedString(netInterestIncome)).append("\n");
    sb.append("    netMargin: ").append(toIndentedString(netMargin)).append("\n");
    sb.append("    operatingIncome: ").append(toIndentedString(operatingIncome)).append("\n");
    sb.append("    operatingMargin: ").append(toIndentedString(operatingMargin)).append("\n");
    sb.append("    otherIncomeExpense: ").append(toIndentedString(otherIncomeExpense)).append("\n");
    sb.append("    otherIncomeMinorityInterest: ").append(toIndentedString(otherIncomeMinorityInterest)).append("\n");
    sb.append("    otherNetIncomeLoss: ").append(toIndentedString(otherNetIncomeLoss)).append("\n");
    sb.append("    otherOperatingCharges: ").append(toIndentedString(otherOperatingCharges)).append("\n");
    sb.append("    pretaxIncome: ").append(toIndentedString(pretaxIncome)).append("\n");
    sb.append("    researchDevelopment: ").append(toIndentedString(researchDevelopment)).append("\n");
    sb.append("    revenue: ").append(toIndentedString(revenue)).append("\n");
    sb.append("    sellingGeneralAdminExpense: ").append(toIndentedString(sellingGeneralAdminExpense)).append("\n");
    sb.append("    sharesOutstanding: ").append(toIndentedString(sharesOutstanding)).append("\n");
    sb.append("    taxProvision: ").append(toIndentedString(taxProvision)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    totalOperatingExpense: ").append(toIndentedString(totalOperatingExpense)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cost_of_goods_sold");
    openapiFields.add("depreciation_depletion_amortization");
    openapiFields.add("ebit");
    openapiFields.add("ebitda");
    openapiFields.add("ebitda_margin");
    openapiFields.add("eps_basic");
    openapiFields.add("eps_diluated");
    openapiFields.add("gross_margin");
    openapiFields.add("gross_profit");
    openapiFields.add("interest_expense");
    openapiFields.add("interest_income");
    openapiFields.add("is_preferred_dividends");
    openapiFields.add("net_income");
    openapiFields.add("net_income_continuing_operations");
    openapiFields.add("net_income_discontinued_operations");
    openapiFields.add("net_income_including_noncontrolling_interests");
    openapiFields.add("net_interest_income");
    openapiFields.add("net_margin");
    openapiFields.add("operating_income");
    openapiFields.add("operating_margin");
    openapiFields.add("other_income_expense");
    openapiFields.add("other_income_minority_interest");
    openapiFields.add("other_net_income_loss");
    openapiFields.add("other_operating_charges");
    openapiFields.add("pretax_income");
    openapiFields.add("research_development");
    openapiFields.add("revenue");
    openapiFields.add("selling_general_admin_expense");
    openapiFields.add("shares_outstanding");
    openapiFields.add("tax_provision");
    openapiFields.add("tax_rate");
    openapiFields.add("total_operating_expense");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FundamentalsNREITDIRECTIncomeStatement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FundamentalsNREITDIRECTIncomeStatement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FundamentalsNREITDIRECTIncomeStatement is not found in the empty JSON string", FundamentalsNREITDIRECTIncomeStatement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FundamentalsNREITDIRECTIncomeStatement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FundamentalsNREITDIRECTIncomeStatement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FundamentalsNREITDIRECTIncomeStatement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FundamentalsNREITDIRECTIncomeStatement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FundamentalsNREITDIRECTIncomeStatement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FundamentalsNREITDIRECTIncomeStatement.class));

       return (TypeAdapter<T>) new TypeAdapter<FundamentalsNREITDIRECTIncomeStatement>() {
           @Override
           public void write(JsonWriter out, FundamentalsNREITDIRECTIncomeStatement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FundamentalsNREITDIRECTIncomeStatement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FundamentalsNREITDIRECTIncomeStatement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FundamentalsNREITDIRECTIncomeStatement
   * @throws IOException if the JSON string is invalid with respect to FundamentalsNREITDIRECTIncomeStatement
   */
  public static FundamentalsNREITDIRECTIncomeStatement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FundamentalsNREITDIRECTIncomeStatement.class);
  }

  /**
   * Convert an instance of FundamentalsNREITDIRECTIncomeStatement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

