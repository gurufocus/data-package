/*
 * Gurufocus Data Package API
 * API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Insider transaction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-11T01:10:00.357398434Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class InsiderTransaction {
  public static final String SERIALIZED_NAME_CIK_REPORTING = "cik_reporting";
  @SerializedName(SERIALIZED_NAME_CIK_REPORTING)
  @javax.annotation.Nullable
  private String cikReporting;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  @javax.annotation.Nullable
  private String company;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  @javax.annotation.Nullable
  private BigDecimal cost;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  @javax.annotation.Nullable
  private String date;

  public static final String SERIALIZED_NAME_EXCHANGE = "exchange";
  @SerializedName(SERIALIZED_NAME_EXCHANGE)
  @javax.annotation.Nullable
  private String exchange;

  public static final String SERIALIZED_NAME_FINAL_SHARE = "final_share";
  @SerializedName(SERIALIZED_NAME_FINAL_SHARE)
  @javax.annotation.Nullable
  private BigDecimal finalShare;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  @javax.annotation.Nullable
  private String position;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  @javax.annotation.Nullable
  private BigDecimal price;

  public static final String SERIALIZED_NAME_SPLIT_FACTOR = "split_factor";
  @SerializedName(SERIALIZED_NAME_SPLIT_FACTOR)
  @javax.annotation.Nullable
  private BigDecimal splitFactor;

  public static final String SERIALIZED_NAME_STOCKID = "stockid";
  @SerializedName(SERIALIZED_NAME_STOCKID)
  @javax.annotation.Nullable
  private String stockid;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  @javax.annotation.Nullable
  private String symbol;

  public static final String SERIALIZED_NAME_TRANS_SHARE = "trans_share";
  @SerializedName(SERIALIZED_NAME_TRANS_SHARE)
  @javax.annotation.Nullable
  private BigDecimal transShare;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public InsiderTransaction() {
  }

  public InsiderTransaction cikReporting(@javax.annotation.Nullable String cikReporting) {
    this.cikReporting = cikReporting;
    return this;
  }

  /**
   * Reported CIK of insider
   * @return cikReporting
   */
  @javax.annotation.Nullable
  public String getCikReporting() {
    return cikReporting;
  }

  public void setCikReporting(@javax.annotation.Nullable String cikReporting) {
    this.cikReporting = cikReporting;
  }


  public InsiderTransaction company(@javax.annotation.Nullable String company) {
    this.company = company;
    return this;
  }

  /**
   * The name of the company as identified on its SEC filings.
   * @return company
   */
  @javax.annotation.Nullable
  public String getCompany() {
    return company;
  }

  public void setCompany(@javax.annotation.Nullable String company) {
    this.company = company;
  }


  public InsiderTransaction cost(@javax.annotation.Nullable BigDecimal cost) {
    this.cost = cost;
    return this;
  }

  /**
   * Get cost
   * @return cost
   */
  @javax.annotation.Nullable
  public BigDecimal getCost() {
    return cost;
  }

  public void setCost(@javax.annotation.Nullable BigDecimal cost) {
    this.cost = cost;
  }


  public InsiderTransaction date(@javax.annotation.Nullable String date) {
    this.date = date;
    return this;
  }

  /**
   * Insiders tab: the date of the insider transaction
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(@javax.annotation.Nullable String date) {
    this.date = date;
  }


  public InsiderTransaction exchange(@javax.annotation.Nullable String exchange) {
    this.exchange = exchange;
    return this;
  }

  /**
   * The company&#39;s stock exchange. Example: NAS for Apple.
   * @return exchange
   */
  @javax.annotation.Nullable
  public String getExchange() {
    return exchange;
  }

  public void setExchange(@javax.annotation.Nullable String exchange) {
    this.exchange = exchange;
  }


  public InsiderTransaction finalShare(@javax.annotation.Nullable BigDecimal finalShare) {
    this.finalShare = finalShare;
    return this;
  }

  /**
   * Get finalShare
   * @return finalShare
   */
  @javax.annotation.Nullable
  public BigDecimal getFinalShare() {
    return finalShare;
  }

  public void setFinalShare(@javax.annotation.Nullable BigDecimal finalShare) {
    this.finalShare = finalShare;
  }


  public InsiderTransaction name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public InsiderTransaction position(@javax.annotation.Nullable String position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(@javax.annotation.Nullable String position) {
    this.position = position;
  }


  public InsiderTransaction price(@javax.annotation.Nullable BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(@javax.annotation.Nullable BigDecimal price) {
    this.price = price;
  }


  public InsiderTransaction splitFactor(@javax.annotation.Nullable BigDecimal splitFactor) {
    this.splitFactor = splitFactor;
    return this;
  }

  /**
   * Get splitFactor
   * @return splitFactor
   */
  @javax.annotation.Nullable
  public BigDecimal getSplitFactor() {
    return splitFactor;
  }

  public void setSplitFactor(@javax.annotation.Nullable BigDecimal splitFactor) {
    this.splitFactor = splitFactor;
  }


  public InsiderTransaction stockid(@javax.annotation.Nullable String stockid) {
    this.stockid = stockid;
    return this;
  }

  /**
   * A unique identifier for the stock
   * @return stockid
   */
  @javax.annotation.Nullable
  public String getStockid() {
    return stockid;
  }

  public void setStockid(@javax.annotation.Nullable String stockid) {
    this.stockid = stockid;
  }


  public InsiderTransaction symbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * The company&#39;s stock ticker symbol
   * @return symbol
   */
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
  }


  public InsiderTransaction transShare(@javax.annotation.Nullable BigDecimal transShare) {
    this.transShare = transShare;
    return this;
  }

  /**
   * Get transShare
   * @return transShare
   */
  @javax.annotation.Nullable
  public BigDecimal getTransShare() {
    return transShare;
  }

  public void setTransShare(@javax.annotation.Nullable BigDecimal transShare) {
    this.transShare = transShare;
  }


  public InsiderTransaction type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of transaction, S for sale, P for purchase
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InsiderTransaction insiderTransaction = (InsiderTransaction) o;
    return Objects.equals(this.cikReporting, insiderTransaction.cikReporting) &&
        Objects.equals(this.company, insiderTransaction.company) &&
        Objects.equals(this.cost, insiderTransaction.cost) &&
        Objects.equals(this.date, insiderTransaction.date) &&
        Objects.equals(this.exchange, insiderTransaction.exchange) &&
        Objects.equals(this.finalShare, insiderTransaction.finalShare) &&
        Objects.equals(this.name, insiderTransaction.name) &&
        Objects.equals(this.position, insiderTransaction.position) &&
        Objects.equals(this.price, insiderTransaction.price) &&
        Objects.equals(this.splitFactor, insiderTransaction.splitFactor) &&
        Objects.equals(this.stockid, insiderTransaction.stockid) &&
        Objects.equals(this.symbol, insiderTransaction.symbol) &&
        Objects.equals(this.transShare, insiderTransaction.transShare) &&
        Objects.equals(this.type, insiderTransaction.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cikReporting, company, cost, date, exchange, finalShare, name, position, price, splitFactor, stockid, symbol, transShare, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InsiderTransaction {\n");
    sb.append("    cikReporting: ").append(toIndentedString(cikReporting)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    exchange: ").append(toIndentedString(exchange)).append("\n");
    sb.append("    finalShare: ").append(toIndentedString(finalShare)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    splitFactor: ").append(toIndentedString(splitFactor)).append("\n");
    sb.append("    stockid: ").append(toIndentedString(stockid)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    transShare: ").append(toIndentedString(transShare)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cik_reporting");
    openapiFields.add("company");
    openapiFields.add("cost");
    openapiFields.add("date");
    openapiFields.add("exchange");
    openapiFields.add("final_share");
    openapiFields.add("name");
    openapiFields.add("position");
    openapiFields.add("price");
    openapiFields.add("split_factor");
    openapiFields.add("stockid");
    openapiFields.add("symbol");
    openapiFields.add("trans_share");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InsiderTransaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InsiderTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InsiderTransaction is not found in the empty JSON string", InsiderTransaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InsiderTransaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InsiderTransaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cik_reporting") != null && !jsonObj.get("cik_reporting").isJsonNull()) && !jsonObj.get("cik_reporting").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cik_reporting` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cik_reporting").toString()));
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("exchange") != null && !jsonObj.get("exchange").isJsonNull()) && !jsonObj.get("exchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchange").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) && !jsonObj.get("position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
      if ((jsonObj.get("stockid") != null && !jsonObj.get("stockid").isJsonNull()) && !jsonObj.get("stockid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stockid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stockid").toString()));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InsiderTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InsiderTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InsiderTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InsiderTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<InsiderTransaction>() {
           @Override
           public void write(JsonWriter out, InsiderTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InsiderTransaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InsiderTransaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InsiderTransaction
   * @throws IOException if the JSON string is invalid with respect to InsiderTransaction
   */
  public static InsiderTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InsiderTransaction.class);
  }

  /**
   * Convert an instance of InsiderTransaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

